{
  "predictor.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "augmented": true,
        "question": "Give me the child of the child of Archduke Joseph Karl of Austria.",
        "reasoning": "Not supplied for this particular example.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Archduke_Joseph_Karl_of_Austria> <http:\/\/dbpedia.org\/ontology\/child> ?child . ?child <http:\/\/dbpedia.org\/ontology\/child> ?result . }"
      },
      {
        "augmented": true,
        "question": "Give me the birth name of Sharon Kao.",
        "reasoning": "Not supplied for this particular example.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Sharon_Kao> <http:\/\/dbpedia.org\/property\/birthName> ?result . }"
      },
      {
        "augmented": true,
        "question": "Who is the professional in Actor?",
        "reasoning": "Not supplied for this particular example.",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/property\/occupation> <http:\/\/dbpedia.org\/resource\/Actor> . }"
      },
      {
        "augmented": true,
        "question": "Who is the spouse of Aristotle Onassis?",
        "reasoning": "Not supplied for this particular example.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Aristotle_Onassis> <http:\/\/dbpedia.org\/ontology\/spouse> ?result . }"
      },
      {
        "question": "Give me the child, that is a fictional character and a soap character, of Phillip Spaulding.",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/FictionalCharacter>. ?result <http:\/\/dbpedia.org\/property\/father> <http:\/\/dbpedia.org\/resource\/Phillip_Spaulding> . ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/SoapCharacter>. }",
        "id": 915,
        "subid": 5,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 3,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 2,
        "subgraphs": 20
      },
      {
        "question": "Give me the child of James Burton (property developer).",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/James_Burton_(property_developer)> <http:\/\/dbpedia.org\/ontology\/child> ?result . }",
        "id": 547,
        "subid": 4,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the person born on 1985-04-29 and band of Amba Shepherd.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Amba_Shepherd> <http:\/\/dbpedia.org\/ontology\/associatedMusicalArtist> ?result . ?result <http:\/\/dbpedia.org\/ontology\/birthDate> \"1985-04-29\"^^<http:\/\/www.w3.org\/2001\/XMLSchema#date> . }",
        "id": 747,
        "subid": 9,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 1,
        "breadth": 2,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the commander in the work of --01-09.",
        "sparql_query": "SELECT ?result WHERE { ?v1 <http:\/\/dbpedia.org\/property\/author> \"--01-09\"^^<http:\/\/www.w3.org\/2001\/XMLSchema#gMonthDay> . ?v1 <http:\/\/dbpedia.org\/ontology\/commander> ?result . }",
        "id": 528,
        "subid": 16,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the movie, that is a movie and a work and a television show, with the professional in .",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/TelevisionShow>. ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/Work>. ?v1 <http:\/\/dbpedia.org\/property\/occupation> \"\"@en . ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/Film>. ?result <http:\/\/dbpedia.org\/property\/starring> ?v1 . }",
        "id": 391,
        "subid": 17,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 5,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the leader of People's Commissariat of Defense of the Soviet Union.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/People's_Commissariat_of_Defense_of_the_Soviet_Union> <http:\/\/dbpedia.org\/ontology\/leader> ?result . }",
        "id": 328,
        "subid": 2,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the headquarter of Royal Dublin Society.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Royal_Dublin_Society> <http:\/\/dbpedia.org\/ontology\/headquarter> ?result . }",
        "id": 534,
        "subid": 1,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 2,
        "subgraphs": 20
      },
      {
        "question": "Give me the band member of Kerber.",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/ontology\/associatedMusicalArtist> <http:\/\/dbpedia.org\/resource\/Kerber> . }",
        "id": 838,
        "subid": 1,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 2,
        "subgraphs": 20
      },
      {
        "question": "Give me the alma mater of the awardee of Royal Medal.",
        "sparql_query": "SELECT ?result WHERE { ?v1 <http:\/\/dbpedia.org\/property\/awards> <http:\/\/dbpedia.org\/resource\/Royal_Medal> . ?v1 <http:\/\/dbpedia.org\/ontology\/almaMater> ?result . }",
        "id": 9,
        "subid": 13,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the native of the birthplace of Silvia Cohen.",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/ontology\/birthPlace> ?v0 . <http:\/\/dbpedia.org\/resource\/Silvia_Cohen> <http:\/\/dbpedia.org\/ontology\/birthPlace> ?v0 . }",
        "id": 30,
        "subid": 5,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 2,
        "base_breadth": 2,
        "subgraphs": 9
      },
      {
        "question": "Give me the spouse of Amun-her-khepeshef.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Amun-her-khepeshef> <http:\/\/dbpedia.org\/ontology\/spouse> ?result . }",
        "id": 701,
        "subid": 3,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the location, that is a venue and an architectural structure, of 2012 Pro12 Grand Final.",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/ArchitecturalStructure>. <http:\/\/dbpedia.org\/resource\/2012_Pro12_Grand_Final> <http:\/\/dbpedia.org\/ontology\/location> ?result . ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/Venue>. }",
        "id": 534,
        "subid": 4,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 3,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 2,
        "subgraphs": 20
      }
    ],
    "signature": {
      "instructions": "Given a question, generate both a reasoning process and an SPARQL query to answer it. The reasoning should outline the steps taken to understand the question and formulate the query, while the query itself should be executable against DBpedia.",
      "fields": [
        {
          "prefix": "Question:",
          "description": "question about something"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "${reasoning}"
        },
        {
          "prefix": "Sparql Query:",
          "description": "sparql query for DBpedia"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.10",
      "dspy": "2.6.12",
      "cloudpickle": "3.1"
    }
  }
}