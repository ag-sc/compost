{
  "predictor.predict": {
    "traces": [],
    "train": [],
    "demos": [
      {
        "question": "Give me the player in Igor Bi\u0161\u0107an.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Igor_Bi\u0161\u0107an> <http:\/\/dbpedia.org\/ontology\/team> ?result . }",
        "id": 216,
        "subid": 0,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the person born as the birth name of Ayo Makun.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Ayo_Makun> <http:\/\/dbpedia.org\/property\/birthName> ?v1 . ?result <http:\/\/dbpedia.org\/property\/birthName> ?v1 . }",
        "id": 36,
        "subid": 11,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 2,
        "base_breadth": 3,
        "subgraphs": 28
      },
      {
        "question": "Give me the director of Entertaining Mr Sloane (film).",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Entertaining_Mr_Sloane_(film)> <http:\/\/dbpedia.org\/ontology\/director> ?result . }",
        "id": 507,
        "subid": 1,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the birth place of the actor of All for Free.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/All_for_Free> <http:\/\/dbpedia.org\/property\/starring> ?v1 . ?v1 <http:\/\/dbpedia.org\/ontology\/birthPlace> ?result . }",
        "id": 987,
        "subid": 13,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the parent of the person born, that is a noble, as Prince George of Battenberg.",
        "sparql_query": "SELECT ?result WHERE { ?v0 <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/Noble>. ?v0 <http:\/\/dbpedia.org\/ontology\/parent> ?result . ?v0 <http:\/\/dbpedia.org\/property\/birthName> \"Prince George of Battenberg\"@en . }",
        "id": 965,
        "subid": 14,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 3,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the band of Alan Doyle.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Alan_Doyle> <http:\/\/dbpedia.org\/ontology\/associatedMusicalArtist> ?result . }",
        "id": 456,
        "subid": 2,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the successor of Mustafa III and father of Mahmud II.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/Mahmud_II> <http:\/\/dbpedia.org\/property\/father> ?result . <http:\/\/dbpedia.org\/resource\/Mustafa_III> <http:\/\/dbpedia.org\/ontology\/successor> ?result . }",
        "id": 926,
        "subid": 9,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 1,
        "breadth": 2,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the professional in .",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/property\/occupation> \"\"@en . }",
        "id": 129,
        "subid": 0,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 2,
        "base_breadth": 3,
        "subgraphs": 28
      },
      {
        "question": "Give me the entity in Russia and birth place of the awardee of People's Artist of Russia.",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/ontology\/country> <http:\/\/dbpedia.org\/resource\/Russia> . ?v2 <http:\/\/dbpedia.org\/ontology\/birthPlace> ?result . ?v2 <http:\/\/dbpedia.org\/property\/awards> <http:\/\/dbpedia.org\/resource\/People's_Artist_of_Russia> . }",
        "id": 170,
        "subid": 14,
        "split": "train",
        "num_edges": 3,
        "num_edges_full": 3,
        "num_nodes": 4,
        "depth": 2,
        "breadth": 2,
        "base_depth": 2,
        "base_breadth": 3,
        "subgraphs": 28
      },
      {
        "question": "Give me the administration, that is Italian and a region and a settlement and an administrative region, of Democratic Party (Italy).",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/ontology\/country> <http:\/\/dbpedia.org\/resource\/Italy>. ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/Settlement>. ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/Region>. ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/AdministrativeRegion>. ?result <http:\/\/dbpedia.org\/property\/leaderParty> <http:\/\/dbpedia.org\/resource\/Democratic_Party_(Italy)> . }",
        "id": 892,
        "subid": 8,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 5,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the parent of Bernard (son of Charles the Fat).",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/ontology\/child> <http:\/\/dbpedia.org\/resource\/Bernard_(son_of_Charles_the_Fat)> . }",
        "id": 773,
        "subid": 3,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the author of The Boy Who Kicked Pigs and actor of The Book Tower.",
        "sparql_query": "SELECT ?result WHERE { <http:\/\/dbpedia.org\/resource\/The_Book_Tower> <http:\/\/dbpedia.org\/property\/starring> ?result . <http:\/\/dbpedia.org\/resource\/The_Boy_Who_Kicked_Pigs> <http:\/\/dbpedia.org\/property\/author> ?result . }",
        "id": 527,
        "subid": 6,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 1,
        "breadth": 2,
        "base_depth": 3,
        "base_breadth": 2,
        "subgraphs": 20
      },
      {
        "question": "Give me the birth place of Dado Polumenta and birth place of the actor of All for Free.",
        "sparql_query": "SELECT ?result WHERE { ?v1 <http:\/\/dbpedia.org\/ontology\/birthPlace> ?result . <http:\/\/dbpedia.org\/resource\/All_for_Free> <http:\/\/dbpedia.org\/property\/starring> ?v1 . <http:\/\/dbpedia.org\/resource\/Dado_Polumenta> <http:\/\/dbpedia.org\/ontology\/birthPlace> ?result . }",
        "id": 987,
        "subid": 20,
        "split": "train",
        "num_edges": 3,
        "num_edges_full": 3,
        "num_nodes": 4,
        "depth": 2,
        "breadth": 2,
        "base_depth": 3,
        "base_breadth": 3,
        "subgraphs": 71
      },
      {
        "question": "Give me the band of Manfred Mann (musician).",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/dbpedia.org\/ontology\/bandMember> <http:\/\/dbpedia.org\/resource\/Manfred_Mann_(musician)> . }",
        "id": 874,
        "subid": 0,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 1,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 2,
        "subgraphs": 20
      },
      {
        "question": "Give me the birth place, that is a country, of William Denning.",
        "sparql_query": "SELECT ?result WHERE { ?result <http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type> <http:\/\/dbpedia.org\/ontology\/Country>. <http:\/\/dbpedia.org\/resource\/William_Denning> <http:\/\/dbpedia.org\/ontology\/birthPlace> ?result . }",
        "id": 453,
        "subid": 2,
        "split": "train",
        "num_edges": 1,
        "num_edges_full": 2,
        "num_nodes": 2,
        "depth": 1,
        "breadth": 1,
        "base_depth": 2,
        "base_breadth": 2,
        "subgraphs": 9
      },
      {
        "question": "Give me the band member of the person born as Nicholas Bracegirdle.",
        "sparql_query": "SELECT ?result WHERE { ?v0 <http:\/\/dbpedia.org\/property\/birthName> \"Nicholas Bracegirdle\"@en . ?result <http:\/\/dbpedia.org\/ontology\/associatedMusicalArtist> ?v0 . }",
        "id": 978,
        "subid": 8,
        "split": "train",
        "num_edges": 2,
        "num_edges_full": 2,
        "num_nodes": 3,
        "depth": 2,
        "breadth": 1,
        "base_depth": 3,
        "base_breadth": 2,
        "subgraphs": 20
      }
    ],
    "signature": {
      "instructions": "Given a natural language question about a specific entity or concept, generate a step-by-step reasoning process to understand the question and convert this understanding into a structured SPARQL query that can be executed on the DBpedia database to retrieve relevant information.",
      "fields": [
        {
          "prefix": "Question:",
          "description": "question about something"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "${reasoning}"
        },
        {
          "prefix": "Sparql Query:",
          "description": "sparql query for DBpedia"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.10",
      "dspy": "2.6.12",
      "cloudpickle": "3.1"
    }
  }
}