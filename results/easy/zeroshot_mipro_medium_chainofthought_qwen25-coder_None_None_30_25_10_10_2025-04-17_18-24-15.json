{
  "predictor.predict": {
    "traces": [],
    "train": [],
    "demos": [],
    "signature": {
      "instructions": "To generate an appropriate SPARQL query based on a user's question, follow these steps:\n\n1. **Understand the Question**: Carefully read and comprehend the user's question to identify the key elements and the information being sought.\n2. **Identify Key Elements**: Break down the question into its core components, such as names of individuals, events, or specific attributes (e.g., birthplace, successor).\n3. **Reasoning Process**: Explain each step in your reasoning process, detailing how you are determining what information is needed and how it relates to the query.\n4. **Formulate SPARQL Query**: Construct a SPARQL query that accurately retrieves the required information from DBpedia. Ensure that the query is well-structured and uses appropriate properties from DBpedia's ontology.\n\nExample:\n**Question:** Give me the birthplace of Scott LaFaro.\n**Reasoning:**\n1. The question asks for the birthplace of an individual named Scott LaFaro.\n2. To find this information, we need to query DBpedia using the `dbo:birthPlace` property.\n3. We will use a SELECT statement to retrieve the birthplace and specify the resource for Scott LaFaro.\n\n**Sparql Query:** ```sparql\nSELECT ?birthPlace WHERE {\n  <http:\/\/dbpedia.org\/resource\/Scott_LaFaro> dbo:birthPlace ?birthPlace .\n}\n```",
      "fields": [
        {
          "prefix": "Question:",
          "description": "question about something"
        },
        {
          "prefix": "Reasoning: Let's think step by step in order to",
          "description": "${reasoning}"
        },
        {
          "prefix": "Sparql Query:",
          "description": "sparql query for DBpedia"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.10",
      "dspy": "2.6.12",
      "cloudpickle": "3.1"
    }
  }
}