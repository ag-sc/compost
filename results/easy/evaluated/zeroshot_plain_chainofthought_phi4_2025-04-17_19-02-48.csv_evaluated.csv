id,subid,split,question,sparql,generated_sparql,num_edges,num_edges_full,num_nodes,depth,breadth,base_depth,base_breadth,subgraphs,TP,FP,FN,Precision,Recall,F1
158,28,test,"Give me the native of the administration of Alexander II, Grand Duke of Finland and person decedent at the birthplace, that is a country, of Sandro Bertaggia and native of the administration, that is a country, of Nicholas II of Russia.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?result <http://dbpedia.org/ontology/deathPlace> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v5 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . }","```sparql
# Step 1: Get the native country of Alexander II, Grand Duke of Finland
SELECT ?countryA WHERE {
    wd:Q1234567 dbo:nativeCountry ?countryA .
}

# Step 2: Get the birthplace of Sandro Bertaggia and ensure it is a country
SELECT ?birthPlaceB WHERE {
    wd:Q2345678 dbo:birthPlace ?birthPlaceB .
    ?birthPlaceB rdf:type dbo:Country .
}

# Step 3: Get the native country of Nicholas II of Russia
SELECT ?countryN WHERE {
    wd:Q3456789 dbo:nativeCountry ?countryN .
}

# Step 4: Find a person who is a descendant at Sandro Bertaggia's birthplace and native to both countries found in steps 1 and 3
SELECT DISTINCT ?person WHERE {
    ?person dbo:birthPlace ?birthPlaceB . # Person born in the country where Sandro Bertaggia was born
    ?person dbo:nativeCountry ?countryA . # Native to Alexander II's country
    ?person dbo:nativeCountry ?countryN . # Native to Nicholas II's country
}
```

Note: Replace `wd:Q1234567`, `wd:Q2345678`, and `wd:Q3456789` with the actual DBpedia identifiers for Alexander II, Grand Duke of Finland, Sandro Bertaggia, and Nicholas II of Russia respectively.",6,8,7,2,3,2,3,28,0,0,1,0,0.0,0
668,67,test,"Give me the person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in the profession of the writer, that is a musical artist, of The Live Anthology and associated musical artist of $pacely.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://dbpedia.org/property/occupation> ?v6 . ?v1 <http://dbpedia.org/property/birthName> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
# Step 1: Find the writer of ""The Live Anthology""
SELECT ?writer WHERE {
  ?book dct:title ""The Live Anthology""@en .
  ?book dbo:author ?writer .
}

# Step 2: Find the musical artist associated with $pacely
SELECT ?musicalArtist WHERE {
  ?association dbo:associatedMusicalArtist ?musicalArtist .
  ?association dbo:name ""$pacely"" .
  ?association dbo:professionalIn ?writer .
}

# Step 3: Identify an artist native to Central Region, Ghana
SELECT ?artist WHERE {
  ?person dbo:nativePlace dbr:Central_Region,_Ghana .
  ?person dbo:profession dbr:Artist .
  ?person foaf:name ?birthName .
}

# Step 4: Match birth names
SELECT ?matchedPerson WHERE {
  ?person foaf:name ?birthName .
  FILTER EXISTS { 
    ?artist foaf:name ?birthName .
  }
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
361,28,test,"Give me the professional in the alter ego of The Shadow and actor of the album, that is a film and a work, of Lasso the Moon and professional in the profession of Frédéric Bouraly.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find actor who played The Shadow
  ?film dbo:starring dbr:Alec_Baldwin .
  ?film dbo:title ""The Shadow"" .

  # Check if the same actor acted in Lasso the Moon
  OPTIONAL { 
    ?lassoFilm dbo:starring dbr:Alec_Baldwin .
    ?lassoFilm dbo:title ""Lasso the Moon"" .
  }

  BIND(dbr:Alec_Baldwin AS ?actor)
}
```",6,8,7,2,3,2,3,28,0,0,2,0,0.0,0
595,69,test,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and author of the work, that is a written work and a book and a work, of Bill Clinton and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { ?v7 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v4 <http://dbpedia.org/property/author> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v7 <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v4 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. },"```sparql
# Step 1: Find the owner of USS Arcadia (ID-1605)
SELECT ?owner WHERE {
  ?ship rdf:type dbo:Ship .
  ?ship rdfs:label ""USS Arcadia (ID-1605)""@en .
  ?ship dbo:ownedBy ?owner .
}

# Step 2: Identify a disease and societal event related to the owner
SELECT DISTINCT ?disease ?event WHERE {
  VALUES ?person { <URI_of_owner> } # Replace with actual URI from step 1
  OPTIONAL { ?person dbo:suffersFrom ?disease . }
  OPTIONAL { ?person dbo:participatedIn ?event .
             ?event rdf:type dbo:SocietalEvent .
           }
}

# Step 3: Find works by Bill Clinton and Hillary Clinton
SELECT DISTINCT ?work WHERE {
  VALUES ?author { <URI_of_Bill_Clinton> <URI_of_Hillary_Clinton> } # Replace with actual URIs
  ?work dbo:author ?author .
  ?work rdf:type dbo:Book .
}

# Step 4: Determine the spouse of Hillary Clinton (who is Bill Clinton)
SELECT DISTINCT ?spouse WHERE {
  VALUES ?person { <URI_of_Hillary_Clinton> } # Replace with actual URI
  ?person dbo:spouse ?spouse .
}

# Step 5: Identify if Bill Clinton was a commander in any war
SELECT DISTINCT ?war WHERE {
  VALUES ?person { <URI_of_Bill_Clinton> } # Replace with actual URI
  OPTIONAL { ?person dbo:commanderOf ?war .
             ?war rdf:type dbo:MilitaryConflict .
           }
}
```",8,17,9,3,3,3,3,71,0,0,1,0,0.0,0
595,70,test,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York.","SELECT ?result WHERE { ?v7 <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v1 <http://dbpedia.org/ontology/battle> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v7 <http://dbpedia.org/property/author> ?v0 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/ontology/spouse> ?result . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. }","```sparql
SELECT ?spouse WHERE {
  ?author dbo:book ""An Invitation to the White House""@en .
  ?author foaf:name ""James C. Dobson"" .
  ?spouse dbo:spouse ?author ;
          dbo:officeHolder true ;
          dbo:politician true .
  
  OPTIONAL { 
    ?war dbo:commander ?commander .
    ?war rdfs:label ?eventLabel .
    FILTER(CONTAINS(LCASE(?eventLabel), ""world war i"") && CONTAINS(LCASE(?eventLabel), ""spanish flu""))
  }
  
  OPTIONAL {
    ?ship dbo:owner ?owner .
    ?work dbo:author ?owner ;
          rdf:type dbo:Book .
    FILTER(STR(?ship) = ""USS Arcadia (ID-1605)"")
  }

  OPTIONAL {
    ?resident dbo:residenceLocation ?location .
    ?resident dbo:officeHolder true ;
              dbo:politician true .
    FILTER(CONTAINS(LCASE(?location), ""chappaqua, new york""))
  }
}
```",8,17,9,3,3,3,3,71,0,0,1,0,0.0,0
353,69,test,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and father of the child, that is a royalty, of William I of Sicily and child of the parent of the child, that is a royalty, of Roger II of Sicily.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v4 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v3 <http://dbpedia.org/ontology/child> ?v4 . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v7 <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v7 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?finalPerson WHERE {
  # Step 1: Find Constance of Burgundy's spouse
  ?constance a dbo:Person ;
             dbp:surname ""Burgundy"" ;
             dbo:spouse ?spouse .

  # Step 2: Find the child of that spouse
  ?child1 dbo:parent ?spouse .

  # Step 3: Determine the child of that child
  ?grandChild dbo:parent ?child1 .

  # Step 4: Identify William I of Sicily's royal child
  ?williamI a dbo:Person ;
            dbp:surname ""Sicily"" ;
            dbp:title ""King of Sicily"" ;
            dbo:child ?royalChildWilliamI .
  
  # Step 5: Find the parent of Roger II of Sicily's royal child
  ?rogerII a dbo:Person ;
           dbp:surname ""Sicily"" ;
           dbp:title ""King of Sicily"" ;
           dbo:child ?royalChildRogerII .

  ?parentRoyalChildRogerII dbo:child ?royalChildRogerII .

  # Step 6: Combine these relationships
  FILTER(?grandChild = ?royalChildWilliamI)
  FILTER(?spouse = ?parentRoyalChildRogerII)

  # Final person is the grand child of Constance's spouse who matches the criteria
  BIND(?grandChild AS ?finalPerson)
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
706,20,test,"Give me the birthplace of the actor of the movie, that is a movie and Indian, with Dipankar De and birthplace of the awardee of the reference to Sangeet Natak Akademi Fellowship.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://xmlns.com/foaf/0.1/name> ""Sangeet Natak Akademi Fellowship""@en . ?v4 <http://dbpedia.org/property/starring> ?v5 . ?v4 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Dipankar_De> . ?v4 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Query to find the birthplace of the actor from an Indian movie featuring Dipankar De
SELECT ?actorBirthPlace WHERE {
  ?movie dbo:starring ?actor .
  ?movie dbo:country dbc:India .
  ?movie dbo:castMember ?dipankarDe .
  ?dipankarDe foaf:name ""Dipankar De""@en .
  ?actor dbo:birthPlace ?actorBirthPlace .
}

UNION

# Query to find the birthplace of an awardee of the Sangeet Natak Akademi Fellowship
SELECT ?awardeeBirthPlace WHERE {
  ?person dbo:honoraryTitle dbr:Sangeet_Natak_Akademi_Fellowship .
  ?person dbo:birthPlace ?awardeeBirthPlace .
}
```",6,8,7,3,2,3,2,20,0,0,2,0,0.0,0
414,19,test,"Give me the award of the awardee of the reference to Nobel Prize in Physics and show of the host, that is an educational institution, of Nobel Prize in Physics.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. <http://dbpedia.org/resource/Nobel_Prize_in_Physics> <http://dbpedia.org/ontology/presenter> ?v2 . ?result <http://dbpedia.org/ontology/presenter> ?v2 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Nobel Prize in Physics""@en . ?v4 <http://dbpedia.org/property/awards> ?result . ?v4 <http://dbpedia.org/property/awards> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?awardee ?awardName ?hostInstitution
WHERE {
  ?awardee dbo:award ?award .
  ?award rdfs:label ""Nobel Prize in Physics""@en .
  OPTIONAL { 
    ?award dbp:hostInstitution ?hostInstitution .
  }
  FILTER(LANG(?awardName) = 'en')
}
```",5,6,6,3,2,3,2,20,0,0,2,0,0.0,0
38,20,test,"Give me the author of the work, that is a written work and a work, of the commander, that is an office holder, in Korean conflict and author of the work, that is a work and a written work and American and a book, of the commander, that is an office holder and a politician, in North Carolina Air National Guard.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Korean_conflict> <http://dbpedia.org/ontology/commander> ?v4 . ?v2 <http://dbpedia.org/ontology/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/North_Carolina_Air_National_Guard> <http://dbpedia.org/ontology/commander> ?v1 . ?v5 <http://dbpedia.org/property/author> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://dbpedia.org/property/author> ?v1 . ?v5 <http://dbpedia.org/property/author> ?v4 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?person a dbo:Person .
  ?person dbo:occupation dbr:United_States_Army_general ;
          dbo:almaMater ?university ;
          dbo:birthPlace ?birthplace .

  ?person dbo:officeHolderOf dbr:Korean_War ;
          dbo:officeHolderOf dbr:North_Carolina_Air_National_Guard .
  
  ?work dbo:author ?person ;
        a dbo:Book ;
        dbo:subject dbr:United_States .

  FILTER EXISTS { ?person dbo:birthPlace ?place . FILTER regex(?place, ""United States"", ""i"") }
}
```",6,15,7,3,2,3,2,20,0,0,1,0,0.0,0
414,20,test,"Give me the show of the host, that is an educational institution, of the award of Rainer Weiss and award of the awardee of the reference to Nobel Prize in Physics.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/awards> ?v4 . <http://dbpedia.org/resource/Rainer_Weiss> <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. ?v5 <http://dbpedia.org/property/awards> ?result . ?v4 <http://xmlns.com/foaf/0.1/name> ""Nobel Prize in Physics""@en . ?result <http://dbpedia.org/ontology/presenter> ?v2 . ?v1 <http://dbpedia.org/ontology/presenter> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
    ?person dbo:nobelPrizeInPhysicsYear ""2017"" .
    ?person rdfs:label ""Rainer Weiss""@en .
    
    OPTIONAL { 
        ?coAwardee dbo:nobelPrizeInPhysicsYear ""2017"" .
        ?coAwardee rdfs:label ?coLabel .
    }
    
    ?institution dbo:show ?show .
    ?show dbo:subject ?person ;
          (dbo:subject|dbo:subject) ?coAwardee .
}
```",6,7,7,3,2,3,2,20,0,0,3,0,0.0,0
140,19,test,"Give me the party member of the ruling party, that is a political party and an organisation, in the death place, that is a settlement, of John McDermott (American artist) and commander in the war, that is a societal event, of George Pickett.",SELECT ?result WHERE { <http://dbpedia.org/resource/John_McDermott_(American_artist)> <http://dbpedia.org/ontology/deathPlace> ?v0 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v2 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/George_Pickett> <http://dbpedia.org/ontology/battle> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/property/leaderParty> ?v4 . ?result <http://dbpedia.org/ontology/party> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
# Step 1: Find John McDermott's death place
SELECT ?deathPlace WHERE {
    dbpedia:John_McDermott_(artist) dbo:placeOfBirth ?birthPlace .
    dbpedia:John_McDermott_(artist) dbo:deathPlace ?deathPlace .
}

# Step 2: Identify the war George Pickett commanded in
SELECT ?war WHERE {
    dbpedia:George_Pickett dbo:commandedIn ?war .
    ?war rdf:type dbo:MilitaryConflict .
}

# Step 3: Find the ruling party at John McDermott's death place
SELECT DISTINCT ?rulingParty WHERE {
    # Assuming we have obtained ?deathPlace from step 1
    ?place dbpedia-owl:country ?country .
    ?party dbo:headOfGovernment ?leader .
    ?party rdf:type dbo:PoliticalParty .
    ?party dbo:country ?country .
    FILTER(?place = <http://dbpedia.org/resource/{death_place_uri}>)
}

# Step 4: Find a party member who is both a political party and an organization
SELECT DISTINCT ?member WHERE {
    # Assuming we have obtained ?rulingParty from step 3
    ?partyMember dbo:memberOf ?rulingParty .
    ?partyMember rdf:type dbo:PoliticalParty, dbo:Organization .
}
```

Note: Replace `{death_place_uri}` with the actual URI of John McDermott's death place obtained from Step 1.",5,9,6,3,2,3,2,20,0,0,4,0,0.0,0
347,68,test,"Give me the child of the father of Cecilia Renata of Austria and father of the child of the parent of Archduke Charles Joseph of Austria and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v7 <http://dbpedia.org/property/father> ?v0 . ?v7 <http://dbpedia.org/property/father> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v3 . ?v5 <http://dbpedia.org/ontology/battle> ?v4 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v4 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
# Step 1: Find Cecilia Renata's father
SELECT ?father WHERE {
  wd:Q123456 wdt:P22 ?father .
}

# Step 2: Find the child of Cecilia Renata's father
SELECT ?child WHERE {
  ?father wdt:P40 ?child .
}

# Step 3: Find Archduke Charles Joseph's parent
SELECT ?parent WHERE {
  wd:Q654321 wdt:P22 ?parent .
}

# Step 4: Find the child of this parent
SELECT ?grandchild WHERE {
  ?parent wdt:P40 ?grandchild .
}

# Step 5: Identify a commander in the Algerian War
SELECT ?commander WHERE {
  ?commander wdt:P39 wd:Q987654 . # Assuming Q987654 is the military force involved in the Algerian War
}

# Step 6: Find an entity that is a societal event, event, and television show
SELECT ?entity WHERE {
  ?entity wdt:P31/wdt:P279* wd:Q12345 ; # Societal event
          wdt:P31/wdt:P279* wd:Q67890 ; # Event
          wdt:P31/wdt:P279* wd:Q13579 . # Television show
}

# Step 7: Combine these elements to find the final answer
SELECT ?finalAnswer WHERE {
  ?father wdt:P40 ?child .
  ?parent wdt:P40 ?grandchild .
  ?commander wdt:P39 wd:Q987654 .
  ?entity wdt:P31/wdt:P279* wd:Q12345 ;
          wdt:P31/wdt:P279* wd:Q67890 ;
          wdt:P31/wdt:P279* wd:Q13579 .
  
  # Assuming the final answer is a person who fits all these criteria
  ?child = ?grandchild .
  ?commander = ?entity .
}
```

Note: The above SPARQL query assumes certain Wikidata IDs (e.g., Q123456, Q654321) for individuals and entities. These would need to be replaced with the correct identifiers from DBpedia or Wikidata.",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
347,67,test,"Give me the commander in Thirty Years' War and child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and father of the child of the parent of Archduke Charles Joseph of Austria.",SELECT ?result WHERE { ?v6 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/property/father> ?v3 . ?v6 <http://dbpedia.org/property/father> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?commander WHERE {
  ?mariaAnna foaf:name ""Maria Anna of Bavaria""@en .
  ?mariaAnna dbo:spouse ?husband .
  ?child dbo:parent ?mariaAnna ;
         rdf:type dbo:RoyalFamilyMember .

  ?ferdinand2 dbo:parent ?mariaAnna ;
              dbo:positionHeld ?commanderRole ;
              foaf:name ""Ferdinand II, Holy Roman Emperor""@en .
  
  FILTER EXISTS { ?commanderRole rdfs:label ?roleLabel . 
                 FILTER(CONTAINS(LCASE(?roleLabel), ""emperor"") || CONTAINS(LCASE(?roleLabel), ""commander"")) }
  
  OPTIONAL {
    ?archduke dbo:parent ?mariaAnnaChild .
    ?mariaAnnaChild foaf:name ""Archduchess Maria Anna of Austria""@en .
    ?ferdinand3 dbo:parent ?mariaAnnaChild ;
                foaf:name ""Ferdinand III, Holy Roman Emperor""@en .
  }
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
347,69,test,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?v7 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> ?v2 . ?v4 <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v7 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . ?v4 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?father ?commander WHERE {
  # Maria Anna of Bavaria's child who is royalty
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria"" ;
             dbo:spouse ?husband .
  
  ?husband dbo:child ?child .
  ?child dbo:title ?royaltyTitle .

  # Father of that child
  ?child dbo:father ?father .

  # Commander in the Algerian War
  ?commander a dbo:MilitaryPerson ;
             dbo:role ""Commander"" ;
             dbo:event dbr:Algerian_War .

  # Societal event, event, and television show
  ?commander dbo:societalEvent ?societalEvent .
  ?commander dbo:event ?event .
  ?commander dbo:televisionShow ?tvShow .

  # Ferdinand III's child
  dbr:Ferdinand_III,_Holy_Roman_Emperor dbo:child ?ferdinandChild .
  
  # Link commander to Ferdinand III's child
  ?commander dbo:father ?ferdinandChild .
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
941,19,test,"Give me the child of the parent, that is a royalty, of Duke Anthony Ulrich of Brunswick and spouse of the spouse of the child, that is a royalty, of Princess Antoinette of Brunswick-Wolfenbüttel.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Antoinette_of_Brunswick-Wolfenbüttel> <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/spouse> ?v0 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Duke_Anthony_Ulrich_of_Brunswick> . ?v4 <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
# Step 1: Find Duke Anthony Ulrich's royal children
SELECT ?child WHERE {
    ?person dbo:spouse* dbr:Duke_Anton_Ulrich_of_Brunswick .
    ?person dbo:child ?child .
    ?child a dbo:Monarch ; # Assuming royalty is represented by Monarch class
           dbo:country dbr:Germany .
}

# Step 2: Find Princess Antoinette's royal children
SELECT ?antoinettesChild WHERE {
    ?person dbo:spouse* dbr:Princess_Antoinette_of_Brunswick-Wolfenbüttel .
    ?person dbo:child ?antoinettesChild .
    ?antoinettesChild a dbo:Monarch ;
                     dbo:country dbr:Germany .
}

# Step 3: Find the spouse of Princess Antoinette's royal child
SELECT ?spouse WHERE {
    ?antoinettesChild dbo:spouse ?spouse .
    VALUES ?antoinettesChild { <URI_of_Antoinettes_Child> } # Replace with actual URI from step 2
}

# Step 4: Find the parent of Duke Anthony Ulrich's royal child
SELECT ?parent WHERE {
    ?child dbo:parent ?parent .
    VALUES ?child { <URI_of_Duke_Child> } # Replace with actual URI from step 1
}

# Step 5: Find the spouse of the identified parent
SELECT ?spouseOfParent WHERE {
    ?parent dbo:spouse ?spouseOfParent .
    VALUES ?parent { <URI_of_Parent> } # Replace with actual URI from step 4
}

# Final Query: Combine to find the child of the parent who is royalty and spouse of the spouse of Antoinette's child
SELECT ?finalChild WHERE {
    ?parent dbo:child ?finalChild .
    VALUES ?parent { <URI_of_Parent> } # Replace with actual URI from step 4

    ?finalChild a dbo:Monarch ;
                dbo:country dbr:Germany .

    ?spouseOfParent dbo:spouse ?finalChild .
    VALUES ?spouseOfParent { <URI_of_Spouse_Of_Parent> } # Replace with actual URI from step 5
}
```

Note: The placeholders `<URI_of_Duke_Child>`, `<URI_of_Antoinettes_Child>`, `<URI_of_Parent>`, and `<URI_of_Spouse_Of_Parent>` need to be replaced with the actual URIs obtained from executing the previous queries.",5,7,6,3,2,3,2,20,0,0,3,0,0.0,0
513,19,test,"Give me the entity in the award of George H. Cameron and residence of the leader of the party, that is an organisation and a political party, of George Savage (politician).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v4 <http://dbpedia.org/ontology/residence> ?result . ?v0 <http://dbpedia.org/ontology/leader> ?v4 . ?result <http://dbpedia.org/ontology/country> ?v2 . <http://dbpedia.org/resource/George_Savage_(politician)> <http://dbpedia.org/ontology/party> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/George_H._Cameron> <http://dbpedia.org/property/awards> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?organizationParty WHERE {
  # George H. Cameron's award
  OPTIONAL { 
    dbr:George_H._Cameron dbo:awardReceived ?award .
  }
  
  # Political party of George Savage (politician)
  OPTIONAL {
    dbr:George_Savage_(politician) dbo:memberOf ?party .
    ?party a dbo:PoliticalParty .
    
    # Leader of the political party
    ?leader dbo:memberOf ?party ;
            dbo:residence ?residence .
  }
  
  # Entity that is both an organization and a political party
  ?organizationParty a dbo:Organization, dbo:PoliticalParty .

  # Connect the award and residence to the organization/party
  OPTIONAL { 
    ?award dbo:associatedWith ?organizationParty .
  }
  OPTIONAL {
    ?residence dbo:locatedIn ?organizationParty .
  }
}
```",5,7,6,3,2,3,2,20,0,0,2,0,0.0,0
103,68,test,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in the alter ego of The Shadow and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v4 <http://dbpedia.org/property/starring> ?v5 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v7 . ?v0 <http://dbpedia.org/property/occupation> ?v7 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?v4 <http://dbpedia.org/property/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Orson Welles information
  dbr:Orson_Welles dbo:birthName ""Richard Grant Esterhuysen"" .
  
  # Citizen Kane movie and its adaptation into a TV show
  dbr:Citizen_Kane dbo:starring dbr:Orson_Welles ;
                   dbo:adaptationOf ?tvShow .

  # Ab Kya Hoga actor who is also a politician
  ?abKyaHogaFilm dbo:starring ?rajBabbar .
  ?rajBabbar rdfs:label ""Raj Babbar""@en ;
             dbo:profession dbr:Politician .

  # Ensure the actor of Citizen Kane matches the criteria
  FILTER(?actor = dbr:Orson_Welles)
}
```",8,10,9,3,3,3,3,71,0,0,13,0,0.0,0
905,67,test,"Give me the parent of the father, that is a royalty, of the spouse of Maria of Bytom and spouse of Charles II of Naples and child of the child, that is a royalty, of the predecessor of Stephen V of Hungary.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v5 . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v4 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commonRoyalty WHERE {
  # Step 1: Find Maria of Bytom's spouse
  ?maria a dbo:Spouse;
         dbp:spouse ?mariaSpouse.

  # Step 2: Find the father of Maria's spouse and his parent (a royalty)
  ?mariaSpouse dbo:father ?fatherOfMariaSpouse.
  ?fatherOfMariaSpouse dbo:parent ?royalty1.

  # Ensure the parent is a royalty
  ?royalty1 rdf:type dbo:Monarch .

  # Step 3: Find Charles II of Naples' spouse
  ?charlesII a dbo:Spouse;
             dbp:spouse ?charlesIISpouse.

  # Step 4: Find the child of Charles II's spouse and their parent (a royalty)
  ?charlesIISpouse dbo:child ?childOfCharlesIISpouse.
  ?childOfCharlesIISpouse dbo:parent ?royalty2.

  # Ensure the parent is a royalty
  ?royalty2 rdf:type dbo:Monarch .

  # Step 5: Find Stephen V of Hungary's predecessor
  ?stephenV dbo:predecessor ?predecessor.

  # Step 6: Identify the child of the predecessor and their parent (a royalty)
  ?predecessor dbo:child ?childOfPredecessor.
  ?childOfPredecessor dbo:parent ?royalty3.

  # Ensure the parent is a royalty
  ?royalty3 rdf:type dbo:Monarch .

  # Step 7: Find commonality among royalties
  FILTER (?royalty1 = ?commonRoyalty && ?royalty2 = ?commonRoyalty && ?royalty3 = ?commonRoyalty)
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
87,27,test,"Give me the actor of Paradise (2013 film) and actor of the movie, that is a work and a film, with Audrey Hepburn and spouse of the awardee of List of awards and nominations received by Janusz Kamiński.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . }","```sparql
# Step 1: Find actors of ""Paradise"" (2013)
SELECT ?actor WHERE {
    ?film dbpedia-owl:title ""Paradise""@en .
    ?film dbo:releaseDate ?date .
    FILTER(YEAR(?date) = 2013) .
    ?film dbo:starring ?actor .
}

# Step 2: Find films featuring Audrey Hepburn
SELECT DISTINCT ?film WHERE {
    ?film dbo:starring <http://dbpedia.org/resource/Audrey_Hepburn> .
}

# Step 3: Find awards and nominations of Janusz Kamiński, then his spouse
SELECT ?spouse WHERE {
    ?award dbo:recipient <http://dbpedia.org/resource/Janusz_Kami%C5%84ski> .
    OPTIONAL { 
        ?kaminski foaf:spouse ?spouse .
    }
}

# Step 4: Find common actor between the two films
SELECT DISTINCT ?commonActor WHERE {
    # Actors of ""Paradise"" (2013)
    ?film1 dbpedia-owl:title ""Paradise""@en .
    FILTER(YEAR(?date) = 2013) .
    ?film1 dbo:starring ?actor .

    # Films featuring Audrey Hepburn
    ?film2 dbo:starring <http://dbpedia.org/resource/Audrey_Hepburn> .

    # Common actor
    ?film2 dbo:starring ?commonActor .
    FILTER(?actor = ?commonActor)
}
```",5,7,6,2,3,2,3,28,0,0,1,0,0.0,0
203,71,test,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of the war, that is a military conflict and an event, of the reference to William Bayne.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v7 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v4 <http://dbpedia.org/ontology/battle> ?v5 . ?v1 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v8 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v8 <http://dbpedia.org/ontology/commander> ?v7 . ?result <http://dbpedia.org/ontology/battle> ?v5 . ?v4 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
  # Step 1: Identify William Bayne's association with a war
  ?bayne dbo:occupation dbr:Military_person .
  ?bayne foaf:name ""William Bayne"" .

  # Step 2: Find the military conflict (war) associated with William Bayne
  ?bayne dbo:militaryConflict ?war .
  
  # Step 3: Identify ""The Triple X's""
  ?tripleXs dbo:associatedWith ?bayne ;
            rdfs:label ?tripleXLbl .

  FILTER regex(?tripleXLbl, ""Triple X"", ""i"") .

  # Step 4: Find the Knight Commander of the Order of the Bath
  ?knightCommander dbo:award dbr:Knight_Commander_of_the_Order_of_the_Bath ;
                  dbo:militaryConflict ?war .

  # Step 5: Identify the societal event (force) associated with the knight commander
  ?societalEvent dbo:associatedWith ?knightCommander ;
                a dbo:Event, dbo:Society .

  # Step 6: Find the military force involved in both the societal event and the war
  ?militaryForce dbo:participatedIn ?war ;
                 dbo:participatedIn ?societalEvent .
}
```",9,15,10,3,3,3,3,71,0,0,1,0,0.0,0
198,68,test,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and force of the awardee of the award of Quincy Adams Gillmore and war of the awardee of the show, that is an award, of United States Congress.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/awards> ?v5 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/commander> ?v7 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v7 <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?result <http://dbpedia.org/ontology/place> ?v3 . ?v4 <http://dbpedia.org/ontology/battle> ?result . ?v5 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . },"```sparql
# Step 1: Find Henry Clay Lewis's birthplace
SELECT ?birthPlace WHERE {
  dbpedia:Henry_Clay_Lewis dbo:birthPlace ?birthPlace .
}

# Step 2: Identify a settlement in the birthplace that is American
SELECT DISTINCT ?settlement WHERE {
  ?birthPlace rdf:type dbo:Settlement ;
             dbo:country dbr:United_States_of_America .
  ?settlement rdf:type dbo:Settlement ;
              dbo:location ?birthPlace .
}

# Step 3: Find Quincy Adams Gillmore's award and associated war
SELECT DISTINCT ?award ?war WHERE {
  dbpedia:Quincy_Adams_Gillmore dbo:receivedAward ?award .
  ?award dbo:relatedEvent ?event .
  ?event rdf:type dbo:MilitaryConflict ;
         rdfs:label ?war .
}

# Step 4: Determine the congressional award related to a show or event
SELECT DISTINCT ?congressionalAward WHERE {
  ?show dbo:awardee ?person .
  ?person dbo:receivedAward ?congressionalAward .
  ?congressionalAward rdf:type dbo:Award ;
                      dbo:givenBy dbr:United_States_Congress .
}

# Step 5: Find the force of the awardee of the congressional award
SELECT DISTINCT ?force WHERE {
  ?person dbo:militaryForce ?force .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
628,68,test,"Give me the band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and person born as the birth name of the native, that is a musical artist, of Florida and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v0 <http://dbpedia.org/property/birthName> ?v7 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v5 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/property/birthName> ?v7 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v3 . },"```sparql
# Step 1: Identify GS9 Member who is both an artist and a musical artist
SELECT ?gs9Member WHERE {
  ?gs9Member dbo:memberOf dbr:GS9 .
  ?gs9Member dbo:occupation dbr:Artist .
  ?gs9Member dbo:occupation dbr:Musical_artist .
}

# Step 2: Find birth name of a native Florida musical artist
SELECT ?birthName WHERE {
  ?person dbo:birthPlace dbr:Florida ;
          dbo:occupation dbr:Musical_artist .
  ?person foaf:name ?birthName .
}

# Step 3: Determine the region, state, and settlement associated with Coro de la Pontificia Universidad Católica de Puerto Rico
SELECT ?region WHERE {
  ?coro dbo:award dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico .
  ?coro dbo:location ?place .
  ?place rdf:type ?type .
  FILTER (?type IN (dbr:Region, dbr:American_state, dbr:Settlement))
}

# Step 4: Find associated musical artist for the GS9 member
SELECT ?associatedArtist WHERE {
  ?gs9Member dbo:associatedMusicalArtist ?associatedArtist .
}

# Step 5: Identify band member of this associated musical artist who is also a musical artist
SELECT ?bandMember WHERE {
  ?associatedArtist dbo:member ?bandMember .
  ?bandMember dbo:occupation dbr:Musical_artist .
}
```",8,16,9,3,3,3,3,71,0,0,1,0,0.0,0
225,20,test,"Give me the entity in the region of the time zone in Kiyosu and birthplace of the awardee, that is Japanese, of the reference, that is a television show, to Anita Borg Institute Women of Vision Awards.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/awards> ?v4 . ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v4 <http://xmlns.com/foaf/0.1/name> ""Anita Borg Institute Women of Vision Awards""@en . ?result <http://dbpedia.org/ontology/country> ?v2 . ?v5 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://dbpedia.org/property/timeZone> ?v1 . <http://dbpedia.org/resource/Kiyosu> <http://dbpedia.org/ontology/timeZone> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?awardee WHERE {
  ?award dbo:category dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  ?award dbo:recipient ?person .
  ?person dbo:nationality dbr:Japan .
  ?person dbp:birthPlace ?birthplace .

  FILTER (
    EXISTS { 
      ?timeZone dbo:country dbr:Japan ;
                dbo:timezone ""Asia/Tokyo""^^xsd:string .
    }
    && (
      ?birthplace rdfs:label ""Kiyosu""@en
      || ?birthplace dbp:country dbr:Japan
    )
  )
}
```",6,8,7,3,2,3,2,20,0,0,1,0,0.0,0
905,69,test,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and parent of the father, that is a royalty, of Charles I of Hungary and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v6 . ?v4 <http://dbpedia.org/property/father> ?v2 . ?v0 <http://dbpedia.org/property/father> ?v5 . ?result <http://dbpedia.org/property/father> ?v0 . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v6 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?individual WHERE {
  # Step 1: Predecessor of Stephen V of Hungary (likely his father)
  ?stephenV dbo:father ?predecessor .
  VALUES ?stephenV { <http://dbpedia.org/resource/Stephen_V_of_Hungary> }

  # Step 2: Parent of the Father, that is a royalty, of Charles I of Hungary
  ?charlesI dbo:father ?fatherOfCharlesI .
  ?fatherOfCharlesI dbo:parent ?grandParentOfCharlesI .
  VALUES ?charlesI { <http://dbpedia.org/resource/Charles_I_of_Hungary> }

  # Step 3: Spouse of the Father of the Parent, that is a royalty, of Philip, Despot of Romania
  ?philip dbo:father ?fatherOfPhilip .
  ?fatherOfPhilip dbo:parent ?grandParentOfPhilip .
  ?grandParentOfPhilip dbo:spouse ?spouseOfGrandParentOfPhilip .
  VALUES ?philip { <http://dbpedia.org/resource/Philip,_Despot_of_Romania> }

  # Step 4: Child of the Child, that is a royalty, of the predecessor of Stephen V
  ?predecessor dbo:child ?childOfPredecessor .
  ?childOfPredecessor dbo:child ?grandChildOfPredecessor .

  # Combine all conditions to find the individual
  FILTER (?predecessor = ?spouseOfGrandParentOfPhilip)
  FILTER (?grandParentOfCharlesI = ?spouseOfGrandParentOfPhilip)

  ?grandChildOfPredecessor = ?individual .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
609,68,test,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the author of El Deafo and birth place of the awardee of the award of Vince Gilligan.",SELECT ?result WHERE { <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v5 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/property/awards> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v7 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/governor> ?v7 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v3 . },"```sparql
# Step 1: Find Paulus Powell's birthplace
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
}

# Step 2: Find the governor of that region (assuming we get a specific region from step 1)
SELECT ?governor WHERE {
  ?region wdt:P6 ?governor .
  FILTER(?region = <URI_of_the_region_from_step_1>)
}

# Step 3: Find Cece Bell's birthplace
SELECT ?birthPlace WHERE {
  wd:Q789012 wdt:P19 ?birthPlace .
}

# Step 4: Find Vince Gilligan's award and the awardee
SELECT ?award ?awardee WHERE {
  wd:Q345678 wdt:P166 ?award .
  ?award wdt:P921 ?awardee .
}

# Step 5: Find the awardee's birthplace (assuming we get a specific awardee from step 4)
SELECT ?birthPlace WHERE {
  ?person wdt:P19 ?birthPlace .
  FILTER(?person = <URI_of_the_awardee_from_step_4>)
}
```

Note: Replace `wd:Q123456`, `wd:Q789012`, and `wd:Q345678` with the actual DBpedia URIs for Paulus Powell, Cece Bell, and Vince Gilligan respectively. Similarly, replace `<URI_of_the_region_from_step_1>` and `<URI_of_the_awardee_from_step_4>` with the actual URIs obtained from previous queries.",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
293,69,test,"Give me the party member of the ruling party in the landmark at elevation of 20.116800000000001347 and spouse of the actor of 1,000 Dollars a Minute and person born as the birth name of the parent of Tisha Sterling.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?v4 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?v4 <http://dbpedia.org/property/leaderParty> ?v3 . ?v7 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v7 . }","```sparql
# Step 1: Find the landmark at the given elevation
SELECT ?landmark WHERE {
  ?landmark a dbo:Lighthouse ;
            dbo:elevationAboveSeaLevel ""20.116800000000001347""^^xsd:float .
}

# Assuming we have identified the landmark, let's say it is ?landmark

# Step 2: Find the ruling party member associated with this landmark
SELECT ?partyMember WHERE {
  ?landmark dbo:locatedIn ?location .
  ?location dbo:government ?government .
  ?government dbo:rulingParty ?party .
  ?member dbo:memberOf ?party ;
          a dbo:Politician .
}

# Step 3: Identify the actor of ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
  ?film dbo:title ""1,000 Dollars a Minute"" ;
        dbo:starring ?actor .
}

# Assuming we have identified the actor, let's say it is ?actor

# Step 4: Find the spouse of this actor
SELECT ?spouse WHERE {
  ?actor dbo:spouse ?spouse .
}

# Step 5: Identify Tisha Sterling's parent and their birth name
SELECT ?parent ?birthName WHERE {
  ?tisha a dbo:Person ;
         foaf:name ""Tisha Sterling"" ;
         dbo:childOf ?parent .
  ?parent foaf:name ?birthName .
}

# Assuming we have identified the birth name, let's say it is ?birthName

# Step 6: Find a person born with that birth name
SELECT ?person WHERE {
  ?person foaf:name ?birthName ;
          dbo:birthPlace ?place .
}
```",8,8,9,3,3,3,3,71,0,0,1,0,0.0,0
39,67,test,"Give me the professional in Singer and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/property/alterEgo> ?v6 . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v6 . ?v3 <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
SELECT ?bobThompsonBirthName ?bobThompsonRole 
       ?walterBGibsonCharacter ?characterAlterEgo
WHERE {
  # Find Bob Thompson's birth name and his role as a singer or band member
  ?bobThompson dbo:birthName ?bobThompsonBirthName .
  ?bobThompson dbo:profession ?bobThompsonRole .
  FILTER(CONTAINS(LCASE(?bobThompsonRole), ""singer"") || CONTAINS(LCASE(?bobThompsonRole), ""band""))

  # Find Walter B. Gibson's fictional character that is also a comics character
  ?walterBGibson dbo:birthName ""Walter Brown Gibson""@en .
  ?character dbo:creator ?walterBGibson .
  ?character rdf:type dbo:FictionalCharacter ;
             dbo:wikiPageRedirects ?comicsCharacter .
  ?comicsCharacter rdf:type dbo:ComicsCharacter .

  # Find the alter ego of the character
  ?character dbo:alterEgo ?characterAlterEgo .
}
```",7,10,8,3,3,3,3,71,0,0,3,0,0.0,0
293,67,test,"Give me the spouse of the actor of the product, that is a film, of Nat Levine and person born as the birth name of the parent of Tisha Sterling and party member of Republican Party (United States).",SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v3 . ?v1 <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/property/starring> ?v6 . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v6 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . },"```sparql
# Step 1: Find Nat Levine's film
SELECT ?film WHERE {
    ?natLevine dbo:birthName ""Nat Levine""@en .
    ?natLevine dbo:profession dbr:Film_producer .
    ?film dbo:producer ?natLevine .
}

# Step 2: Identify an actor in that film
SELECT ?actor WHERE {
    ?film dbo:starring ?actor .
}

# Step 3: Find Tisha Sterling's parent and their birth name
SELECT ?parent ?birthName WHERE {
    ?tisha dbr:Tisha_Sterling ;
           dbo:childOf ?parent .
    ?parent foaf:name ?birthName .
}

# Step 4: Identify a person with that birth name who is a Republican Party member
SELECT ?person WHERE {
    ?person foaf:name ?birthName .
    ?person dbo:partyMember dbr:Republican_Party_(United_States) .
}

# Step 5: Find the spouse of the actor identified in step 2
SELECT ?spouse WHERE {
    ?actor dbo:spouse ?spouse .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
756,71,test,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and native of the administration, that is a country, of the leader of West Germany and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/team> ?v2 . ?v8 <http://dbpedia.org/ontology/manager> ?v7 . ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v8 <http://dbpedia.org/ontology/manager> ?result . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v5 <http://dbpedia.org/property/leader> ?v4 . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v4 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v7 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. }","```sparql
SELECT ?manager WHERE {
  # Step 1: Identify Helmut Kohl as the leader of West Germany
  ?kohl dbo:nationality dbr:Germany ;
        foaf:name ""Helmut Kohl""@en .

  # Step 2: Find a sports manager born on 1968-08-26 in Germany
  ?manager dbo:birthDate ""1968-08-26""^^xsd:date ;
           dbo:nationality dbr:Germany ;
           rdf:type dbo:SportsManager .

  # Step 3: Identify the soccer club season managed by this person
  ?season dbo:managedBy ?manager ;
          rdf:type dbo:SoccerClubSeason .

  # Step 4: Determine the successor of the 2006–07 VfL Bochum season
  ?vflBochum2007 dbo:succeeds ?vflBochum2008 ;
                 rdf:type dbo:FootballLeagueSeason ;
                 dbo:team dbr:VfL_Bochum .

  # Step 5: Find the manager of VfL Bochum in the 2007–08 season
  ?vflBochum2008 dbo:manager ?manager .
}
```",9,20,10,3,3,3,3,71,0,0,1,0,0.0,0
737,70,test,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of the child of the child of Alexander of Württemberg (1804-1881).","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?result <http://dbpedia.org/ontology/parent> ?v7 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v4 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v7 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?childOfChildRoyalty WHERE {
  # Step 1: Find Archduchess Margarete Sophie's parent
  dbr:Margarete_Sophie_of_Austria dbo:parent ?parent .

  # Step 2: Find the sibling of Archduchess Margarete Sophie
  ?sibling dbo:parent ?parent .
  FILTER(?sibling != dbr:Margarete_Sophie_of_Austria)

  # Step 3: Find the child of this sibling who is royalty
  ?siblingChild dbo:child ?sibling .
  ?siblingChild a dbo:Monarch .

  # Step 4: Find Philipp Albrecht's child
  dbr:Philipp_Albrecht,_Duke_of_Württemberg dbo:child ?philippChild .

  # Step 5: Find the grandchild of Philipp Albrecht
  ?philippGrandChild dbo:child ?philippChild .

  # Step 6: Determine the predecessor of this grandchild
  ?predecessor dbo:successor ?philippGrandChild .

  # Step 7: Find Alexander of Württemberg's great-grandchildren
  dbr:Alexander_of_Württemberg dbo:child ?grandchild .
  ?grandchild dbo:child ?greatGrandchild .
  ?greatGrandchild dbo:child ?greatGreatGrandchild .

  # Step 8: Match the predecessor with a great-great-grandchild of Alexander
  FILTER(?predecessor = ?greatGreatGrandchild)

  # Return the child of the child who is royalty
  BIND(?siblingChild AS ?childOfChildRoyalty)
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
782,71,test,"Give me the band of the band member of the person born, that is a musical artist, on 1945-03-30 and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran and reference to the real name of the band of Kim Wilson.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> ?v5 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v4 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?v8 <http://dbpedia.org/property/birthName> ?v7 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ?v2 . ?v8 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v7 . }","```sparql
# Query 1: Find the musical artist born on March 30, 1945
SELECT ?artist WHERE {
  ?artist dbo:birthDate ""1945-03-30""^^xsd:date .
  ?artist dbo:occupation dbr/Musician .
}

# Query 2: Determine the band associated with this artist
SELECT ?band WHERE {
  ?artist dbo:memberOfBand ?band .
  ?artist dbo:birthDate ""1945-03-30""^^xsd:date .
  ?artist dbo:occupation dbr/Musician .
}

# Query 3: Identify Nick Curran's persona and their associated musical artist
SELECT ?persona ?associatedArtist WHERE {
  ?nickCurran foaf:name ""Nick Curran""@en ;
              dbo:alsoKnownAs ?persona .
  OPTIONAL { ?persona dbo:associatedBand ?associatedArtist . }
  FILTER (CONTAINS(LCASE(?nickCurran), ""nick curran""))
}

# Query 4: Confirm the real name of the band associated with Kim Wilson
SELECT ?band WHERE {
  ?kimWilson foaf:name ""Kim Wilson""@en ;
             dbo:memberOfBand ?band .
  FILTER (CONTAINS(LCASE(?kimWilson), ""kim wilson""))
}
```",9,11,10,3,3,3,3,71,0,0,1,0,0.0,0
609,67,test,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the author of the reference, that is American, to El Deafo and birth place of Vince Gilligan.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v6 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v1 <http://dbpedia.org/property/author> ?v3 . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/governor> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. }","```sparql
# Query 1: Find Paulus Powell's birth place and check if it is a region and administrative region.
SELECT ?birthPlace WHERE {
  dbpedia:Paulus_Powell dbo:birthPlace ?birthPlace .
  FILTER EXISTS { ?birthPlace rdf:type dbo:Region . }
  FILTER EXISTS { ?birthPlace rdf:type dbo:AdministrativeRegion . }
}

# Query 2: Find the governor of the region identified in Query 1.
SELECT ?governor WHERE {
  ?region dbo:governmentHead ?governor .
  ?governor rdf:type dbo:Politician .
  FILTER (?region = <URI_of_the_birth_place_from_Query_1>)
}

# Query 3: Find the author of ""El Deafo"" and their birth place.
SELECT ?authorBirthPlace WHERE {
  dbpedia:""El_Deafo""@en dbo:author ?author .
  ?author dbo:nationality dbr:United_States .
  ?author dbo:birthPlace ?authorBirthPlace .
}

# Query 4: Find Vince Gilligan's birth place.
SELECT ?vinceGilliganBirthPlace WHERE {
  dbpedia:Vince_Gilligan dbo:birthPlace ?vinceGilliganBirthPlace .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
782,70,test,"Give me the associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran and band of the band member of the person born, that is a musical artist, on 1945-03-30 and reference to the real name of The Fabulous Thunderbirds.","SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v4 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?result <http://dbpedia.org/ontology/bandMember> ?v7 . ?v7 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . }","```sparql
# Step 1: Find the musical artist born on March 30, 1945
SELECT ?artist WHERE {
  ?person dbo:birthDate ""1945-03-30""^^xsd:date .
  ?person dbo:occupation dbr/Musician .
  ?person foaf:name ?artist .
}

# Step 2: Find the band associated with Nick Curran
SELECT ?band WHERE {
  ?curran foaf:name ""Nick Curran""@en .
  ?curran dbo:memberOf ?band .
}

# Step 3: Find the real name of The Fabulous Thunderbirds
SELECT ?realName WHERE {
  ?band foaf:name ""The Fabulous Thunderbirds""@en .
  ?band dbo:foundingMember ?person .
  ?person foaf:name ?realName .
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
246,20,test,"Give me the parent of the child, that is a royalty, of the child, that is a royalty, of Princess Muna al-Hussein and parent of the child, that is a royalty, of the parent, that is a royalty, of Princess Aisha bint Faisal.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Princess_Aisha_bint_Faisal> . ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Muna_al-Hussein> <http://dbpedia.org/ontology/child> ?v4 . ?v2 <http://dbpedia.org/ontology/parent> ?v1 . ?v5 <http://dbpedia.org/property/father> ?v4 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/child> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commonParent WHERE {
  # Step 1: Find Princess Muna al-Hussein's royal child
  ?childMuna a dbo:Person ;
             dbo:parent dbr:Princess_Muna_al-Hussein ;
             rdfs:label ?childLabel .
  FILTER CONTAINS(LCASE(?childLabel), ""royalty"") .

  # Step 2: Find the parent of this royal child
  ?parent1 dbo:child ?childMuna .

  # Step 3: Find Princess Aisha bint Faisal's royal grandparent
  ?grandChildAisha a dbo:Person ;
                   dbo:parent ?parentAisha ;
                   rdfs:label ?grandChildLabel .
  FILTER CONTAINS(LCASE(?grandChildLabel), ""royalty"") .

  ?parentAisha dbo:parent dbr:Princess_Aisha_bint_Faisal .

  # Step 4: Find the parent of this royal grandparent
  ?parent2 dbo:child ?parentAisha .

  # Step 5: Identify the common parent from steps 2 and 4
  FILTER (?parent1 = ?parent2)
  BIND(?parent1 AS ?commonParent)
}
```",6,10,7,3,2,3,2,20,0,0,1,0,0.0,0
816,68,test,"Give me the parent of the child of Allan Arbus and actor of the movie, that is a work, with the person decedent at Los Angeles and parent of the professional in the profession of Eugène Cattin.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v7 . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/property/starring> ?v5 . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v3 . ?v5 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v7 <http://dbpedia.org/property/occupation> ?v0 . ?v4 <http://dbpedia.org/ontology/starring> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
# Step 1: Find Allan Arbus's child
SELECT ?child WHERE {
  dbpedia:Allan_Arbus dbo:child ?child .
}

# Step 2: Find the parent of that child (assuming we found a specific child)
SELECT ?parent WHERE {
  ?child dbo:parent ?parent .
}

# Step 3: Identify an actor from a movie
SELECT ?actor WHERE {
  ?movie dbo:starring ?actor .
  FILTER EXISTS { ?movie rdf:type dbpedia-owl:Film }
}

# Step 4: Find the person who died in Los Angeles
SELECT ?person WHERE {
  ?person dbo:deathPlace dbr:Los_Angeles .
}

# Step 5: Determine Eugène Cattin's profession and his parent
SELECT ?profession, ?parent WHERE {
  dbpedia:Eugène_Cattin dbo:occupation ?profession .
  dbpedia:Eugène_Cattin dbo:parent ?parent .
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
609,69,test,"Give me the birth place of the governor, that is a politician, of Virginia and birth place of the author of the reference, that is American, to El Deafo and birth place of the awardee of the award of Vince Gilligan.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v7 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://dbpedia.org/property/awards> ?v4 . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v4 . ?v1 <http://dbpedia.org/property/author> ?v2 . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v7 . }","```sparql
# Query for the birth place of the current Governor of Virginia
SELECT ?birthPlace WHERE {
  ?governor dbo:officeHolderOf dbr:Governor_of_Virginia.
  ?governor foaf:birthPlace ?birthPlace.
  FILTER(CONTAINS(LANG(?governor), ""en""))
}

UNION

# Query for the birth place of the author of ""El Deafo""
SELECT ?birthPlace WHERE {
  ?author dbo:wikiPageRedirects dbr:Cece_Pappas.
  ?author dbo:birthPlace ?birthPlace.
  FILTER(CONTAINS(LANG(?author), ""en""))
}

UNION

# Query for the birth place of an awardee associated with Vince Gilligan
SELECT ?birthPlace WHERE {
  ?award dbo:recipient dbr:Vince_Gilligan.
  ?award dbo:awardsReceived ?person.
  ?person dbo:birthPlace ?birthPlace.
  FILTER(CONTAINS(LANG(?person), ""en""))
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
816,67,test,Give me the parent of the child of the spouse of Mariclare Costello and parent of the professional in the profession of Eugène Cattin and actor of Judgment: The Trial of Julius and Ethel Rosenberg.,SELECT ?result WHERE { <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . ?v6 <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v6 . ?v1 <http://dbpedia.org/ontology/child> ?v3 . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Step 1: Find Mariclare Costello's spouse
SELECT ?spouse WHERE {
  wd:Q123456 wdt:P26 ?spouse .
}

# Step 2: Find the child of Mariclare Costello's spouse
SELECT ?child WHERE {
  ?spouse wdt:P40 ?child .
}

# Step 3: Determine the parent of this child
SELECT ?parent1 WHERE {
  ?child wdt:P25 ?parent1 .
}

# Step 4: Identify Eugène Cattin's profession
SELECT ?profession WHERE {
  wd:Q654321 wdt:P106 ?profession .
}

# Step 5: Find a professional in that same field
SELECT ?professional WHERE {
  ?professional wdt:P106 ?profession .
  FILTER(?professional != wd:Q654321)
}

# Step 6: Determine the parent of this professional
SELECT ?parent2 WHERE {
  ?professional wdt:P25 ?parent2 .
}

# Step 7: Identify the actor of ""Judgment: The Trial of Julius and Ethel Rosenberg""
SELECT ?actor WHERE {
  wd:Q987654 wdt:P161 ?actor .
}

# Step 8: Find the parent of this actor
SELECT ?parent3 WHERE {
  ?actor wdt:P25 ?parent3 .
}

# Step 9: Combine these three individuals to find a common parent
SELECT DISTINCT ?commonParent WHERE {
  VALUES (?parent1 ?parent2 ?parent3) { 
    (<parent1> <parent2> <parent3>)
  }
  ?commonParent wdt:P40+ ?parent1 .
  ?commonParent wdt:P40+ ?parent2 .
  ?commonParent wdt:P40+ ?parent3 .
}
```

Note: Replace `wd:Q123456`, `wd:Q654321`, and `wd:Q987654` with the actual DBpedia identifiers for Mariclare Costello, Eugène Cattin, and ""Judgment: The Trial of Julius and Ethel Rosenberg"" respectively. These placeholders are used here as examples.",7,7,8,3,3,3,3,71,0,0,1,0,0.0,0
398,20,test,"Give me the figure known as the nickname of the player, that is a soccer club, in Denis Kolodin and player in the writer of the work of Aleksandr Filimonov.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/team> ?result . ?v4 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Aleksandr_Filimonov> . ?v4 <http://dbpedia.org/property/writer> ?v5 . ?v1 <http://dbpedia.org/property/nickname> ?v2 . <http://dbpedia.org/resource/Denis_Kolodin> <http://dbpedia.org/ontology/team> ?v1 . ?result <http://dbpedia.org/property/nickname> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?clubNickname WHERE {
  # Denis Kolodin's association with a soccer club and its nickname
  ?kolodin dbo:nationality dbr:Russia ;
           dbo:sport dbr:Soccer .
  ?team dbo:player ?kolodin ;
        dbo:officialName ?clubOfficialName ;
        dbo:commonName ?clubNickname .

  # Aleksandr Filimonov's literary work and associated player
  ?filimonov dbo:nationality dbr:Russia ;
             dbo:occupation dbr:Writer .
  ?work dbo:author ?filimonov .
  ?player dbo:characterIn ?work .

  FILTER(?kolodin = dbr:Denis_Kolodin)
  FILTER(?filimonov = dbr:Aleksandr_Filimonov)

  # Find the common figure (nickname of the club) between both parts
  OPTIONAL { ?team dbo:commonName ?clubNickname }
}
```",6,7,7,3,2,3,2,20,0,0,2,0,0.0,0
143,19,test,"Give me the associated musical artist of the person born as the birth name of Cynthia Morgan and actor of the show, that is a movie, with Afeez Oyetoro.",SELECT ?result WHERE { <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/property/birthName> ?v0 . ?v2 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Afeez_Oyetoro> . ?v2 <http://dbpedia.org/property/starring> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v4 <http://dbpedia.org/property/birthName> ?v0 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Step 1: Find Cynthia Morgan's birth name
SELECT ?birthName WHERE {
  ?person foaf:name ""Cynthia Morgan""@en .
  ?person dbo:birthName ?birthName .
}

# Step 2: Identify a movie with Afeez Oyetoro
SELECT ?movie WHERE {
  ?actor foaf:name ""Afeez Oyetoro""@en .
  ?actor dbo:actedIn ?movie .
}

# Step 3: Find the associated musical artist
SELECT DISTINCT ?artist WHERE {
  # Assuming we have found Cynthia Morgan's birth name and a movie with Afeez Oyetoro
  VALUES (?personName) { (""Cynthia Morgan""@en) } # Replace with actual birth name from step 1
  VALUES (?movieTitle) { (""Movie Title""@en) }   # Replace with actual movie title from step 2

  ?artist dbo:associatedWith ?person .
  ?person foaf:name ?personName .

  ?artist dbo:associatedWith ?movie .
  ?movie rdfs:label ?movieTitle .
}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
412,28,test,"Give me the entity in the death place, that is a settlement, of Antonios Varthalitis and war of the awardee of 30 and war of the leader of National Party of Greece.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . ?result <http://dbpedia.org/ontology/place> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v5 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v3 . <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v1 . }","```sparql
# Step 1: Find Antonios Varthalitis's death place that is a settlement
SELECT ?deathPlace WHERE {
    dbpedia:Antonios_Varthalitis dbo:placeOfBirth ?birthPlace .
    dbpedia:Antonios_Varthalitis dbo:deathPlace ?deathPlace .
    ?deathPlace rdf:type dbo:Settlement .
}

# Step 2: Find the awardee of 1930 and their associated war
SELECT ?awardee ?war WHERE {
    ?awardee dbo:dateReceivedAward ""1930""^^xsd:gYear .
    ?awardee dbo:award ?award .
    ?award dbo:relatedEvent ?war .
}

# Step 3: Find the leader of the National Party of Greece and their associated war
SELECT ?leader ?war WHERE {
    ?party dbo:leader ?leader .
    ?party rdfs:label ""National Party of Greece""@en .
    ?leader dbo:associatedWith ?war .
}

# Step 4: Find common entity related to both the settlement and the wars
SELECT DISTINCT ?commonEntity WHERE {
    VALUES (?deathPlace) { (<death_place_uri>)} # Replace <death_place_uri> with actual URI from step 1
    ?commonEntity rdf:type dbo:Settlement .
    ?commonEntity dbo:relatedEvent ?war1 .
    ?awardee dbo:associatedWith ?war2 .
    ?leader dbo:associatedWith ?war3 .
    FILTER (?war1 = ?war2 || ?war1 = ?war3)
}
```",6,7,7,2,3,2,3,28,0,0,1,0,0.0,0
80,71,test,"Give me the professional in the alter ego of the series of The Golden Master and actor of the movie with the author of Smartbomb (book) and actor of the album of the work, that is a song and a musical work, of T.I..",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?v1 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v1 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v7 . ?result <http://dbpedia.org/property/occupation> ?v8 . ?v4 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v4 <http://dbpedia.org/ontology/album> ?v5 . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v7 <http://dbpedia.org/property/alterEgo> ?v8 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. },"```sparql
# Step 1: Find the alter ego of The Golden Master
SELECT ?alterEgo WHERE {
  ?series dbo:title ""The Golden Master""@en .
  ?series dbo:character ?character .
  ?character foaf:name ?alterEgo .
}

# Step 2: Identify a movie featuring Douglas Rushkoff
SELECT ?movie WHERE {
  ?author foaf:name ""Douglas Rushkoff"" .
  ?author dbo:film ?movie .
}

# Step 3: Find an actor associated with T.I.'s album ""Paper Trail""
SELECT ?actor WHERE {
  ?album dbo:title ""Paper Trail""@en .
  ?album dbo:artist dbr:T.I. .
  ?album dbo:performer ?actor .
}
```",9,11,10,3,3,3,3,71,0,0,4,0,0.0,0
103,70,test,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and actor of the movie, that is a television show, with Richard E. Grant and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/starring> ?result . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . ?v0 <http://dbpedia.org/property/occupation> ?v7 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . ?v4 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://dbpedia.org/property/occupation> ?v7 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
SELECT ?person WHERE {
  # The Shadow's alter ego in comics
  VALUES ?shadowAlterEgo { dbpedia:Lamont_Cranston }
  
  # Richard E. Grant's involvement in a movie and TV series
  ?grantFilm dbp:starring ?richardGrant .
  ?richardGrant foaf:name ""Richard E. Grant"" .
  ?film tv:adaptationOf ?tvSeries .
  ?tvSeries dbo:actor ?richardGrant .

  # Paresh Rawal's profession as an actor and politician
  ?rawal dbo:profession ?actorRole .
  ?actorRole rdfs:label ""Actor""@en .
  ?rawal dbo:occupation ?politicianRole .
  ?politicianRole rdfs:label ""Politician""@en .

  # Combine the conditions to find a common professional link
  ?person foaf:name ?shadowAlterEgo .
  ?person foaf:name ?richardGrant .
  ?person foaf:name ?rawal .
}
```",8,11,9,3,3,3,3,71,0,0,13,0,0.0,0
731,20,test,"Give me the force of the awardee of the award of Edmund Hakewill-Smith and war of the commander in the reference, that is a societal event and a military conflict, to Sinking of Prince of Wales and Repulse.","SELECT ?result WHERE { ?v4 <http://xmlns.com/foaf/0.1/name> ""Sinking of Prince of Wales and Repulse""@en . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/Edmund_Hakewill-Smith> <http://dbpedia.org/property/awards> ?v1 . ?v4 <http://dbpedia.org/ontology/commander> ?v5 . ?result <http://dbpedia.org/ontology/commander> ?v2 . ?v5 <http://dbpedia.org/ontology/battle> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/property/awards> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee ?force WHERE {
  ?award dbo:recipient ?awardee .
  ?awardee dbo:honorificPrefix ""Sir"" .
  ?awardee dbo:givenName ""Thomas"" .
  ?awardee dbo:familyName ""Phillips"" .
  
  OPTIONAL { 
    ?event dbo:eventType dbr:Military_conflict ;
           dbo:location dbr:Sinking_of_Prince_of_Wales_and_Repulse .
    ?commander dbo:commandedForce ?force .
    ?commander owl:sameAs ?awardee .
  }
}
```",6,8,7,3,2,3,2,20,0,0,3,0,0.0,0
384,9,test,"Give me the party of the person born, that is an office holder and a politician, as Bruno Daniel Marie Paul Retailleau and party of the successor, that is a politician and French, of Patrice Martin-Lalande.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Patrice_Martin-Lalande> <http://dbpedia.org/ontology/successor> ?v1 . ?v1 <http://dbpedia.org/ontology/party> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/property/birthName> ""Bruno Daniel Marie Paul Retailleau""@en . ?v1 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/France>. ?v3 <http://dbpedia.org/ontology/party> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
# Query for Bruno Daniel Marie Paul Retailleau's political party
SELECT ?party WHERE {
  ?person foaf:name ""Bruno Retailleau""@en .
  ?person dbo:occupation dbr:Politician .
  ?person dbo:officeHolder dbr:Office_Holder .
  ?person dbo:politicalParty ?party .
}
```

```sparql
# Query for Patrice Martin-Lalande's successor and their political party
SELECT ?successor ?successorParty WHERE {
  ?martinLalande foaf:name ""Patrice Martin-Lalande""@en .
  ?martinLalande dbo:officeHolder ?office .
  
  # Find the successor of Patrice Martin-Lalande
  ?successor dbo:succeededBy ?martinLalande ;
             dbo:politicalParty ?successorParty ;
             rdf:type dbr:Politician ;
             dbo:country dbr:France .

}
```",4,8,5,2,2,2,2,9,0,0,1,0,0.0,0
293,71,test,"Give me the person born as the birth name of the parent of Tisha Sterling and spouse of the actor of the product, that is a film, of Nat Levine and party member of the ruling party in the landmark at elevation of 20.116800000000001347.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?v4 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?v7 <http://dbpedia.org/property/birthName> ?v8 . ?v4 <http://dbpedia.org/property/starring> ?v5 . ?v1 <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/ontology/party> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v7 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?result <http://dbpedia.org/property/birthName> ?v8 . }","```sparql
# Step 1: Find Tisha Sterling's parent
SELECT ?parent WHERE {
  wd:QXXXXX wdt:P40 ?parent .
}

# Step 2: Identify Nat Levine's film and its actor, then find the spouse of that actor
SELECT ?film ?actor ?spouse WHERE {
  wd:QYYYYY wdt:P50 ?film . # Nat Levine's film
  ?film wdt:P161 ?actor .   # Actor in the film
  ?actor wdt:P26 ?spouse .  # Spouse of the actor
}

# Step 3: Find the birth name of the spouse from step 2
SELECT ?birthName WHERE {
  wd:Z1 wdt:P1477 ?birthName .
}

# Step 4: Identify a landmark with elevation 20.1168 meters and its ruling party
SELECT ?landmark ?partyMember WHERE {
  ?landmark wdt:P2044 ""20.116800000000001347""^^xsd:float . # Elevation
  ?landmark wdt:P166 ?rulingParty .
  ?partyMember wdt:P102 ?rulingParty .
}

# Step 5: Combine results to find the person who fits all criteria
SELECT DISTINCT ?person WHERE {
  VALUES (?parent) { wd:QParentID } # Result from step 1
  VALUES (?spouse) { wd:SpouseID }  # Result from step 2
  VALUES (?birthName) { wd:BirthNameID } # Result from step 3
  VALUES (?partyMember) { wd:PartyMemberID } # Result from step 4

  ?person wdt:P31 wd:Q5 . # Person
  ?person rdfs:label ?name .
  FILTER(?name = ?birthName)
  OPTIONAL { ?person wdt:P40 ?parent }
  OPTIONAL { ?person wdt:P26 ?spouse }
  OPTIONAL { ?partyMember wdt:P175 ?person } # Party member of the ruling party
}
```

Note: The placeholders `QXXXXX`, `QYYYYY`, `Z1`, `ParentID`, `SpouseID`, `BirthNameID`, and `PartyMemberID` need to be replaced with actual DBpedia IDs obtained from intermediate queries.",9,10,10,3,3,3,3,71,0,0,1,0,0.0,0
943,69,test,"Give me the father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and reference to the alter ego of The Shadow.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v6 . ?v5 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v4 . ?result <http://dbpedia.org/ontology/parent> ?v2 . },"```sparql
SELECT ?grandfather WHERE {
  ?eskindar dbo:parent ?baedaMaryamI .
  ?baedaMaryamI rdf:type dbo:Monarch ;
                dbo:spouse ?dawitI .
  ?dawitI rdf:type dbo:Monarch ;
          rdfs:label ""Dawit I""@en .
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
633,20,test,"Give me the parent of the father of the child, that is a royalty, of Francis I, Duke of Lorraine and spouse of the parent, that is a royalty and a noble, of the child, that is a royalty, of Antoine, Duke of Lorraine.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> . ?v1 <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?v5 . ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Antoine,_Duke_of_Lorraine> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. }","```sparql
SELECT ?grandParent WHERE {
  # Step 1: Identify Francis I, Duke of Lorraine
  ?francisI dbr:François_Ier,_Duke_of_Lorraine .

  # Step 2: Find his child who is royalty
  ?child dbo:childOf ?francisI .
  ?child dbo:title ?royalTitle .
  FILTER(CONTAINS(LCASE(?royalTitle), ""king"") || CONTAINS(LCASE(?royalTitle), ""queen"") || CONTAINS(LCASE(?royalTitle), ""duke"") || CONTAINS(LCASE(?royalTitle), ""prince""))

  # Step 3: Determine the father of this royal child (Francis I)
  ?francisI dbo:childOf ?grandParent .

  # Step 4: Identify the spouse of Francis I who is royalty and noble
  ?spouse dbo:spouse ?francisI .
  ?spouse dbo:title ?spouseTitle .
  FILTER(CONTAINS(LCASE(?spouseTitle), ""king"") || CONTAINS(LCASE(?spouseTitle), ""queen"") || CONTAINS(LCASE(?spouseTitle), ""duke"") || CONTAINS(LCASE(?spouseTitle), ""prince""))

  # Step 5: Find their child who is royalty
  ?royalChild dbo:childOf ?spouse .
  ?royalChild dbo:title ?childRoyalTitle .
  FILTER(CONTAINS(LCASE(?childRoyalTitle), ""king"") || CONTAINS(LCASE(?childRoyalTitle), ""queen"") || CONTAINS(LCASE(?childRoyalTitle), ""duke"") || CONTAINS(LCASE(?childRoyalTitle), ""prince""))

  # Step 6: Determine the parent of this royal child (either Francis I or his spouse)
  ?parent dbo:childOf ?grandParent .
  FILTER((?parent = ?francisI) || (?parent = ?spouse))

  # Step 7: Identify the parent (royalty) of this parent
}
```",6,10,7,3,2,3,2,20,0,0,1,0,0.0,0
492,27,test,Give me the death place of Reed Howes and death place of the actor of Color Me Dead and death place of the actor of Aladdin (1958 film).,SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/deathPlace> ?result . ?v2 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v3 . <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v2 . },"```sparql
# Query for the death place of Reed Howes
SELECT ?deathPlace WHERE {
  wd:Q123456 a dbo:Person; 
             foaf:name ""Reed Howes""@en;
             dbo:deathPlace ?deathPlace.
}

# Query for the actor in ""Color Me Dead"" and their death place
SELECT ?actorName ?deathPlace WHERE {
  ?movie dbo:title ""Color Me Dead""@en .
  ?movie dbo:starring ?actor .
  ?actor foaf:name ?actorName ;
         dbo:deathPlace ?deathPlace.
}

# Query for the actor in ""Aladdin (1958 film)"" and their death place
SELECT ?actorName ?deathPlace WHERE {
  ?movie dbo:title ""Aladdin""@en;
         dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1958)
  ?movie dbo:starring ?actor .
  ?actor foaf:name ?actorName ;
         dbo:deathPlace ?deathPlace.
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
89,71,test,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of the parent of the child of Minye Kyawswa.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> ?v1 . ?v8 <http://dbpedia.org/property/father> ?v7 . ?v7 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v4 <http://dbpedia.org/property/father> ?v5 . ?result <http://dbpedia.org/ontology/spouse> ?v5 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v1 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v8 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
    # Step 1: Identify Saw Shwe Khet's child who is royalty
    ?childShweKhet dbo:parent dbr:Saw_Shwe_Khet .
    ?childShweKhet a dbo:Monarch .

    # Step 2: Find the predecessor of that child
    ?predecessor dbo:succeededBy ?childShweKhet .

    # Step 3: Determine the father and spouse of this predecessor
    ?father dbo:parentOf ?predecessor .
    ?father a dbo:Monarch .
    ?father dbo:spouse ?spouse .

    # Step 4: Identify Saw Min Phyu's spouse who is royalty
    ?spouseMinPhyu dbo:spouse dbr:Saw_Min_Phu .
    ?spouseMinPhyu a dbo:Monarch .

    # Step 5: Find the child of this spouse
    ?childSpouseMinPhyu dbo:parent ?spouseMinPhyu .

    # Step 6: Determine the parent of this child
    ?parentChild dbr:Minye_Kyawswa dbo:parentOf ?childSpouseMinPhyu .
    
    FILTER(?spouse = ?spouse)
}
```",9,12,10,3,3,3,3,71,0,0,1,0,0.0,0
769,19,test,"Give me the player in the manager, that is a sports manager and a soccer manager, of the reference, that is an organisation and a sports club and a sports team and a soccer club, to Hong Kong C and player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on 1981-12-01.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v0 <http://dbpedia.org/ontology/manager> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v2 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Hong Kong C""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://dbpedia.org/ontology/birthDate> ""1981-12-01""^^<http://www.w3.org/2001/XMLSchema#date> . ?v4 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?player WHERE {
  ?org a dbo:SportsClub ;
      a dbo:SportsTeam ;
      a dbo:FootballClub ;
      rdfs:label ""Hong Kong C""@en .
  
  ?manager dbo:position ?org ;
           a dbo:SportsManager ;
           a dbo:FootballManager .

  ?player dbo:team ?org ;
          dbo:birthDate ""1981-12-01""^^xsd:date ;
          a dbo:Athlete ;
          a dbo:FootballPlayer ;
          a dbo:SportsManager ;
          a dbo:FootballManager .
}
```",5,15,6,3,2,3,2,20,0,0,2,0,0.0,0
531,71,test,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v7 <http://dbpedia.org/property/leader> ?v8 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://dbpedia.org/property/residence> ?v2 . ?v8 <http://dbpedia.org/property/office> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v7 . ?v4 <http://dbpedia.org/ontology/commander> ?v5 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v1 . },"```sparql
# Query for Miguel Maura's political party and its leader
SELECT ?partyLeader WHERE {
  ?miguelMaura dbo:politicalParty ?party .
  ?party dbo:leader ?partyLeader .
  FILTER (str(?miguelMaura) = ""Miguel_Maura"")
}

UNION

# Query for Manuel Pinto da Costa's military role
SELECT ?conflict WHERE {
  ?manuelPintoDaCosta dbo:militaryConflict ?conflict .
  ?conflict a dbo:MilitaryConflict .
  FILTER (str(?manuelPintoDaCosta) = ""Manuel_Pinto_da_Costa"")
}

UNION

# Query for the leader of the 2003 Madrid City Council election and their residence
SELECT ?residence WHERE {
  ?electionEvent dbo:leader ?leader .
  ?leader dbo:residence ?residence .
  FILTER (str(?electionEvent) = ""Madrid_City_Council_election,_2003"")
}
```",9,16,10,3,3,3,3,71,0,0,1,0,0.0,0
609,71,test,"Give me the birth place of the author of the reference, that is American, to El Deafo and birth place of the awardee of the award of Vince Gilligan and birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v8 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> ?v1 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v7 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v1 . ?v7 <http://dbpedia.org/property/author> ?v8 . ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/property/governor> ?v5 . ?v7 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v4 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Step 1: Find Cece Bell's birthplace
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
}

# Step 2: Identify the award Vince Gilligan won (Primetime Emmy Award)
SELECT ?award WHERE {
  wd:Q789012 wdt:P166 ?award .
}

# Step 3: Find other awardees of the same award and their birthplaces
SELECT DISTINCT ?awardee ?birthPlace WHERE {
  ?award wdt:P921 ?person .
  ?person wdt:P19 ?birthPlace .
  FILTER(?award = wd:Q987654) # Assuming Q987654 is the ID for Primetime Emmy Award
}

# Step 4: Find Paulus Powell's birth region (assuming it's a known administrative region)
SELECT ?region WHERE {
  wd:Q345678 wdt:P19 ?place .
  ?place wdt:P31/wdt:P279* wd:Q12345 . # Assuming Q12345 is the type for regions and administrative regions
}

# Step 5: Find the governor of that region
SELECT DISTINCT ?governor WHERE {
  ?region wdt:P39 ?governor .
}

# Step 6: Find the birthplace of that governor
SELECT ?birthPlace WHERE {
  ?governor wdt:P19 ?birthPlace .
}
```",9,13,10,3,3,3,3,71,0,0,1,0,0.0,0
943,68,test,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and father of the father, that is a royalty and an office holder, of Na'od and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> ?v6 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v4 <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/property/alterEgo> ?v6 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?person WHERE {
  ?person dbo:wikiPageRedirects db:Q1234567 . # Assuming Q1234567 is The Shadow's DBpedia entry
  ?person dbo:father ?father .
  ?father dbo:father ?grandfather .
  ?grandfather dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""royalty"") || CONTAINS(LCASE(?title), ""prince""))
  
  OPTIONAL {
    ?person dbo:wikiPageDisambiguates db:Q9876543 . # Assuming Q9876543 is Na'od's DBpedia entry
  }
  
  OPTIONAL {
    ?person dbo:wikiPageDisambiguates db:Q8765432 . # Assuming Q8765432 is Prince Adalmar's DBpedia entry
  }
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
816,70,test,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of the child of the spouse of Mariclare Costello and parent of the professional in the profession of Eugène Cattin.",SELECT ?result WHERE { ?v7 <http://dbpedia.org/property/occupation> ?v0 . ?v4 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v1 <http://dbpedia.org/ontology/child> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v7 . ?v3 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
SELECT DISTINCT ?actor WHERE {
  # Step 1: Find Mariclare Costello's spouse
  ?mariclare dbo:spouse ?spouse .
  FILTER (str(?mariclare) = ""Mariclare_Costello"") .

  # Step 2: Find the child of Mariclare Costello's spouse
  ?child dbo:parent ?spouse ;
         a dbo:Person .

  # Step 3: Determine the parent of this child (either Mariclare or her spouse)
  OPTIONAL { ?child dbo:parent ?mariclare } .
  
  # Step 4: Identify Eugène Cattin's profession
  ?eugene dbo:profession ?profession ;
          FILTER (str(?eugene) = ""Eugène_Cattin"") .

  # Step 5: Find the professional in that same field
  ?professional dbo:profession ?profession ;
                a dbo:Person .

  # Step 6: Determine the parent of this professional
  OPTIONAL { ?professional dbo:parent ?eugene } .
  
  # Step 7: Identify the movie featuring Herschel Bernardi and both parents
  ?movie dbo:starring ?herb ;
         dbo:starring ?mariclare ;
         dbo:starring ?spouse ;
         dbo:starring ?professional .

  FILTER (str(?herb) = ""Herschel_Bernardi"") .

  # Step 8: Find the actor of this movie
  ?movie dbo:actor ?actor .
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
905,71,test,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and parent of the father, that is a royalty, of the spouse of Maria of Bytom and child of the child, that is a royalty, of the predecessor of Stephen V of Hungary.","SELECT ?result WHERE { ?v8 <http://dbpedia.org/property/father> ?v7 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v7 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v8 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v4 . ?v1 <http://dbpedia.org/property/father> ?v2 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/property/father> ?v5 . }","```sparql
SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Philip, Despot of Romania
  ?philip dbo:birthName ""Philip, Despot of Romania""@en .
  
  # Step 2: Find his parent that is a royalty
  ?parent dbo:child ?philip ;
          rdf:type dbo:Monarch .

  # Step 3: Determine the father of this royal parent
  ?grandfather dbo:spouse ?parent ;
               rdf:type dbo:Person .

  # Step 4: Identify the spouse of this grandfather
  ?spouse1 dbo:spouse ?grandfather .

  # Step 5: Identify Maria of Bytom's spouse
  ?maria dbp:spouse ?spouse2 .
  FILTER (str(?maria) = ""Maria of Bytom""@en)

  # Step 6: Find the father of this spouse that is a royalty
  ?royalParent dbo:child ?spouse2 ;
               rdf:type dbo:Monarch .

  # Step 7: Determine the child of this royal parent
  ?child dbo:parent ?royalParent .

  # Step 8: Identify the predecessor of Stephen V of Hungary
  ?stephenV dbp:predecessor ?predecessor .
  FILTER (str(?stephenV) = ""Stephen V of Hungary""@en)

  # Step 9: Find the child that is a royalty of this predecessor
  ?royalChild dbo:parent ?predecessor ;
              rdf:type dbo:Monarch .

  # Step 10: Determine the parent of this royal child
  ?parent2 dbo:child ?royalChild .

  # Step 11: Identify the spouse of this parent
  ?spouse3 dbo:spouse ?parent2 .

  FILTER (?spouse1 = ?spouse3)
}
```",9,12,10,3,3,3,3,71,0,0,1,0,0.0,0
595,67,test,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of Hillary Clinton and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605).","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v6 <http://dbpedia.org/property/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v6 <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?author WHERE {
  ?person dbo:residenceLocation dbr:Chappaqua,_New_York ;
          dbo:spouse dbr:Hillary_Clinton ;
          dbo:occupation dbr:Politician ;
          dbo:officeHolder dbr:President_of_the_United_States .
  ?person dbo:commanderInWar dbr:AIDS_epidemic .
  ?ship dbo:owner ?governmentEntity .
  FILTER(?governmentEntity = dbr:Government_of_the_United_States)
  ?work dbo:author ?person ;
        a dbo:Book .
  BIND(?person AS ?author)
}
```",7,14,8,3,3,3,3,71,0,0,1,0,0.0,0
943,67,test,"Give me the child of Dawit I and reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v0 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/alterEgo> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v4 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfDawitI ?alterEgoLamontCranston ?grandfatherRoyaltyOfficeHolder WHERE {
  # Dawit I's child
  ?dawitI a dbo:Monarch ;
          dbo:spouse ?spouse ;
          dbo:child ?childOfDawitI .
  
  FILTER (str(?dawitI) = ""Dawit_I"")

  # Lamont Cranston (The Shadow)
  dbr:The_Shadow dbo:alterEgo dbr:Lamont_Cranston .

  # Baeda Maryam I's child and their father's father
  ?baedaMaryamI a dbo:Monarch ;
               dbo:child ?childOfBaedaMaryamI .
  
  FILTER (str(?baedaMaryamI) = ""Baeda_Maryam_I"")
  
  ?childOfBaedaMaryamI dbo:father ?fatherOfChild ;
                      dbo:parent ?grandfatherRoyaltyOfficeHolder .

  # Ensure the grandfather is royalty and an office holder
  ?grandfatherRoyaltyOfficeHolder a dbo:Monarch, dbo:GovernmentOfficial .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
68,27,test,"Give me the child of the commander, that is a royalty, in Siege of Padua and father of Isabella of Austria and father of the child, that is a royalty, of Philip I of Castile.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v2 . <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . ?v2 <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Find the commander in Siege of Padua
  ?commander dbo:wikiPageRedirects dbr:Louis_II_of_Hungary .
  
  # Identify his child who is royalty
  ?commander dbo:child ?child .
  ?child a dbo:Monarch .

  # Check if this person is the father of Isabella of Austria and has a royal child related to Philip I of Castile
  ?child dbo:spouse ?isabellaParent .
  ?isabellaParent dbr:Isabella_of_Austria .
  
  ?child dbo:child ?philipChild .
  ?philipChild dbo:father dbr:Philip_I_of_Castile .

}
```",5,7,6,2,3,2,3,28,0,0,1,0,0.0,0
871,68,test,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of the awardee of the award of Rodney Lees and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://dbpedia.org/ontology/child> ?v5 . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/property/father> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
SELECT ?father WHERE {
  ?person rdf:type dbo:Person .
  ?person foaf:name ""Frederick Stanley""@en .
  ?person dbo:title ""16th Earl of Derby""@en .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:parent ?father .
  FILTER EXISTS { ?father dbo:occupation dbr/Politician }
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
633,19,test,"Give me the parent of the father of the child, that is a royalty, of Francis I, Duke of Lorraine and spouse of the parent, that is a royalty and a noble, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v4 . ?v4 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?v2 . }","```sparql
SELECT ?parentOfFather WHERE {
  # Step 1: Identify Francis I, Duke of Lorraine
  wd:Q123456 a dbo:Person ; 
             foaf:name ""Francis I, Duke of Lorraine""@en ;
             dbo:spouse ?spouse .

  # Step 2: Find his spouse who is royalty and noble
  ?spouse a dbo:Royalty ;
          dbo:nobleTitle ?title .
  
  # Step 3: Identify their child that is a royalty
  ?child a dbo:Person ;
         foaf:name ?name ;
         dbo:royalTitle ?royalTitle ;
         dbo:parent ?spouse ;
         dbo:parent wd:Q123456 .

  # Step 4: Determine the father of this royal child (already known as Francis I)
  
  # Step 5: Find the parent of this father
  wd:Q123456 dbo:parent ?parentOfFather .
}
```

Note: The placeholder `wd:Q123456` should be replaced with the actual DBpedia resource identifier for Francis I, Duke of Lorraine. This query assumes that such identifiers and properties exist in DBpedia.",5,8,6,3,2,3,2,20,0,0,1,0,0.0,0
756,67,test,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26 and manager of VfL Bochum and native of the administration, that is a country, of the leader of West Germany.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?result <http://dbpedia.org/ontology/birthPlace> ?v6 . ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v6 <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://dbpedia.org/ontology/manager> ?v1 . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . }","```sparql
SELECT ?currentManager WHERE {
  # Step 1: Identify the leader of West Germany (Chancellor)
  ?leader foaf:name ?name .
  ?leader dbo:country dbr:West_Germany .
  ?leader dbo:position ""Chancellor""@en .

  # Step 2: Find a sports manager born on 1968-08-26 and native of West Germany
  ?manager dbo:birthDate ""1968-08-26""^^xsd:date ;
           dbo:nationality dbr:Germany ;
           rdf:type dbo:SportsManager .
  
  # Step 3: Identify the soccer club managed by this person (VfL Bochum)
  ?manager dbo:managedTeam dbr:VfL_Bochum .

  # Step 4: Find the current manager of VfL Bochum
  ?team dbo:currentManager ?currentManager .
  FILTER(?team = dbr:VfL_Bochum)
}
```",7,12,8,3,3,3,3,71,0,0,1,0,0.0,0
213,20,test,"Give me the birth place of the child, that is a politician, of the person decedent at Taipei and country of the work of the spouse, that is a writer, of Hu Jieqing.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?v1 . ?v4 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Hu_Jieqing> . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Taipei> . ?v5 <http://dbpedia.org/ontology/country> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>. ?v5 <http://dbpedia.org/property/author> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?birthPlace ?countryOfWork
WHERE {
  # Step 1: Identify Hu Jieqing's spouse who is a writer
  dbr:Hu_Jieqing dbo:spouse ?spouse .
  ?spouse dbo:occupation dbr:Writer .

  # Step 2: Find the child of this spouse who is a politician and get their birthplace
  ?spouse dbo:child ?politicianChild .
  ?politicianChild dbo:occupation dbr:Politician .
  ?politicianChild dbo:birthPlace ?birthPlace .

  # Step 3: Identify a person decedent at Taipei (assuming we have a specific individual in mind)
  ?decedent dbo:deathPlace dbr:Taipei .

  # Step 4: Determine the country associated with the work of Hu Jieqing's spouse
  ?spouse dbo:notableWork ?work .
  ?work dbo:country ?countryOfWork .
}
```",6,8,7,3,2,3,2,20,0,0,1,0,0.0,0
203,67,test,"Give me the commander in French campaign in Egypt and Syria and military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and military force of the war, that is a military conflict and an event, of the reference to William Bayne.","SELECT ?result WHERE { ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?result <http://dbpedia.org/ontology/battle> ?v3 . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v6 . ?v0 <http://dbpedia.org/ontology/battle> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v3 <http://dbpedia.org/ontology/commander> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?campaign ?orderAwarded ?war WHERE {
  # Napoleon Bonaparte as commander in the Egyptian campaign
  ?campaign dbo:commander dbr:Napoleon_Bonaparte ;
            a dbo:MilitaryConflict ;
            rdfs:label ?campaignLabel .
  
  FILTER(CONTAINS(LCASE(?campaignLabel), ""egypt and syria"")) .

  # Napoleon Bonaparte as awardee of the Knight Commander of the Order of the Bath
  ?orderAwarded dbo:recipient dbr:Napoleon_Bonaparte ;
                a dbo:Award ;
                rdfs:label ?awardLabel .
  
  FILTER(CONTAINS(LCASE(?awardLabel), ""knight commander of the order of the bath"")) .

  # The war in which this campaign took place
  ?war dbo:participatedIn ?campaign ;
       a dbo:MilitaryConflict ;
       rdfs:label ?warLabel .

  # Reference to William Bayne (assuming he is related or mentioned)
  OPTIONAL {
    ?relatedEvent dbo:reference dbr:William_Bayne .
    ?relatedEvent ?p ?o .
  }
  
  BIND(dbr:Napoleon_Bonaparte AS ?commander)
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
871,69,test,"Give me the parent of the awardee of the award of Rodney Lees and father of the child, that is a politician, of the alumnus of Eton College and parent of the child of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v0 . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v3 <http://dbpedia.org/property/father> ?v7 . ?v3 <http://dbpedia.org/property/father> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v7 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v5 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  # Step 1: Rodney Lees' award
  ?award dbo:recipient dbr:Rodney_Lees .
  
  # Step 2: Awardee's parent
  ?awardee dbo:award ?award ;
          dbo:parent ?parent .

  # Step 3: Eton College alumnus who is a politician and has a child
  ?alumnus dbo:almaMater dbr:Eton_College ;
           rdf:type dbo:Politician ;
           dbo:child ?politicianChild .

  # Step 4: Parent of the child of Frederick Stanley, 16th Earl of Derby
  ?frederickChild dbo:parent ?commonParent .
  ?frederick dbr:Fredrick_Stanley_16th_Earl_of_Derby ;
             dbo:child ?frederickChild .

  # Step 5: Find the common parent
  FILTER(?parent = ?commonParent)
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
943,71,test,"Give me the father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and reference to the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v1 . ?v8 <http://dbpedia.org/property/father> ?result . ?v7 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v4 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v1 <http://dbpedia.org/ontology/parent> ?v2 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v7 <http://dbpedia.org/property/father> ?v8 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/alterEgo> ?v5 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?person WHERE {
  # Baeda Maryam I's child (Zara Yaqob)
  ?zaraYaqob dbo:parent dbr:Baeda_Maryam_I ;
            a dbo:Person .

  # Zara Yaqob's father (Dawit I)
  ?dawitI dbo:child ?zaraYaqob ;
          a dbo:Person .

  # Dawit I's father (Yeshaq)
  ?yeshaq dbo:child ?dawitI ;
          a dbo:Person ;
          dbo:officeHolder dbr:Emperor_of_Ethiopia .
}
```",9,13,10,3,3,3,3,71,0,0,1,0,0.0,0
80,67,test,"Give me the actor of Shelby Oaks and actor of the album of the work, that is a song and a musical work, of T.I. and professional in the alter ego of the series of The Golden Master.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?v6 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v0 <http://dbpedia.org/ontology/album> ?v6 . },"```sparql
# Query for actor of Shelby Oaks
SELECT ?actor WHERE {
  ?work rdfs:label ""Shelby Oaks""@en .
  ?work dbo:starring ?actor .
}

UNION

# Query for actor associated with an album by T.I. that contains a song which is also a musical work
SELECT DISTINCT ?albumActor WHERE {
  ?album dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> ;
         dbo:hasPart ?song .
  ?song rdf:type dbo:Songs ;
        dbo:musicalWork ?musicalWork .
  ?album dbo:starring ?albumActor .
}

UNION

# Query for professional associated with the alter ego in The Golden Master
SELECT DISTINCT ?professional WHERE {
  ?series rdfs:label ""The Golden Master""@en .
  ?character dbo:alterEgo ?alterEgo ;
              dbo:profession ?professional .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
89,69,test,"Give me the spouse of the father, that is a royalty, of Myat Hpone Pyo and predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of the parent of the child of Minye Kyawswa.",SELECT ?result WHERE { <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v4 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v7 . ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v7 . ?v2 <http://dbpedia.org/property/father> ?v1 . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/child> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?spouse WHERE {
  # Myat Hpone Pyo's father who is a royalty
  ?myatHponePyo dbo:father ?royalFather .
  ?royalFather rdf:type ?royaltyType .
  FILTER(?royaltyType IN (dbo:Monarch, dbo:RoyalFamilyMember)) .

  # Spouse of Myat Hpone Pyo's royal father
  ?royalFather dbo:spouse ?spouse .

  # Saw Min Phyu's spouse who is a royalty
  ?sawMinPhyu dbo:spouse ?royalSpouse .
  ?royalSpouse rdf:type ?royaltyType2 .
  FILTER(?royaltyType2 IN (dbo:Monarch, dbo:RoyalFamilyMember)) .

  # Child of Saw Min Phyu's royal spouse
  ?royalSpouse dbo:child ?childOfRoyalSpouse .

  # Minye Kyawswa's child and their parent
  ?minyeKyawswa dbo:child ?minyeChild .
  ?minyeChild dbo:parent ?minyeParent .

  # Predecessor of the child of Saw Min Phyu's royal spouse
  ?predecessor dbo:succeededBy ?childOfRoyalSpouse .

  # Ensure the spouse is also a predecessor
  FILTER(?spouse = ?predecessor)
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
668,69,test,"Give me the professional in the profession of Rod Argent and associated musical artist of the person born as the birth name of $pacely and person born as the birth name of the native, that is an artist, of Central Region, Ghana.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v7 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v7 . ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?v3 <http://dbpedia.org/property/birthName> ?v4 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v4 . ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?result <http://dbpedia.org/property/birthName> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?rodArgentBirthName ?pacelyBirthName ?rockyDawuniBirthName ?associatedArtist
WHERE {
  # Rod Argent's profession
  dbr:Rod_Argent dbo:occupation ?profession .

  # $pacely's birth name
  dbr:$pacely rdfs:label ""Paul Anthony Hamilton""@en .
  
  # Rocky Dawuni's birth name
  OPTIONAL { 
    dbr:Rocky_Dawuni dbo:birthName ?rockyDawuniBirthName .
  }

  # Find associated musical artists
  OPTIONAL {
    ?artist dbo:associatedMusicalArtist dbr:Rod_Argent .
    ?artist dbo:associatedMusicalArtist dbr:$pacely .
    ?artist dbo:associatedMusicalArtist dbr:Rocky_Dawuni .
    ?artist rdfs:label ?associatedArtist .
  }
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
151,9,test,Give me the entity in the birthplace of Burhan Belge and reference to the award of Charles Parsons (British Army officer).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> ?v1 . <http://dbpedia.org/resource/Burhan_Belge> <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Charles_Parsons_(British_Army_officer)> <http://dbpedia.org/property/awards> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . },"```sparql
# Part 1: Find the birthplace of Burhan Belge
SELECT ?birthPlace WHERE {
    dbpedia:Burhan_Belge dbo:birthPlace ?birthPlace .
}

# Part 2: Find notable entities in that birthplace and awards for Charles Parsons
WITH <http://dbpedia.org/resource/Bursa> AS ?birthPlace

SELECT DISTINCT ?entityInBirthPlace ?award WHERE {
    # Entities or landmarks in the birthplace
    ?entityInBirthPlace dbo:location ?birthPlace .
    
    OPTIONAL {
        # Awards received by Charles Parsons (British Army officer)
        dbpedia:Charles_Parsons_(British_Army_officer) dbo:award ?award .
    }
}
```",4,4,5,2,2,2,2,9,0,0,3,0,0.0,0
23,28,test,"Give me the entity in the country of Daniel Elahi Galán and party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre and party of the father of Sofía Petro.","SELECT ?result WHERE { <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v3 . <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v5 . ?v1 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . ?v5 <http://dbpedia.org/ontology/party> ?result . ?v1 <http://dbpedia.org/ontology/party> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/country> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country ?galanParty ?barrerasParty ?petroFather ?fatherParty WHERE {
  # Daniel Elahi Galán's country and party
  dbr:Daniel_Elái_Galán dbo:nationality ?person .
  ?person dbo:country ?country .
  
  dbr:Daniel_Elái_Galán dbo:party ?galanParty .

  # Roy Leonardo Barreras Montealegre's party
  dbr:Roy_Leonardo_Barreras_Montealegre dbo:party ?barrerasParty .

  # Sofía Petro's father and his party
  dbr:Sofía_Petro dbo:father ?petroFather .
  
  ?petroFather dbo:party ?fatherParty .
}
```",6,7,7,2,3,2,3,28,0,0,1,0,0.0,0
412,27,test,"Give me the war of Napoleon Zervas and war of the awardee of 30 and entity in the death place, that is a settlement, of Antonios Varthalitis.","SELECT ?result WHERE { <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war1 ?war2 ?entityInDeathPlace WHERE {
  # War of Napoleon Zervas (Greek Civil War)
  VALUES ?war1 { dbr:Greek_Civil_War }

  # War associated with the Nobel Peace Prize awardee in 1930 (Nathan Söderblom)
  SELECT ?war2 WHERE {
    ?awardee dbo:nobelPrizeYear ""1930"" .
    ?awardee dbo:category dbr:Nobel_Prize_in_Peace .
    ?awardee dbo:awardDescription ?description .
    FILTER CONTAINS(?description, ""Nathan Söderblom"") .
    ?awardee dbo:relatedTo ?war2 .
  }

  # Entity in the death place of Antonios Varthalitis
  SELECT ?deathPlace WHERE {
    dbr:Antonios_Varthalitis dbo:placeOfBirth ?birthPlace ;
                              dbo:deathPlace ?deathPlace .
  }
  
  ?deathPlace a dbo:Settlement .

  # Find an entity related to the death place
  ?entityInDeathPlace dbo:location ?deathPlace .
}
```",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
742,19,test,"Give me the birthplace of the alumnus of Plovdiv University ""Paisii Hilendarski"" and birthplace of the resident of the region, that is a settlement, of Eastern European Time.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/residence> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Plovdiv_University_%22Paisii_Hilendarski%22> . ?v0 <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Eastern_European_Time> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alumnus ?birthPlace WHERE {
  ?alumnus dbo:almaMater dbr:Plovdiv_University_Paisii_Hilendarski .
  ?alumnus dbo:residence ?settlement .
  ?settlement dbo:timeZone dbr:Eastern_European_Time .
  OPTIONAL { ?alumnus dbo:birthPlace ?birthPlace }
}
```",5,6,6,3,2,3,2,20,0,0,2,0,0.0,0
756,68,test,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and native of the administration, that is a country, of the leader of West Germany.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v7 <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v5 <http://dbpedia.org/ontology/team> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v5 . ?v4 <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> ?v7 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. },"```sparql
SELECT ?manager WHERE {
  # Find the 2007-08 VfL Bochum season
  ?season dcterms:isPartOf <http://dbpedia.org/resource/2006%E2%80%9307_VfL_Bochum_season> ;
          dbp:succeeds ?nextSeason .
  
  # Find Thomas Letsch's role in a team during this period
  ?team dbp:manager ?letsch ;
        dbp:season ?nextSeason .
  ?letsch foaf:name ""Thomas Letsch"" .

  # Determine the administration and leader of West Germany
  ?country dbo:officialName ""West Germany"" .
  ?leader dbo:nationality ?country ;
          dbo:positionTitle ""Chancellor"" .
  
  # Find the manager of the player associated with a sports club that fits all these criteria
  ?player dbp:team ?team ;
          dbp:manager ?manager .
  ?club rdf:type <http://dbpedia.org/ontology/SportsClub> ,
             <http://dbpedia.org/ontology/Organisation> ,
             <http://dbpedia.org/ontology/SoccerClub> ;
        dbp:player ?player .

  # Ensure the manager is associated with a player from the club
  ?manager foaf:name ?name .
}
```",8,18,9,3,3,3,3,71,0,0,1,0,0.0,0
89,68,test,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and child of the parent of the child of Minye Kyawswa and predecessor of the child of Saw Shwe Khet.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v4 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v5 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://dbpedia.org/property/father> ?v7 . ?v4 <http://dbpedia.org/ontology/child> ?v5 . ?result <http://dbpedia.org/ontology/spouse> ?v7 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?spouse WHERE {
  # Step 1: Identify Saw Shwe Khet's royal child
  ?child dbo:parent dbr:Saw_Shwe_Khet ;
         a dbo:Monarch .

  # Step 2: Find Minye Kyawswa's grandchild (which is the same as Saw Shwe Khet's child)
  ?grandchild dbo:parent ?child .
  ?minyeChild dbo:child ?grandchild .
  ?minyeChild dbo:parent dbr:Minye_Kyawswa .

  # Step 3: Identify predecessor of this grandchild
  ?predecessor dbo:successor ?grandchild .

  # Step 4: Determine spouse of father (who is a royalty)
  ?father dbo:spouse ?spouse .
  ?father dbo:parent dbr:Saw_Shwe_Khet .
  ?father a dbo:Monarch .
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
399,9,test,Give me the band member of the person born as Emilia Yancheva Valeva and professional in the profession of Jamie T.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v3 . ?v1 <http://dbpedia.org/property/birthName> ""Emilia Yancheva Valeva""@en . <http://dbpedia.org/resource/Jamie_T> <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . }","```sparql
# Step 1: Find Emilia Yancheva Valeva's professional name
SELECT ?professionalName WHERE {
  ?person foaf:name ""Emilia Yancheva Valeva""@en .
  OPTIONAL { ?person foaf:name ?professionalName . }
}

# Step 2: Check if she is associated with the music profession similar to Jamie T
SELECT DISTINCT ?musician WHERE {
  ?emilia dbp:profession dbc:Musicians_from_England ;
          foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""emilia yancheva valeva""))
  
  # Find any band association
  OPTIONAL { 
    ?band dbo:member ?musician .
    ?emilia dbo:memberOf ?band .
  }
}

# Step 3: Identify any band members related to her
SELECT DISTINCT ?bandMember WHERE {
  ?emilia dbp:profession dbc:Musicians_from_England ;
          foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""emilia yancheva valeva""))
  
  # Find any band association and its members
  ?band dbo:member ?bandMember .
  ?emilia dbo:memberOf ?band .
}
```",4,4,5,2,2,2,2,9,0,0,4,0,0.0,0
38,19,test,"Give me the author of the work, that is a written work and a work, of the commander, that is an office holder, in Korean conflict and author of the work, that is a work and a written work and American and a book, of Joe Biden.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v4 <http://dbpedia.org/property/author> ?v0 . <http://dbpedia.org/resource/Korean_conflict> <http://dbpedia.org/ontology/commander> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v4 <http://dbpedia.org/property/author> ?result . ?v2 <http://dbpedia.org/ontology/author> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?person dbo:officeHolderOf dbr:Korean_War.
  ?person dbo:work ?writtenWork.
  ?writtenWork rdf:type dbo:WrittenWork .
  ?writtenWork dbo:author ?author.

  ?book dbo:author ?author;
        dbo:country dbr:United_States_of_America;
        rdf:type dbo:Book .

  ?bidenBook dbo:author ?author, dbr:Joe_Biden.
}
```",5,12,6,3,2,3,2,20,0,0,1,0,0.0,0
293,68,test,"Give me the party member of the ruling party in the landmark at elevation of 20.116800000000001347 and spouse of the actor of the product, that is a film, of Nat Levine and person born as the birth name of Ann Sothern.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v4 . ?v0 <http://dbpedia.org/property/starring> ?v7 . ?v5 <http://dbpedia.org/property/leaderParty> ?v4 . ?result <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v5 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v3 . ?v7 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
# Step 1: Identify the landmark by elevation
SELECT ?landmark WHERE {
  ?landmark dbo:elevationMeasurement ?elevation .
  FILTER(?elevation = ""20.116800000000001347""^^xsd:float)
}

# Step 2: Determine the ruling party at that location
SELECT ?rulingParty WHERE {
  ?location dbo:isPartOf ?country .
  ?landmark dbo:location ?location .
  ?party dbo:hasMember ?leader .
  ?party dbo:country ?country .
  ?party dbo:currentLeader ?leader .
  FILTER(?leader = ""current leader of the ruling party"") # Placeholder for actual current leader
}

# Step 3: Identify films produced by Nat Levine
SELECT ?film WHERE {
  ?film dbo:producer ?producer .
  ?producer foaf:name ""Nat Levine"" .
}

# Step 4: Find actors of those films
SELECT DISTINCT ?actor WHERE {
  ?film dbo:starring ?actor .
  ?film ?p ?o .
}

# Step 5: Determine the spouse of one of these actors
SELECT DISTINCT ?spouse WHERE {
  ?actor dbo:spouse ?spouse .
}

# Step 6: Get Ann Sothern's birth name
SELECT ?birthName WHERE {
  ?person foaf:name ""Ann Sothern"" .
  ?person dbo:birthName ?birthName .
}

# Step 7: Find a person with that birth name
SELECT DISTINCT ?person WHERE {
  ?person dbo:birthName ?birthName .
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
737,69,test,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and child of the child of Duke Philipp of Württemberg and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v4 . ?result <http://dbpedia.org/ontology/parent> ?v7 . ?v7 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?v2 <http://dbpedia.org/property/father> ?v1 . ?v2 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v3 <http://dbpedia.org/property/father> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfChild
WHERE {
  # Step 1: Find Archduchess Margarete Sophie of Austria's parent who is a royalty
  ?parent dbo:spouse ?margareteSophieParent.
  ?margareteSophieParent dbr:Archduchess_Margarete_Sophie_of_Austria dbo:child ?margareteSophie.

  # Step 2: Find the child of that parent
  ?parentChild dbo:child ?siblingOfMargareteSophie.
  
  # Step 3: Identify Duke Philipp of Württemberg's grandchild
  ?philippChild dbo:child ?grandchild1.
  ?grandchild1 dbo:child ?grandchild2.

  # Step 4: Find the predecessor of the child of the spouse, who is a royalty, of Archduchess Helena of Austria
  ?helenaSpouse dbo:spouse dbr:Archduchess_Helena_of_Austria.
  ?helenaSpouseChild dbo:child ?royalChildOfHelena.
  
  # Find predecessor (older sibling) of the royal child
  ?predecessor dbo:child ?royalChildOfHelena.
  ?predecessor rdfs:label ?predecessorLabel.

  # Step 5: Combine these relationships to find a common individual
  FILTER(?siblingOfMargareteSophie = ?grandchild2 && ?predecessor = ?siblingOfMargareteSophie)
  
  # Ensure the person is royalty
  ?childOfChild dbo:parent ?siblingOfMargareteSophie.
  ?childOfChild rdfs:label ?childLabel.

  FILTER(CONTAINS(LCASE(?childLabel), ""royalty""))
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
375,28,test,Give me the war of the child of Toyotomi Hideyoshi and entity in the birth place of Yamaza Enjirō and war of the person born as Koichirō.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v5 . ?result <http://dbpedia.org/ontology/place> ?v1 . ?v5 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Koichirō""@en . <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v1 . }","```sparql
# Query for the war involving Toyotomi Hideyoshi's child (Toyotomi Hideyori)
SELECT ?war WHERE {
  ?person dbo:parent dbr:Toyotomi_Hideyoshi .
  ?person foaf:name ""Hideyori""@ja .
  ?event dbo:agent ?person ;
         rdf:type dbo:MilitaryConflict .
  ?event rdfs:label ?war .
}

UNION

# Query for the entity in Kyoto related to a war involving someone born as Koichirō
SELECT ?entity ?war WHERE {
  ?person foaf:name ""Koichirō""@ja ;
          dbo:birthPlace dbr:Kyoto .
  ?event dbo:agent ?person ;
         rdf:type dbo:MilitaryConflict .
  ?event rdfs:label ?war .
  ?place dbo:location dbr:Kyoto .
  ?place dbo:relatedEvent ?event .
  BIND(?place AS ?entity)
}
```",6,6,7,2,3,2,3,28,0,0,2,0,0.0,0
668,68,test,"Give me the associated musical artist of the person born as the birth name of $pacely and professional in the profession of the writer, that is a musical artist, of The Live Anthology and person born as the birth name of Joey B.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v3 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v3 . ?v4 <http://dbpedia.org/property/birthName> ?v5 . ?v0 <http://dbpedia.org/property/occupation> ?v7 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/occupation> ?v7 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Find the birth name of Tupac Shakur
  VALUES (?tupacBirthName) { ""Tupac Amaru Shakur"" }
  
  # Find the birth name of Joey Badass
  VALUES (?joeyBirthName) { ""Jo-Vaughn Virginie Scott"" }

  # Identify Bob Dylan as a writer and musical artist
  ?dylan dbo:birthName ?writerBirthName .
  FILTER(?writerBirthName = ""Robert Allen Zimmerman"")
  
  # Find the associated musical artist connected to both Tupac's birth name and Bob Dylan
  ?artist dbo:associatedMusicalArtist ?tupac .
  ?artist dbo:associatedMusicalArtist ?dylan .

  # Ensure the artist is linked to both names
  ?tupac dbo:birthName ?tupacBirthName .
  ?joey dbo:birthName ?joeyBirthName .
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
353,67,test,"Give me the father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of the child of the spouse, that is a royalty, of Constance of Burgundy and child of Roger II of Sicily.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/child> ?result . ?v6 <http://dbpedia.org/property/father> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v6 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?v1 . }","```sparql
SELECT ?father WHERE {
  ?tancred dbo:parent ?mother .
  ?tancred dbo:parent ?father .
  ?tancred rdfs:label ""Tancred of Lecce""@en .
  ?william1 dbo:child ?tancred .
  ?william1 rdfs:label ""William I of Sicily""@en .
  ?constance dbo:spouse ?roger2 .
  ?constance rdfs:label ""Constance of Burgundy""@en .
  ?roger2 rdfs:label ""Roger II of Sicily""@en .
  ?william1 dbo:parent ?childOfWilliamI .
  ?childOfWilliamI rdf:type dbo:Monarch .
  ?childOfWilliamI dbo:officeHolder true .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
295,20,test,"Give me the native of the birth place of the producer of Storm in a Teacup (film) and writer of the work, that is a musical work, of the true self, that is an artist, of Steven Kapur.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v1 <http://xmlns.com/foaf/0.1/givenName> ""Steven Kapur""@en . <http://dbpedia.org/resource/Storm_in_a_Teacup_(film)> <http://dbpedia.org/ontology/producer> ?v4 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v2 <http://dbpedia.org/property/writer> ?v1 . ?v2 <http://dbpedia.org/property/writer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. }","```sparql
SELECT ?native WHERE {
  # Find the producer of the film ""Storm in a Teacup""
  ?film dbp:producer ?producer .
  ?film rdfs:label ""Storm in a Teacup""@en .

  # Get the birthplace of the producer
  ?producer dbo:birthPlace ?birthPlace .

  # Find who is native to that birthplace
  ?native dbo:nationality ?nationality ;
          dbo:birthPlace ?birthPlace .

  # Check if Steven Kapur wrote ""The True Self""
  ?work dbo:composer ?stevenKapur .
  ?stevenKapur rdfs:label ""Steven Kapur""@en .
  ?work rdfs:label ""The True Self""@en .

  FILTER(?native != ?producer) # Ensure the native is not the producer themselves
}
```",6,8,7,3,2,3,2,20,0,0,1,0,0.0,0
213,19,test,"Give me the birth place of the child, that is a politician, of Chiang Ching-kuo and country of the work of the spouse, that is a writer, of Hu Jieqing.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Chiang_Ching-kuo> . ?v4 <http://dbpedia.org/ontology/country> ?result . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>. ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Hu_Jieqing> . },"```sparql
# Query to find the birthplace of Chiang Wei-kuo
SELECT ?birthPlace WHERE {
  wd:Q1234568 dbo:birthPlace ?birthPlace .
}

# Query to find the country associated with Wang Zhaoming's work
SELECT ?country WHERE {
  wd:Q6543210 dbo:workCountry ?country .
}
```

Note: `wd:Q1234568` and `wd:Q6543210` are placeholders for the actual DBpedia identifiers of Chiang Wei-kuo and Wang Zhaoming, respectively. You would need to replace these with the correct QIDs from DBpedia.",5,7,6,3,2,3,2,20,0,0,1,0,0.0,0
687,70,test,"Give me the player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento and player in the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> ?v3 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v0 <http://dbpedia.org/property/starring> ?v7 . ?v4 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v4 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v7 <http://dbpedia.org/ontology/team> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?player WHERE {
  # Step 1: Find Marcelo Sarmiento's birthdate
  ?marceloSarmiento dbo:birthday ?birthdayMarcelo .
  FILTER (str(?marceloSarmiento) = ""Marcelo_Sarmiento"") .

  # Step 2: Find an athlete born on 1955-02-22
  ?athlete dbo:birthday ?birthdayAthlete .
  FILTER (?birthdayAthlete = ""1955-02-22""^^xsd:date && 
          (EXISTS { ?athlete a dbo:Athlete } || EXISTS { ?athlete a dbo:Person }) ) .

  # Step 3: Find films directed by Manuel Huerga
  ?film dbo:director ?manuelHuerga .
  FILTER (str(?manuelHuerga) = ""Manuel_Huerga"") .
  
  # Step 4: Find actors in the film who are also soccer players and athletes
  ?actor dbo:castMember ?film .
  ?actor a dbo:Actor .
  OPTIONAL { ?actor dbo:sport ?soccer . FILTER (str(?soccer) = ""Soccer"") }
  OPTIONAL { ?actor a dbo:Athlete }

  # Step 5: Find a person born on Marcelo Sarmiento's birthday who is both a soccer player and manager
  ?person dbo:birthday ?birthdayMarcelo .
  ?person a dbo:SoccerPlayer .
  ?person a dbo:SoccerManager .

  # Step 6: Find a player in the team of this person
  ?teamMember dbo:memberOfTeam ?person .
  FILTER (?teamMember != ?athlete) .

  BIND(?actor AS ?player)
}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
103,71,test,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and professional in the profession of the actor, that is a politician, of Ab Kya Hoga and actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v8 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v7 . ?v4 <http://dbpedia.org/property/occupation> ?v5 . ?v7 <http://dbpedia.org/property/alterEgo> ?v8 . ?v1 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v2 <http://dbpedia.org/property/starring> ?result . }","```sparql
# Query to find Lamont Cranston from comics
SELECT ?character WHERE {
  ?character dbo:wikiPageRedirects db:Lamont_Cranston.
}

# Query to find actors and politicians in ""Ab Kya Hoga""
SELECT DISTINCT ?actor WHERE {
  ?actor dbo:profession dbr/Actor .
  ?actor dbo:occupation dbr/Politician .
  ?series dbo:title ""Ab Kya Hoga""@en .
  ?series dbo:castMember ?actor .
}

# Query to find professionals similar to Trevor Noah
SELECT DISTINCT ?person WHERE {
  ?person dbo:profession dbr/Comedian ;
          dbo:profession dbr/Television_host .
}
```",9,12,10,3,3,3,3,71,0,0,13,0,0.0,0
68,28,test,"Give me the father of the parent of Dorothea of Denmark, Electress Palatine and child of the commander, that is a royalty, in Siege of Padua and father of the child, that is a royalty, of Philip I of Castile.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v1 . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . ?v1 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v3 . ?v5 <http://dbpedia.org/property/father> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?father WHERE {
  # Dorothea of Denmark, Electress Palatine
  wd:Q123456 a dbo:Person ;
             foaf:surname ""Dorothea"" ;
             dbo:spouse wd:Q789012 ; # Elector Palatine

  # Parent of Dorothea
  ?parent dbo:child wd:Q123456 .

  # Commander in the Siege of Padua whose child is royalty
  ?commander a dbo:Person ;
             dbo:occupation ""Commander"" ;
             dbo:event wd:Q345678 ; # Siege of Padua

  # Parent of the commander's child (Dorothea's parent)
  ?parent dbo:child ?commander .

  # Father of the commander's child
  ?father dbo:spouse ?mother .
  ?mother dbo:child ?commander .

  # Ensure father is royalty and connected to Philip I of Castile
  ?father a dbo:RoyalFamily ;
          dbo:child ?philipIChild .
  wd:Q987654 dbo:parent ?philipIChild . # Philip I of Castile

}
```

Note: The placeholders like `wd:Q123456`, `wd:Q789012`, etc., need to be replaced with the actual DBpedia identifiers for Dorothea, her spouse, the Siege of Padua, and other relevant entities. This query assumes that such relationships are well-represented in DBpedia.",6,8,7,2,3,2,3,28,0,0,1,0,0.0,0
198,71,test,"Give me the war of the awardee of the show, that is an award, of United States Congress and force of the awardee of the award of Quincy Adams Gillmore and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/awards> ?v4 . ?v7 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v2 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v8 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v4 . ?result <http://dbpedia.org/ontology/commander> ?v5 . ?v7 <http://dbpedia.org/ontology/birthPlace> ?v8 . ?v2 <http://dbpedia.org/property/awards> ?v1 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v8 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. }","```sparql
SELECT ?war WHERE {
  ?gillmore dbo:birthPlace ?birthplace .
  ?birthplace rdf:type dbo:Settlement .
  ?gillmore dbo:nationality dbr:United_States .
  ?gillmore dbo:dateOfDeath ""1850-08-05""^^xsd:date .
  
  ?award dbo:recipient ?gillmore ;
         dbo:awardingBody dbr:United_States_Congress .
  
  ?militaryForce dbo:militaryPerson ?gillmore .
  ?war dbo:participatingMilitaryUnit ?militaryForce .

  FILTER (str(?gillmore) = ""Quincy Adams Gillmore"")
}
```",9,12,10,3,3,3,3,71,0,0,1,0,0.0,0
871,67,test,"Give me the parent of Victor Stanley (Royal Navy officer) and father of the child, that is a politician, of the alumnus of Eton College and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v2 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v3 <http://dbpedia.org/property/father> ?result . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/father> ?v2 . ?v1 <http://dbpedia.org/ontology/child> ?v5 . }","```sparql
SELECT ?person WHERE {
  # Victor Stanley (Royal Navy officer) parent who is a politician
  ?victorVictor rdfs:label ""Victor Stanley""@en .
  ?victorVictor dbo:parent ?politicianParent .
  ?politicianParent dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""politician""))

  # Alumnus of Eton College whose child's parent is a politician and office holder
  ?alumnus dbo:almaMater dbr:Eton_College .
  ?child dbo:parent ?politicianOfficeHolderParent .
  ?politicianOfficeHolderParent dbo:occupation ?officeOccupation .
  FILTER(CONTAINS(LCASE(?officeOccupation), ""politician"") && CONTAINS(LCASE(?officeOccupation), ""office holder""))

  # Parent of Edward Stanley, 17th Earl of Derby who is both a politician and an office holder
  ?edwardSeventeenth dbo:parent ?politicianOfficeHolder .
  ?politicianOfficeHolder dbo:occupation ?polOfficeOccupation .
  FILTER(CONTAINS(LCASE(?polOfficeOccupation), ""politician"") && CONTAINS(LCASE(?polOfficeOccupation), ""office holder""))

  # Linking all to find the common person
  VALUES ?commonPerson { dbr:Edward_Stanley,_14th_Earl_of_Derby }
  FILTER (?politicianParent = ?commonPerson &&
          ?politicianOfficeHolderParent = ?commonPerson &&
          ?politicianOfficeHolder = ?commonPerson)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
158,27,test,"Give me the native of the administration of Alexander II, Grand Duke of Finland and person decedent at Switzerland and native of the administration, that is a country, of Nicholas II of Russia.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . ?v0 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Alexander II, Grand Duke of Finland's birthplace
  VALUES (?alexanderII_birth) { dbr:Saint_Petersburg }

  # Person deceased in Switzerland and native under Nicholas II
  ?person dbo:birthPlace ?nativePlace .
  ?person dbo:deathPlace dbr:Thun .

  FILTER(?nativePlace = ?alexanderII_birth)
}
```",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
159,69,test,"Give me the reference to the writer of Always the Love Songs and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://xmlns.com/foaf/0.1/name> ?v7 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v7 . ?v3 <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v4 <http://dbpedia.org/ontology/commander> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?writer ?commander ?successor ?event WHERE {
  # Step 1: Identify the writer of ""Always the Love Songs""
  ?tvshow dbo:title ""Always the Love Songs""@en .
  ?tvshow dbo:creator ?writer .

  # Step 2: Find a commander involved in the Battle of Vienna and a TV show or societal event
  ?commander dbo:occupation dbr:Military_commander ;
             dbo:participatedInEvent dbr:Battle_of_Vienna ;
             (dbo:creator|dbo:actor) ?tvshow .

  # Step 3: Determine the successor who is a politician and office holder
  ?successor dbo:succeededBy ?commander ;
             dbo:occupation dbr:Politician ;
             dbo:officeHolder true .

  # Step 4: Identify Michał Kazimierz Pac's military conflict
  ?event dbo:participatedInEvent dbr:Battle_of_Vienna ;
         dbo:participant dbr:Michał_Kazimierz_Pac .

}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
119,70,test,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and office of the leader of 2009 Galician regional election and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.","SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v4 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v3 <http://dbpedia.org/property/leaderParty> ?v1 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v4 . ?v0 <http://dbpedia.org/property/residence> ?v7 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v7 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?leader ?residenceCountry WHERE {
  # Identify the Spanish Socialist Workers' Party (PSOE)
  dbr:Spanish_Socialist_Workers'_Party dbo:leader ?leader .

  # Filter for the leader during the 2009 Galician regional election
  ?leader dbo:office ""President of the Government of Galicia""@en .
  ?leader dbo:electionDate ?date .
  FILTER (YEAR(?date) = 2009)

  # Ensure the leader is a Spanish citizen
  ?leader dbo:nationality dbr:Spain .

  # Retrieve the residence country of this individual
  ?leader dbo:residenceCountry ?residenceCountry .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
353,68,test,"Give me the child of the child of Alfonso VI of León and Castile and child of the parent of the child, that is a royalty, of Roger II of Sicily and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I.","SELECT ?result WHERE { ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v4 <http://dbpedia.org/ontology/child> ?v5 . ?v5 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://dbpedia.org/ontology/child> ?result . ?v7 <http://dbpedia.org/property/father> ?result . ?v7 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfChildAlfonsoVI ?royaltyRogerII ?referenceToWilliamI WHERE {
  # Alfonso VI of León and Castile's child
  ?alfonsoVI dbr:Alfonso_VI_of_Le%C3%B3n_and_Castile .
  ?alfonsoVIChild dbo:child ?alfonsoVI .
  
  # Child of the child of Alfonso VI
  ?alfonsoVIGrandchild dbo:child ?alfonsoVIChild .

  # Roger II of Sicily's parent's child (Roger himself)
  ?rogerII dbr:Roger_II_of_Sicily .
  ?rogerIIParent dbo:parent ?rogerII .
  
  # Find a royalty who is a reference to William I
  ?referenceToWilliamI dbo:child ?rogerIIParent .
  ?referenceToWilliamI dbo:officeHolder ?office .

  # Ensure all are royalties
  ?alfonsoVIGrandchild rdf:type dbo:Monarch .
  ?referenceToWilliamI rdf:type dbo:Monarch .

  # Find the father of the child that is a royalty and an office holder to William I
  ?fatherOfReferenceToWilliamI dbo:child ?referenceToWilliamI .
  ?fatherOfReferenceToWilliamI rdf:type dbo:Monarch .
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
246,19,test,"Give me the parent of the child, that is a royalty, of Prince Faisal bin Hussein and parent of the child, that is a royalty, of the child, that is a royalty, of Princess Muna al-Hussein.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Muna_al-Hussein> <http://dbpedia.org/ontology/child> ?v0 . ?result <http://dbpedia.org/ontology/child> ?v4 . ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  # Prince Faisal bin Hussein's child who is royalty
  ?child1 dbo:spouse ?spouse1 .
  ?child1 rdfs:label ""Princess Sarah Zeid""@en .
  
  # Parent of Princess Sarah Zeid
  ?parent1 dbo:child ?child1 .
  ?parent1 rdfs:label ""Prince Faisal bin Hussein""@en .

  # Princess Muna al-Hussein's child who is royalty
  ?child2 dbo:spouse ?spouse2 .
  ?child2 rdfs:label ""King Abdullah II of Jordan""@en .

  # Child of King Abdullah II who is royalty
  ?grandchild dbo:parent ?child2 .
  ?grandchild rdfs:label ""Princess Salma bint Abdullah II""@en .

  # Parent of Princess Salma bint Abdullah II
  ?parent2 dbo:child ?grandchild .
  ?parent2 rdfs:label ""King Abdullah II of Jordan""@en .

  # Common ancestor (King Hussein)
  OPTIONAL { ?commonAncestor dbo:child ?parent1 . }
  OPTIONAL { ?commonAncestor dbo:child ?parent2 . }
  FILTER(CONTAINS(LCASE(?commonAncestor), ""king hussain""))
}
```",5,8,6,3,2,3,2,20,0,0,1,0,0.0,0
531,68,test,"Give me the office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v5 . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v5 <http://dbpedia.org/property/residence> ?v4 . ?v0 <http://dbpedia.org/ontology/commander> ?v7 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v7 <http://dbpedia.org/property/office> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?officeOfCommander ?tenant ?partyLeaderOffice WHERE {
  # Step 1: Find Manuel Pinto da Costa's office in a military conflict
  ?conflict dbo:type dbr:Military_conflict .
  ?conflict dbo:participant dbr:Manuel_Pinto_da_Costa .
  ?conflict dbo:commander ?officeOfCommander .

  # Step 2: Find the leader of the 2003 Madrid City Council election and their residence
  ?electionEvent dbo:type dbr:Election .
  ?electionEvent dbo:date ""2003-05-25""^^xsd:date .
  ?electionEvent dbo:place dbr:Madrid_City_Council_election_2003 .
  ?leader dbo:officeHolderOf ?electionEvent .
  ?residence dbo:tenant ?leader .

  # Step 3: Find the office of the leader of the Conservative Republican Party (Spain)
  ?partyLeader dbo:memberParty dbr:Conservative_Republican_Party_(Spain) .
  ?partyLeader dbo:officeHolderOf ?partyOffice .
  
  # Combine information
  ?tenant dbo:residence ?residence .
  FILTER(?officeOfCommander = ?partyLeaderOffice)
}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
39,71,test,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and professional in the profession of the producer of Coke Studio Philippines.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v1 <http://dbpedia.org/property/occupation> ?v2 . ?v8 <http://dbpedia.org/property/birthName> ?v7 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v7 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v5 . ?v4 <http://dbpedia.org/property/alterEgo> ?v5 . ?v4 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v1 . ?v8 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  # Step 1: Identify Bob Thompson's birth name and his connection to music
  ?bob a dbo:MusicalArtist ;
       foaf:name ""Bob Thompson"" ;
       dbo:birthName ?birthName .

  # Step 2: Find the alter ego created by Walter B. Gibson
  dbr:The_Shadow dbo:creator dbr:Walter_B._Gibson .
  
  # Link Bob Thompson to The Shadow's professional connection
  ?bob dbo:profession dbr:The_Shadow .

  # Step 3: Identify the producer of Coke Studio Philippines
  ?producer a dbo:Producer ;
            dbo:worksFor dbr:Coke_Studio_Philippines .

  # Link the producer to Bob Thompson
  ?bob dbo:professionalConnection ?producer .

  # Step 4: Determine the band associated with Bob Thompson's birth name as a musician
  ?band a dbo:Band ;
        dbo:member ?bob .
}
```",9,12,10,3,3,3,3,71,0,0,4,0,0.0,0
687,71,test,"Give me the player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and player in the person born, that is an athlete, on the birthday of Marty Pollio and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/property/starring> ?v5 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> ?v8 . ?v8 <http://dbpedia.org/ontology/birthDate> ?v7 . <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v4 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v5 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v7 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?player WHERE {
  # Step 1: Films directed by Manuel Huerga
  ?film dbo:director dbr:Manuel_Huerga ;
        dbo:starring ?actor .

  # Step 2: Actors who are soccer players and athletes
  ?actor a dbo:SoccerPlayer, dbo:Athlete .

  # Step 3: Birthdays of Marty Pollio and Marcelo Sarmiento
  ?martyPollio dbp:birthday ?birthdayMarty .
  FILTER (str(?martyPollio) = ""Marty_Pollio"") .

  ?marceloSarmiento dbp:birthday ?birthdayMarcelo .
  FILTER (str(?marceloSarmiento) = ""Marcelo_Sarmiento"") .

  # Step 4: People born on Marty Pollio's birthday who are soccer players and athletes
  ?person dbp:birthday ?birthdayMarty ;
          a dbo:SoccerPlayer, dbo:Athlete .

  # Step 5: Teams associated with Marcelo Sarmiento
  ?team dbo:player ?marceloSarmiento ;
        dbo:manager ?marceloSarmiento .

  # Final step: Find the player who fits all criteria
  ?person = ?actor .
}
```",9,15,10,3,3,3,3,71,0,0,1,0,0.0,0
531,70,test,"Give me the office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and tenant of the residence of Alberto Ruiz-Gallardón and office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v4 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v0 <http://dbpedia.org/ontology/commander> ?v7 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . ?v3 <http://dbpedia.org/property/office> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/headquarter> ?v4 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v7 <http://dbpedia.org/property/office> ?result . ?v1 <http://dbpedia.org/property/leader> ?v3 . },"```sparql
# Step 1: Find the office of commander held by Manuel Pinto da Costa in a military conflict
SELECT ?office WHERE {
    ?person foaf:name ""Manuel Pinto da Costa""@en .
    ?person dbo:occupation dbo:MilitaryPerson .
    ?person dbo:positionHeld ?office .
    ?office rdf:type dbo:MilitaryCommanderPosition ;
            dbo:conflict ?conflict .
    ?conflict rdf:type dbo:MilitaryConflict .
}

UNION

# Step 2: Find the residence of Alberto Ruiz-Gallardón
SELECT ?residence WHERE {
    ?person foaf:name ""Alberto Ruiz-Gallardón""@en .
    ?person dbo:residence ?residence .
}

UNION

# Step 3: Find the political party led by Miguel Maura and its leader's office
SELECT ?partyLeaderOffice WHERE {
    ?person foaf:name ""Miguel Maura""@en .
    ?person dbo:politicalParty ?party .
    ?party rdf:type dbo:PoliticalParty .
    
    ?leaderPosition dbo:positionHeldBy ?leader ;
                    dbo:politicalParty ?party .
    ?leaderPosition rdf:type dbo:LeaderOffice .
}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
723,20,test,"Give me the band member of the producer, that is an organisation and a group, of the reference to Nothing to Gein and band member of the associated musical artist, that is an organisation, of the associated musical artist, that is a band and an organisation, of Nate Newton (musician).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Nate_Newton_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://dbpedia.org/ontology/producer> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Nothing to Gein""@en . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. }","```sparql
SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Find Nate Newton's associated musical artist that is a band and an organization
  wd:Nate_Newton dbo:associatedMusicalArtist ?artist .
  ?artist rdf:type dbo:Band ;
          rdf:type dbo:Organization .

  # Step 2: Identify the producer of this artist who is also an organization and a group
  ?artist dbo:producer ?producer .
  ?producer rdf:type dbo:Organization ;
            rdf:type dbo:Group .

  # Step 3: Find the band member referenced in relation to ""Nothing to Gein"" by this producer
  ?producer dbo:referenceTo ?nothingToGeinRef .
  ?nothingToGeinRef rdfs:label ""Nothing to Gein""@en .
  ?nothingToGeinRef dbo:bandMember ?referencedBandMember .

  # Step 4: Ensure the referenced band member is also a band member of Nate Newton's associated musical artist
  ?artist dbo:bandMember ?referencedBandMember .
}
```",6,11,7,3,2,3,2,20,0,0,1,0,0.0,0
203,68,test,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of the force, that is an event and a societal event, of Robert Calder and military force of the war, that is a military conflict and an event, of the reference to William Bayne.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://dbpedia.org/ontology/battle> ?v7 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v5 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v7 . ?v5 <http://dbpedia.org/ontology/battle> ?v4 . ?v4 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commanderTheTripleXs ?commanderRobertCalder ?commanderWilliamBayne WHERE {
  # Find the military conflict associated with ""The Triple X's""
  ?tripleX dbo:militaryConflict ?conflict1 .
  
  # Find the commander of that conflict
  ?conflict1 dbo:commander ?commanderTheTripleXs .

  # Find the event and societal event related to Robert Calder
  ?calderEvent dbo:event ?event1 ;
               dbo:societalEvent ?societalEvent1 .

  # Find the military force involved in these events
  ?militaryForce dbo:partOfMilitaryConflict ?conflict2 .
  
  # Link the military force to the event and societal event
  ?calderEvent dbo:militaryForce ?militaryForce ;
               dbo:societalEvent ?societalEvent1 .

  # Find the commander of that conflict
  ?conflict2 dbo:commander ?commanderRobertCalder .

  # Find the reference or context involving William Bayne
  ?bayneReference dbo:referenceTo ?context .
  
  # Determine the war associated with this reference
  ?war3 dbo:referenceTo ?context ;
        a dbo:MilitaryConflict .

  # Find the commander of that war
  ?war3 dbo:commander ?commanderWilliamBayne .
}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
119,71,test,"Give me the tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v8 . ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?result <http://dbpedia.org/ontology/headquarter> ?v5 . ?v4 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v7 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v8 <http://dbpedia.org/property/leaderParty> ?v7 . ?v1 <http://dbpedia.org/property/leader> ?v2 . ?v8 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v2 <http://dbpedia.org/property/office> ?result . ?v4 <http://dbpedia.org/property/residence> ?v5 . }","```sparql
# Step 1: Get Anxo Quintana's office or event related to his leadership
SELECT ?office WHERE {
    wd:Q123456 wdt:P39 ?office .
}

# Step 2: Find the residence country of that office/event
SELECT DISTINCT ?country WHERE {
    ?office wdt:P17 ?country .
}

# Step 3: Query for Spanish citizens who have been tenants of administrations linked to PSOE
SELECT DISTINCT ?tenant WHERE {
    ?tenant wdt:P27 wd:Q29 . # P27 is the property for citizenship, Q29 is Spain
    ?administration wdt:P102 ?tenant . # P102 is the property for head of government
    ?administration wdt:P463 wd:Q1234567 . # P463 is the property for part of, Q1234567 is PSOE
}

# Step 4: Find a common tenant between Anxo Quintana's administration and those associated with PSOE
SELECT DISTINCT ?commonTenant WHERE {
    { ?tenant wdt:P39 ?office } UNION { ?tenant wdt:P102 ?administration }
    FILTER (?office = wd:Q123456 || ?administration wdt:P463 wd:Q1234567)
}

# Step 5: Determine the residence country of this common tenant
SELECT DISTINCT ?residenceCountry WHERE {
    ?commonTenant wdt:P19 ?placeOfBirth .
    ?placeOfBirth wdt:P17 ?residenceCountry .
}
```

Note: Replace `wd:Q123456` with Anxo Quintana's DBpedia QID and `wd:Q1234567` with the DBpedia QID for PSOE.",9,13,10,3,3,3,3,71,0,0,1,0,0.0,0
468,20,test,"Give me the reference to the real name of the child, that is a royalty, of Alfonso IV of Aragon and child of the father, that is a royalty, of the parent of Martin of Aragon.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v5 . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Martin_of_Aragon> . ?v4 <http://dbpedia.org/property/father> ?v5 . ?v1 <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?realName WHERE {
  # Alfonso IV of Aragon's children who are royalty
  ?child dbo:parent dbr:Alfonso_IV_of_Aragon .
  ?child a dbo:Monarch .

  # Get the real name of the child
  OPTIONAL { ?child rdfs:label ?realName . FILTER (lang(?realName) = ""en"") }
}
```",6,8,7,3,2,3,2,20,0,0,3,0,0.0,0
103,69,test,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in the profession of Shatrughan Sinha.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v7 . ?v3 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://dbpedia.org/property/starring> ?v4 . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . ?v4 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v7 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character ?actor ?profession WHERE {
  # Identify the alter ego of The Shadow from the video game
  VALUES ?shadowCharacter { dbr:Lamont_Cranston }
  
  # Find Richard E. Grant's birth name and profession
  ?person dbo:birthName ""Richard Grant Esterhuysen""@en .
  ?person rdfs:label ""Richard E. Grant""@en .

  # Identify Shatrughan Sinha's profession
  ?sinha dbo:profession dbr/Actor ;
         dbo:profession dbr/Politician .

  # Ensure the actor shares the same professions as Shatrughan Sinha
  ?person dbo:profession ?profession .
  
  FILTER(?profession IN (dbr/Actor, dbr/Politician))

  # Find Richard E. Grant's acting roles in movies adapted from TV shows
  ?film dbo:starring ?actor .
  ?film dbo:basedOn dbr/Withnail_and_I .
  ?actor rdfs:label ""Richard E. Grant""@en .

  # Ensure the character is related to The Shadow
  ?character dbo:alterEgo ?shadowCharacter .
}
```",8,10,9,3,3,3,3,71,0,0,13,0,0.0,0
782,68,test,"Give me the band of the band member of the person born, that is a musical artist, on 1945-03-30 and associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and reference to the real name of the band of Kim Wilson.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> ?v7 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?v7 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v5 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v5 <http://xmlns.com/foaf/0.1/name> ?v4 . ?v3 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . }","```sparql
# Part 1: Find the musician born on 1945-03-30
SELECT ?musician WHERE {
  ?musician dbo:birthday ""1945-03-30""^^xsd:date .
  ?musician rdf:type dbo:MusicalArtist .
}

# Part 2: Find the band of the musician identified in Part 1
SELECT ?band WHERE {
  ?musician dbo:member ?band .
  FILTER(?musician IN (SELECT ?m WHERE { 
    ?m dbo:birthday ""1945-03-30""^^xsd:date . 
    ?m rdf:type dbo:MusicalArtist 
  }))
}

# Part 3: Find associated musical artists of Nick Gilder
SELECT ?associatedArtist WHERE {
  ?nickGilder foaf:name ""Nick Gilder""@en .
  ?nickGilder dbo:associatedMusicalArtist ?associatedArtist .
}

# Part 4: Find Kim Wilson's real name and his band
SELECT ?realName ?band WHERE {
  ?kimWilson foaf:name ""Kim Wilson""@en .
  OPTIONAL { ?kimWilson foaf:name ?realName . }
  ?kimWilson dbo:member ?band .
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
375,20,test,"Give me the parent of the native, that is an artist and a musical artist, of the location, that is English and a settlement, for , and author of the movie, that is a work and a television show, with the person deceased, that is an artist and a musical artist, on 2020-06-18.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v4 <http://dbpedia.org/ontology/postalCode> "","" . ?v4 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/ontology/child> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://dbpedia.org/ontology/deathDate> ""2020-06-18""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v5 <http://dbpedia.org/ontology/birthPlace> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/ontology/author> ?result . ?v2 <http://dbpedia.org/property/starring> ?v1 . }","```sparql
SELECT ?parent WHERE {
  ?person dbo:deathDate ""2020-06-18""^^xsd:date ;
          rdf:type dbo:Artist ;
          dbo:musicalArtist true .
  
  ?person dbo:nativePlace ?location .
  ?location rdfs:label ?settlementLabel ;
            dbo:country dbr:England ;
            rdf:type dbo:Settlement .

  OPTIONAL {
    ?work dbo:author ?person ;
          rdf:type dbo:Film ;
          dbo:televisionShow true .
  }

  ?person foaf:parent ?parent .
}
```",6,14,7,3,2,3,2,20,0,0,1,0,0.0,0
58,19,test,Give me the spouse of the person born as Linda Sue Cobb and producer of the movie with the award of Ian Gregson (poet).,"SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/starring> ?v0 . ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v4 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://dbpedia.org/property/birthName> ""Linda Sue Cobb""@en . <http://dbpedia.org/resource/Ian_Gregson_(poet)> <http://dbpedia.org/property/awards> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?spouse WHERE {
  # Find Linda Sue Cobb
  ?person foaf:name ""Linda Sue Cobb""@en .
  
  # Check if she has produced any movies
  ?movie dbo:producer ?person .

  # Check for an award associated with Ian Gregson (poet)
  ?award dbo:recipient ?movie ;
         dbo:awardedBy dbr:Ian_Gregson .

  # Find her spouse
  ?person foaf:mbox ?email .
  OPTIONAL { ?person dbo:spouse ?spouse . }
  
  FILTER EXISTS {
    ?person foaf:name ""Linda Sue Cobb""@en .
  }
}
```",5,5,6,3,2,3,2,20,0,0,1,0,0.0,0
756,70,test,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26 and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and native of the administration, that is a country, of the leader of West Germany.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://dbpedia.org/ontology/manager> ?v1 . ?v4 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v4 . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v7 <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?result <http://dbpedia.org/ontology/birthPlace> ?v7 . }","```sparql
SELECT ?manager WHERE {
  # Step 1: Identify the person born on 1968-08-26 who is a sports manager
  ?person dbo:birthDate ""1968-08-26""^^xsd:date ;
          rdf:type dbo:SportsManager .
  
  # Step 2: Check if this person was the manager of VfL Bochum during the 2007–08 season
  ?season dbo:team ?vflBochum ;
          dbo:manager ?person ;
          dbo:season ""2007–08"" .
  ?vflBochum rdf:type dbo:SoccerClub .

  # Step 3: Identify the player managed by this person in the 2007–08 VfL Bochum season
  ?player dbo:team ?vflBochum ;
          dbo:manager ?person .

  # Step 4: Find the team (soccer club) of which this player is a part
  ?club rdf:type dbo:SoccerClub ;
        dbo:member ?player .

  # Step 5: Determine the manager of this soccer club during its 2007–08 season
  ?clubSeason dbo:team ?club ;
              dbo:season ""2007–08"" .
  ?clubSeason dbo:manager ?manager .
}
```",8,16,9,3,3,3,3,71,0,0,1,0,0.0,0
859,20,test,"Give me the associated musical artist of the associated musical artist of the member, that is a musical artist, of Khlyst (band) and band member of the associated musical artist, that is a band and a group and an organisation, of the reference, that is a group, to Burnt by the Sun.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v5 . ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Khlyst_(band)> <http://dbpedia.org/ontology/bandMember> ?v4 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Burnt by the Sun""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. }","```sparql
# Step 1: Find a member of Khlyst who is also a musical artist
SELECT ?member WHERE {
    ?khlyst dbo:bandMember ?member .
    FILTER(STRSTARTS(LCASE(?khlyst), ""khlyst""))
    ?member rdf:type dbo:MusicalArtist .
}

# Step 2: Find the associated musical artist of this member
SELECT DISTINCT ?associatedArtist WHERE {
    ?member dbo:associatedBandOrPerson ?associatedArtist .
    ?associatedArtist rdf:type dbo:MusicalArtist .
}

# Step 3: Identify the reference group for Burnt by the Sun
SELECT DISTINCT ?referenceGroup WHERE {
    ?burntByTheSun dbo:reference ?referenceGroup .
    FILTER(STRSTARTS(LCASE(?burntByTheSun), ""burnt by the sun""))
    ?referenceGroup rdf:type dbo:MusicalBand .
}

# Step 4: Confirm if this reference is also a band and an organization
SELECT DISTINCT ?confirmedReference WHERE {
    ?referenceGroup rdf:type dbo:Organization ;
                    rdf:type dbo:MusicalBand .
}

# Step 5: Find a common band member between the artist from step 2 and the group from step 4
SELECT DISTINCT ?commonMember WHERE {
    ?associatedArtist dbo:bandMember ?commonMember .
    ?confirmedReference dbo:bandMember ?commonMember .
}
```",6,11,7,3,2,3,2,20,0,0,5,0,0.0,0
628,69,test,"Give me the person born as the birth name of Bobby Shmurda and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state) and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v7 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v7 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. },"```sparql
SELECT ?person WHERE {
  ?person dbo:birthName ""Ackquille Jean Pollard""@en .
  OPTIONAL { ?award dbo:name ?awardName . }
  FILTER(CONTAINS(LCASE(?awardName), ""grammy"") && CONTAINS(LCASE(?awardName), ""new york""))
  ?band dbo:originPlace dbr:New_York_City .
  ?band dbo:member ?member .
  ?member dbo:associatedBand ?associatedArtist .
  ?associatedArtist dbo:genre dbr:Hip_hop_music .
  ?artist dbo:memberOfGroup ?gs9 .
  FILTER(CONTAINS(LCASE(?artist), ""bobby shmurda"") || CONTAINS(LCASE(?artist), ""gs9""))
}
```",8,16,9,3,3,3,3,71,0,0,1,0,0.0,0
687,67,test,"Give me the player in Juan Carlos Molina (footballer) and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.",SELECT ?result WHERE { <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v3 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v0 <http://dbpedia.org/property/starring> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v6 <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> ?v3 . <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. },"```sparql
# Query 1: Retrieve Juan Carlos Molina's team
SELECT ?team WHERE {
  ?player foaf:name ""Juan Carlos Molina""@en .
  ?player dbo:playsFor ?team .
}

# Query 2: Get Marcelo Sarmiento's birthdate
SELECT ?birthdate WHERE {
  ?person foaf:name ""Marcelo Sarmiento""@en ;
          dbo:birthDate ?birthdate .
}

# Query 3: Find a soccer player and manager born on that date
SELECT ?person WHERE {
  ?person dbo:birthDate ?birthdate ;
          dbo:occupation [a dbo:SoccerPlayer, dbo:SoccerManager] .
  FILTER(?birthdate = <birthdate_from_query_2>)
}

# Query 4: Identify a film by Manuel Huerga and find an actor who is also a soccer player and athlete
SELECT ?actor WHERE {
  ?film dbo:director ?director ;
        dbo:workExample ?work .
  ?director foaf:name ""Manuel Huerga""@en .
  ?actor dbo:actedIn ?film ;
         dbo:occupation [a dbo:SoccerPlayer, dbo:Athlete] .
}
```",7,12,8,3,3,3,3,71,0,0,1,0,0.0,0
628,70,test,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and person born as the birth name of the native, that is a musical artist, of Florida and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://dbpedia.org/property/awards> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v0 <http://dbpedia.org/property/birthName> ?v7 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/property/birthName> ?v7 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. },"```sparql
# Step 1: Find Rowdy Rebel's birth name
SELECT ?birthName WHERE {
  wd:Q1234567 foaf:name ""Rowdy Rebel"" .
  wd:Q1234567 schema:birthName ?birthName .
}

# Step 2: Identify the award and region related to New York
SELECT ?award ?region WHERE {
  ?award dbo:location wd:Q60 . # Assuming Q60 is New York City or state
  ?award dbo:recipient ?band .
  ?band schema:birthPlace ?region .
  FILTER (schema:isPartOf(?region, wd:Q30)) # Assuming Q30 is the USA
}

# Step 3: Find a band member of an associated musical artist linked to Bobby Shmurda
SELECT ?member WHERE {
  wd:Q654321 foaf:name ""Bobby Shmurda"" .
  wd:Q654321 dbo:associatedMusicalArtist ?artist .
  ?artist dbo:bandMember ?member .
  ?member schema:birthPlace ?place .
  FILTER (?place = wd:Q1234567) # Assuming Q1234567 is Florida
}
```",8,15,9,3,3,3,3,71,0,0,1,0,0.0,0
198,69,test,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and force of the awardee of Gillmore Medal and war of the awardee of the show, that is an award, of United States Congress.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v2 . ?v7 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://dbpedia.org/property/awards> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v1 <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v4 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?result <http://dbpedia.org/ontology/commander> ?v7 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. }","```sparql
SELECT DISTINCT ?entity WHERE {
  # Step 1: Identify the person who died on 1850-08-05
  ?person dbo:dateOfDeath ?deathDate .
  FILTER (YEAR(?deathDate) = 1850 && MONTH(?deathDate) = 8 && DAY(?deathDate) = 5) .

  # Step 2: Find their birthplace, ensuring it is a settlement in America
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace rdf:type dbo:Settlement ;
              dbo:country dbr:United_States_of_America .

  # Step 3: Link to the Gillmore Medal awardee and identify the war they were involved in
  ?gillmoreAwardee dbo:awardReceived dbr:Gillmore_Medal .
  ?gillmoreAwardee dbo:militaryService ?war .

  # Step 4: Find the Congressional award related to this war
  ?congressionalAward dbo:relatedEvent ?war ;
                     rdf:type dbo:Award .
  ?congressionalAward dbo:awardee ?person .

  # Step 5: Query for notable entities in the birthplace
  ?entity dbo:location ?birthPlace .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
731,19,test,"Give me the war of the commander in the reference, that is a societal event and a military conflict, to Sinking of Prince of Wales and Repulse and force of the awardee of Commander of the Order of the British Empire.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://xmlns.com/foaf/0.1/name> ""Sinking of Prince of Wales and Repulse""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Commander_of_the_Order_of_the_British_Empire> . ?result <http://dbpedia.org/ontology/commander> ?v2 . ?v0 <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?war WHERE {
  ?event dbo:participatedIn [
    a dbo:MilitaryConflict ;
    dbo:location dbr:Sinking_of_Prince_of_Wales_and_Reprulse
  ] .
  
  ?commander dbo:commanded ?event .
  ?commander dbo:honoursReceived dbr:Commander_of_the_Order_of_the_British_Empire .

  ?war dbo:participatedIn ?event ;
       a dbo:MilitaryConflict, dbo:SocietalEvent .
}
```",5,7,6,3,2,3,2,20,0,0,1,0,0.0,0
816,71,test,"Give me the actor of the movie, that is a work, with the person decedent at Los Angeles and parent of the child of the spouse of Mariclare Costello and parent of the professional in the profession of Eugène Cattin.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v5 . ?v5 <http://dbpedia.org/property/occupation> ?v4 . ?v7 <http://dbpedia.org/ontology/child> ?v8 . ?v8 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/starring> ?v1 . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v7 . ?v1 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v2 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?actor WHERE {
  # Find Mariclare Costello's spouse
  ?mariclareCostello a dbo:Person ;
                    foaf:name ""Mariclare Costello""@en .
  
  ?spouse a dbo:Spouse ;
          dbo:spouse ?mariclareCostello .

  # Find the child of Mariclare Costello and her spouse
  ?child dbo:parent ?spouse ;
         dbo:parent ?mariclareCostello .

  # Find the parent of the professional in the same profession as Eugène Cattin
  ?eugeneCattin a dbo:Person ;
                foaf:name ""Eugène Cattin""@en .
  
  ?profession dbr:Eug%C3%A8ne_Cattin/dbo:occupation ;
              rdfs:label ?professionLabel .

  ?professional a dbo:Person ;
                dbo:occupation ?profession ;
                dbo:parent ?parentOfProfessional .

  # Find the person who died in Los Angeles
  ?decedent a dbo:Person ;
            dbo:deathPlace dbr:Los_Angeles ;
            dbo:child ?child ;
            dbo:parent ?parentOfProfessional .

  # Find the movie (work) associated with these people
  ?movie a dbo:Film ;
         dbo:actor ?actor ;
         dbo:subject ?decedent .
}
```",9,10,10,3,3,3,3,71,0,0,1,0,0.0,0
159,67,test,"Give me the reference to the writer of the work of George Ducas and successor of Yurii Khmelnytsky and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v1 <http://dbpedia.org/ontology/battle> ?v3 . }","```sparql
SELECT ?writer WHERE {
  ?tvSeries dbo:genre dbr:Historical_fiction_television_series .
  ?tvSeries dbo:starring dbr:Vladimir_Ivanov .
  ?tvSeries dbo:basedOn dbr:John_III_Sobieski .
  ?tvSeries dbo:creator ?writer .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
941,20,test,"Give me the child of the parent, that is a royalty, of the child of Ferdinand Albert II, Duke of Brunswick-Lüneburg and spouse of the spouse of the child, that is a royalty, of Princess Antoinette of Brunswick-Wolfenbüttel.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/spouse> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Antoinette_of_Brunswick-Wolfenbüttel> <http://dbpedia.org/ontology/child> ?v4 . ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg> . ?v2 <http://dbpedia.org/ontology/child> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
# Step 1: Find a child of Ferdinand Albert II, Duke of Brunswick-Lüneburg
SELECT ?child WHERE {
  wd:Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg dbo:child ?child .
}

# Step 2: Find the spouse of that child
SELECT ?spouse WHERE {
  ?child dbo:spouse ?spouse .
}

# Step 3: Find a royal child of Princess Antoinette of Brunswick-Wolfenbüttel
SELECT ?royalChild WHERE {
  wd:Princess_Antoinette_of_Brunswick-Wolfenbüttle dbo:child ?royalChild .
  ?royalChild rdf:type wd:Q5 . # Assuming Q5 is a type for royalty
}

# Step 4: Find the spouse of this royal child
SELECT ?spouse WHERE {
  ?royalChild dbo:spouse ?spouse .
}

# Step 5: Find the child of the parent (from step 2) who is also a royalty
SELECT ?finalChild WHERE {
  ?parent dbo:child ?finalChild .
  ?finalChild rdf:type wd:Q5 . # Assuming Q5 is a type for royalty
}
```

Note: The above SPARQL queries are structured to be executed sequentially, with each step depending on the results of the previous one. You may need to adjust property paths and types based on actual DBpedia data.",6,8,7,3,2,3,2,20,0,0,3,0,0.0,0
119,19,test,"Give me the war of the commander in French Revolutionary Wars and entity in the residence, that is a country, of the native, that is Polish and an athlete, of Łódź.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Poland>. <http://dbpedia.org/resource/French_Revolutionary_Wars> <http://dbpedia.org/ontology/commander> ?v2 . ?v0 <http://dbpedia.org/property/residence> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/place> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Łódź> . },"```sparql
SELECT ?war ?country WHERE {
  # Find a commander involved in the French Revolutionary Wars
  ?commander dbo:nationality dbr:France ;
            dbo:occupation dbr:Military_person .
  ?war dbo:participatedIn dbr:French_Revolutionary_Wars ;
       dbo:commandedBy ?commander .

  # Find a Polish athlete from Łódź
  ?athlete dbo:nationality dbr:Poland ;
           dbo:birthPlace dbr:Łódź ;
           dbo:occupation dbr:Athlete .
  
  # Determine the residence of the athlete, which should be a country
  ?athlete dbo:residence ?country .

  FILTER (?commander = dbr:Napoleon_Bonaparte)
}
```",5,8,6,3,2,3,2,20,0,0,1,0,0.0,0
628,71,test,"Give me the band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state) and person born as the birth name of the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?v7 <http://dbpedia.org/property/awards> ?v8 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/property/birthName> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v4 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v8 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v7 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://dbpedia.org/ontology/birthPlace> ?v8 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/property/birthName> ?v5 . <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v1 . },"```sparql
SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Identify GS9 Members who are both artists and musical artists
  ?gs9Member dbo:memberOf dbr:GS9 .
  ?gs9Member dbo:occupation dbr:Musical_artist .
  ?gs9Member dbo:occupation dbr:Artist .

  # Step 2: Find awards associated with New York (state)
  ?award dbo:location dbr:New_York_(state) .
  
  # Step 3: Identify awardees that are bands
  ?award dbo:recipient ?bandAwardee .
  ?bandAwardee rdf:type dbo:Band .

  # Step 4: Determine the native region of these band awardees
  ?bandAwardee dbo:nativePlace ?nativeRegion .
  ?nativeRegion rdf:type dbo:State .
  ?nativeRegion rdf:type dbo:Settlement .
  ?nativeRegion dbo:country dbr:United_States .

  # Step 5: Find musical artists from this region who were born as their birth name
  ?musicalArtist dbo:nativePlace ?nativeRegion .
  ?musicalArtist dbo:birthName ?birthName .
  ?musicalArtist rdf:type dbo:Musical_artist .
  
  # Step 6: Identify band members of associated musical artist
  ?associatedArtist dbo:memberOf ?band .
  ?associatedArtist dbo:occupation dbr:Musical_artist .
  ?bandMember dbo:memberOf ?band .
  ?bandMember rdf:type dbo:Musical_artist .

  FILTER(?gs9Member = ?musicalArtist)
}
```",9,18,10,3,3,3,3,71,0,0,1,0,0.0,0
140,20,test,"Give me the party member of the ruling party, that is a political party and an organisation, in the death place, that is a settlement, of John McDermott (American artist) and commander in the war, that is a societal event, of the military force of Pickett's Charge.",SELECT ?result WHERE { <http://dbpedia.org/resource/John_McDermott_(American_artist)> <http://dbpedia.org/ontology/deathPlace> ?v4 . ?result <http://dbpedia.org/ontology/party> ?v5 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Pickett's_Charge> . ?v4 <http://dbpedia.org/property/leaderParty> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?partyMember WHERE {
  # Step 1: Find John McDermott's death place
  ?johnMcDermott dbo:deathPlace ?deathPlace .
  FILTER(STRSTARTS(STR(?johnMcDermott), ""http://dbpedia.org/resource/John_McDermott_(artist)"")) .

  # Step 2: Find the ruling party in that settlement
  ?rulingParty dbo:country ?country ;
              dbo:headquarters ?deathPlace .
  
  # Ensure the ruling party is an organization and a political party
  ?rulingParty rdf:type dbo:PoliticalParty, dbo:Organization .

  # Step 3: Identify Pickett's Charge war
  ?pickettsCharge dbo:participatedIn ?war .
  FILTER(STRSTARTS(STR(?pickettsCharge), ""http://dbpedia.org/resource/Pickett%27s_Charge"")) .

  # Step 4: Find a commander from the military force involved in that charge
  ?commander dbo:rank ?rank ;
             dbo:participatedIn ?war .
  
  # Ensure the commander is part of the military force
  ?militaryForce dbo:participatedIn ?war ;
                 dbo:commander ?commander .

  # Return the party member who is a political party and an organization
  ?partyMember rdf:type dbo:PoliticalParty, dbo:Organization .
}
```",6,10,7,3,2,3,2,20,0,0,4,0,0.0,0
347,71,test,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and father of the child of the parent of Archduke Charles Joseph of Austria.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v7 <http://dbpedia.org/property/father> ?v8 . ?result <http://dbpedia.org/ontology/parent> ?v8 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v5 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v7 . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v2 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  # Algerian War military force
  ?war dbo:militaryForce dbr:French_Armed_Forces .
  
  # Commander involved in the war, societal event, and TV show
  ?commander dbo:commanded ?unit ;
             dbo:occupation ""Military_person"" ;
             dbo:wikiPageDisambiguates ?societalEvent ;
             dbo:wikiPageRedirects ?tvShow .

  # Charles de Gaulle as a potential match
  FILTER(?commander = dbr:Charles_de_Gaulle)

  # Royal lineage connection
  OPTIONAL {
    ?deGaulle dbo:childOf ?parent .
    ?parent dbo:spouse ?mariaAnna .
    ?mariaAnna rdf:type dbo:Person ;
               rdfs:label ""Maria Anna of Bavaria (1574–1616)""@en .
  }
}
```",9,13,10,3,3,3,3,71,0,0,1,0,0.0,0
203,69,test,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).","SELECT ?result WHERE { ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v4 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://dbpedia.org/ontology/commander> ?v1 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v4 <http://dbpedia.org/ontology/battle> ?v3 . ?result <http://dbpedia.org/ontology/battle> ?v7 . <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v7 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
# Step 1: Identify the military conflict associated with ""The Triple X's"" (Triple Alliance)
SELECT ?war WHERE {
  ?tripleXs rdfs:label ""Triple Alliance""@en .
  ?tripleXs dbo:participatedIn ?war .
  FILTER(CONTAINS(LCASE(STR(?war)), ""world war i""))
}

# Step 2: Find the commander of that war
SELECT ?commander WHERE {
  ?war dbo:commandedBy ?commander .
}

# Step 3: Identify the recipient of Knight Commander of the Order of the Bath related to this commander
SELECT ?awardee WHERE {
  ?commander foaf:surname ?surname .
  ?awardee dbo:recipientOfAward ?award .
  ?award rdfs:label ""Knight Commander of the Order of the Bath""@en .
  FILTER(CONTAINS(LCASE(STR(?awardee)), STR(?surname)))
}

# Step 4: Determine the military force involved in both the war and societal event linked to this awardee
SELECT ?militaryForce WHERE {
  ?war dbo:militaryForce ?militaryForce .
  ?societalEvent dbo:relatedTo ?awardee .
  ?societalEvent dbo:militaryForce ?militaryForce .
}

# Step 5: Identify the commander associated with William Bayne in that military conflict
SELECT ?finalCommander WHERE {
  wd:Q1234567 foaf:surname ""Bayne""@en . # Assuming Q1234567 is the DBpedia ID for William Bayne (Royal Navy officer)
  ?war dbo:militaryForce ?militaryForce .
  ?finalCommander dbo:commandedByWar ?war .
}
```

Note: The above SPARQL query assumes certain relationships and labels that may need to be adjusted based on actual DBpedia data. Specific identifiers like `Q1234567` for William Bayne should be replaced with the correct DBpedia resource identifier.",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
737,67,test,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of Carl, Duke of Württemberg and child of the child of the child of Alexander of Württemberg (1804-1881).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v6 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . ?v6 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfChild
WHERE {
  # Step 1: Find Archduchess Margarete Sophie of Austria's parent who is royalty
  dbr:Archduchess_Margarete_Sophie_of_Austria dbo:parent ?parent .
  
  # Ensure the parent is a royalty
  ?parent rdf:type dbo:Monarch .

  # Step 2: Find predecessor of Carl, Duke of Württemberg
  dbr:Claude_Frederick_Carl,_Duke_of_Württemberg dbo:predecessor ?predecessor .

  # Ensure the predecessor is related to the parent found in step 1
  ?parent rdfs:label ?predecessorLabel .
  
  FILTER (CONTAINS(LCASE(?predecessorLabel), ""carl duke of württemberg""))

  # Step 3: Find descendants of Alexander of Württemberg up to three generations
  dbr:Alexander_of_Württemberg dbo:child ?firstChild .
  ?firstChild dbo:child ?secondChild .
  ?secondChild dbo:child ?thirdChild .

  # Ensure the third child is royalty
  ?thirdChild rdf:type dbo:Monarch .

  # Step 4: Match the third generation descendant with the predecessor's lineage
  ?predecessor dbo:parent ?thirdChild .
  
  BIND(?thirdChild AS ?childOfChild)
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
87,28,test,"Give me the spouse of the awardee of List of awards and nominations received by Janusz Kamiński and actor of the movie, that is a work and a film, with Audrey Hepburn and actor of the movie, that is a work and a film, with Iliza Shlesinger.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v5 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/ontology/spouse> ?v3 . ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Step 1: Find Janusz Kamiński's spouse
SELECT ?spouse WHERE {
  dbpedia:Janusz_Kamiński dbo:spouse ?spouse .
}

# Step 2: Identify a film featuring both Audrey Hepburn and Iliza Shlesinger
SELECT DISTINCT ?film WHERE {
  ?film dbo:starring dbpedia:Audrey_Hepburn ;
        dbo:starring dbpedia:Iliza_Shlesinger .
}

# Assuming we find a film, let's say ""Breakfast at Tiffany's"" (as an example)
# Step 3: Find another actor from that film
SELECT DISTINCT ?actor WHERE {
  dbpedia:""Breakfast_at_Tiffany%27s"" dbo:starring ?actor .
  FILTER(?actor != dbpedia:Audrey_Hepburn && ?actor != dbpedia:Iliza_Shlesinger)
}

# Assuming we find an actor, let's say ""George Peppard""
# Step 4: Find the spouse of this actor
SELECT ?spouse WHERE {
  dbpedia:George_Peppard dbo:spouse ?spouse .
}
```",6,10,7,2,3,2,3,28,0,0,1,0,0.0,0
905,70,test,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and parent of the father, that is a royalty, of the spouse of Maria of Bytom and spouse of the father of Philip I, Prince of Taranto.","SELECT ?result WHERE { <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v0 <http://dbpedia.org/property/father> ?v5 . ?v6 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v3 . ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v5 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v1 <http://dbpedia.org/property/father> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT DISTINCT ?childOfChildRoyalty WHERE {
  # Step 1: Predecessor of Stephen V of Hungary
  ?stephenV foaf:surname ""Stephen V of Hungary""@en .
  ?predecessor dbo:spouse ?stephenV ;
              dbo:child ?royalChild .

  # Step 2: Child of the predecessor that is a royalty
  ?royalChild rdf:type dbo:Monarch .

  # Step 3: Father of the spouse of Maria of Bytom
  ?mariaOfBytom foaf:surname ""Maria of Bytom""@en .
  ?spouseOfMaria dbp:spouse ?mariaOfBytom ;
                 dbo:child ?fatherOfSpouse .
  ?fatherOfSpouse rdf:type dbo:Monarch .

  # Step 4: Father of Philip I, Prince of Taranto
  ?philipI foaf:surname ""Philip I, Prince of Taranto""@en .
  ?fatherOfPhil dbp:child ?philipI ;
                rdf:type dbo:Monarch .

  # Step 5: Spouse of the father of Philip I, Prince of Taranto
  ?spouseOfFather dbp:spouse ?fatherOfPhil .

  # Step 6: Child of the child that is a royalty
  ?royalChild dbo:child ?grandchild .
  ?grandchild rdf:type dbo:Monarch ;
              foaf:name ?childOfChildRoyalty .

  # Step 7: Common link between steps 3 and 5, matching step 6
  FILTER(?fatherOfSpouse = ?spouseOfFather)
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
311,19,test,"Give me the associated musical artist of the associated musical artist, that is an artist, of R.E.M. and band member of the writer of the album, that is a musical work and a work and an album, of Sappy.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/property/writer> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Sappy> <http://dbpedia.org/ontology/album> ?v0 . <http://dbpedia.org/resource/R.E.M.> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
# Step 1: Find the writer of the album ""Sappy""
SELECT ?writer WHERE {
  ?album dct:title ""Sappy""@en .
  ?album dbo:artist ?artist .
  ?artist foaf:name ?name .
  FILTER regex(?name, ""Sappy"", ""i"") .
  ?artist dbo:associatedBandMember ?bandMember .
  ?bandMember foaf:name ?writerName .
  BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", REPLACE(LCASE(?writerName), "" "", ""_""))) AS ?writer)
}

# Step 2: Find a band member of the writer
SELECT ?bandMember WHERE {
  VALUES ?writer { <INSERT_WRITER_IRI_HERE> }
  ?writer dbo:associatedBandMember ?bandMember .
}

# Step 3: Find an associated musical artist with that band member
SELECT ?associatedArtist WHERE {
  VALUES ?bandMember { <INSERT_BAND_MEMBER_IRI_HERE> }
  ?bandMember dbo:associatedMusicalArtist ?associatedArtist .
}

# Step 4: Identify a band member of R.E.M.
SELECT ?remBandMember WHERE {
  ?rem dbo:member ?remBandMember .
  FILTER regex(?rem, ""R.E.M."", ""i"")
}

# Step 5: Find any common associated musical artist between the two identified artists
SELECT DISTINCT ?commonArtist WHERE {
  VALUES ?artist1 { <INSERT_ASSOCIATED_ARTIST_IRI_HERE> }
  VALUES ?artist2 { <INSERT_REM_BAND_MEMBER_IRI_HERE> }
  
  OPTIONAL { ?artist1 dbo:associatedMusicalArtist ?commonArtist . }
  OPTIONAL { ?artist2 dbo:associatedMusicalArtist ?commonArtist . }
  FILTER(?commonArtist != ?artist1 && ?commonArtist != ?artist2)
}
```

Note: Replace `<INSERT_WRITER_IRI_HERE>`, `<INSERT_BAND_MEMBER_IRI_HERE>`, `<INSERT_ASSOCIATED_ARTIST_IRI_HERE>`, and `<INSERT_REM_BAND_MEMBER_IRI_HERE>` with the actual IRIs obtained from previous query results.",5,9,6,3,2,3,2,20,0,0,1,0,0.0,0
80,69,test,Give me the professional in the alter ego of the series of The Golden Master and actor of the album of What You Know (T.I. song) and actor of the movie with the author of Smartbomb (book).,SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v3 <http://dbpedia.org/property/starring> ?v4 . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v7 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . ?v7 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v4 . },"```sparql
# Step 1: Find alter ego in ""The Golden Master"" series
SELECT ?person WHERE {
  ?series rdfs:label ""The Golden Master""@en .
  ?alterEgo dbo:characterName ?name ;
            dbo:actor ?person .
}

UNION

# Step 2: Find actor of the album ""What You Know"" by T.I.
SELECT ?actor WHERE {
  ?song dbo:title ""What You Know""@en ;
        dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> .
  ?musicVideo dbo:song ?song ;
              dbo:starring ?actor .
}

UNION

# Step 3: Find actor of a movie with the author of Smartbomb
SELECT ?movieActor WHERE {
  ?book dbo:title ""Smartbomb""@en ;
        dbo:author <http://dbpedia.org/resource/Douglas_Coupland> .
  ?movie dbo:writer ?book ;
         dbo:starring ?movieActor .
}

# Combine results to find the common professional
SELECT DISTINCT ?person WHERE {
  VALUES ?commonPerson { ?person1 ?person2 ?person3 }
  
  # Person from The Golden Master series
  {
    ?series rdfs:label ""The Golden Master""@en .
    ?alterEgo dbo:characterName ?name ;
              dbo:actor ?person1 .
  }

  # Actor of the album ""What You Know"" by T.I.
  UNION
  {
    ?song dbo:title ""What You Know""@en ;
          dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> .
    ?musicVideo dbo:song ?song ;
                dbo:starring ?person2 .
  }

  # Actor of a movie with the author of Smartbomb
  UNION
  {
    ?book dbo:title ""Smartbomb""@en ;
          dbo:author <http://dbpedia.org/resource/Douglas_Coupland> .
    ?movie dbo:writer ?book ;
           dbo:starring ?person3 .
  }
}
```",8,8,9,3,3,3,3,71,0,0,4,0,0.0,0
159,68,test,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/successor> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://xmlns.com/foaf/0.1/name> ?v7 . ?v5 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v0 <http://dbpedia.org/property/writer> ?v7 . ?v5 <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?successor ?conflict ?writer WHERE {
  # Find the war associated with Jean Baptist, Comte d'Arco
  ?person rdfs:label ""Jean Baptist, Comte d'Arco""@en .
  ?person dbo:commanderOf ?war .

  # Ensure the war is also a television show and societal event
  ?war dbo:wikiPageRedirects ?tvShow .
  ?tvShow dbo:wikiPageDisambiguates ?societalEvent .
  
  # Find successor who is a politician and office holder
  ?successor dbo:predecessor ?person ;
             dbo:officeHolder true ;
             dbo:politician true .

  # Find the military conflict associated with Michał Kazimierz Pac
  ?pac rdfs:label ""Michał Kazimierz Pac""@en .
  ?pac dbo:commanderOf ?conflict .

  # Reference to the writer of the work of George Ducas
  ?ducas rdfs:label ""George Ducas""@en .
  ?work dbo:author ?writer ;
        dbo:wikiPageRedirects ?ducas .
}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
119,69,test,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and tenant of the residence, that is a country, of Álvaro Quirós and office of the leader of the administration, that is an event, of Anxo Quintana.","SELECT ?result WHERE { <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v7 . ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v4 <http://dbpedia.org/property/leader> ?v3 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v7 . ?v3 <http://dbpedia.org/property/office> ?result . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenant WHERE {
  # Find the administration related to PSOE
  ?administration dbo:party dbr:Spanish_Socialist_Workers'_Party .
  
  # Find the country of residence for Álvaro Quirós
  ?country dbo:residence dbr:Álvaro_Quirós .
  
  # Identify the event where Anxo Quintana was a leader
  ?event dbo:leader dbr:Anxo_Quintana .
  
  # Find the tenant that connects these elements
  ?tenant dbo:administration ?administration ;
          dbo:countryOfResidence ?country ;
          dbo:eventLeader ?event .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
782,69,test,"Give me the reference to the real name of the band of Kim Wilson and band of the band member of Eric Clapton and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v4 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://dbpedia.org/ontology/bandMember> ?v7 . ?v4 <http://xmlns.com/foaf/0.1/name> ?v3 . ?v7 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band1 ?band2 ?artist WHERE {
  # Kim Wilson's band
  dbr:Kim_Wilson dbo:memberOf dbr:The_Fabulous_Thunderbirds .
  dbr:The_Fabulous_Thunderbirds rdfs:label ?band1 .

  # Eric Clapton's notable band member and their band
  dbr:Steve_Winwood dbo:memberOf dbr:Traffic ;
                    dbo:memberOf dbr:Blind_Faith .
  dbr:Traffic rdfs:label ?band2 .

  # Nick Curran's associated artist with the same birthplace
  dbr:Nick_Curran dbo:birthPlace ?birthPlace .
  ?artist dbo:birthPlace ?birthPlace ;
          dbo:associatedMusicalArtist dbr:Nick_Curran .
  
  FILTER (lang(?band1) = 'en' && lang(?band2) = 'en')
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
361,27,test,"Give me the professional in Actor and actor of the album, that is a film and a work, of Lasso the Moon and professional in the alter ego of The Shadow.","SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v2 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
# Step 1: Find the film or work related to ""Lasso the Moon""
SELECT ?film WHERE {
  ?film dbo:title ""Lasso the Moon""@en .
}

# Step 2: Find actors associated with this film or work
SELECT DISTINCT ?actor WHERE {
  ?film dbo:starring ?actor .
  FILTER EXISTS { ?film rdf:type dbo:Film . }
}

# Step 3: Identify who has an alter ego named ""The Shadow""
SELECT DISTINCT ?person WHERE {
  ?person dbo:alterEgo ?shadow .
  ?shadow rdfs:label ""The Shadow""@en .
}

# Step 4: Find the common professional
SELECT DISTINCT ?commonProfessional WHERE {
  VALUES (?actor) { (<film_actor_uri_1> <film_actor_uri_2> ... ) } # Replace with actual URIs from step 2
  VALUES (?person) { (<shadow_person_uri_1> <shadow_person_uri_2> ... ) } # Replace with actual URIs from step 3
  ?commonProfessional IN (?actor, ?person)
}
```

Note: The placeholders `<film_actor_uri_1>`, `<film_actor_uri_2>`, etc., and `<shadow_person_uri_1>`, `<shadow_person_uri_2>`, etc., need to be replaced with actual URIs obtained from the results of steps 2 and 3.",5,7,6,2,3,2,3,28,0,0,2,0,0.0,0
39,69,test,"Give me the professional in the profession of the producer of Coke Studio Philippines and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the alter ego of The Shadow.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v7 . ?v4 <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v7 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v4 . },"```sparql
# Step 1: Find Bob Thompson's birth name and profession
SELECT ?birthName WHERE {
  ?person foaf:name ""Bob Thompson (musician)"" .
  ?person dbo:birthName ?birthName .
}

SELECT ?profession WHERE {
  ?person foaf:name ""Bob Thompson (musician)"" .
  ?person dbo:occupation ?profession .
}

# Step 2: Find the producer of Coke Studio Philippines and their band
SELECT ?producer ?band WHERE {
  ?show dcterms:title ""Coke Studio Philippines"" ;
        dbo:producer ?producer .
  OPTIONAL { ?producer dbo:musicalArtist ?band }
}

# Step 3: Identify The Shadow's alter ego
SELECT ?alterEgo WHERE {
  ?person foaf:name ""The Shadow (character)"" .
  ?person dbo:alterEgo ?alterEgo .
}

# Step 4: Find the professional link among all elements
SELECT DISTINCT ?professional WHERE {
  VALUES (?name) { (""Bob Thompson (musician)"") (""Coke Studio Philippines"") (""The Shadow (character)"") }
  
  OPTIONAL {
    ?entity foaf:name ?name ;
            dbo:occupation ?professional .
  }

  FILTER(?professional = dbp:musician)
}
```",8,9,9,3,3,3,3,71,0,0,4,0,0.0,0
23,27,test,Give me the entity in the country of Daniel Elahi Galán and party of Roy Barreras and party of the father of Sofía Petro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v2 . ?result <http://dbpedia.org/ontology/country> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?entity WHERE {
  # Find the country of Daniel Elahi Galán
  ?galan a dbo:Person ;
         foaf:name ""Daniel Elahi Galán"" .
  ?galan dbo:nationality ?country .

  # Find the political party of Roy Barreras
  ?barreras a dbo:Person ;
            foaf:name ""Roy Barreras"" .
  ?barreras dbo:politicalParty ?partyBarreras .

  # Find the father of Sofía Petro and his political party
  ?sofia a dbo:Person ;
         foaf:name ""Sofía Petro"" .
  ?sofia foaf:parent ?father .
  ?father dbo:politicalParty ?partyFather .

  # Find an entity that matches all conditions
  ?entity dbo:nationality ?country ;
          dbo:politicalParty ?partyBarreras, ?partyFather .
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
905,68,test,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and child of the child, that is a royalty, of Béla IV of Hungary and parent of the father, that is a royalty, of the spouse of Maria of Bytom.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v6 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/property/father> ?v2 . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?result <http://dbpedia.org/property/father> ?v0 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v1 <http://dbpedia.org/property/father> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?spouse WHERE {
  # Step 1: Identify Philip, Despot of Romania
  ?philip dbo:title ""Despot of Romania""@en .
  ?philip foaf:name ""Philip"" .

  # Step 2: Find his parent who is royalty
  ?parent dbo:child ?philip ;
          dbo:positionTitle ?royalTitle .
  FILTER EXISTS { ?royalTitle rdfs:label ?title . FILTER regex(?title, ""King|Queen|Prince|Princess"", ""i"") }

  # Step 3: Determine the spouse of this royal parent
  ?spouse1 dbo:spouse ?parent .

  # Step 4: Identify Béla IV of Hungary and his child who is royalty
  ?belaIV dbo:title ""King of Hungary""@en ;
          foaf:name ""Béla IV"" .
  ?child2 dbo:parent ?belaIV ;
          dbo:positionTitle ?royalTitle2 .
  FILTER EXISTS { ?royalTitle2 rdfs:label ?title2 . FILTER regex(?title2, ""King|Queen|Prince|Princess"", ""i"") }

  # Step 5: Find the parent of this royal child
  ?parent2 dbo:child ?child2 .

  # Step 6: Identify the father of this parent who is royalty
  ?father2 dbo:child ?parent2 ;
           dbo:positionTitle ?royalTitle3 .
  FILTER EXISTS { ?royalTitle3 rdfs:label ?title3 . FILTER regex(?title3, ""King|Queen|Prince|Princess"", ""i"") }

  # Step 7: Determine the spouse of Maria of Bytom
  ?maria dbo:name ""Maria of Bytom"" .
  ?spouse3 dbo:spouse ?maria .

  # Step 8: Find the father of this spouse who is royalty
  ?father3 dbo:child ?spouse3 ;
           dbo:positionTitle ?royalTitle4 .
  FILTER EXISTS { ?royalTitle4 rdfs:label ?title4 . FILTER regex(?title4, ""King|Queen|Prince|Princess"", ""i"") }

  # Step 9: Finally, find the spouse of the father from step 3
  ?finalSpouse dbo:spouse ?parent .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
595,71,test,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v5 <http://dbpedia.org/property/author> ?v4 . ?v1 <http://dbpedia.org/property/author> ?v2 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v1 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v8 <http://dbpedia.org/ontology/commander> ?result . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v5 <http://dbpedia.org/property/author> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v7 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v7 <http://dbpedia.org/ontology/battle> ?v8 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
SELECT ?spouse WHERE {
  ?book dcterms:title ""Living History""@en .
  ?book dbo:author ?author .
  ?author foaf:name ""Hillary Rodham Clinton""@en .
  ?author dbo:spouse ?spouse .
  ?spouse a dbo:Politician ;
          dbo:officeHolder ?office .
  
  OPTIONAL {
    ?warEvent dbo:commander ?commander .
    ?commander foaf:name ""Woodrow Wilson""@en .
    ?ship dcterms:title ""USS Arcadia (ID-1605)""@en ;
          dbo:owner ?owner .
    FILTER(?owner = <http://dbpedia.org/resource/United_States>).
  }
  
  OPTIONAL {
    ?resident dbo:residenceLocation ?location .
    ?location foaf:name ""Chappaqua, New York""@en .
    ?resident foaf:name ""Bill Clinton""@en .
    ?work dcterms:title ""My Life""@en ;
          dbo:author ?resident .
  }
}
```",9,20,10,3,3,3,3,71,0,0,1,0,0.0,0
609,70,test,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of the author of the reference, that is American, to El Deafo.","SELECT ?result WHERE { ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://dbpedia.org/property/author> ?v3 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/governor> ?v7 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v7 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Step 1: Find Paulus Powell's birthplace
SELECT ?birthPlace WHERE {
  dbpedia:Paulus_Powell dbo:birthPlace ?birthPlace .
}

# Step 2: Identify the region and administrative region of that birthplace
SELECT ?region ?adminRegion WHERE {
  ?birthPlace rdf:type dbo:PopulatedPlace ;
              dbo:administrativeTerritory ?region ;
              dbo:partOf ?adminRegion .
}

# Step 3: Find the governor of that region
SELECT ?governor WHERE {
  ?region dbo:governmentHead ?governor .
  FILTER (rdf:type(?governor) = dbpedia:Politician)
}

# Step 4: Identify Vince Gilligan's awards and nominations
SELECT DISTINCT ?award WHERE {
  dbpedia:Vince_Gilligan dbo:awardReceived ?award .
}

# Step 5: Determine the birthplace of an awardee from those awards/nominations
SELECT ?awardeeBirthPlace WHERE {
  ?award dbo:recipient ?awardee .
  ?awardee dbo:birthPlace ?awardeeBirthPlace .
}

# Step 6: Identify the author of ""El Deafo""
SELECT ?author WHERE {
  dbpedia:El_Deafo dbo:author ?author .
}

# Step 7: Determine the American author's birthplace
SELECT ?authorBirthPlace WHERE {
  ?author rdf:type dbo:American ;
          dbo:birthPlace ?authorBirthPlace .
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
89,70,test,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of the parent of Min Hla Htut of Pyakaung and spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v4 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?result <http://dbpedia.org/ontology/spouse> ?v7 . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?v0 <http://dbpedia.org/property/father> ?v7 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v3 <http://dbpedia.org/property/father> ?v1 . },"```sparql
# Step 1: Identify Saw Min Phyu's spouse
SELECT ?spouse WHERE {
  wd:Q123456 wdt:P26 ?spouse .
}

# Step 2: Find the child of Saw Min Phyu's spouse who is royalty
SELECT ?child WHERE {
  ?spouse wdt:P40 ?child .
  ?child wdt:P31 wd:Q123789 . # Assuming Q123789 represents a royal title
}

# Step 3: Determine the parent of Min Hla Htut of Pyakaung
SELECT ?parent WHERE {
  wd:Q234567 wdt:P25 ?parent .
}

# Step 4: Find the spouse of this parent
SELECT ?spouse2 WHERE {
  ?parent wdt:P26 ?spouse2 .
}

# Step 5: Identify the child of this spouse who is royalty
SELECT ?child2 WHERE {
  ?spouse2 wdt:P40 ?child2 .
  ?child2 wdt:P31 wd:Q123789 . # Assuming Q123789 represents a royal title
}

# Step 6: Determine the predecessor of the child from step 2
SELECT ?predecessor WHERE {
  ?child wdt:P1365 ?predecessor .
}

# Step 7: Identify Saw Shwe Khet's child who is royalty
SELECT ?royalChild WHERE {
  wd:Q345678 wdt:P40 ?royalChild .
  ?royalChild wdt:P31 wd:Q123789 . # Assuming Q123789 represents a royal title
}

# Step 8: Find the father of this child who is royalty
SELECT ?father WHERE {
  ?royalChild wdt:P22 ?father .
  ?father wdt:P31 wd:Q123789 . # Assuming Q123789 represents a royal title
}

# Step 9: Determine the spouse of this father
SELECT ?spouse3 WHERE {
  ?father wdt:P26 ?spouse3 .
}

# Step 10: Identify the predecessor of the child from step 5
SELECT ?predecessor2 WHERE {
  ?child2 wdt:P1365 ?predecessor2 .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
263,27,test,"Give me the parent of the person born as Hon. Mary Frances Bowes-Lyon and parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne and native of Middlesex.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . ?v0 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . ?result <http://dbpedia.org/ontology/child> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parentName WHERE {
  ?person a dbo:Person ;
          foaf:name ""Mary Frances Bowes-Lyon""@en .
  ?person dbo:spouse ?spouse .
  OPTIONAL { ?spouse dbo:child ?child . }
  ?person dbo:parent ?parent .
  ?parent foaf:name ?parentName .
}
```",5,5,6,2,3,2,3,28,0,0,2,0,0.0,0
557,69,test,"Give me the professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and producer of the claim to fame, that is a work, of Cora Sue Collins.","SELECT ?result WHERE { ?v7 <http://dbpedia.org/ontology/producer> ?result . ?v4 <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/knownFor> ?v2 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/occupation> ?v3 . ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v4 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v7 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
# Step 1: Identify Kent Allard's alter ego
SELECT ?alterEgo WHERE {
  ?character rdfs:label ""Kent Allard""@en .
  ?character dbo:alterEgo ?alterEgo .
}

# Step 2: Find the claim to fame (movie) for Kent Allard's alter ego
SELECT ?movie WHERE {
  ?alterEgo dbo:film ?movie .
  FILTER NOT EXISTS { ?movie dbo:abstract ? }
}

# Step 3: Identify the actor of High Society Blues
SELECT ?actor WHERE {
  ?work rdfs:label ""High Society Blues""@en .
  ?work dbo:starring ?actor .
}

# Step 4: Find the claim to fame (work) for this actor
SELECT ?famousWork WHERE {
  ?actor dbo:film ?famousWork .
  FILTER NOT EXISTS { ?famousWork dbo:abstract ? }
}

# Step 5: Identify Cora Sue Collins' producer
SELECT ?producer WHERE {
  ?collins rdfs:label ""Cora Sue Collins""@en .
  ?collins dbo:producedBy ?producer .
}

# Step 6: Determine the professional connection
SELECT DISTINCT ?alterEgo ?movie WHERE {
  # Assuming we have identified the alter ego and movie from previous steps
  VALUES (?alterEgo) { <http://dbpedia.org/resource/Alter_Ego> } # Replace with actual URI
  VALUES (?movie) { <http://dbpedia.org/resource/Famous_Movie> } # Replace with actual URI

  ?actor dbo:film ?famousWork .
  ?collins dbo:producedBy ?producer .

  FILTER EXISTS {
    ?alterEgo dbo:film ?movie .
    ?actor rdfs:label ""Actor of High Society Blues""@en .
    ?collins rdfs:label ""Cora Sue Collins""@en .
  }
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
769,20,test,"Give me the player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on the birthday of Tony Hollings and player in the manager, that is a sports manager and a soccer manager, of the reference, that is an organisation and a sports club and a sports team and a soccer club, to Hong Kong C.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Tony_Hollings> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v4 <http://dbpedia.org/ontology/manager> ?v5 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v2 <http://dbpedia.org/ontology/team> ?result . ?v4 <http://xmlns.com/foaf/0.1/name> ""Hong Kong C""@en . ?v5 <http://dbpedia.org/ontology/team> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. }","```sparql
# Step 1: Find Tony Hollings' birthday
SELECT ?birthday WHERE {
  dbpedia:Tony_Hollings dbo:birthday ?birthday .
}

# Step 2: Find athletes born on the same day as Tony Hollings who are soccer players and sports managers
SELECT DISTINCT ?person WHERE {
  ?person dbo:birthday ?bday .
  FILTER(?bday = <BIRTHDAY_PLACEHOLDER>) # Replace with actual birthday from step 1
  ?person rdf:type dbpedia:SportsPerson .
  ?person dbo:sport dbpedia:Soccer .
  ?person dbo:occupation dbpedia:SportsManager .
}

# Step 3: Find the manager of Hong Kong C who is a sports manager and soccer manager
SELECT DISTINCT ?manager WHERE {
  dbpedia:Hong_Kong_C dbp:manager ?manager .
  ?manager rdf:type dbpedia:SportsManager .
  ?manager dbo:sport dbpedia:Soccer .
}

# Step 4: Find the common individual from steps 2 and 3
SELECT DISTINCT ?commonPerson WHERE {
  ?commonPerson IN (?person, ?manager) .
}
```

Note: Replace `<BIRTHDAY_PLACEHOLDER>` with the actual birthday obtained from step 1.",6,16,7,3,2,3,2,20,0,0,2,0,0.0,0
859,19,test,"Give me the associated musical artist of the associated musical artist of the member, that is a musical artist, of Khlyst (band) and band member of the associated musical artist, that is a band and a group and an organisation, of Burnt by the Sun (band).",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Khlyst_(band)> <http://dbpedia.org/ontology/bandMember> ?v0 . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/Burnt_by_the_Sun_(band)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
# Step 1: Find a member of Khlyst who is also a musical artist
SELECT ?member WHERE {
    ?band dbr:Khlyst .
    ?band dbo:bandMember ?member .
    ?member dbo:occupation dbp:musician .
}

# Assuming we have identified a member, let's call them ?member1

# Step 2: Find the associated musical artist of this member
SELECT ?associatedArtist WHERE {
    ?member1 dbo:associatedMusicalArtist ?associatedArtist .
}

# Assuming we have found an associated artist, let's call them ?artist1

# Step 3: Identify Burnt by the Sun and its associated band/group/organization
SELECT ?associatedBand WHERE {
    ?band dbr:Burnt_by_the_Sun_(band) .
    ?band dbo:associatedBandOrGroup ?associatedBand .
    ?associatedBand rdf:type dbp:band ;
                   rdf:type dbp:musical_group ;
                   rdf:type dbp:organisation .
}

# Assuming we have identified an associated band, let's call them ?band2

# Step 4: Find a member of this associated band who is a musical artist
SELECT ?member2 WHERE {
    ?band2 dbo:bandMember ?member2 .
    ?member2 dbo:occupation dbp:musician .
}

# Assuming we have identified a member, let's call them ?member2

# Step 5: Determine the associated musical artist of this member
SELECT ?finalArtist WHERE {
    ?member2 dbo:associatedMusicalArtist ?finalArtist .
}
```",5,9,6,3,2,3,2,20,0,0,5,0,0.0,0
557,68,test,"Give me the producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.","SELECT ?result WHERE { <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v5 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v7 . ?v7 <http://dbpedia.org/ontology/producer> ?result . ?v5 <http://dbpedia.org/property/alterEgo> ?v4 . ?v3 <http://dbpedia.org/ontology/producer> ?result . }","```sparql
# Step 1: Identify ""Johnny Doughboy""
SELECT ?actor WHERE {
  ?actor dbo:alterName ""Johnny Doughboy""@en .
}

# Step 2: Find the claim to fame of Johnny Doughboy
SELECT ?work WHERE {
  ?actor dbo:filmRole ?role .
  ?role dbo:characterName ?character .
  ?role dbo:inFilm ?work .
  FILTER(?actor = <URI_of_Johnny_Doughboys_actor>)
}

# Step 3: Identify ""Kent Allard (print)""
SELECT ?fictionalCharacter WHERE {
  ?fictionalCharacter rdfs:label ""Kent Allard""@en .
  ?fictionalCharacter dbo:portrayedBy ?actor .
}

# Step 4: Find the producer of Kent Allard's claim to fame
SELECT ?producer WHERE {
  ?work dbo:productionCompany ?company .
  ?company dbo:president ?producer .
  FILTER(?work = <URI_of_Kent_Allards_work>)
}

# Step 5: Identify the claim to fame of Janet Gaynor
SELECT ?movie WHERE {
  ?actor dbo:filmRole ?role .
  ?role dbo:inFilm ?movie .
  FILTER(?actor = <URI_of_Janet_Gaynor>)
}

# Step 6: Find the common producer
SELECT DISTINCT ?producer WHERE {
  # Producer of Johnny Doughboy's claim to fame
  ?work1 dbo:productionCompany ?company1 .
  ?company1 dbo:president ?producer .

  # Producer of Janet Gaynor's claim to fame
  ?movie dbo:productionCompany ?company2 .
  ?company2 dbo:president ?producer .

  FILTER(?work1 = <URI_of_Johnny_Doughboys_work> && ?movie = <URI_of_Janet_Gaynors_movie>)
}
```

Note: Replace `<URI_of_Johnny_Doughboys_actor>`, `<URI_of_Kent_Allards_work>`, `<URI_of_Janet_Gaynor>`, `<URI_of_Johnny_Doughboys_work>`, and `<URI_of_Janet_Gaynors_movie>` with the actual URIs obtained from previous query results.",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
203,70,test,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and military force of the war, that is a military conflict and an event, of the reference to William Bayne and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.","SELECT ?result WHERE { ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/battle> ?v7 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/ontology/commander> ?v1 . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v4 . ?v4 <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v7 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . }","```sparql
# Step 1: Find William Bayne's associated war
SELECT ?war WHERE {
  ?bayne dbo:reference ""William Bayne"" .
  ?bayne dbo:commanderInWar ?war .
}

# Step 2: Identify the commander of that war who commanded the 30th (Cambridgeshire) Regiment of Foot
SELECT ?commander WHERE {
  ?war dbo:commander ?commander .
  ?commander dbo:militaryForce ""30th (Cambridgeshire) Regiment of Foot"" .
}

# Step 3: Find the military conflict associated with this regiment
SELECT ?militaryConflict WHERE {
  ?regiment dbo:name ""30th (Cambridgeshire) Regiment of Foot"" .
  ?regiment dbo:partOfMilitaryConflict ?militaryConflict .
}

# Step 4: Identify the awardee of Knight Commander of the Order of the Bath associated with a societal event and military force
SELECT ?awardee WHERE {
  ?awardee dbo:award ""Knight Commander of the Order of the Bath"" .
  ?awardee dbo:societalEvent ?societalEvent .
  ?awardee dbo:militaryForce ?militaryForce .
}

# Step 5: Determine the military force associated with this awardee
SELECT ?finalMilitaryForce WHERE {
  ?awardee dbo:militaryForce ?finalMilitaryForce .
}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
39,70,test,"Give me the professional in the profession of Sam Concepcion and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/alterEgo> ?v7 . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v7 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?professionalInSamConcepcion ?bandOfPersonBorn ?birthNameBobThompson ?alterEgoWalterBGibson
WHERE {
  # Sam Concepcion's profession
  dbr:Sam_Concepcion dbo:profession ?professionalInSamConcepcion .

  # Band associated with Sam Concepcion
  ?person dbo:birthPlace ?place .
  ?person dbo:band ?bandOfPersonBorn .
  FILTER(?person = dbr:Sam_Concepcion) .

  # Bob Thompson's birth name
  dbr:Bob_Thompson_(musician) dbo:birthName ?birthNameBobThompson .

  # Walter B. Gibson's creation and alter ego
  dbr:Walter_B._Gibson dbo:created ?fictionalCharacter .
  ?fictionalCharacter a dbo:FictionalCharacter ;
                     dbo:alterEgo ?alterEgoWalterBGibson .
}
```",8,11,9,3,3,3,3,71,0,0,4,0,0.0,0
737,68,test,"Give me the predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria and child of the child, that is a royalty, of Archduke Charles Louis of Austria and child of the child of the child of Alexander of Württemberg (1804-1881).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> ?v4 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v4 <http://dbpedia.org/property/father> ?v5 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v3 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v5 . ?result <http://dbpedia.org/ontology/parent> ?v7 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v7 <http://dbpedia.org/property/father> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?individual WHERE {
  # Step 1: Archduchess Helena of Austria's spouse who is a royalty and their child
  ?spouse dbo:spouse dbr:Archduchess_Helena_of_Austria ;
          rdf:type dbo:Monarch .
  ?child dbo:parent ?spouse .

  # Step 2: Predecessor (parent) of this child
  ?predecessor1 dbo:child ?child .

  # Step 3: Archduke Charles Louis of Austria's child who is a royalty and their child
  ?charlesChild dbo:parent dbr:Archduke_Charles_Louis_of_Austria ;
                rdf:type dbo:Monarch .
  ?grandchildCharles dbo:parent ?charlesChild .

  # Step 4: Predecessor (parent) of this grandchild
  ?predecessor2 dbo:child ?grandchildCharles .

  # Step 5: Alexander of Württemberg's child who is a royalty and their child, then the next child
  ?alexanderChild dbo:parent dbr:Aleksandr_of_W%C3%BCrttemberg ;
                  rdf:type dbo:Monarch .
  ?grandchildAlexander dbo:parent ?alexanderChild .
  ?greatGrandchildAlexander dbo:parent ?grandchildAlexander .

  # Step 6: Check if all predecessors are the same individual
  FILTER (?predecessor1 = ?predecessor2 && ?predecessor1 = ?greatGrandchildAlexander)
  
  # Return this individual
  BIND(?predecessor1 AS ?individual)
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
557,70,test,"Give me the producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and professional in the alter ego of The Shadow and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy.",SELECT ?result WHERE { ?v7 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v7 . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v3 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v1 <http://dbpedia.org/ontology/knownFor> ?v3 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Find Bramwell Fletcher's claim to fame and its producer
SELECT ?movie WHERE {
  wd:Q123456 wdt:P161 wd:Q789012 . # Bramwell Fletcher (actor of High Society Blues) has occupation actor
  wd:Q789012 wdt:P136 wd:Q987654 .   # The Shadow is a work by Bramwell Fletcher
  wd:Q987654 wdt:P577 ?date .        # The Shadow's release date
  OPTIONAL { wd:Q987654 wdt:P345 ?producer } # Producer of The Shadow
}

UNION

SELECT ?work WHERE {
  wd:Q123456 wdt:P161 wd:Q789012 .   # Bramwell Fletcher (actor of High Society Blues) has occupation actor
  wd:Q789012 wdt:P136 ?movie .       # Movies by Bramwell Fletcher
  OPTIONAL { ?movie wdt:P345 ?producer } # Producer of the movie
}

UNION

# Find James Cagney's claim to fame and its producer
SELECT ?work WHERE {
  wd:Q654321 wdt:P161 wd:Q987654 .   # James Cagney (actor of Johnny Doughboy) has occupation actor
  wd:Q987654 wdt:P136 wd:Q345678 .   # White Heat is a work by James Cagney
  OPTIONAL { wd:Q345678 wdt:P345 ?producer } # Producer of White Heat
}

# Filter to find common producer
FILTER(?producer = wd:Q123456) # RKO Pictures
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
386,27,test,Give me the war of the awardee of Golden Sword for Bravery and entity in Russian Empire and war of the awardee of 25.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?recipient ?war1 ?war2 WHERE {
  # Find recipients of the Golden Sword for Bravery and their associated wars
  ?recipient dbo:award dbr:Golden_Sword_for_Bravery .
  OPTIONAL { ?recipient dbo:militaryConflict ?war1 . }

  # Find recipients of an award with number 25 and their associated wars
  ?recipient dbo:award ?award25 .
  FILTER (STRSTARTS(STR(?award25), ""Award_25"")) 
  OPTIONAL { ?recipient dbo:militaryConflict ?war2 . }
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
103,67,test,"Give me the actor of Dispatches from Elsewhere and professional in the profession of the actor, that is a politician, of Ab Kya Hoga and professional in the alter ego of the series, that is a comics character, of The Shadow (video game).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v6 . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . ?v0 <http://dbpedia.org/property/occupation> ?v6 . },"```sparql
# Step 1: Find the actor of ""Dispatches from Elsewhere""
SELECT ?dispatchActor WHERE {
    ?series dcterms:title ""Dispatches from Elsewhere""@en .
    ?series dbo:starring ?dispatchActor .
}

# Step 2: Find the politician actor of ""Ab Kya Hoga""
SELECT ?abKyaHogaPolitician WHERE {
    ?film dcterms:title ""Ab Kya Hoga""@en .
    ?film dbo:starring ?actor .
    ?actor dbo:profession dbp:politician .
}

# Step 3: Find the comics character alter ego in ""The Shadow (video game)""
SELECT ?comicsCharacter WHERE {
    ?game dcterms:title ""The Shadow (video game)""@en .
    ?game dbo:character ?alterEgo .
    ?alterEgo dbo:wikiPageRedirects dbp:The_Shadow .
}

# Step 4: Find the actor from Dispatches who is also a politician and matches the comics character
SELECT DISTINCT ?actor WHERE {
    # Actor of ""Dispatches from Elsewhere""
    ?series dcterms:title ""Dispatches from Elsewhere""@en .
    ?series dbo:starring ?actor .

    # Politician actor of ""Ab Kya Hoga""
    ?film dcterms:title ""Ab Kya Hoga""@en .
    ?film dbo:starring ?abKyaHogaPolitician .
    ?abKyaHogaPolitician dbo:profession dbp:politician .

    # Comics character alter ego in ""The Shadow (video game)""
    ?game dcterms:title ""The Shadow (video game)""@en .
    ?game dbo:character ?alterEgo .
    ?alterEgo dbo:wikiPageRedirects dbp:The_Shadow .

    FILTER (?actor = ?abKyaHogaPolitician)
}
```",7,9,8,3,3,3,3,71,0,0,2,0,0.0,0
628,67,test,"Give me the native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state) and person born as the birth name of the native, that is a musical artist, of Florida and band member of Uncle Murda.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://dbpedia.org/property/birthName> ?v6 . ?v1 <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://dbpedia.org/property/birthName> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . },"```sparql
# Step 1: Find musical artists born in Florida who are band members of Uncle Murda
SELECT ?person WHERE {
    ?person dbo:nationality dbr:United_States ;
            dbo:birthPlace dbr:Florida ;
            dbo:occupation dbr:Musical_artist .
    ?bandMember rdf:type dbr:Band_member ;
                rdfs:label ""Uncle Murda""@en ;
                dbo:member ?person .
}

# Step 2: Get the birth name of these individuals
SELECT DISTINCT ?birthName WHERE {
    ?person dbo:birthName ?birthName .
    # Use results from step 1 to filter ?person
}

# Step 3: Find award recipients with matching birth names
SELECT DISTINCT ?awardRecipient WHERE {
    ?awardRecipient foaf:name ?birthName .
    # Use results from step 2 to filter ?birthName
}

# Step 4: Determine the native region of these awards
SELECT DISTINCT ?nativeRegion WHERE {
    ?award dbo:native dbr:?nativeRegion ;
           rdf:type dbo:Award .
    ?awardRecipient dbo:receivedAward ?award .
    # Use results from step 3 to filter ?awardRecipient
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
595,68,test,"Give me the commander in the war, that is a disease and a societal event, of United States Navy and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York.","SELECT ?result WHERE { ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v3 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v7 <http://dbpedia.org/property/author> ?v0 . ?v5 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v7 <http://dbpedia.org/property/author> ?result . ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v5 <http://dbpedia.org/property/author> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  # Hillary Clinton's book
  dbr:Hard_Choices dbo:author dbr:Hillary_Clinton .
  
  # Spouse of the author (Hillary Clinton)
  dbr:Hillary_Clinton dbo:spouse dbr:Bill_Clinton .

  # Bill Clinton's roles and residence
  dbr:Bill_Clinton a dbo:Politician ;
                  dbo:officeHolderOf dbr:United_States_President ;
                  dbo:residence dbr:Chappaqua, New_York .
  
  # War during his presidency
  ?war dbo:participatingCountry dbr:United_States ;
       dbo:commanderInChief dbr:Bill_Clinton .

  # Commander in the U.S. Navy for that war
  ?war dbo:nationality dbr:United_States_Navy .
  ?commander a dbo:NavyOfficer ;
             dbo:commanderInChief ?war .
}
```",8,19,9,3,3,3,3,71,0,0,1,0,0.0,0
89,67,test,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and child of Saw Min Hla and predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v6 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?result <http://dbpedia.org/ontology/spouse> ?v6 . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?spouseOfFather WHERE {
  # Step 1: Find Saw Shwe Khet's child who is royalty
  ?child dbo:parent dbr:Saw_Shwe_Khet .
  ?child a dbo:Monarch .

  # Step 2: Find the spouse of this royal child
  ?spouse dbo:spouse ?child .
  ?spouse a dbo:Monarch .

  # Step 3: Find the father of this royal spouse and his spouse who is royalty
  ?father dbo:parent ?spouse .
  ?royalSpouseOfFather dbo:spouse ?father .
  ?royalSpouseOfFather a dbo:Monarch .

  # Step 4: Find the predecessor of the child of the royal spouse identified in step 3
  ?childOfRoyalSpouse dbo:parent ?royalSpouseOfFather .
  ?predecessor dbo:succeededBy ?childOfRoyalSpouse .
  
  # Return the spouse of the father from step 3
  BIND(?royalSpouseOfFather AS ?spouseOfFather)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
293,70,test,"Give me the party member of the ruling party in Central, Louisiana and spouse of the actor of the product, that is a film, of Nat Levine and person born as the birth name of the parent of Tisha Sterling.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v0 <http://dbpedia.org/property/starring> ?v7 . ?v7 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/ontology/party> ?v4 . ?result <http://dbpedia.org/property/birthName> ?v3 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . }","```sparql
# Step 1: Find the ruling party in Central, Louisiana
SELECT ?party WHERE {
  ?location rdfs:label ""Central, Louisiana""@en .
  ?location dbo:government ?government .
  ?government dbo:politicalParty ?party .
}

# Step 2: Identify members of that party and their spouses who are actors
SELECT DISTINCT ?member ?spouse WHERE {
  ?member dbo:memberOf ?party .
  ?member dbo:spouse ?spouse .
  ?spouse rdf:type dbo:Actor .
}

# Step 3: Find films produced by Nat Levine
SELECT ?film WHERE {
  ?film dbo:producer ""Nat Levine""@en .
}

# Step 4: Identify actors from those films
SELECT DISTINCT ?actor WHERE {
  ?film dbo:starring ?actor .
}

# Step 5: Determine Tisha Sterling's parent and their birth name
SELECT ?parent ?birthName WHERE {
  ?tisha foaf:name ""Tisha Sterling""@en ;
         dbo:childOf ?parent .
  ?parent foaf:name ?birthName .
}

# Step 6: Find a person born with that birth name
SELECT DISTINCT ?person WHERE {
  ?person foaf:name ?birthName .
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
80,70,test,"Give me the actor of the movie with  and actor of the album of the work, that is a song and a musical work, of T.I. and professional in the alter ego of the series of The Golden Master.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v7 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v4 <http://dbpedia.org/property/starring> """"@en . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://dbpedia.org/ontology/album> ?v7 . ?v4 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Step 1: Identify T.I.'s work that is both a song and a musical work
SELECT ?work WHERE {
  ?work dbo:artist dbr:T.I. ;
        rdf:type dbo:Songs .
}

# Step 2: Find the album associated with this work
SELECT ?album WHERE {
  ?work dbo:fromAlbum ?album .
  FILTER(?work IN ({?work})) # Replace {?work} with the result from step 1
}

# Step 3: Identify an actor from this album (assuming there might be a featured artist)
SELECT DISTINCT ?actor WHERE {
  ?album dbo:featuredArtist ?actor .
  FILTER(?album IN ({?album})) # Replace {?album} with the result from step 2
}

# Step 4: Identify The Golden Master series and its alter ego
SELECT ?series ?alterEgo WHERE {
  ?series rdfs:label ""The Golden Master""@en ;
          dbo:character ?alterEgo .
  FILTER(CONTAINS(LCASE(?alterEgo), ""alter ego"")) # Assuming the alter ego is mentioned in the character description
}

# Step 5: Find the actor of this alter ego
SELECT DISTINCT ?actor WHERE {
  ?alterEgo dbo:portrayedBy ?actor .
  FILTER(?alterEgo IN ({?alterEgo})) # Replace {?alterEgo} with the result from step 4
}
```",8,10,9,3,3,3,3,71,0,0,4,0,0.0,0
143,20,test,"Give me the associated musical artist of the person born as the birth name of Cynthia Morgan and actor of the show, that is a movie, with the reference to Afeez Oyetoro.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/property/birthName> ?v4 . ?v5 <http://dbpedia.org/property/birthName> ?v4 . ?v2 <http://dbpedia.org/property/starring> ?result . ?v1 <http://xmlns.com/foaf/0.1/name> ""Afeez Oyetoro""@en . ?v2 <http://dbpedia.org/ontology/starring> ?v1 . }","```sparql
# Step 1: Find Cynthia Morgan's birth name
SELECT ?birthName WHERE {
  wd:Q1234567 foaf:name ""Cynthia Morgan""@en .
  wd:Q1234567 schema:birthName ?birthName .
}

# Step 2: Identify the movie/show Afeez Oyetoro acted in
SELECT ?movie WHERE {
  wd:Q654321 foaf:name ""Afeez Oyetoro""@en .
  ?movie dbo:starring wd:Q654321 .
  ?movie rdf:type dbo:Film .
}

# Step 3: Find associated musical artist with both the birth name and the movie/show
SELECT DISTINCT ?artist WHERE {
  # Assuming we have found Cynthia Morgan's birth name as ""Cynthia"" and the movie as ""MovieTitle""
  ?artist dbo:associatedWith wd:Q1234567 . # Associated with Cynthia Morgan
  ?artist dbo:associatedWith ?movie .     # Associated with the movie/show Afeez Oyetoro acted in
}
```

Note: Replace `wd:Q1234567` and `wd:Q654321` with the actual DBpedia IDs for Cynthia Morgan and Afeez Oyetoro, respectively. Also, replace `""MovieTitle""` with the actual title of the movie/show once identified.",6,7,7,3,2,3,2,20,0,0,1,0,0.0,0
258,20,test,"Give me the alma mater of the person born, that is a politician, as the birth name of Eleonora Menicucci and establishment of the founding date of the alma mater, that is a university and an organisation and an educational institution, of Luiza Erundina.",SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/property/birthName> ?v4 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>. ?v5 <http://dbpedia.org/ontology/almaMater> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. ?v1 <http://dbpedia.org/ontology/foundingDate> ?v2 . ?result <http://dbpedia.org/ontology/foundingDate> ?v2 . <http://dbpedia.org/resource/Luiza_Erundina> <http://dbpedia.org/ontology/almaMater> ?v1 . ?v5 <http://dbpedia.org/property/birthName> ?v4 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?eleonoraAlmaMater ?luizaAlmaMater ?eleonoraAlmaMaterFoundingDate ?luizaAlmaMaterFoundingDate
WHERE {
  # Eleonora Menicucci's alma mater
  dbr:Eleonora_Menicucci dbo:birthName ?eleonoraBirthName .
  ?eleonoraEducation dbo:alumnus dbr:Eleonora_Menicucci ;
                     dbo:educationalInstitution ?eleonoraAlmaMater .
  
  # Luiza Erundina's alma mater
  ?luizaEducation dbo:alumnus dbr:Luiza_Erundina ;
                  dbo:educationalInstitution ?luizaAlmaMater .

  # Ensure the alma maters are universities, organizations, and educational institutions
  ?eleonoraAlmaMater a dbo:University ;
                    a dbo:Organisation ;
                    a dbo:EducationalOrganization .
  
  ?luizaAlmaMater a dbo:University ;
                 a dbo:Organisation ;
                 a dbo:EducationalOrganization .

  # Retrieve founding dates of the universities
  ?eleonoraAlmaMater dbp:foundingDate ?eleonoraAlmaMaterFoundingDate .
  ?luizaAlmaMater dbp:foundingDate ?luizaAlmaMaterFoundingDate .
}
```",6,10,7,3,2,3,2,20,0,0,1,0,0.0,0
78,27,test,"Give me the associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack) and associated musical artist of Stuart Tosh and band member of the associated musical artist of David Paton.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
# Step 1: Find the writer(s) of ""Wizards of Waverly Place"" soundtrack who are also musical artists
SELECT ?writer WHERE {
  ?soundtrack dbo:workExample ?song .
  ?soundtrack rdfs:label ""Wizards of Waverly Place (soundtrack)""@en .
  ?song dbo:composer ?writer .
  ?writer a dbo:MusicalArtist .
}

# Step 2: Find associated musical artists for the writer(s) from step 1
SELECT DISTINCT ?associatedArtist WHERE {
  VALUES ?writer { <URI_of_writer> } # Replace with actual URI found in step 1
  ?association dbo:associatedWith ?writer ;
               dbo:associatedWith ?associatedArtist .
  ?associatedArtist a dbo:MusicalArtist .
}

# Step 3: Find Stuart Tosh's associated musical artist
SELECT DISTINCT ?stuartAssociatedArtist WHERE {
  ?association dbo:associatedWith <URI_of_Stuart_Tosh> ; # Replace with actual URI of Stuart Tosh
               dbo:associatedWith ?stuartAssociatedArtist .
  ?stuartAssociatedArtist a dbo:MusicalArtist .
}

# Step 4: Find David Paton's associated musical artist and its band members
SELECT DISTINCT ?bandMember WHERE {
  ?association dbo:associatedWith <URI_of_David_Paton> ; # Replace with actual URI of David Paton
               dbo:associatedWith ?davidAssociatedArtist .
  ?davidAssociatedArtist a dbo:MusicalArtist ;
                         dbo:member ?bandMember .
}

# Combine results to find the intersection or connection
SELECT DISTINCT ?finalResult WHERE {
  VALUES ?writer { <URI_of_writer> } # Replace with actual URI found in step 1
  ?association1 dbo:associatedWith ?writer ;
                dbo:associatedWith ?artistFromWriter .
  ?association2 dbo:associatedWith <URI_of_Stuart_Tosh> ;
                dbo:associatedWith ?stuartAssociatedArtist .
  ?association3 dbo:associatedWith <URI_of_David_Paton> ;
                dbo:associatedWith ?davidAssociatedArtist .
  ?davidAssociatedArtist dbo:member ?bandMember .
  
  FILTER (?artistFromWriter = ?stuartAssociatedArtist && ?artistFromWriter = ?bandMember)
}
```

Note: Replace `<URI_of_writer>`, `<URI_of_Stuart_Tosh>`, and `<URI_of_David_Paton>` with the actual URIs obtained from initial queries.",5,7,6,2,3,2,3,28,0,0,2,0,0.0,0
258,19,test,"Give me the alma mater of the person born, that is a politician, as the birth name of Eleonora Menicucci and establishment of the founding date of Federal University of Paraíba.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/ontology/foundingDate> ?v2 . <http://dbpedia.org/resource/Federal_University_of_Paraíba> <http://dbpedia.org/ontology/foundingDate> ?v2 . ?v4 <http://dbpedia.org/ontology/almaMater> ?result . ?v4 <http://dbpedia.org/property/birthName> ?v0 . },"```sparql
# Query to get Eleonora Menicucci's birth name and alma mater
SELECT ?birthName ?almaMater WHERE {
  ?person foaf:name ""Eleonora Menicucci""@en .
  ?person dbo:birthName ?birthName .
  OPTIONAL { 
    ?education dbo:student ?person ;
               dbo:educationalInstitution ?almaMater .
  }
}

# Query to get the founding date of Federal University of Paraíba
SELECT ?foundingDate WHERE {
  dbpedia-pt:Federal_University_of_Paraíba dbo:foundingDate ?foundingDate .
}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
78,28,test,"Give me the associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh and band member of the associated musical artist of David Paton and associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v5 . }","```sparql
# Step 1: Find Stuart Mcbeath Tosh's (Stuart Adamson) band
SELECT ?band WHERE {
  wd:Q123456 wdt:P106 wd:Q33999; # Stuart Adamson is a musician
  wdt:P46 ?band. # Stuart Adamson was a member of this band
}

# Step 2: Find David Paton's associated band
SELECT ?band WHERE {
  wd:Q654321 wdt:P106 wd:Q33999; # David Paton is a musician
  wdt:P46 ?band. # David Paton was a member of this band
}

# Step 3: Identify the common band (Big Country)
SELECT DISTINCT ?commonBand WHERE {
  { SELECT ?band WHERE { ... } } AS ?stuartBand
  { SELECT ?band WHERE { ... } } AS ?davidPatonBand
  VALUES (?commonBand) {(wd:Q1234567)} # Assuming Big Country is Q1234567
  FILTER(?stuartBand = ?commonBand && ?davidPatonBand = ?commonBand)
}

# Step 4: Find the writer of Wizards of Waverly Place soundtrack who is also a musical artist
SELECT ?writer WHERE {
  wd:Q987654 wdt:P50 wd:Q1234567; # Q987654 is associated with Wizards of Waverly Place soundtrack
  wdt:P106 wd:Q33999; # The writer is a musician
  wdt:P800 ?artist. # The writer is also an artist
}

# Step 5: Find the associated musical artist of the identified writer
SELECT ?associatedArtist WHERE {
  ?writer wdt:P46 ?associatedArtist.
}
```",6,9,7,2,3,2,3,28,0,0,2,0,0.0,0
345,9,test,"Give me the reference to the name of Mitaka, Tokyo and region of the time zone of Japan.","SELECT ?result WHERE { <http://dbpedia.org/resource/Japan> <http://dbpedia.org/property/timeZone> ?v3 . <http://dbpedia.org/resource/Mitaka,_Tokyo> <http://xmlns.com/foaf/0.1/name> ?v1 . ?result <http://dbpedia.org/ontology/timeZone> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?mitakaName ?region ?timeZone
WHERE {
  # Find Mitaka in Tokyo
  dbr:Mitaka a dbo:PopulatedPlace ;
             rdfs:label ?mitakaName ;
             dbo:partOf dbr:Tokyo .
  
  # Get the region of Tokyo
  dbr:Tokyo dbo:region dbr:Kantō .

  # Find the time zone for Japan
  dbr:Japan dbo:timeZone dbr:Japan_Standard_Time ;
            rdfs:label ?timeZone .
}
```",4,4,5,2,2,2,2,9,0,0,1,0,0.0,0
353,70,test,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v7 <http://dbpedia.org/property/father> ?v0 . ?v7 <http://dbpedia.org/property/father> ?result . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?childOfChild WHERE {
  # Step 1: Identify Constance of Burgundy's spouse
  ?constance a dbo:Person ;
             foaf:name ""Constance of Burgundy""@en .
  ?spouse dbo:spouse ?constance .

  # Step 2: Find the child of the spouse
  ?child dbo:parent ?spouse .

  # Step 3: Determine the child of that child
  ?grandChild dbo:parent ?child .

  # Step 4: Identify royalty among these descendants
  ?royalGrandChild a dbo:RoyalFamily ;
                   rdfs:label ?label .
  FILTER CONTAINS(LCASE(?label), ""royalty"") .
  ?royalGrandChild dbo:parent ?grandChild .

  # Step 5: Find the reference related to William I
  ?reference a dbo:Person ;
             dbo:officeHolder ?office ;
             dbo:spouse ?williamI .
  ?williamI rdfs:label ""William I""@en .
  FILTER CONTAINS(LCASE(?office), ""royalty"") .

  # Step 6: Determine the child of this reference
  ?childOfReference dbo:parent ?reference .

  # Step 7: Identify royalty among these children
  ?royalChildOfReference a dbo:RoyalFamily ;
                         rdfs:label ?label2 .
  FILTER CONTAINS(LCASE(?label2), ""royalty"") .
  ?royalChildOfReference dbo:parent ?childOfReference .

  # Step 8: Find Roger III's parent
  ?rogerIII dbo:parent ?parentOfRogerIII ;
           rdfs:label ""Roger III, Duke of Apulia""@en .

  # Final step: Link the child of royalty to be a father and related through lineage
  ?childOfChild dbo:parent ?royalGrandChild .
  ?childOfChild dbo:father ?royalChildOfReference .
  ?childOfChild dbo:parent ?parentOfRogerIII .
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
492,28,test,Give me the death place of the actor of Aladdin (1958 film) and death place of the actor of Color Me Dead and death place of the actor of The Sky Ranger (1928 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v5 . ?v5 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v3 . ?v3 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for Buddy Ebsen's death place
SELECT ?deathPlace WHERE {
  wd:Q123456 dbr:Aladdin_(1958_film) . # Assuming Q123456 is the DBpedia ID for Buddy Ebsen
  wd:Q123456 dbo:spouse ?spouse .
  wd:Q123456 dbo:deathPlace ?deathPlace .
}

# Query for George Raft's death place
SELECT ?deathPlace WHERE {
  wd:Q654321 dbr:Color_Me_Dead . # Assuming Q654321 is the DBpedia ID for George Raft
  wd:Q654321 dbo:deathPlace ?deathPlace .
}

# Query for Douglas Fairbanks' death place
SELECT ?deathPlace WHERE {
  wd:Q789012 dbr:The_Sky_Ranger_(1928_film) . # Assuming Q789012 is the DBpedia ID for Douglas Fairbanks
  wd:Q789012 dbo:deathPlace ?deathPlace .
}
```

Note: The actual DBpedia IDs (e.g., `wd:Q123456`) need to be replaced with the correct identifiers for Buddy Ebsen, George Raft, and Douglas Fairbanks. These can be found by searching their names in DBpedia.",6,6,7,2,3,2,3,28,0,0,1,0,0.0,0
737,71,test,"Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> ?v4 . ?v8 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> ?v5 . ?v4 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v2 <http://dbpedia.org/property/father> ?v1 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v7 . ?v8 <http://dbpedia.org/property/father> ?v7 . <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v1 . },"```sparql
# Step 1: Find Alexander of Württemberg's great-great-grandchild
SELECT ?greatGreatGrandchild WHERE {
  ?alexander dbo:birthDate ""1804-01-01""^^xsd:date ;
             dbo:deathDate ""1881-12-30""^^xsd:date ;
             foaf:name ""Alexander of Württemberg""@en .
  ?child dbo:parent ?alexander ;
         dbo:spouse ?spouse .
  ?grandChild dbo:parent ?child .
  ?greatGrandChild dbo:parent ?grandChild .
  ?greatGreatGrandchild dbo:parent ?greatGrandChild .
  FILTER EXISTS { ?greatGreatGrandchild a dbo:Monarch . }
}

# Step 2: Find the child of the parent of Archduchess Margarete Sophie of Austria
SELECT ?royalDescendant WHERE {
  ?margareteSophie foaf:name ""Archduchess Margarete Sophie of Austria""@en .
  ?parent dbo:child ?margareteSophie .
  ?descendant dbo:parent ?parent ;
              dbo:spouse ?spouse .
  FILTER EXISTS { ?descendant a dbo:Monarch . }
}

# Step 3: Find the predecessor of the descendant from step 2
SELECT ?predecessor WHERE {
  ?royalDescendant dbo:successor ?currentRoyal .
  ?predecessor dbo:successor ?royalDescendant .
  FILTER EXISTS { ?predecessor a dbo:Monarch . }
}

# Step 4: Find the child of the spouse of Archduchess Helena of Austria
SELECT ?childOfSpouse WHERE {
  ?helena foaf:name ""Archduchess Helena of Austria""@en .
  ?spouse dbo:spouse ?helena ;
          dbo:child ?childOfSpouse .
  FILTER EXISTS { ?childOfSpouse a dbo:Monarch . }
}

# Step 5: Find the intersection
SELECT DISTINCT ?intersect WHERE {
  VALUES ?greatGreatGrandchild { ?gggChild } # Replace with actual variable from step 1
  VALUES ?predecessor { ?pred } # Replace with actual variable from step 3
  FILTER (?greatGreatGrandchild = ?predecessor)
}
```",9,11,10,3,3,3,3,71,0,0,1,0,0.0,0
375,27,test,Give me the war of the child of Toyotomi Hideyoshi and war of the person born as Koichirō and entity in Japan.,"SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/birthName> ""Koichirō""@en . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . ?v3 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?warToyotomiHideyori ?warTokugawaIeyasu WHERE {
  # Toyotomi Hideyoshi's child and associated war
  dbr:Toyotomi_Hideyori dbo:spouse ?parent .
  ?parent rdfs:label ""Toyotomi Hideyoshi""@en .
  
  # Siege of Osaka (Winter Campaign)
  OPTIONAL { 
    dbr:Siege_of_Osaka_Winter_Campaign dbo:participant ?warToyotomiHideyori .
    FILTER(CONTAINS(LCASE(?warToyotomiHideyori), ""toyotomi hideyori""))
  }
  
  # Siege of Osaka (Summer Campaign)
  OPTIONAL { 
    dbr:Siege_of_Osaka_Summer_Campaign dbo:participant ?warToyotomiHideyori .
    FILTER(CONTAINS(LCASE(?warToyotomiHideyori), ""toyotomi hideyori""))
  }
  
  # Tokugawa Ieyasu's associated war
  dbr:Tokugawa_Ieyasu rdfs:label ""Tokugawa Ieyasu""@en .
  
  # Battle of Sekigahara
  OPTIONAL { 
    dbr:Battle_of_Sekigahara dbo:participant ?warTokugawaIeyasu .
    FILTER(CONTAINS(LCASE(?warTokugawaIeyasu), ""tokugawa ieyasu""))
  }
}
```",5,5,6,2,3,2,3,28,0,0,2,0,0.0,0
19,9,test,Give me the spouse of the person born as Caroline Louise Bevan Symonds and professional in the birth name of John Boxer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v3 . ?v3 <http://dbpedia.org/property/birthName> ""Caroline Louise Bevan Symonds""@en . <http://dbpedia.org/resource/John_Boxer> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . }","```sparql
SELECT ?spouse WHERE {
  ?person foaf:name ""John Boxer""@en .
  ?person dbo:birthName ""Caroline Louise Bevan Symonds"" .
  ?person dbo:spouse ?spouse .
}
```",4,4,5,2,2,2,2,9,0,0,1,0,0.0,0
198,70,test,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and force of the awardee of the award of Quincy Adams Gillmore and war of the awardee of Medal of Honor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> ?v7 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v4 <http://dbpedia.org/ontology/battle> ?result . ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?result <http://dbpedia.org/ontology/place> ?v3 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v7 <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. }","```sparql
SELECT ?birthPlace WHERE {
  ?person dbo:deathDate ""1850-08-05""^^xsd:date .
  ?person foaf:name ""Robert E. Lee""@en .
  ?person dbo:birthPlace ?birthPlace .
  FILTER EXISTS { 
    ?award dbo:recipient ?person .
    ?award dbo:awardee ?gillmore .
    ?gillmore foaf:name ""Quincy Adams Gillmore""@en .
  }
  FILTER EXISTS {
    ?medalOfHonor dbo:war ?civilWar .
    ?civilWar rdfs:label ""American Civil War""@en .
    ?award dbo:awardee ?recipient .
    ?recipient dbo:serviceIn ?civilWar .
  }
  ?birthPlace a dbo:Settlement ;
             dbo:country dbr:United_States_of_America .
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
270,9,test,"Give me the predecessor of the person born, that is a politician, as Ada Jane Low and person decedent at the birth place, that is a settlement, of Mark Tournier.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://dbpedia.org/ontology/deathPlace> ?v3 . <http://dbpedia.org/resource/Mark_Tournier> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://dbpedia.org/property/birthName> ""Ada Jane Low""@en . }","```sparql
# Step 1: Get Ada Jane Low's birth date
SELECT ?birthDate WHERE {
    dbpedia:Ada_Jane_Low dbo:birthDate ?birthDate .
}

# Step 2: Find a politician born on the same date as Ada Jane Low
SELECT DISTINCT ?politician WHERE {
    ?politician rdf:type dbo:Politician ;
                dbo:birthDate ?birthDate .
    FILTER (?birthDate = <Ada_Jane_Low_birth_date>)
}

# Step 3: Get Mark Tournier's place of birth
SELECT ?placeOfBirth WHERE {
    dbpedia:Mark_Tournier dbo:birthPlace ?placeOfBirth .
}

# Step 4: Find a person who died at the same location as Mark Tournier was born
SELECT DISTINCT ?decedent WHERE {
    ?decedent dbo:deathPlace ?placeOfBirth ;
              rdf:type dbo:Person .
    FILTER (?placeOfBirth = <Mark_Tournier_birth_place>)
}

# Step 5: Find the predecessor of this decedent (i.e., someone who died before them)
SELECT DISTINCT ?predecessor WHERE {
    ?decedent dbo:deathDate ?deathDate ;
              rdf:type dbo:Person .
    ?predecessor dbo:deathDate ?preDeathDate ;
                 rdf:type dbo:Person .
    FILTER (?preDeathDate < ?deathDate)
}
```

Note: Replace `<Ada_Jane_Low_birth_date>` and `<Mark_Tournier_birth_place>` with the actual values obtained from steps 1 and 3.",4,6,5,2,2,2,2,9,0,0,1,0,0.0,0
742,20,test,"Give me the birthplace of the resident of the region, that is a settlement, of Eastern European Time and birthplace of the alumnus of the reference to Пловдивски университет „Паисий Хилендарски“.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/almaMater> ?v1 . ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v4 <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Eastern_European_Time> . ?v1 <http://xmlns.com/foaf/0.1/name> ""Пловдивски университет „Паисий Хилендарски“""@en . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://dbpedia.org/property/residence> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthPlace WHERE {
  ?person dbo:almaMater dbr:Plovdiv_University_Paisius_of_Hilendar ;
          dbo:birthPlace ?birthPlace .
  
  OPTIONAL { 
    ?place dbo:timeZone dbr:Eastern_European_Time ;
           dbo:resident ?person .
  }
}
```",6,7,7,3,2,3,2,20,0,0,2,0,0.0,0
687,69,test,"Give me the team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento and player in the person born, that is an athlete, on the birthday of Marty Pollio and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.",SELECT ?result WHERE { ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v7 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v4 . ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v7 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://dbpedia.org/ontology/birthDate> ?v4 . },"```sparql
# Step 1: Find Marcelo Sarmiento's birthday
SELECT ?birthday WHERE {
  dbpedia:MarceloSarmiento dbo:birthday ?birthday .
}

# Step 2: Find a soccer player and manager born on that day
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person WHERE {
  ?person dbo:birthday ?birthday .
  ?person rdf:type dbo:SoccerPlayer .
  ?person rdf:type dbo:SoccerManager .
  FILTER (?birthday = ""Marcelo Sarmiento's birthday"") # Replace with actual date
}

# Step 3: Find Marty Pollio's birthday
SELECT ?birthday WHERE {
  dbpedia:MartyPollio dbo:birthday ?birthday .
}

# Step 4: Find an athlete born on that day
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?person WHERE {
  ?person dbo:birthday ?birthday .
  ?person rdf:type dbo:Athlete .
  FILTER (?birthday = ""Marty Pollio's birthday"") # Replace with actual date
}

# Step 5: Find the actor in ""All or Nothing: Manchester City"" who is a soccer player and athlete
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbo:role ?role .
  ?role dbp:title ""All or Nothing: Manchester City"" .
  ?actor rdf:type dbo:SoccerPlayer .
  ?actor rdf:type dbo:Athlete .
}

# Step 6: Find the team of the person found in step 2
SELECT DISTINCT ?team WHERE {
  ?person dbo:playsFor ?team .
  FILTER (?person = ""Person from Step 2"") # Replace with actual person URI
}
```",8,13,9,3,3,3,3,71,0,0,1,0,0.0,0
668,71,test,"Give me the associated musical artist of the person born as the birth name of $pacely and person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in the profession of the writer, that is a musical artist, of The Live Anthology.","SELECT ?result WHERE { ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v7 <http://dbpedia.org/property/birthName> ?v8 . ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/birthName> ?v8 . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v1 . ?v7 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . }","```sparql
# Find the birth name of $pacely (Tupac Shakur)
SELECT ?birthName WHERE {
  wd:Q32958 foaf:name ""Lesane Parish Crooks""@en .
}

# Find a musical artist from Central Region, Ghana
SELECT ?artist WHERE {
  ?artist wdt:P19 wd:Q10228 ; # P19 is the property for place of birth
          wdt:P106 wd:Q215380 . # P106 is the property for occupation (Musical Artist)
}

# Find the writer of The Live Anthology (Bob Dylan)
SELECT ?writer WHERE {
  ?album schema:author wd:Q76 ;
           schema:name ""The Bootleg Series Vol. 14: More Blood, More Tracks""@en .
}

# Check if there is any association between Tupac Shakur and Rocky Dawuni
SELECT DISTINCT ?commonArtist WHERE {
  OPTIONAL { 
    ?association wdt:P175 wd:Q32958 ; # P175 is the property for associated acts (Tupac Shakur)
                 wdt:P175 wd:QXXXXX . # Replace QXXXXX with Rocky Dawuni's DBpedia ID
  }
}
```",9,11,10,3,3,3,3,71,0,0,1,0,0.0,0
159,70,test,"Give me the commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and reference to the writer of the work of George Ducas and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v0 <http://dbpedia.org/property/writer> ?v7 . ?v1 <http://dbpedia.org/ontology/battle> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v4 . ?result <http://xmlns.com/foaf/0.1/name> ?v7 . ?v4 <http://dbpedia.org/ontology/successor> ?result . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?battle ?successor WHERE {
  # John III Sobieski and the Battle of Vienna
  dbr:John_III_Sobieski a dbo:Person ;
                        dbo:role ""Commander"" ;
                        dbo:associatedWith dbr:Battle_of_Vienna .

  # Michał Korybut Wiśniowiecki as successor
  dbr:Mikołaj_Kazimierz_Radziwiłł a dbo:Person ;
                                  dbo:successor dbr:Michał_Korybut_Wiśniowiecki .

  # Linking the commander and successor
  ?commander rdfs:label ""John III Sobieski""@en .
  ?successor rdfs:label ""Michał Korybut Wiśniowiecki""@en .

  # Optional: Literary connection (hypothetical)
  OPTIONAL {
    ?literaryWork dbo:author dbr:George_Ducas ;
                  dbo:subject ?commander .
  }
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
513,20,test,"Give me the entity in the award of the reference to George Hamilton Cameron and residence of the leader of the party, that is an organisation and a political party, of George Savage (politician).","SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""George Hamilton Cameron""@en . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. <http://dbpedia.org/resource/George_Savage_(politician)> <http://dbpedia.org/ontology/party> ?v4 . ?result <http://dbpedia.org/ontology/country> ?v2 . ?v4 <http://dbpedia.org/ontology/leader> ?v5 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v5 <http://dbpedia.org/ontology/residence> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?organisation ?politicalParty WHERE {
  # Find the award associated with George Hamilton Cameron
  ?award dbo:recipient dbr:George_Hamilton_Cameron .
  
  # Find the political party of George Savage and its leader's residence
  ?georgeSavage dbo:partyAffiliation ?politicalParty ;
                a dbo:Politician .
  ?leader dbo:positionHeld ?leadershipRole ;
          dbo:residence ?residence .
  ?leadershipRole dbo:officeHolder ?georgeSavage .

  # Find the organisation related to both the award and political party
  ?organisation dbo:award ?award ;
                dbo:member ?leader .
  
  FILTER(?politicalParty a dbo:PoliticalParty)
}
```",6,8,7,3,2,3,2,20,0,0,2,0,0.0,0
347,70,test,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and father of the child of the parent of Archduke Charles Joseph of Austria and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/property/father> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v7 <http://dbpedia.org/property/father> ?v0 . ?v4 <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/parent> ?v3 . <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v4 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v7 <http://dbpedia.org/property/father> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Maria Anna of Bavaria's child who is royalty
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria"" ;
             dbo:spouse ?archdukeCharlesII .
  
  ?archdukeCharlesII a dbo:Person ;
                     foaf:name ""Archduke Charles II of Austria"" ;
                     dbo:child ?ferdinandII .

  # Ferdinand II is the child
  ?ferdinandII a dbo:Person ;
               foaf:name ""Ferdinand II, Holy Roman Emperor"" .
  
  # Parent of Archduke Charles Joseph of Austria
  ?leopoldII a dbo:Person ;
             foaf:name ""Leopold II, Holy Roman Emperor"" ;
             dbo:child ?charlesJoseph .

  # Commander in the war (Napoleon Bonaparte)
  ?napoleon a dbo:Person ;
            foaf:name ""Napoleon Bonaparte"" ;
            dbo:occupation ?commanderRole .
  
  FILTER EXISTS { ?commanderRole dbo:wikiPageRedirects dbr:Napoleonic_Wars }
  
  # Societal event and TV show related to Napoleon
  ?event a dbo:Event ;
         foaf:name ?eventName ;
         dbo:wikiPageRedirects ?napoleonEvent .

  FILTER regex(?eventName, ""Napoleon"", ""i"")

  # Combine elements
  BIND(?ferdinandII AS ?child)
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
816,69,test,"Give me the actor of the movie, that is a work, with the person decedent at Los Angeles and parent of the child of the spouse of Mariclare Costello and parent of the professional in Photographer.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v2 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v7 . ?v3 <http://dbpedia.org/property/starring> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v7 <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?actor WHERE {
  # Mariclare Costello
  ?mariclare a dbo:Person ;
             foaf:name ""Mariclare Costello""@en .

  # Spouse of Mariclare Costello
  ?spouse dbo:spouse ?mariclare .

  # Child of the spouse
  ?child dbo:parent ?spouse .

  # Parent of the child (Spouse)
  ?spouse dbo:parent ?photographerParent .

  # Professional in Photographer
  ?photographerParent a dbo:Photographer ;
                     foaf:name ?name .

  # Person decedent at Los Angeles
  ?decedent dbo:deathPlace dbr:Los_Angeles,_California ;
            dbo:parent ?photographerParent ;
            dbo:causeOfDeath ?cause .

  # Work (Movie) associated with the person who died in Los Angeles
  ?movie dbo:workExample ?decedent .

  # Actor of the movie
  ?actorRole a dbo:Actor ;
             dbo:characterIn ?movie .
  ?actorRole foaf:name ?actor .
}
```",8,9,9,3,3,3,3,71,0,0,1,0,0.0,0
871,70,test,"Give me the parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby and parent of the awardee of Commander of the Royal Victorian Order and father of the child, that is a politician, of the alumnus of Eton College.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://dbpedia.org/ontology/child> ?v6 . ?v4 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/property/father> ?v3 . ?v3 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v6 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?parent
WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  ?edward dbr:Edward_Stanley,_17th_Earl_of_Derby .

  # Step 2: Find his children
  ?child dbo:spouse ?edward .
  
  # Step 3: Check if any child or their descendants received the Commander of the Royal Victorian Order
  OPTIONAL {
    ?recipient dbo:awardReceived dbr:Commander_of_the_Royal_Victorian_Order .
    ?recipient dbo:parent ?child .
  }

  # Step 4: Find an alumnus of Eton College who has a child that is a politician
  ?alumnus dbo:almaMater dbr:Eton_College .
  ?politician dbo:spouse ?alumnus ;
              a dbo:Politician .

  # Step 5: Trace back to find the parent of this child
  ?parent dbo:child ?politician .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
472,27,test,"Give me the administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck and administration of the mayor of Duchy of Schleswig and territory administered from Copenhagen.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . ?v3 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?result <http://dbpedia.org/property/leader> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/property/leader> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?role ?administration WHERE {
  # Query for Prince Christian of Schleswig-Holstein-Sonderburg-Beck
  {
    ?person rdfs:label ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en .
    OPTIONAL { ?person dbo:title ?role . }
    OPTIONAL { ?person dbo:administrativePost ?administration . }
  }

  UNION

  # Query for the mayor or administration related to Duchy of Schleswig and Copenhagen
  {
    ?administration rdfs:label ?adminLabel .
    FILTER(CONTAINS(LCASE(?adminLabel), ""duchy of schleswig"") || CONTAINS(LCASE(?adminLabel), ""copenhagen""))
    OPTIONAL { ?administration dbo:mayor ?person . }
    OPTIONAL { ?person rdfs:label ?role . }
  }

} ORDER BY ?person
```",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
295,19,test,"Give me the writer of the work, that is a musical work, of Apache Indian and native of the birth place of the producer of Storm in a Teacup (film).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Apache_Indian> . ?v2 <http://dbpedia.org/property/writer> ?result . <http://dbpedia.org/resource/Storm_in_a_Teacup_(film)> <http://dbpedia.org/ontology/producer> ?v0 . ?v0 <http://dbpedia.org/ontology/birthPlace> ?v4 . ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. },"```sparql
# Step 1: Find the producer of ""Storm in a Teacup""
SELECT ?producer WHERE {
  ?film dcterms:title ""Storm in a Teacup""@en .
  ?film dbo:director ?person .
  ?person foaf:name ""Aamir Khan"" .
}

# Step 2: Determine Aamir Khan's birthplace
SELECT ?birthPlace WHERE {
  ?aamir foaf:name ""Aamir Khan"" .
  ?aamir dbo:birthPlace ?birthPlace .
}

# Step 3: Find Apache Indian's work and its writer, who is native to Mumbai
SELECT ?writer WHERE {
  ?work dcterms:title ""Arranged Marriage""@en ;
        dbo:musicalArtist ?apacheIndian ;
        dbo:lyricist ?writer .
  
  ?aamir foaf:name ""Aamir Khan"" .
  ?aamir dbo:birthPlace ?mumbai .

  ?writer dbo:nativeCountry ?country .
  ?country dcterms:isPartOf ?india .
  ?india dbo:city ?mumbai .
}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
687,68,test,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and player in the person born, that is an athlete, on the birthday of Marty Pollio.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> ?v3 . <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v5 . ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/ontology/birthDate> ?v5 . ?v7 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://dbpedia.org/property/starring> ?v7 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v4 <http://dbpedia.org/ontology/team> ?result . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?team WHERE {
  # Step 1: Find the soccer player and manager born on 1979-11-03
  ?person dbo:birthDate ""1979-11-03""^^xsd:date ;
          a dbo:SoccerPlayer, dbo:SoccerManager .

  # Step 2: Find the actor who is also a soccer player and athlete in a film by Manuel Huerga
  ?actor dbo:birthDate ?dateActor ;
         a dbo:Actor, dbo:SoccerPlayer, dbo:Athlete .
  ?film dbo:director dbr:Manuel_Huerga ;
        dbo:starring ?actor .

  # Step 3: Find the team associated with the person from step 1
  ?person dbo:team ?team .

  # Step 4: Identify the athlete born on Marty Pollio's birthday
  ?athlete dbo:birthDate ?dateMartyPollio ;
           a dbo:Athlete .
  ?martyPollio dbo:birthDate ?dateMartyPollio ;
               rdfs:label ""Marty Pollio""@en .

  # Step 5: Ensure the person from step 1 played in the film identified in step 2
  ?film dbo:starring ?person .

  FILTER(?dateActor = ?dateMartyPollio)
}
```",8,14,9,3,3,3,3,71,0,0,1,0,0.0,0
59,9,test,"Give me the native of the residence of David Luckman and manager of the player, that is a sports club and a soccer club, in Jamie McCunnie.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/David_Luckman> <http://dbpedia.org/property/residence> ?v1 . <http://dbpedia.org/resource/Jamie_McCunnie> <http://dbpedia.org/ontology/team> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. },"```sparql
SELECT DISTINCT ?nativePlace WHERE {
  # Step 1: Identify David Luckman's role as manager
  ?manager foaf:name ""David Luckman"" .
  
  # Step 2: Find the club he manages, which is both a sports club and a soccer club
  ?club dbo:manager ?manager ;
        rdf:type dbo:SoccerClub ;
        dbo:sport dbr:Soccer .

  # Step 3: Determine his residence (assuming it's linked to the manager)
  ?residence dbo:resident ?manager .
  
  # Step 4: Find the native place of that residence
  ?residence dbo:nativePlace ?nativePlace .
}
```",4,6,5,2,2,2,2,9,0,0,1,0,0.0,0
263,28,test,"Give me the parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne and native of the birthplace, that is a region and a country, of William Gayner and parent of the person born as Hon. Mary Frances Bowes-Lyon.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . ?result <http://dbpedia.org/ontology/child> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. }","```sparql
# Step 1: Find Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne's child (Elizabeth Bowes-Lyon)
SELECT ?child WHERE {
  wd:Q123456 wdt:P40 ?child .
}

# Step 2: Identify the parent of that child (Claude Bowes-Lyon)
SELECT ?parent WHERE {
  ?child wdt:P22 ?parent .
}

# Step 3: Determine William Gayner's birthplace
SELECT ?birthPlace WHERE {
  wd:Q654321 wdt:P19 ?birthPlace .
}

# Step 4: Identify Hon. Mary Frances Bowes-Lyon
SELECT ?honMaryFrances WHERE {
  wd:Q123456 wdt:P40 ?honMaryFrances .
}

# Step 5: Find the parent of Hon. Mary Frances Bowes-Lyon (Claude Bowes-Lyon)
SELECT ?parentHonMaryFrances WHERE {
  ?honMaryFrances wdt:P22 ?parentHonMaryFrances .
}

# Step 6: Combine information to find the parent of Elizabeth Bowes-Lyon who matches the criteria
SELECT DISTINCT ?parent WHERE {
  ?child wdt:P40 wd:Q123456 . # Child of Claude Bowes-Lyon
  ?child wdt:P22 ?parent .    # Parent of that child
  ?honMaryFrances wdt:P40 wd:Q123456 . # Hon. Mary Frances Bowes-Lyon is a child of Claude Bowes-Lyon
  ?honMaryFrances wdt:P22 ?parentHonMaryFrances .
  FILTER(?parent = ?parentHonMaryFrances) # Ensure the parent matches for both children
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Claude Bowes-Lyon, and `wd:Q654321` with the identifier for William Gayner. The query assumes that these identifiers are known or can be retrieved from DBpedia.",6,8,7,2,3,2,3,28,0,0,2,0,0.0,0
557,67,test,"Give me the producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and professional in .","SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v1 <http://dbpedia.org/ontology/knownFor> ?v3 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v6 . }","```sparql
# Step 1: Find the actor of ""High Society Blues""
SELECT ?actor WHERE {
  ?movie dcterms:title ""High Society Blues""@en .
  ?movie dbo:starring ?actor .
}

# Step 2: Check if this actor is a producer and find their notable works
SELECT DISTINCT ?producer ?work WHERE {
  VALUES (?actor) { <Actor_URI_from_Step1> } # Replace with actual URI from step 1
  OPTIONAL { ?actor dbo:profession dbo:FilmProducer . }
  OPTIONAL { ?actor dbo:notableWork ?work . }
  
  FILTER EXISTS { ?work a dbo:Film . }
}

# Step 3: Find the actor of ""Johnny Doughboy""
SELECT ?actor WHERE {
  ?movie dcterms:title ""Johnny Doughboy""@en .
  ?movie dbo:starring ?actor .
}

# Step 4: Check if this actor is professional in some field and find their notable works
SELECT DISTINCT ?professionalField ?work WHERE {
  VALUES (?actor) { <Actor_URI_from_Step3> } # Replace with actual URI from step 3
  OPTIONAL { ?actor dbo:profession ?professionalField . }
  OPTIONAL { ?actor dbo:notableWork ?work . }

  FILTER EXISTS { ?work a dbo:CreativeWork . }
}

# Step 5: Find the common producer between these works
SELECT DISTINCT ?producer WHERE {
  VALUES (?work1) { <Work_URI_from_Step2> } # Replace with actual URI from step 2
  VALUES (?work2) { <Work_URI_from_Step4> } # Replace with actual URI from step 4

  ?work1 dbo:producer ?producer .
  ?work2 dbo:producer ?producer .
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
668,70,test,"Give me the professional in the profession of the writer, that is a musical artist, of The Live Anthology and person born as the birth name of the native, that is an artist, of Central Region, Ghana and associated musical artist of the person born as Elorm Kabu Amenyah.","SELECT ?result WHERE { <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?v0 <http://dbpedia.org/property/occupation> ?v7 . ?v1 <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v7 . ?v4 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/birthName> ?v3 . }","```sparql
# Step 1: Find the author of ""The Live Anthology"" who is also a musical artist
SELECT ?author WHERE {
  ?album dcterms:title ""The Live Anthology""@en .
  ?album dbo:artist ?author .
  ?author dbo:profession ?prof .
  FILTER(?prof IN (dbpedia-owl:Writer, dbpedia-owl:MusicalArtist))
}

# Step 2: Find the birth name of an artist from Central Region, Ghana
SELECT ?birthName WHERE {
  ?person dbo:nationality dbr:Ghana ;
          dbo:regionOfOrigin dbr:Central_Region_(Ghana) ;
          foaf:name ?name .
  ?person foaf:givenName ?birthName .
}

# Step 3: Find Elorm Kabu Amenyah's associated musical artist
SELECT ?associatedArtist WHERE {
  ?elorm foaf:name ""Elorm Kabu Amenyah""@en .
  ?elorm dbo:associatedMusicalArtist ?associatedArtist .
}

# Final Query: Combine all conditions to find the common professional
SELECT DISTINCT ?commonProfessional WHERE {
  # Author of ""The Live Anthology"" who is a writer and musical artist
  VALUES (?author) { (<result_from_step_1>) }
  
  # Birth name from Central Region, Ghana
  VALUES (?birthName) { (<result_from_step_2>) }

  # Associated musical artist with Elorm Kabu Amenyah
  VALUES (?associatedArtist) { (<result_from_step_3>) }

  ?commonProfessional foaf:givenName ?birthName .
  ?commonProfessional dbo:profession ?prof .
  FILTER(?prof IN (dbpedia-owl:Writer, dbpedia-owl:MusicalArtist))
  ?commonProfessional dbo:associatedMusicalArtist ?associatedArtist .
}
```",8,10,9,3,3,3,3,71,0,0,1,0,0.0,0
375,19,test,"Give me the author of the movie, that is a work and a television show, with Vera Lynn and parent of the native, that is an artist and a musical artist, of the location, that is English and a settlement, for ,.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom>. ?result <http://dbpedia.org/ontology/child> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/author> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Vera_Lynn> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/ontology/postalCode> "","" . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?movie dbo:starring dbr:Vera_Lynn .
  ?movie dbo:basedOnWork ?work .
  ?work dbo:adaptationOf ?tvShow .
  
  ?artist dbo:nationality dbr:United_Kingdom ;
          dbo:parent ?parent .
  ?parent foaf:name ""Margaret Mary Burns""@en .

  ?location dbo:country dbr:England ;
            a dbo:Settlement .
  ?artist dbo:birthPlace ?location .
}
```",5,11,6,3,2,3,2,20,0,0,1,0,0.0,0
557,71,test,"Give me the producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?v8 <http://dbpedia.org/ontology/producer> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v4 . ?v4 <http://dbpedia.org/ontology/knownFor> ?v5 . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/occupation> ?v2 . ?v7 <http://dbpedia.org/ontology/knownFor> ?v8 . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v7 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v1 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v5 <http://dbpedia.org/ontology/producer> ?result . }","```sparql
# Step 1: Find actor in ""High Society Blues""
SELECT ?actor WHERE {
  ?movie dbo:title ""High Society Blues""@en .
  ?movie dbo:starring ?actor .
}

# Step 2: Find the claim to fame (a movie and a work) of this actor
SELECT ?fameWork WHERE {
  ?actor dbo:film ?fameMovie .
  FILTER EXISTS { ?fameMovie dbo:title ?title . }
  UNION
  ?actor dbo:work ?fameWork .
}

# Step 3: Find actor in ""Johnny Doughboy""
SELECT ?actor WHERE {
  ?movie dbo:title ""Johnny Doughboy""@en .
  ?movie dbo:starring ?actor .
}

# Step 4: Find the claim to fame (a work) of this actor
SELECT ?fameWork WHERE {
  ?actor dbo:work ?fameWork .
}

# Step 5: Identify alter ego of Kent Allard
SELECT ?alterEgo WHERE {
  ?fictionalCharacter rdfs:label ""Kent Allard""@en .
  ?fictionalCharacter dbo:alterEgo ?alterEgo .
}

# Step 6: Determine the professional identity of this alter ego
SELECT ?professionalIdentity WHERE {
  ?alterEgo dbo:profession ?professionalIdentity .
}

# Step 7: Find producer common to both claims to fame
SELECT DISTINCT ?producer WHERE {
  VALUES (?fameWork1 ?fameWork2) { 
    (<HighSocietyBluesFame> <JohnnyDoughboyFame>)
  }
  ?fameWork1 dbo:producer ?producer .
  ?fameWork2 dbo:producer ?producer .
}

# Step 8: Find the producer's own claim to fame as a work
SELECT ?producerClaimToFame WHERE {
  ?producer dbo:work ?producerClaimToFame .
}
```",9,13,10,3,3,3,3,71,0,0,1,0,0.0,0
756,69,test,"Give me the native of the administration, that is a country, of Theodor Heuss and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26 and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v7 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v2 <http://dbpedia.org/ontology/manager> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v4 . ?v4 <http://dbpedia.org/ontology/team> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?result <http://dbpedia.org/ontology/birthPlace> ?v7 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. }","```sparql
# Step 1: Find Theodor Heuss's native administration
SELECT ?nativePlace WHERE {
  wd:Q12345 wdt:P19 ?nativePlace .
}

# Step 2: Find VfL Bochum manager for the 2007–08 season
SELECT ?manager WHERE {
  wd:Q12346 wdt:P127 ?club . # VfL Bochum
  ?club wdt:P921 ?season .
  FILTER (YEAR(?season) = 2007 && MONTH(?season) >= 8 || YEAR(?season) = 2008 && MONTH(?season) < 8)
  ?manager wdt:P39 ?club . # manager of the club during that season
}

# Step 3: Find sports manager born on August 26, 1968
SELECT ?sportsManager WHERE {
  ?person wdt:P569 ""1968-08-26T00:00:00Z""^^xsd:dateTime .
  ?person wdt:P106 wd:Q193018 . # sports manager
}

# Step 4: Find who managed this player in the 2007–08 VfL Bochum season
SELECT ?playerManager WHERE {
  wd:Q12347 wdt:P39 wd:Q12346 . # Ralf Fährmann was part of VfL Bochum during 2007-08
  ?manager wdt:P39 wd:Q12346 .
  FILTER (YEAR(?season) = 2007 && MONTH(?season) >= 8 || YEAR(?season) = 2008 && MONTH(?season) < 8)
}

# Step 5: Find the native place of Heiko Herrlich
SELECT ?nativePlace WHERE {
  wd:Q12348 wdt:P19 ?nativePlace . # Heiko Herrlich's native place
}
```",8,19,9,3,3,3,3,71,0,0,1,0,0.0,0
723,19,test,"Give me the band member of the associated musical artist, that is an organisation, of the associated musical artist, that is a band and an organisation, of Nate Newton (musician) and band member of the producer, that is an organisation and a group, of Nothing to Gein.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Nate_Newton_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . <http://dbpedia.org/resource/Nothing_to_Gein> <http://dbpedia.org/ontology/producer> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Find Nate Newton's associated band
  dbr:Nate_Newton dbo:musicalArtist dbr:Minor_Threat .
  
  # Step 2: Find the organization related to Minor Threat
  dbr:Minor_Threat dbo:associatedMusicalArtist ?organization .
  FILTER (strstarts(str(?organization), ""http://dbpedia.org/resource/Dischord_Records""))

  # Step 3: Identify the producer of ""Nothing to Gein""
  dbr:Kurt_Ballou dbo:musicalArtist dbr:God_City_Studio ;
                 dbo:producedAlbum dbr:Nothing_to_Gein .

  # Step 4: Find band members of Dischord Records and God City Studio
  ?organization dbo:bandMember ?dischordMember .
  dbr:God_City_Studio dbo:bandMember ?godCityMember .

  # Step 5: Identify common band member
  FILTER (?dischordMember = ?godCityMember)
  
  # Return the common band member
  ?dischordMember rdfs:label ?bandMember .
}
```",5,10,6,3,2,3,2,20,0,0,1,0,0.0,0
585,20,test,"Give me the child of the professional in the profession of Shirley Stoler and native of the award, that is American and a settlement, of the awardee of New York (state).",SELECT ?result WHERE { <http://dbpedia.org/resource/Shirley_Stoler> <http://dbpedia.org/property/occupation> ?v4 . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v5 <http://dbpedia.org/ontology/child> ?result . ?v5 <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
# Step 1: Find Shirley Stoler's profession
SELECT ?profession WHERE {
  dbpedia:Shirley_Stoler dbo:occupation ?profession .
}

# Step 2: Determine her native place and related award
SELECT ?nativePlace ?award WHERE {
  dbpedia:Shirley_Stoler dbo:nativePlace ?nativePlace ;
                        dbo:awardReceived ?award .
  FILTER (strstarts(str(?nativePlace), ""dbpedia:"") && strstarts(str(?award), ""dbpedia:""))
}

# Step 3: Identify the awardee from this settlement
SELECT ?awardee WHERE {
  ?settlement rdf:type dbo:Settlement ;
              dbo:locationCountry dbc:United_States_of_America ;
              dbo:stateProvince dbc:New_York_(state) .
  ?award dbo:recipient ?awardee .
  FILTER (str(?nativePlace) = str(?settlement))
}

# Step 4: Find the child of the professional in Shirley Stoler's field
SELECT ?child WHERE {
  ?professional dbo:occupation ?profession ;
                dbp:child ?child .
  FILTER (str(?profession) = str(?shirleyProfession))
}
```",6,8,7,3,2,3,2,20,0,0,10,0,0.0,0
159,71,test,"Give me the commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v7 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> ?v2 . ?v4 <http://dbpedia.org/property/writer> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v7 <http://dbpedia.org/ontology/battle> ?v8 . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v8 <http://dbpedia.org/ontology/commander> ?result . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . }","```sparql
SELECT ?commander ?successor ?writer WHERE {
  # Battle of Vienna commander
  ?battle dbp:partOf ?conflict .
  ?battle dbp:date ""1683""^^xsd:gYear .
  ?battle dbp:opposingFaction ?empire .
  ?empire rdfs:label ""Holy Roman Empire""@en .
  
  ?commander dbo:positionHeld ?role .
  ?role dbp:officeHolder ?person .
  ?person rdfs:label ""Prince Eugene of Savoy""@en .
  
  # Successor who is a politician and office holder
  ?successor dbo:successorOf ?commander .
  ?successor dbo:positionHeld ?polRole .
  ?polRole dbp:officeHolder ?politician .
  ?politician rdf:type dbo:Politician .

  # Michał Kazimierz Pac's conflict
  ?conflict2 rdfs:label ""Great Turkish War""@en .
  ?person2 rdfs:label ""Michał Kazimierz Pac""@en .
  ?person2 dbo:memberOf ?force .
  ?force dbp:partOf ?conflict2 .

  # George Ducas' work
  ?work dbo:author ?georgeDucas .
  ?georgeDucas rdfs:label ""George Ducas""@en .
  
  # Linking the writer to the commander's successor
  ?successor dbo:relatedWork ?work .
}
```",9,15,10,3,3,3,3,71,0,0,1,0,0.0,0
585,19,test,"Give me the native of the award, that is American and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and child of the professional in the profession of Shirley Stoler.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Shirley_Stoler> <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v4 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?native WHERE {
  # Step 1: Identify Shirley Stoler's profession
  dbr:Shirley_Stoler dbo:profession ?profession .

  # Step 2: Find the award related to her profession and is an American settlement
  ?award dbo:relatedTo ?profession ;
         a dbo:Award ;
         rdfs:label ?awardLabel .
  
  FILTER CONTAINS(LCASE(?awardLabel), ""american"") .
  FILTER CONTAINS(LCASE(?awardLabel), ""settlement"") .

  # Step 3: Determine the native of the award
  ?native dbo:nativeOf ?award .

  # Step 4: Connect with Coro de la Pontificia Universidad Católica de Puerto Rico
  OPTIONAL {
    ?coro dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico dbo:relatedTo ?native .
  }
}
```",5,7,6,3,2,3,2,20,0,0,10,0,0.0,0
198,67,test,"Give me the war of Amasa Tracy and force of the awardee of the award of Quincy Adams Gillmore and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/commander> ?v6 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v6 <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/place> ?v3 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?war ?force ?settlement WHERE {
  # Find the war associated with Amasa Tracy
  dbr:Amasa_Tracy dbo:militaryConflict ?civilWar .
  ?civilWar rdfs:label ?war .

  FILTER(CONTAINS(LCASE(?war), ""american civil war""))

  # Find the award received by Quincy Adams Gillmore and his force
  dbr:Quincy_Adams_Gillmore dbo:awardReceived ?medalOfHonor .
  ?medalOfHonor dbo:recipient ?gillmore .
  ?gillmore dbo:militaryBranch ?unionArmy .

  FILTER(CONTAINS(LCASE(?unionArmy), ""union army""))

  # Find the settlement in the birthplace of Amasa Tracy
  dbr:Amasa_Tracy dbo:birthPlace dbr:Suffield,_Connecticut .
  dbr:Suffield,_Connecticut a dbo:Settlement .
  ?settlement rdfs:label ?settlementLabel .

  FILTER(CONTAINS(LCASE(?settlementLabel), ""suffield""))
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
706,19,test,"Give me the birthplace of the awardee of Sangeet Natak Akademi Fellowship and birthplace of the actor of the movie, that is a movie and Indian, with Dipankar De.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Sangeet_Natak_Akademi_Fellowship> . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/starring> ?v4 . ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Dipankar_De> . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
# Query for the birthplace of an awardee of Sangeet Natak Akademi Fellowship
SELECT ?awardee ?birthPlace WHERE {
  ?awardee dbo:award ""Sangeet_Natak_Akademi_Fellowship""@en .
  ?awardee dbo:birthPlace ?birthPlace .
}

# Query for the birthplace of an actor in a movie with Dipankar De
SELECT DISTINCT ?actor ?birthPlace WHERE {
  ?movie dbo:starring ?actor ;
         dbo:starring dbr:Dipankar_De .
  ?actor dbo:birthPlace ?birthPlace .
}
```",5,7,6,3,2,3,2,20,0,0,2,0,0.0,0
398,19,test,Give me the figure known as the nickname of Russia national football team and player in the writer of the work of Aleksandr Filimonov.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Aleksandr_Filimonov> . ?v0 <http://dbpedia.org/property/writer> ?v4 . <http://dbpedia.org/resource/Russia_national_football_team> <http://dbpedia.org/property/nickname> ?v2 . ?result <http://dbpedia.org/property/nickname> ?v2 . ?v4 <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player ?work WHERE {
  # Find the nickname of the Russia national football team
  dbr:Russia_national_football_team dbo:nickname ?nickname .

  # Find players associated with this team who are also known as writers
  ?player dbo:team ?team .
  ?team rdfs:label ?nickname .
  FILTER(CONTAINS(LCASE(?nickname), ""russia national football team""))
  
  ?player dbo:occupation dbr:Writer .
  
  # Check if any of these players have written a work by Aleksandr Filimonov
  ?work dbo:author ?player ;
        dbo:wikiPageWikiLink dbr:Aleksandr_Filimonov .
}
```",5,5,6,3,2,3,2,20,0,0,1,0,0.0,0
943,70,test,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and child of the parent, that is a royalty, of Yeshaq I and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v1 <http://dbpedia.org/property/alterEgo> ?v6 . ?v0 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v5 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . }","```sparql
SELECT ?person WHERE {
  ?yeshaq1 dbo:spouse ?baedaMaryamI .
  ?baedaMaryamI dbo:child ?dawitII .
  ?dawitII dbo:child ?yeshaq2 .
  ?yeshaq2 a dbo:Monarch .
}
```",8,11,9,3,3,3,3,71,0,0,1,0,0.0,0
119,67,test,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and office of Alberto Núñez Feijóo.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v6 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v0 <http://dbpedia.org/property/residence> ?v6 . ?v3 <http://dbpedia.org/property/leaderParty> ?v1 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find the leader of PSOE
  ?psoeLeader dbo:leader ?person .
  FILTER (strstarts(str(?psoeLeader), ""http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party""))

  # Ensure the person is a Prime Minister of Spain
  OPTIONAL { 
    ?primeMinister dbo:officeHolder ?person ;
                   dbo:country dbr:Spain .
    FILTER (strstarts(str(?primeMinister), ""http://dbpedia.org/resource/Prime_Minister_of_Spain""))
  }

  # Ensure the person is associated with Alberto Núñez Feijóo's office
  OPTIONAL {
    ?officeHolder dbo:officeHolder ?person ;
                  dbo:country dbr:Spain .
    FILTER (strstarts(str(?officeHolder), ""http://dbpedia.org/resource/President_of_the_Xunta_de_Galicia""))
  }
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
468,19,test,"Give me the child of the father, that is a royalty, of the parent of Martin of Aragon and reference to the real name of Peter IV of Aragon.",SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v4 . ?v0 <http://dbpedia.org/property/father> ?v4 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Martin_of_Aragon> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?realName WHERE {
  # Martin of Aragon's parent
  ?martinParent dbo:spouse ?johnI .
  ?johnI foaf:name ""John I of Aragon""@en .

  # John I's father (Peter IV)
  ?johnIFather dbo:father ?peterIV .
  ?peterIV foaf:name ""Peter IV of Aragon""@en .

  # Children of Peter IV who are royalty
  ?peterIV dbo:child ?child .
  ?child a dbo:Monarch .
  
  # Real name reference for Peter IV
  ?peterIV foaf:name ?realName .
}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
119,20,test,"Give me the war of the commander in the force, that is a television show and a military conflict, of Maria I of Portugal and entity in the residence, that is a country, of the native, that is Polish and an athlete, of Łódź.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?v2 . ?v4 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Łódź> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v4 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Poland>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Maria_I_of_Portugal> . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v4 <http://dbpedia.org/property/residence> ?v5 . ?result <http://dbpedia.org/ontology/place> ?v5 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
# Step 1: Find wars associated with Maria I of Portugal that are also TV shows
SELECT ?war WHERE {
    ?war dbo:wikiPageWikiLink dbr:Maria_I_of_Portugal .
    ?war rdf:type dbo:Battle .
    OPTIONAL { ?war dbo:wikiPageRedirects ?redirect . }
    FILTER EXISTS { ?redirect dbo:wikiPageDisambiguates dbpedia:en:The_War_of_the_Spanish_Succession_TV_series }
}

# Step 2: Find athletes from Łódź, Poland
SELECT ?athlete WHERE {
    ?athlete dbo:nationality dbr:Poland .
    ?athlete dbo:birthPlace dbr:Łódź .
    ?athlete rdf:type dbo:Athlete .
}

# Step 3: Find the country of residence for these athletes
SELECT DISTINCT ?country WHERE {
    ?athlete dbo:residence ?residence .
    ?residence dbo:country ?country .
    ?athlete ?p ?o .
    FILTER EXISTS { ?athlete dbo:nationality dbr:Poland . ?athlete dbo:birthPlace dbr:Łódź }
}

# Step 4: Find a connection between the war and the country of residence
SELECT DISTINCT ?war ?country WHERE {
    VALUES ?war { <http://dbpedia.org/resource/The_War_of_the_Spanish_Succession_TV_series> } # Assuming this is the correct link
    ?athlete dbo:residence ?residence .
    ?residence dbo:country ?country .
    ?athlete ?p ?o .
    FILTER EXISTS { ?athlete dbo:nationality dbr:Poland . ?athlete dbo:birthPlace dbr:Łódź }
}
```",6,11,7,3,2,3,2,20,0,0,1,0,0.0,0
472,28,test,"Give me the territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen and administration of the mayor of Duchy of Schleswig and administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> ?v3 . ?result <http://dbpedia.org/ontology/capital> ?v1 . <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v5 . ?result <http://dbpedia.org/property/leader> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v1 . ?v3 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?deathPlace ?administeredTerritoryFromDeathPlace ?mayorOfDuchyOfSchleswig ?birthPlace ?administrationFromBirthPlace
WHERE {
  # Find the death place of Christian Ditlev Ammentorp Hansen
  dbr:Christian_Ditlev_Ammertorp_Hansen dbo:deathPlace ?deathPlace .
  
  # Ensure the death place is a settlement
  ?deathPlace rdf:type dbo:Settlement .

  # Find the territory administered from his death place
  ?deathPlace dbo:administrativeTerritory ?administeredTerritoryFromDeathPlace .

  # Find the mayor of Duchy of Schleswig
  ?mayorOfDuchyOfSchleswig dbo:officeHolder dbr:Duchy_of_Schleswig .
  
  # Find the birthplace of Prince Christian of Schleswig-Holstein-Sonderburg-Beck
  dbr:Prince_Christian_of_Schleswig-Holstein-Sonderburg-Beck dbo:birthPlace ?birthPlace .

  # Ensure the birthplace is a settlement
  ?birthPlace rdf:type dbo:Settlement .

  # Find the administration from his birthplace
  ?birthPlace dbo:administrativeTerritory ?administrationFromBirthPlace .
}
```",6,8,7,2,3,2,3,28,0,0,1,0,0.0,0
531,67,test,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and tenant of Madrid and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/property/leader> ?v3 . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/property/office> ?result . ?v6 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/ontology/commander> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query to find Miguel Maura's political party
SELECT ?party WHERE {
  dbpedia:en:Miguel_Maura dbo:politicalParty ?party .
}

# Assuming we have identified the party, query for its leader and their office in Madrid
SELECT ?leader ?office WHERE {
  ?party dbo:leader ?leader .
  OPTIONAL { ?leader dbo:officeLocation ?location . FILTER(CONTAINS(LCASE(?location), ""madrid"")) }
  ?leader dbo:positionHeld ?office .
}

# Query to find the military conflict involving Manuel Pinto da Costa
SELECT ?conflict WHERE {
  dbpedia:en:Manuel_Pinto_da_Costa dbo:militaryConflict ?conflict .
}

# Assuming we have identified the conflict, query for his office in that conflict
SELECT ?office WHERE {
  dbpedia:en:Manuel_Pinto_da_Costa dbo:positionHeld ?office .
  FILTER(CONTAINS(LCASE(?office), ""commander"") && CONTAINS(LCASE(?conflict), LCASE(STR(?office))))
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
225,19,test,"Give me the entity in the region of Japan Standard Time and birthplace of the awardee, that is Japanese, of the reference, that is a television show, to Anita Borg Institute Women of Vision Awards.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/awards> ?v0 . ?v2 <http://dbpedia.org/property/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . ?v0 <http://xmlns.com/foaf/0.1/name> ""Anita Borg Institute Women of Vision Awards""@en . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v4 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?result <http://dbpedia.org/ontology/country> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?awardee ?birthPlace WHERE {
  # Find a television show associated with the Anita Borg Institute Women of Vision Awards
  ?show dbo:award dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  
  # Identify an awardee who is Japanese and linked to this show
  ?awardee dbo:nationality dbr:Japan ;
          dbo:award ?show .

  # Get the birthplace of the awardee
  ?awardee dbp:birthPlace ?birthPlace .

  # Ensure the birthplace is in a region observing Japan Standard Time
  OPTIONAL { 
    ?birthPlace dbo:timeZone dbr:Japan_Standard_Time .
  }
}
```",5,7,6,3,2,3,2,20,0,0,1,0,0.0,0
58,20,test,Give me the producer of the movie with the award of Ian Gregson (poet) and spouse of the person born as the birth name of Linda Bruckheimer.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v2 <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Ian_Gregson_(poet)> <http://dbpedia.org/property/awards> ?v4 . ?v5 <http://dbpedia.org/property/starring> ?v4 . <http://dbpedia.org/resource/Linda_Bruckheimer> <http://dbpedia.org/property/birthName> ?v1 . ?v5 <http://dbpedia.org/ontology/producer> ?result . },"```sparql
# Step 1: Find Ian Gregson's award
SELECT ?award WHERE {
  wd:Q1234567 dbo:awardReceived ?award .
}

# Step 2: Find the movie related to this award
SELECT ?movie WHERE {
  ?award dbo:relatedToMovie ?movie .
}

# Step 3: Find Linda Bruckheimer's birth name
SELECT ?birthName WHERE {
  wd:Q6543210 foaf:name ?birthName .
}

# Step 4: Identify her spouse
SELECT ?spouse WHERE {
  ?person foaf:name ?birthName ;
          dbo:spouse ?spouse .
}

# Step 5: Find the producer of the movie
SELECT ?producer WHERE {
  ?movie dbo:producer ?producer .
}
```

Note: Replace `wd:Q1234567` with Ian Gregson's actual DBpedia QID and `wd:Q6543210` with Linda Bruckheimer's actual DBpedia QID. The above query is a conceptual framework and may need adjustments based on the exact structure of DBpedia data.",6,6,7,3,2,3,2,20,0,0,1,0,0.0,0
39,68,test,"Give me the band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and professional in the profession of the producer of Coke Studio Philippines.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v5 <http://dbpedia.org/property/occupation> ?v4 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?result <http://dbpedia.org/property/occupation> ?v7 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?v0 <http://dbpedia.org/property/alterEgo> ?v7 . }","```sparql
SELECT ?band WHERE {
  ?person foaf:name ""Robert Lamar Thompson""@en .
  ?person dbo:birthName ""Robert Lamar Thompson""@en .
  ?person dbo:alias ""Kid Rock""@en .
  ?person dbo:profession dbr_Musician .

  ?character dbo:creator dbr_Walter_B._Gibson .
  ?character rdfs:label ""The Shadow""@en .

  ?producer foaf:name ""Ryan Cayabyab""@en .
  ?producer dbo:occupation dbr_Producer .
  ?producer dbo:worksFor dbr_Coke_Studio_Philippines .

  ?person dbo:musicBand ?band .
}
```",8,11,9,3,3,3,3,71,0,0,4,0,0.0,0
782,67,test,"Give me the band of the band member of the person born, that is a musical artist, on 1945-03-30 and reference to The Fabulous Thunderbirds and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.","SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . ?result <http://dbpedia.org/ontology/bandMember> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?band ?associatedArtist WHERE {
  # Find the person born on March 30, 1945 who is a musical artist
  ?person dbo:birthday ""1945-03-30""^^xsd:date ;
          rdf:type dbo:MusicalArtist .

  # Identify the band of this person
  ?person dbo:bandMember ?band .

  # Ensure the band has a reference to The Fabulous Thunderbirds
  FILTER EXISTS { ?band rdfs:label ""The Fabulous Thunderbirds""@en }

  # Find associated musical artist known as Nick Curran
  OPTIONAL {
    ?associatedArtist dbp:alias ""Nick Curran"" ;
                      dbo:collaboratorOf ?person .
  }
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
311,20,test,"Give me the associated musical artist of the associated musical artist, that is an artist, of the producer, that is an organisation and a band and a group, of Lotus (R.E.M. song) and band member of the writer of the album, that is a musical work and a work and an album, of Sappy.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Lotus_(R.E.M._song)> <http://dbpedia.org/ontology/producer> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/Sappy> <http://dbpedia.org/ontology/album> ?v4 . ?v4 <http://dbpedia.org/property/writer> ?v5 . },"```sparql
# Step 1: Find the producer of ""Lotus"" (R.E.M. song)
SELECT ?producer WHERE {
  dbpedia:Lotus_(song) dbo:producedBy ?producer .
}

# Step 2: Identify an organization and band associated with that producer
SELECT DISTINCT ?organization ?band WHERE {
  ?producer foaf:member ?person .
  ?person dbo:memberOf ?organization ;
          dbo:bandMemberOf ?band .
  FILTER (isLiteral(?organization) && isLiteral(?band))
}

# Step 3: Find the writer of the album containing ""Sappy""
SELECT DISTINCT ?writer WHERE {
  dbpedia:Sappy_(song) dbo:lyricsBy ?writer .
}

# Step 4: Identify a band member from the organization or band related to the producer
SELECT DISTINCT ?bandMember WHERE {
  ?organization dbo:member ?bandMember .
  FILTER (?bandMember != ?person)
}

# Step 5: Find the associated musical artist of that band member
SELECT DISTINCT ?associatedArtist WHERE {
  ?bandMember dbo:associatedMusicalArtist ?associatedArtist .
}
```",6,13,7,3,2,3,2,20,0,0,1,0,0.0,0
386,28,test,Give me the war of the awardee of Golden Sword for Bravery and war of the awardee of 25 and entity in the birth place of Elena Žalinkevičaitė-Petrauskienė.,"SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v5 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v1 . ?v3 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . ?v3 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
# Query to find the birthplace of Elena Žalinkevičaitė-Petrauskienė
SELECT ?birthPlace WHERE {
  dbpedia:Žalinkevičaitė-Petrauskienė-Elena dbo:birthPlace ?birthPlace .
}

# Assuming we have identified the awardee of the Golden Sword for Bravery, let's say it is ""AwardeeName""
# Query to find wars associated with this awardee
SELECT ?war WHERE {
  dbpedia:AwardeeName dbo:participatedInWar ?war .
}

# Assuming we have identified the 25th awardee of a specific award, let's say it is ""AnotherAwardee""
# Query to find wars associated with this awardee
SELECT ?war WHERE {
  dbpedia:AnotherAwardee dbo:participatedInWar ?war .
}

# Find entities in the birthplace of Elena Žalinkevičaitė-Petrauskienė
SELECT ?entity WHERE {
  ?birthPlace rdf:type dbo:City ; dbo:locatedIn ?country .
  OPTIONAL { ?birthPlace dbo:hasPart ?entity . }
}
```",6,6,7,2,3,2,3,28,0,0,1,0,0.0,0
80,68,test,"Give me the professional in the alter ego of The Shadow and actor of the movie with the author of Smartbomb (book) and actor of the album of the work, that is a song and a musical work, of T.I..",SELECT ?result WHERE { ?v7 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/ontology/album> ?v7 . ?v4 <http://dbpedia.org/property/starring> ?v5 . ?v4 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v5 . },"```sparql
SELECT ?actor WHERE {
  # Lamont Cranston's alter ego
  ?shadowCharacter rdfs:label ""Lamont Cranston""@en .
  
  # Movie involving Douglas Coupland
  ?movie dbo:writer ?coupland ;
         dbo:starring ?actor .

  # Douglas Coupland as author of Smartbomb
  ?coupland foaf:name ""Douglas Coupland"" .

  # T.I.'s song and album
  ?song dbo:title ""Live Your Life""@en ;
        dbo:featuringArtist ?rihanna .
  
  ?album dbo:track ?song ;
         dbo:artist ?ti .

  ?rihanna foaf:name ""Rihanna"" .
  ?ti foaf:name ""T.I."" .

  # Ensure the actor is Jake Gyllenhaal
  FILTER(?actor = <http://dbpedia.org/resource/Jake_Gyllenhaal>)
}
```",8,10,9,3,3,3,3,71,0,0,4,0,0.0,0
871,71,test,"Give me the parent of the awardee of the award of Rodney Lees and father of the child, that is a politician, of the alumnus of Eton College and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v8 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v8 <http://dbpedia.org/property/father> ?v7 . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v8 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/child> ?v2 . ?v4 <http://dbpedia.org/ontology/child> ?v5 . ?v7 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v2 <http://dbpedia.org/property/awards> ?v1 . }","```sparql
# Step 1: Identify the award Rodney Lees received.
SELECT ?award WHERE {
    wd:Q1234567 dbo:awardee wd:Rodney_Lees .
}

# Step 2: Find the parent of the awardee from step 1.
SELECT ?parent WHERE {
    ?person dbo:award ?award .
    ?person foaf:parent ?parent .
}

# Step 3: Identify an alumnus of Eton College who is a politician and has a child whose parent is also a politician and office holder.
SELECT ?alumnus WHERE {
    ?alumnus dbo:almaMater wd:Eton_College .
    ?alumnus rdf:type dbo:Politician .
    ?child foaf:parent ?alumnus .
    ?grandParent foaf:parent ?child .
    ?grandParent rdf:type dbo:Politician ;
                 dbo:officeHolder ?office .
}

# Step 4: Determine the parent of Edward Stanley, 17th Earl of Derby who fits the criteria in step 3.
SELECT ?parent WHERE {
    wd:Q6543210 foaf:parent ?parent .
    ?parent rdf:type dbo:Politician ;
            dbo:officeHolder ?office .
}

# Step 5: Find the common parent between results from steps 2 and 4.
SELECT DISTINCT ?commonParent WHERE {
    { SELECT ?parent1 WHERE { ... } } # Query from step 2
    UNION
    { SELECT ?parent2 WHERE { ... } } # Query from step 4
    FILTER (?parent1 = ?parent2)
}
```

Note: Replace `wd:Q1234567` and `wd:Eton_College` with the actual DBpedia identifiers for Rodney Lees and Eton College, respectively. Similarly, replace `wd:Q6543210` with the identifier for Edward Stanley, 17th Earl of Derby.",9,12,10,3,3,3,3,71,0,0,1,0,0.0,0
531,69,test,"Give me the tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election and office of the commander, that is an office holder and a politician, in Central African Republic Civil War and office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/residence> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/property/office> ?result . ?v7 <http://dbpedia.org/property/office> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v4 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v7 . },"```sparql
# Query for the tenant of the residence of the Mayor of Madrid in 2003
SELECT ?mayor ?residence WHERE {
  ?mayor dbo:officeHolderOf dbr:Mayor_of_Madrid.
  ?mayor dbo:electedDuringYear ""2003""^^xsd:gYear.
  OPTIONAL { ?mayor dbo:residence ?residence. }
}

UNION

# Query for the tenant of the residence of a commander during the Central African Republic Civil War
SELECT ?commander ?residence WHERE {
  ?commander dbo:officeHolderOf dbr:Central_African_Republic_Civil_War.
  ?commander rdf:type dbo:Politician.
  OPTIONAL { ?commander dbo:residence ?residence. }
}

UNION

# Query for the tenant of the residence of the leader of the party associated with Miguel Maura
SELECT ?partyLeader ?residence WHERE {
  ?miguelMaura dbo:associatedWith dbr:Miguel_Maura.
  ?party dbo:member ?miguelMaura.
  ?partyLeader dbo:leaderOf ?party.
  OPTIONAL { ?partyLeader dbo:residence ?residence. }
}
```",8,13,9,3,3,3,3,71,0,0,1,0,0.0,0
353,71,test,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of the parent of the child, that is a royalty, of Roger II of Sicily.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v5 <http://dbpedia.org/property/father> ?v4 . ?v7 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v2 <http://dbpedia.org/ontology/child> ?v1 . ?v8 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v8 <http://dbpedia.org/property/father> ?v7 . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?finalPerson WHERE {
  # Step 1: Identify Constance of Burgundy's spouse
  ?constance a dbo:Spouse ;
             dbp:spouse ?spouse .

  FILTER (str(?constance) = ""Constance_of_Burgundy"")

  # Step 2 & 3: Find the child of the child of her spouse who is royalty
  ?grandchild1 dbo:parent ?spouse ;
              a dbo:Person, dbo:Royalty .

  # Step 4: Identify William I's reference (royalty and office holder)
  ?reference dbo:officeHolder ?office ;
             a dbo:Person, dbo:Royalty .

  FILTER (str(?office) = ""William_I_of_Aquitaine"")

  # Step 5 & 6: Find the child of this reference who is royalty
  ?childReference dbo:parent ?reference ;
                  a dbo:Person, dbo:Royalty .

  # Step 7: Identify Roger II of Sicily's parent
  ?rogerII dbr:Roger_II_of_Sicily ;
           dbo:parent ?parentRogerII .

  # Step 8 & 9: Find the child of this parent who is royalty
  ?childParentRogerII dbo:parent ?parentRogerII ;
                     a dbo:Person, dbo:Royalty .

  # Step 10: Identify the father of the child from step 6
  ?fatherChildReference dbo:child ?childReference .

  # Final link: The person who fits all criteria
  ?finalPerson = ?grandchild1 .
  ?finalPerson = ?fatherChildReference .
}
```",9,14,10,3,3,3,3,71,0,0,1,0,0.0,0
119,68,test,"Give me the tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/residence> ?v7 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v5 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v3 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v5 <http://dbpedia.org/property/leader> ?v4 . ?v7 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v4 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v7 . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . },"```sparql
SELECT DISTINCT ?tenant WHERE {
  # Anxo Quintana's office in an administration
  ?office dbo:positionHeldBy dbr:Anxo_Quintana .
  ?office dbo:partOf ?administration .

  # Administration associated with the Spanish Socialist Workers' Party
  ?administration dbo:party dbr:Spanish_Socialist_Workers'_Party .

  # Leader of the administration
  ?administration dbo:leader ?leader .

  # Residence country of the leader
  ?leader dbo:residenceCountry ?country .
  
  # Ensure the country is a country
  ?country rdf:type dbp:Country .

  # Tenant of this country who is Spanish and connected to Spain or PSOE
  ?tenant dbo:nationality dbr:Spain ;
          dbo:residenceCountry ?country .
}
```",8,12,9,3,3,3,3,71,0,0,1,0,0.0,0
668,63,val,Give me the associated musical artist of the person born as the birth name of $pacely and person born as the birth name of Joey B and professional in the profession of Rod Argent.,SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v6 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v4 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v6 . ?v3 <http://dbpedia.org/property/birthName> ?v4 . ?result <http://dbpedia.org/property/birthName> ?v2 . },"```sparql
SELECT ?person ?associatedArtist WHERE {
  VALUES (?birthName ?stageName) { (""Christopher Wallace"" ""The Notorious B.I.G."") (""Joseph Barrett"" ""Joey Badass"") }
  
  OPTIONAL {
    ?person foaf:name ?birthName .
    ?person dbo:alias ?stageName .
    ?person dbo:associatedBandOrMusicalArtist ?associatedArtist .
  }

  OPTIONAL {
    ?person foaf:name ""Rod Argent""@en .
    ?person dbo:associatedBandOrMusicalArtist ?associatedArtist .
  }
}
```",7,7,8,3,3,3,3,71,0,0,1,0,0.0,0
628,63,val,"Give me the native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and person born as the birth name of Bobby Shmurda and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.",SELECT ?result WHERE { <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v6 . ?result <http://dbpedia.org/property/birthName> ?v6 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v4 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. },"```sparql
SELECT DISTINCT ?nativePlace WHERE {
  # Step 1: Identify GS9 members who are both an artist and a musical artist
  ?gs9Member dbo:type dbr:GS9_Member .
  ?gs9Member dbo:occupation dbr:Artist .
  ?gs9Member dbo:occupation dbr:Musical_artist .

  # Step 2: Find associated musical artists of this GS9 member
  ?associatedArtist dbo:member ?gs9Member .

  # Step 3: Identify a band member of the associated musical artist
  ?bandMember dbo:memberOf ?associatedArtist .
  
  # Step 4: Find Bobby Shmurda's birth name
  ?bobbyShmurda foaf:name ""Ackquille Jean Pollard""@en .
  
  # Step 5: Determine the award Coro de la Pontificia Universidad Católica de Puerto Rico received
  ?award dbo:recipient dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico .
  ?award dbo:type dbr:Region .
  ?award dbo:type dbr:American_state .
  ?award dbo:type dbr:Settlement .

  # Step 6: Find the native place of this award
  ?award dbo:nativePlace ?nativePlace .
}
```",7,14,8,3,3,3,3,71,0,0,1,0,0.0,0
103,65,val,"Give me the professional in the profession of the actor, that is a politician, of Ab Kya Hoga and actor of the movie, that is a television show, with Richard E. Grant and professional in the alter ego of The Shadow.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/occupation> ?v6 . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v4 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/property/occupation> ?v6 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v4 <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find actor from ""Ab Kya Hoga"" who is also a politician
  ?actor dbo:profession dbr:Actor .
  ?actor dbo:film dbr:Ab_Kya_Hoga .
  ?actor dbo:occupation dbr:Politician .

  UNION

  # Find actor from the movie with Richard E. Grant that was adapted into a TV show
  ?movie dbo:starring dbr:Richard_E._Grant .
  ?tvShow dbo:basedOn ?movie .
  ?actor dbo:film ?movie .

  UNION

  # Find actor who played Lamont Cranston, alter ego of The Shadow
  ?shadowFilm dbo:title ""The Shadow"" .
  ?actor dbo:starring ?shadowFilm .
  ?shadowFilm dbo:character dbr:Lamont_Cranston .
}
```",7,9,8,3,3,3,3,71,0,0,13,0,0.0,0
585,18,val,"Give me the native of the award, that is American and a settlement, of the awardee of New York (state) and child of the professional in Actress.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v3 <http://dbpedia.org/property/occupation> ""Actress""@en . ?v3 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?nativePlace WHERE {
  ?person dbo:nationality dbr:United_States ; 
          dbo:birthPlace dbr:New_York_(state) ;
          dbo:parent ?parent .
  
  ?parent rdf:type dbo:Actor ;
          dbp:profession ""Actress"" .

  ?award dbo:name ?awardName ;
         dbo:recipient ?person ;
         dbo:country dbr:United_States ;
         dbo:settlementType ?settlementType .

  FILTER regex(?awardName, ""^"", ""i"") .
  FILTER regex(?settlementType, ""(town|city|village)"", ""i"") .

  ?award dbo:nativePlace ?nativePlace .
}
```",5,7,6,3,2,3,2,20,0,0,10,0,0.0,0
412,25,val,"Give me the entity in the death place, that is a settlement, of Antonios Varthalitis and war of Konstantinos Ventiris and war of the leader of National Party of Greece.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v2 . <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v4 . ?result <http://dbpedia.org/ontology/place> ?v4 . <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?entityInDeathPlace WHERE {
  # Antonios Varthalitis's death place that is a settlement
  ?varthalitis dbo:deathPlace ?deathPlace .
  FILTER (isLiteral(?deathPlace) && contains(str(?deathPlace), ""settlement"")) .

  # Konstantinos Ventiris's war
  ?ventiris dbo:participatedInWar ?war1 .

  # Leader of National Party of Greece and their war
  ?leader foaf:name ?name .
  FILTER (str(?name) = ""LeaderName"") . # Replace with actual leader name if known
  ?leader dbo:participatedInWar ?war2 .

  # Entity in the death place related to those wars
  ?entityInDeathPlace dbo:location ?deathPlace .
  ?entityInDeathPlace dbo:relatedTo ?war1 .
  ?entityInDeathPlace dbo:relatedTo ?war2 .

  # Ensure entities are distinct and relevant
  FILTER (?varthalitis = dbr:Antonios_Varthalitis)
  FILTER (?ventiris = dbr:Konstantinos_Ventiris)
}
```

Note: Replace `""LeaderName""` with the actual name of the leader if known. This query assumes that the relationships `dbo:participatedInWar` and `dbo:relatedTo` are available in DBpedia, which may need adjustment based on actual data availability.",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
198,66,val,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and war of the awardee of Medal of Honor and force of the awardee of Gillmore Medal.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/place> ?v2 . ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v6 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?result <http://dbpedia.org/ontology/commander> ?v6 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?entityInBirthplace WHERE {
  ?person dbo:deathDate ""1850-08-05""^^xsd:date ;
          dbo:honoraryTitle ?medalOfHonor ;
          dbo:militaryConflict ?war .
  
  FILTER EXISTS { ?person dbo:honoraryTitle dbr:Medal_of_Honor . }
  FILTER EXISTS { ?person dbo:honoraryTitle dbr:Gillmore_Medal . }

  ?person dbo:birthPlace ?birthplace .

  ?birthplace a dbo:Settlement ;
              dbo:country dbr:United_States .

  ?relatedEntity dbo:location ?birthplace .
  
  BIND(?relatedEntity AS ?entityInBirthplace)
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
293,64,val,Give me the spouse of Roger Pryor (actor) and party member of the ruling party in the landmark at elevation of 20.116800000000001347 and person born as the birth name of the parent of Tisha Sterling.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/ontology/party> ?v2 . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v3 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/property/leaderParty> ?v2 . }","```sparql
# Step 1: Find Roger Pryor (actor) and his spouse
SELECT ?spouse WHERE {
  ?person rdfs:label ""Roger Pryor""@en .
  ?person dbo:occupation dbr:Actor .
  ?person foaf:mbox ?email . # To ensure we have the correct person
  OPTIONAL { ?person dbo:spouse ?spouse } .
}

# Step 2: Find a landmark with elevation 20.116800000000001347 and identify the ruling party member associated with it
SELECT ?rulingPartyMember WHERE {
  ?landmark geo:elevation ""20.1168""^^xsd:float ;
            dbo:location ?location .
  ?person dbo:memberOf ?party ;
          dbo:residence ?location .
  FILTER(?party = dbr:Ruling_Party) # Assuming 'Ruling Party' is a placeholder for the actual ruling party
  BIND(?person AS ?rulingPartyMember)
}

# Step 3: Find Tisha Sterling's parent(s) and their birth names
SELECT ?parentBirthName WHERE {
  ?tisha dbo:birthName ""Tisha Sterling""@en .
  ?tisha dbo:parent ?parent .
  ?parent foaf:name ?parentBirthName .
}

# Step 4: Identify the person born as that birth name
SELECT ?person WHERE {
  ?person foaf:name ?name .
  VALUES ?name { ?parentBirthName } # Use the result from step 3
}
```",7,7,8,3,3,3,3,71,0,0,1,0,0.0,0
78,25,val,"Give me the associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh and associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack) and band member of The Alan Parsons Project.","SELECT ?result WHERE { <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
# Query for Stuart Mcbeath Tosh's associated musical artist
SELECT ?artist WHERE {
  wd:Q1234567 foaf:name ""Stuart Mcbeath Tosh""@en .
  ?person dbo:associatedMusicalArtist ?artist .
  FILTER (?person = wd:Q1234567)
}

# Query for the writer of Wizards of Waverly Place (soundtrack) who is also a musical artist and an artist
SELECT ?writer WHERE {
  wd:Q7890123 dbo:composer ?writer .
  ?writer rdf:type wd:Q4321 ; # MusicalArtist
          rdf:type wd:Q5678 . # Artist
}

# Query for the band member of The Alan Parsons Project who is also the writer from above
SELECT ?bandMember WHERE {
  wd:Q3456789 dbo:bandMember ?bandMember .
  ?bandMember = ?writer .
}
```

Note: Replace `wd:Q1234567`, `wd:Q7890123`, and `wd:Q3456789` with the actual DBpedia identifiers for Stuart Mcbeath Tosh, Wizards of Waverly Place (soundtrack), and The Alan Parsons Project respectively. These identifiers need to be looked up in DBpedia.",5,8,6,2,3,2,3,28,0,0,1,0,0.0,0
37,9,val,"Give me the birthplace of the writer, that is an artist, of The Miseducation of Lauryn Hill and birthplace of the work, that is an artist and a musical artist, of Ethan Iverson.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/The_Miseducation_of_Lauryn_Hill> <http://dbpedia.org/property/writer> ?v1 . ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Ethan_Iverson> . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. },"```sparql
# Query for Lauryn Hill's birthplace
SELECT ?birthPlace WHERE {
  ?person dbo:wikiPageID ""Lauryn_Hill"" .
  ?person rdf:type dbo:Writer ;
          foaf:name ""Lauryn Hill""@en .
  ?person dbo:album ""The_Miseducation_of_Lauryn_Hill"" .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birthplace of a work by Ethan Iverson
SELECT ?workBirthPlace WHERE {
  ?work dbo:composer ""Ethan_Iverson""@en ;
        rdf:type dbo:MusicalWork .
  ?work dbo:birthPlace ?workBirthPlace .
}
```",4,7,5,2,2,2,2,9,0,0,1,0,0.0,0
103,64,val,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and professional in Actor.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v2 <http://dbpedia.org/property/starring> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v0 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find Daryl Hannah's DBpedia resource
  ?darylHannah a dbo:Actor ;
               foaf:name ""Daryl Hannah"" .

  # Find the TV series ""The Shadow""
  ?shadowSeries dbo:title ""The Shadow (1994 TV series)"" ;
                dbo:starring ?darylHannah .

  # Get the actor from the resource
  ?actor dbo:birthName ""Richard Grant Esterhuysen"" .
}
```",7,9,8,3,3,3,3,71,0,0,9,0,0.0,0
472,25,val,"Give me the territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen and administration of Olaf I of Denmark and administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> ?v4 . ?result <http://dbpedia.org/ontology/capital> ?v2 . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . ?v4 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v2 . }","```sparql
# Step 1: Find the death place of Christian Ditlev Ammentorp Hansen
SELECT ?deathPlace WHERE {
    dbpedia:Christian_Ditlev_Ammertorp_Hansen dbo:deathPlace ?deathPlace .
}

# Step 2: Ensure the death place is a settlement
SELECT DISTINCT ?settlement WHERE {
    ?deathPlace rdf:type dbo:Settlement .
    FILTER(?deathPlace IN (?deathPlace))
}

# Step 3: Find territories administered by Olaf I of Denmark
SELECT DISTINCT ?territory WHERE {
    dbpedia:Olaf_I_of_Denmark dbo:administeredTerritory ?territory .
}

# Step 4: Find the birthplace of Prince Christian of Schleswig-Holstein-Sonderburg-Beck and confirm his royalty status
SELECT DISTINCT ?birthPlace WHERE {
    dbpedia:Prince_Christian_of_Schleswig-Holstein-Sonderburg-Beck dbo:birthPlace ?birthPlace .
    FILTER EXISTS { ?person rdf:type dbo:Royalty . }
}

# Step 5: Find common territory administered from the death place, Olaf I's administration, and Prince Christian's birthplace
SELECT DISTINCT ?commonTerritory WHERE {
    VALUES (?deathPlace) { (<death_place_uri>) } # Replace <death_place_uri> with actual URI found in step 1
    VALUES (?territory) { (<olaf_administered_territories_uris>) } # Replace with URIs from step 3
    VALUES (?birthPlace) { (<prince_christian_birthplace_uri>) } # Replace with URI from step 4

    ?commonTerritory dbo:administeredBy ?deathPlace .
    ?commonTerritory dbo:administeredBy ?territory .
    ?commonTerritory dbo:relatedTo ?birthPlace .
}
```",5,7,6,2,3,2,3,28,0,0,1,0,0.0,0
557,62,val,"Give me the producer of A Star Is Born (1937 film) and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/producer> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v3 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?v4 <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v6 . }","```sparql
# Step 1: Find the producer of ""A Star Is Born"" (1937)
SELECT ?producer WHERE {
  ?film dcterms:title ""A Star Is Born""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1937) .
  ?film dbo:producer ?producer .
}

# Step 2: Find the actor from ""Johnny Doughboy"" and his claim to fame
SELECT ?actor ?claimToFame WHERE {
  ?film dcterms:title ""Johnny Doughboy""@en .
  ?film dbo:starring ?actor .
  OPTIONAL { 
    ?actor dbo:famousFor ?claimToFame .
  }
}

# Step 3: Find the fictional character associated with Kent Allard
SELECT ?character WHERE {
  ?reference rdfs:label ""Kent Allard (print)""@en .
  ?reference dbo:alterEgo ?character .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
531,66,val,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and office of the commander, that is an office holder and a politician, in Central African Republic Civil War and tenant of the residence of Alberto Ruiz-Gallardón.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/property/leader> ?v2 . ?v6 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/property/office> ?result . },"```sparql
# Query for the leader of Miguel Maura's political party
SELECT ?partyLeader WHERE {
  ?miguelMaura dbo:politicalParty ?party .
  ?party dbo:leader ?partyLeader .
  FILTER (str(?miguelMaura) = ""Miguel_Maura"")
}

UNION

# Query for the commander in Central African Republic Civil War
SELECT ?commander WHERE {
  ?war dbp:name ""Central_African_Republic_Civil_War"" .
  ?commander dbo:officeHolder ?office .
  ?office dbo:position ""Commander"" .
  FILTER (dbo:isPolitician(?commander))
}

UNION

# Query for the residence of Alberto Ruiz-Gallardón
SELECT ?residence WHERE {
  ?albertoRuizGallardon dbo:residence ?residence .
  FILTER (str(?albertoRuizGallardon) = ""Alberto_Ruiz-Gallardón"")
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
756,64,val,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26 and native of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/team> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v0 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://dbpedia.org/ontology/manager> ?v0 . }","```sparql
SELECT ?manager WHERE {
  # Step 1: Identify the person born on 1968-08-26 who is a sports manager from West Germany
  ?person dbo:birthDate ""1968-08-26""^^xsd:date ;
          rdf:type dbo:SportsManager ;
          dbo:nationality dbr:West_Germany .

  # Step 2: Determine the player managed by this person in the 2007–08 VfL Bochum season
  ?player dbo:manager ?person ;
          dbo:teamSeason ?teamSeason .
  ?teamSeason rdf:type dbo:SoccerClubSeason ;
              dbo:sportsTeamSeason dbr:2007%E2%80%9308_VfL_Bochum_season .

  # Step 3: Identify the soccer club associated with the player
  ?player rdf:type dbo:SoccerPlayer ;
          dbo:team ?soccerClub .
  ?soccerClub rdf:type dbo:SoccerClub .

  # Step 4: Find the manager of the team for that soccer club in the 2007–08 VfL Bochum season
  ?manager dbo:managedTeam ?soccerClub ;
           dbo:teamSeason ?teamSeason .
}
```",7,17,8,3,3,3,3,71,0,0,1,0,0.0,0
557,66,val,"Give me the professional in the alter ego of The Shadow and producer of the claim to fame, that is a work, of Cora Sue Collins and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues.",SELECT ?result WHERE { <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/knownFor> ?v2 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?v2 <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v6 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v6 . },"```sparql
# Step 1: Find the producer of ""High Society Blues""
SELECT ?producer WHERE {
  ?movie dcterms:title ""High Society Blues""@en .
  ?movie dbo:director ?person .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""producer""))
}

# Step 2: Identify an actor from ""High Society Blues"" and find a notable work they were involved with
SELECT DISTINCT ?actor WHERE {
  ?movie dcterms:title ""High Society Blues""@en .
  ?movie dbo:starring ?actor .
}

# Step 3: Find the producer of that notable work
SELECT ?producer WHERE {
  ?work dbo:starring ?actor .
  ?work dbo:director ?person .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""producer""))
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
361,26,val,"Give me the actor of the album, that is a film and a work, of Lasso the Moon and professional in  and professional in the profession of Frédéric Bouraly.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find the resource associated with ""Lasso the Moon"" that is both a film and an album/work
  ?resource rdfs:label ""Lasso the Moon""@en .
  
  # Ensure it is categorized as both a film and an album/work
  ?resource dbo:type ?type1 .
  ?resource dbo:type ?type2 .
  FILTER (?type1 IN (dbr:Film, dbr:Album) && ?type2 IN (dbr:Film, dbr:Work))

  # Find Frédéric Bouraly's professions
  dbr:Frédéric_Bouraly dbo:profession ?bouralyProfession .

  # Find actors associated with the resource who share a profession with Frédéric Bouraly
  ?resource dbo:actor ?actor .
  ?actor dbo:profession ?actorProfession .
  
  FILTER (?actorProfession = ?bouralyProfession)
}
```",5,7,6,2,3,2,3,28,0,0,2,0,0.0,0
203,63,val,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and military force of the force, that is an event and a societal event, of Robert Calder.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/battle> ?v3 . ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v6 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v4 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . }","```sparql
# Step 1: Find the military conflict involving ""The Triple X's""
SELECT ?war WHERE {
  ?event dbo:wikiPageRedirects db:Q1234567 . # Assuming Q1234567 is The Triple X's event
  ?event a dbo:MilitaryConflict .
  ?event rdfs:label ?war .
  FILTER (lang(?war) = 'en')
}

# Step 2: Find the commander of this war
SELECT ?commander WHERE {
  ?war dbo:commander ?commander .
  ?commander a dbo:MilitaryPerson .
  ?commander rdfs:label ?commanderLabel .
  FILTER (lang(?commanderLabel) = 'en')
}

# Step 3: Find the military force of William Bayne
SELECT ?force WHERE {
  wd:Q1234568 dbo:militaryForce ?force . # Assuming Q1234568 is William Bayne
  ?force a dbo:MilitaryUnit .
  ?force rdfs:label ?forceLabel .
  FILTER (lang(?forceLabel) = 'en')
}

# Step 4: Find the military conflict of this force
SELECT ?war WHERE {
  ?force dbo:participatedIn ?war .
  ?war a dbo:MilitaryConflict .
  ?war rdfs:label ?warLabel .
  FILTER (lang(?warLabel) = 'en')
}

# Step 5: Find the societal event associated with Robert Calder
SELECT ?event WHERE {
  wd:Q1234569 dbo:societalEvent ?event . # Assuming Q1234569 is Robert Calder
  ?event a dbo:Event .
  ?event rdfs:label ?eventLabel .
  FILTER (lang(?eventLabel) = 'en')
}

# Step 6: Find the military force of this event
SELECT ?force WHERE {
  ?event dbo:militaryForce ?force .
  ?force a dbo:MilitaryUnit .
  ?force rdfs:label ?forceLabel .
  FILTER (lang(?forceLabel) = 'en')
}

# Step 7: Find the military conflict of this force
SELECT ?war WHERE {
  ?force dbo:participatedIn ?war .
  ?war a dbo:MilitaryConflict .
  ?war rdfs:label ?warLabel .
  FILTER (lang(?warLabel) = 'en')
}

# Step 8: Find the commander of this final war
SELECT ?commander WHERE {
  ?war dbo:commander ?commander .
  ?commander a dbo:MilitaryPerson .
  ?commander rdfs:label ?commanderLabel .
  FILTER (lang(?commanderLabel) = 'en')
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
297,9,val,"Give me the entity in the birth place, that is a country, of Little Hat Jones and institution in the administration of Brian Kemp.",SELECT ?result WHERE { <http://dbpedia.org/resource/Little_Hat_Jones> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/state> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Brian_Kemp> . ?result <http://dbpedia.org/ontology/country> ?v1 . },"```sparql
SELECT DISTINCT ?birthCountry ?institution WHERE {
  # Find Little Hat Jones' birthplace that is a country
  ?person dbo:birthPlace ?birthPlace .
  FILTER (CONTAINS(LCASE(STR(?birthPlace)), ""little hat jones""))
  OPTIONAL { 
    ?birthPlace rdf:type dbpedia-owl:Country .
    BIND(?birthPlace AS ?birthCountry)
  }

  # Find an institution in the administration of Brian Kemp
  ?kemp dbo:positionHeld ?position .
  FILTER (CONTAINS(LCASE(STR(?kemp)), ""brian kemp""))
  OPTIONAL {
    ?position dbo:organization ?institution .
  }
}
```",4,5,5,2,2,2,2,9,0,0,346,0,0.0,0
78,26,val,"Give me the associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh and band member of the associated musical artist of David Paton and associated musical artist of Billy Lyall.","SELECT ?result WHERE { <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Find Stuart McBeath Tosh's associated band
  VALUES (?stuartBand) { 
    dbr:Average_White_Band 
  }
  
  # Find David Paton's associated band
  VALUES (?davidBand) { 
    dbr:Simple_Minds 
  }

  # Find Billy Lyall's associated band
  VALUES (?billyBand) { 
    dbr:Simple_Minds 
  }

  # Check if there is a common artist or band
  ?artist dbo:bandMember ?stuart .
  ?artist dbo:bandMember ?david .
  ?artist dbo:bandMember ?billy .

  FILTER(?artist = ?davidBand)
}
```",5,6,6,2,3,2,3,28,0,0,2,0,0.0,0
119,18,val,"Give me the war of the commander in the force, that is a television show and a military conflict, of Maria I of Portugal and entity in the residence, that is a country, of Dawid Olejniczak.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/ontology/commander> ?v2 . ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Maria_I_of_Portugal> . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/Dawid_Olejniczak> <http://dbpedia.org/property/residence> ?v3 . },"```sparql
# Step 1: Identify a war involving Maria I of Portugal and find if there is a television show with the same name.
SELECT ?war ?show WHERE {
  ?maria dbo:reignOver dbr:Portugal .
  ?maria foaf:name ""Maria I""@en .
  ?maria dbo:participatedIn ?war .
  ?war rdfs:label ?warLabel .
  FILTER(LANG(?warLabel) = 'en') .

  OPTIONAL {
    ?show dbo:title ?warLabel ;
          rdf:type dbo:TelevisionShow .
  }
}

# Step 2: Determine Dawid Olejniczak's country of residence.
SELECT ?country WHERE {
  dbr:Dawid_Olejniczak dbo:nationality ?nationality .
  ?nationality dbo:country ?country .
}

# Step 3: Find an entity in that country related to the context.
SELECT ?entity WHERE {
  ?entity dbo:residence ?country .
}
```",5,8,6,3,2,3,2,20,0,0,1,0,0.0,0
905,65,val,"Give me the child of the child, that is a royalty, of Béla IV of Hungary and spouse of the father of Philip I, Prince of Taranto and parent of the father, that is a royalty, of the spouse of Maria of Bytom.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v0 . ?v5 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v1 <http://dbpedia.org/property/father> ?v5 . }","```sparql
# Step 1: Find children of Béla IV of Hungary
SELECT ?child WHERE {
  wd:Q12345 wdt:P40 ?child .
}

# Step 2: Identify a royal child from the above results
SELECT ?royalChild WHERE {
  ?child wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is ""monarch""
  ?child rdfs:label ?name FILTER (lang(?name) = 'en') .
}

# Step 3: Find Philip I, Prince of Taranto's father and his spouse
SELECT ?father ?spouse WHERE {
  wd:Q67890 wdt:P22 ?father . # Q67890 is ""Philip I, Prince of Taranto""
  ?father wdt:P26 ?spouse .
}

# Step 4: Find the parent of the father (royalty) of Maria of Bytom's spouse
SELECT ?mariaSpouse WHERE {
  wd:Q23456 wdt:P26 ?mariaSpouse . # Q23456 is ""Maria of Bytom""
}
SELECT ?fatherOfSpouse WHERE {
  ?mariaSpouse wdt:P22 ?fatherOfSpouse .
  ?fatherOfSpouse wdt:P31/wdt:P279* wd:Q11850 .
}
SELECT ?parentOfFather WHERE {
  ?fatherOfSpouse wdt:P25 ?parentOfFather .
}

# Step 5: Find the child of the spouse from step 3 who is a royalty
SELECT ?childOfSpouse WHERE {
  ?spouse wdt:P40 ?childOfSpouse .
  ?childOfSpouse wdt:P31/wdt:P279* wd:Q11850 .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
89,66,val,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of the parent of Min Hla Htut of Pyakaung and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v6 . ?result <http://dbpedia.org/ontology/spouse> ?v6 . ?v2 <http://dbpedia.org/property/father> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?predecessor WHERE {
  # Step 1: Identify Saw Min Phyu's spouse
  ?spouse dbo:spouse ?sawMinPhyu .
  
  # Step 2: Find the child of Saw Min Phyu's spouse who is royalty
  ?child dbo:parent ?spouse ;
         a dbo:Royal .

  # Step 3: Determine the parent of Min Hla Htut of Pyakaung
  ?minHlaHtut dbp:birthPlace ""Pyakaung"" .
  ?parent dbo:child ?minHlaHtut .

  # Step 4: Identify the child of the parent found in step 3
  ?relatedChild dbo:parent ?parent .

  # Step 5: Find the father of Myat Hpone Pyo who is royalty
  ?myatHponePyo dbp:child ""Myat Hpone Pyo"" .
  ?royalFather dbo:child ?myatHponePyo ;
               a dbo:Royal .

  # Step 6: Determine the spouse of the father from step 5
  ?spouseOfRoyalFather dbo:spouse ?royalFather .

  # Step 7: Identify the predecessor of the child found in step 2
  ?predecessor dbo:successor ?child .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
288,9,val,"Give me the theme of the show with Anumta Qureshi and native of the figure known, that is a settlement and Pakistani, as The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Anumta_Qureshi> . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Pakistan>. ?v1 <http://dbpedia.org/property/nickname> ""The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature""@en . ?v3 <http://dbpedia.org/ontology/openingTheme> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?description WHERE {
  ?person foaf:name ""Anumta Qureshi""@en.
  ?person dbo:performerIn ?show.
  OPTIONAL { ?show dbo:abstract ?description. }
  FILTER(CONTAINS(LCASE(?description), ""lahore""))
}
```",4,6,5,2,2,2,2,9,0,0,1,0,0.0,0
68,25,val,"Give me the father of the parent of Dorothea of Denmark, Electress Palatine and child of the commander, that is a royalty, in Siege of Padua and father of Catherine of Austria, Queen of Portugal.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v4 . <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?father WHERE {
  ?dorothea dbo:parent ?parent .
  ?parent foaf:name ""John II of Denmark""@en .
  ?john dbo:child ?catherine .
  ?catherine foaf:name ""Catherine of Austria, Queen of Portugal""@en .
  ?john dbo:commanderIn ?siege .
  ?siege rdfs:label ""Siege of Padua""@en .
}
```",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
737,66,val,"Give me the child of the child of Duke Philipp of Württemberg and predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria.","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v6 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?v2 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> ?v6 . ?v2 <http://dbpedia.org/property/father> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?individual WHERE {
  # Duke Philipp of Württemberg's child's child
  ?philippChild a dbo:Person ;
                dbo:childOf dbr:Duke_Philipp_of_W%C3%BCrttemberg .
  ?philippGrandchild a dbo:Person ;
                     dbo:childOf ?philippChild .

  # Philipp Albrecht, Duke of Württemberg's child and that child's child
  ?albrechtChild a dbo:Person ;
                 dbo:childOf dbr:Philipp_Albrecht,_Duke_of_W%C3%BCrttemberg .
  ?albrechtGrandchild a dbo:Person ;
                      dbo:childOf ?albrechtChild .

  # Archduchess Margarete Sophie of Austria's parent
  ?margareteParent a dbo:Person ;
                   dbo:child dbr:Archduchess_Margarete_Sophie_of_Austria .
  
  # Child of the child of Archduchess Margarete Sophie of Austria's parent
  ?parentGrandchild a dbo:Person ;
                    dbo:childOf ?margareteParent .

  # The individual who is royalty and fits all criteria
  ?individual a dbo:Royalty ;
              rdfs:label ?name .
  
  FILTER (?philippGrandchild = ?individual)
  FILTER (?albrechtChild != ?individual) # Predecessor condition
  FILTER (?parentGrandchild = ?individual)

}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
158,26,val,"Give me the native of Grand Duchy of Finland and person decedent at the birthplace, that is a country, of Sandro Bertaggia and native of the administration, that is a country, of Nicholas II of Russia.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/deathPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Step 1: Find a notable person from the Grand Duchy of Finland
  ?finlandPerson dbo:nationality dbr:Grand_Duchy_of_Finland .
  
  # Step 2: Find Sandro Bertaggia's birthplace and someone who died there if it is a country
  dbr:Sandro_Bertaggia dbo:birthPlace ?bertaggiaBirthPlace .
  OPTIONAL {
    ?deathPerson dbo:deathPlace ?bertaggiaBirthPlace .
    FILTER (isIRI(?bertaggiaBirthPlace) && strstarts(str(?bertaggiaBirthPlace), ""http://dbpedia.org/resource/""))
  }
  
  # Step 3: Find a person native to Russia under Nicholas II
  ?russiaPerson dbo:nationality dbr:Russia .
  FILTER EXISTS { 
    ?russiaPerson dbo:birthDate ?birthDate .
    FILTER (?birthDate <= ""1917-03-15""^^xsd:date && (?birthDate > ""1894-05-06""^^xsd:date || !bound(?birthDate)))
  }
  
  # Combine the conditions
  VALUES ?person { ?finlandPerson ?deathPerson ?russiaPerson }
}
```",5,7,6,2,3,2,3,28,0,0,1,0,0.0,0
468,18,val,"Give me the child of the father, that is a royalty, of Peter IV of Aragon and reference to the real name of the child, that is a royalty, of Alfonso IV of Aragon.",SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://dbpedia.org/property/father> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v1 <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . },"```sparql
SELECT ?childPeterIVLabel ?childAlfonsoIVRealName WHERE {
  # Find a child of Peter IV who is royalty
  ?childPeterIV dbo:parent dbr:Peter_IV_of_Aragon .
  ?childPeterIV dbo:royalty ?isRoyalty .
  
  # Get the label for this child
  OPTIONAL { ?childPeterIV rdfs:label ?childPeterIVLabel . FILTER (lang(?childPeterIVLabel) = ""en"") }
  
  # Find a royal child of Alfonso IV and get their real name
  ?childAlfonsoIV dbo:parent dbr:Alfonso_IV_of_Aragon .
  ?childAlfonsoIV dbo:royalty ?isRoyalty2 .
  
  # Get the real name for this child
  OPTIONAL { ?childAlfonsoIV rdfs:label ?childAlfonsoIVRealName . FILTER (lang(?childAlfonsoIVRealName) = ""en"") }
}
```",5,7,6,3,2,3,2,20,0,0,3,0,0.0,0
353,65,val,"Give me the child of the child of Alfonso VI of León and Castile and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v6 <http://dbpedia.org/property/father> ?v0 . ?v4 <http://dbpedia.org/ontology/child> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v6 <http://dbpedia.org/property/father> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfGrandchild WHERE {
  # Alfonso VI's child
  ?alfonsoVI dbr:Alfonso_VI_of_León_and_Castile dbo:spouse ?spouse .
  
  # Child of Alfonso VI (grandparent)
  ?alfonsoVIChild dbo:childOf ?alfonsoVI ;
                  dbo:spouse ?grandchildSpouse .

  # Grandchild of Alfonso VI
  ?alfonsoVIGrandchild dbo:childOf ?alfonsoVIChild .

  # This grandchild is a father to someone who is royalty and an office holder related to William I
  ?alfonsoVIGrandchild dbo:fatherOf ?royaltyOfficeHolder .
  
  ?royaltyOfficeHolder dbo:spouse ?williamI ;
                       rdf:type dbo:Monarch ;
                       dbo:officeHolder ?office .

  # Parent of Roger III, Duke of Apulia
  ?rogerIII dbr:Roger_III,_Duke_of_Apulia dbo:parent ?parentOfRogerIII .
  
  # Child of the parent of Roger III (must be royalty)
  ?childOfParentOfRogerIII dbo:childOf ?parentOfRogerIII ;
                          rdf:type dbo:Monarch .

  # The child we are looking for is both a child of the grandchild and related to the royalty-office holder
  ?alfonsoVIGrandchildChild dbo:childOf ?alfonsoVIGrandchild .
  
  FILTER(?alfonsoVIGrandchildChild = ?childOfParentOfRogerIII)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
39,63,val,"Give me the professional in the alter ego of The Shadow and band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in the profession of the producer of Coke Studio Philippines.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v6 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v4 <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v6 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
SELECT ?person1Label ?person2Label ?person3Label WHERE {
  # Lamont Cranston (The Shadow)
  ?shadow dbo:alterEgo dbr:Lamont_Cranston .
  ?shadow rdfs:label ""The Shadow""@en .

  # Robert Lamar Thompson (Blackstreet)
  ?blackstreet dbo:birthName dbr:Robert_Lamar_Thompson .
  ?blackstreet dbo:band dbr:Blackstreet .
  ?blackstreet rdf:type dbo:MusicalArtist .

  # Jonathan Manalo (Producer of Coke Studio Philippines)
  ?producer dbo:profession dbr:Music_Production .
  ?producer dbo:worksFor dbr:Coke_Studio_Philippines .
  ?producer rdfs:label ""Jonathan Manalo""@en .

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }

  BIND(?shadow AS ?person1)
  BIND(?blackstreet AS ?person2)
  BIND(?producer AS ?person3)

  # Get labels for the individuals
  ?person1 rdfs:label ?person1Label .
  ?person2 rdfs:label ?person2Label .
  ?person3 rdfs:label ?person3Label .
}
```",7,8,8,3,3,3,3,71,0,0,4,0,0.0,0
782,66,val,"Give me the band of the band member of Eric Clapton and reference to the real name of The Fabulous Thunderbirds and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v6 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> ?v6 . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
# Query 1: Eric Clapton's Band
SELECT ?band WHERE {
  wd:Q34629 dbo:memberOfBandOrMusicalArtist ?band .
}

# Query 2: The Fabulous Thunderbirds' Real Name
SELECT ?realName WHERE {
  wd:Q1234567 foaf:name ?realName . # Replace Q1234567 with the actual DBpedia ID for The Fabulous Thunderbirds
}

# Query 3: Nick Curran's Associated Musical Artist
SELECT ?associatedArtist WHERE {
  wd:Q9876543 dbo:associatedMusicalArtist ?associatedArtist .
}
```

Note: You will need to replace `wd:Q1234567` and `wd:Q9876543` with the actual DBpedia resource identifiers for The Fabulous Thunderbirds and Nick Curran, respectively. These can be found by searching DBpedia or using a SPARQL endpoint to query for these entities.",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
119,63,val,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and tenant of the residence, that is a country, of Álvaro Quirós.",SELECT ?result WHERE { <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v6 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v4 <http://dbpedia.org/property/leader> ?v3 . ?v2 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v6 . ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?office WHERE {
  ?event dbo:leader dbr:Anxo_Quintana .
  ?event dbo:administration ?admin .
  ?admin dbo:country dbr:Spain .
  ?admin dbo:party dbr:Spanish_Socialist_Workers'_Party .
  
  ?residence dbp:resident dbr:Álvaro_Quirós .
  ?residence dbo:country ?country .
  
  FILTER (?country = ?admin)
  
  ?event dbo:positionHeld ?office .
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
38,18,val,"Give me the author of the work, that is a written work and a work, of Joe Biden and author of the work, that is a work and a written work and American and a book, of the commander, that is an office holder and a politician, in North Carolina Air National Guard.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?v2 <http://dbpedia.org/property/author> ?v1 . ?v2 <http://dbpedia.org/ontology/author> ?result . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. <http://dbpedia.org/resource/North_Carolina_Air_National_Guard> <http://dbpedia.org/ontology/commander> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/property/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author1Label ?author2Label WHERE {
  # Joe Biden as the author of his own works
  dbr:Joe_Biden a dbo:Writer ;
                dbo:work ?bidenWork .
  
  # Commander of North Carolina Air National Guard who is an author
  ?commander a dbo:Politician, dbo:OfficeHolder ;
             dbo:office ""North Carolina Air National Guard"" ;
             dbo:work ?guardianWork .

  FILTER EXISTS { ?guardianWork a dbo:Book . }
  
  # Ensure the commander is American
  ?commander dbo:nationality dbr:United_States .
  
  SERVICE <http://dbpedia.org/sparql> {
    VALUES ?bidenWork { ?bidenWork }
    VALUES ?guardianWork { ?guardianWork }
    
    ?bidenWork a dbo:WrittenWork, dbo:CreativeWork .
    ?guardianWork a dbo:Book, dbo:CreativeWork .
  }

  # Get labels for the authors
  ?author1Label rdfs:label ?author1 .
  ?author2Label rdfs:label ?author2 .

  FILTER (lang(?author1Label) = ""en"")
  FILTER (lang(?author2Label) = ""en"")

  BIND(dbr:Joe_Biden AS ?author1)
  BIND(?commander AS ?author2)
}
```",5,13,6,3,2,3,2,20,0,0,1,0,0.0,0
412,26,val,Give me the entity in Athens and war of the leader of National Party of Greece and war of the awardee of 30.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v1 . }","```sparql
# Query to find the leader of the National Party of Greece and their associated war
SELECT ?leader ?warLeader WHERE {
  ?party dbo:officialName ""National Party (Greece)"" .
  ?party dbo:leader ?leader .
  ?leader dbo:occupation ""politician"" .
  OPTIONAL { ?leader dbo:spouse ?spouse . }
  OPTIONAL { ?leader dbo:award ?award . }
  OPTIONAL { ?leader dbo:memberOf ?organization . }
  OPTIONAL { ?leader dbo:memberOf ?warLeader . }
} LIMIT 1

# Query to find an awardee of award number 30 and their associated war
SELECT ?awardee ?warAwardee WHERE {
  ?award dbo:number ""30"" .
  ?award dbo:recipient ?awardee .
  OPTIONAL { ?awardee dbo:occupation ""military personnel"" . }
  OPTIONAL { ?awardee dbo:memberOf ?organization . }
  OPTIONAL { ?awardee dbo:memberOf ?warAwardee . }
} LIMIT 1

# Query to find a common war associated with both entities and linked to Athens
SELECT DISTINCT ?commonWar WHERE {
  VALUES (?leader ?awardee) {(?leader) (?awardee)}
  ?leader dbo:memberOf ?commonWar .
  ?awardee dbo:memberOf ?commonWar .
  ?commonWar dbo:location ?location .
  FILTER (CONTAINS(LCASE(?location), ""athens""))
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
89,65,val,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and child of the parent of Min Hla Htut of Pyakaung and predecessor of the child of Saw Shwe Khet.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?v0 <http://dbpedia.org/property/father> ?v6 . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v4 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?spouse WHERE {
  # Step 1: Identify Saw Shwe Khet's child who is royalty
  ?child rdfs:label ""Saw Shwe Khet""@en .
  ?royalChild dbo:child ?child ;
              a dbo?Royal .

  # Step 2: Find Min Hla Htut's parent
  ?minHlaHtut rdfs:label ""Min Hla Htut""@en .
  ?parent dbo:parent ?minHlaHtut .

  # Step 3: Determine the predecessor of Saw Shwe Khet's child
  ?predecessor dbo:successor ?royalChild ;
               dbo:childOf ?parent .

  # Step 4: Identify the father and his spouse
  ?father dbo:child ?predecessor .
  ?spouse dbo:spouse ?father .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
361,25,val,Give me the actor of Rustlers' Rhapsody and professional in the alter ego of The Shadow and professional in the profession of Frédéric Bouraly.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actorOfRustlers WHERE {
  ?film dbo:title ""Rustlers' Rhapsody""@en .
  ?film dbo:starring ?actorOfRustlers .
}

UNION

SELECT DISTINCT ?shadowActor WHERE {
  ?character rdfs:label ""The Shadow""@en .
  ?character dbo:portrayedBy ?shadowActor .
}

UNION

SELECT DISTINCT ?frédéricProfession WHERE {
  dbr:Frédéric_Bouraly dbo:occupation ?frédéricProfession .
  ?otherPerson dbo:occupation ?frédéricProfession .
  FILTER(?otherPerson != dbr:Frédéric_Bouraly)
}
```",5,5,6,2,3,2,3,28,0,0,2,0,0.0,0
159,66,val,"Give me the reference to the writer of Always the Love Songs and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v6 . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v3 <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . },"```sparql
SELECT ?person WHERE {
  # David E. Kelley wrote ""Always the Love Songs""
  ?tvshow dcterms:creator ?writer .
  ?writer foaf:name ""David E. Kelley"" .

  # John III Sobieski commanded in the Battle of Vienna
  ?battle dbp:commander ?sobieski .
  ?sobieski foaf:name ""John III Sobieski"" .
  ?battle rdfs:label ""Battle of Vienna""@en .

  # Polish-Lithuanian Commonwealth was involved in the Battle of Vienna
  ?commonwealth dbo:participatedIn ?battle .
  ?commonwealth dbp:name ""Polish–Lithuanian Commonwealth""@en .

  # Augustus II succeeded John III Sobieski as King of Poland
  ?sobieski dbo:succeededBy ?successor .
  ?successor foaf:name ""Augustus II the Strong"" .

  # Augustus II was a politician and office holder in the Russo-Polish War (1654–1667)
  ?war dbp:participants ?augustus .
  ?augustus foaf:name ""Augustus II the Strong"" .
  ?war rdfs:label ""Russo-Polish War (1654–1667)""@en .

  # The person we are looking for is Augustus II
  ?person foaf:name ""Augustus II the Strong"" .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
119,62,val,"Give me the tenant of Santiago de Compostela and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and office of the leader of the administration, that is an event, of Anxo Quintana.",SELECT ?result WHERE { ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . ?v4 <http://dbpedia.org/property/leader> ?v3 . ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v3 <http://dbpedia.org/property/office> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://dbpedia.org/property/residence> ?v6 . ?result <http://dbpedia.org/ontology/headquarter> ?v6 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenantOfSantiago ?countryOfResidence ?officeHeldByAnxo
WHERE {
  # Find the tenant of Santiago de Compostela
  dbr:Santiago_de_Compostela dbo:mayor ?tenantOfSantiago .
  
  # The country of residence for a Spanish citizen is Spain
  BIND(dbr:Spain AS ?countryOfResidence)
  
  # Find the office held by Anxo Quintana during an event
  OPTIONAL {
    dbr:Anxo_Quintana dbo:office ?officeHeldByAnxo .
    ?event dbo:agent dbr:Anxo_Quintana ;
           a dbo:Event .
  }
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
89,62,val,"Give me the predecessor of Myat Hpone Pyo and child of the parent of the child of Minye Kyawswa and spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v3 <http://dbpedia.org/ontology/child> ?v4 . ?v0 <http://dbpedia.org/property/father> ?v6 . ?result <http://dbpedia.org/ontology/spouse> ?v6 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?predecessor WHERE {
  # Step 1: Find Minye Kyawswa's royal child
  ?minyeKyawswaChild a dbo:RoyalPerson ;
                     dbo:childOf dbr:Minye_Kyawswa .

  # Step 2: Get the parent of that child
  ?parent dbr:Minye_Kyawswa ;
          dbo:child ?minyeKyawswaChild .

  # Step 3: Find Myat Hpone Pyo's predecessor
  ?myatHponePyo a dbo:RoyalPerson ;
                dbo:predecessorOf ?predecessor .

  # Step 4: Identify Saw Shwe Khet's royal child and spouse of the father
  ?sawShweKhetChild a dbo:RoyalPerson ;
                   dbo:childOf dbr:Saw_Shwe_Khet .
  
  ?father dbr:Saw_Shwe_Khet ;
          dbo:child ?sawShweKhetChild .

  ?spouse dbo:spouse ?father .

  # Step 5: Combine relationships
  FILTER(?predecessor = ?parent && ?myatHponePyo = ?spouse)
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
595,64,val,"Give me the author of Back to Work (book) and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/author> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
SELECT ?author WHERE {
  ?book dcterms:title ""Back to Work"" .
  ?book dbo:author ?author .
  FILTER (str(?author) = ""Bill_Clinton"") .

  OPTIONAL { 
    ?war rdfs:label ?warLabel .
    FILTER(CONTAINS(LCASE(STR(?warLabel)), ""world war i"") || CONTAINS(LCASE(STR(?warLabel)), ""world war ii"")) .
    ?commander dbo:position ?position .
    ?commander foaf:name ?name .
    FILTER (CONTAINS(LCASE(STR(?name)), ""woodrow wilson"")) .
  }

  OPTIONAL {
    ?ship dcterms:title ""USS Arcadia (ID-1605)"" .
    ?ship dbo:owner ?owner .
    FILTER(CONTAINS(LCASE(STR(?owner)), ""united states government"") || CONTAINS(LCASE(STR(?owner)), ""us shipping board emergency fleet corporation"")) .
  }

  OPTIONAL {
    ?spouse foaf:name ""Hillary_Clinton"" .
    ?spouse dbo:spouse ?author .
    FILTER (str(?author) = ""Bill_Clinton"") .
    ?officeHolder dbo:position ?position .
    FILTER(CONTAINS(LCASE(STR(?position)), ""politician"") || CONTAINS(LCASE(STR(?position)), ""office holder"")) .
  }

  OPTIONAL {
    ?work dcterms:title ""Living History"" .
    ?work dbo:author ?spouse .
    FILTER (str(?spouse) = ""Hillary_Clinton"") .
  }
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
353,64,val,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and child of the parent of the child, that is a royalty, of Roger II of Sicily and father of William II of Sicily.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?finalIndividual WHERE {
  # Step 1: Find Constance of Burgundy's spouse
  ?constance dbo:spouse ?spouse .
  FILTER(STR(?constance) = ""Constance_of_Burgundy_(died_1160)"")

  # Step 2: Find the child of that spouse who is royalty
  ?child1 dbo:parent ?spouse ;
         a dbo:Monarch .

  # Step 3: Identify Roger II of Sicily's parent
  ?rogerParent dbo:child ?rogerII .
  FILTER(STR(?rogerII) = ""Roger_II_of_Sicily"")

  # Step 4: Find the child of that parent who is royalty
  ?child2 dbo:parent ?rogerParent ;
         a dbo:Monarch .

  # Step 5: Identify William II of Sicily's father
  ?williamII dbp:father ?father .
  FILTER(STR(?williamII) = ""William_II_of_Sicily"")

  # Step 6: Find the common individual who fits both criteria
  VALUES (?finalIndividual) {
    (str(?child1))
    (str(?child2))
  }
  
  FILTER(?finalIndividual = str(?father))
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
419,9,val,"Give me the entity in the birthplace of Yandamuri Veerendranath and alma mater of the awardee, that is australian and a scientist, of Australian Laureate Fellowship.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>. <http://dbpedia.org/resource/Yandamuri_Veerendranath> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v3 <http://dbpedia.org/property/awards> ""Australian Laureate Fellowship""@en . ?result <http://dbpedia.org/ontology/state> ?v1 . ?v3 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Australia>. ?v3 <http://dbpedia.org/ontology/almaMater> ?result . }","```sparql
# Step 1: Get Yandamuri Veerendranath's birthplace
SELECT ?birthPlace WHERE {
    wd:Q123456 wdt:P19 ?birthPlace .
}

# Step 2: Find Australian scientists who received the Australian Laureate Fellowship
SELECT DISTINCT ?scientist ?almaMater WHERE {
    ?scientist wdt:P106 wd:Q36180 ; # scientist
               wdt:P27 wd:Q30 ;       # Australian
               wdt:P166 wd:Q1234567 . # Australian Laureate Fellowship
    OPTIONAL { ?scientist wdt:P69 ?almaMater } .
}

# Step 3: Find common entity between birthplace and alma mater
SELECT DISTINCT ?commonEntity WHERE {
    VALUES (?birthPlace) { (<birthPlace_URI_from_step_1>) }
    VALUES (?almaMater) { (<almaMater_URI_from_step_2>) }
    
    FILTER(?birthPlace = ?almaMater)
    BIND(?birthPlace AS ?commonEntity)
}
```

Note: Replace `<birthPlace_URI_from_step_1>` and `<almaMater_URI_from_step_2>` with the actual URIs obtained from executing the first two queries.",4,6,5,2,2,2,2,9,0,0,2,0,0.0,0
492,25,val,Give me the death place of Sal Mineo and death place of the actor of The Sky Ranger (1928 film) and death place of the actor of Color Me Dead.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v2 . <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . ?v2 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v4 . ?v4 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for Sal Mineo's death place
SELECT ?deathPlace WHERE {
  dbpedia:Sal_Mineo dbo:placeOfBirth ?birthPlace .
  dbpedia:Sal_Mineo dbo:deathPlace ?deathPlace .
}

UNION

# Query for Harry Carey's (actor of The Sky Ranger) death place
SELECT ?deathPlace WHERE {
  dbpedia:Harry_Carey dbo:placeOfBirth ?birthPlace .
  dbpedia:Harry_Carey dbo:deathPlace ?deathPlace .
}

UNION

# Query for George Raft's (actor of Color Me Dead) death place
SELECT ?deathPlace WHERE {
  dbpedia:George_Raft dbo:placeOfBirth ?birthPlace .
  dbpedia:George_Raft dbo:deathPlace ?deathPlace .
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
816,62,val,"Give me the parent of Doon Arbus and parent of the professional in the profession of Eugène Cattin and actor of the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v6 . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v6 <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/property/starring> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Query 1: Parent of Doon Arbus
SELECT ?parent WHERE {
  wd:Q123456 rdfs:label ""Doon Arbus""@en .
  OPTIONAL { wd:Q123456 wdt:P40 ?parent . }
}

# Query 2: Profession of Eugène Cattin
SELECT ?profession WHERE {
  wd:Q789012 rdfs:label ""Eugène Cattin""@en .
  OPTIONAL { wd:Q789012 wdt:P106 ?occupation .
             ?occupation rdfs:label ?profession . FILTER(LANG(?profession) = ""en"") }
}

# Query 3: Actor in a Movie Work where someone died at Los Angeles
SELECT DISTINCT ?actor WHERE {
  ?movie wdt:P577 ?deathDate .
  ?deathEvent wdt:P19 wd:Q84 ; # Los Angeles
              wdt:P31/wdt:P279* wd:Q1656682 . # death event
  ?movie wdt:P50 ?actor .
}

# Query 4: Parent of the Actor identified in Query 3
SELECT DISTINCT ?parent WHERE {
  ?actor wdt:P40 ?parent .
}
```

Note: Replace `wd:Q123456` with Doon Arbus's actual DBpedia QID and `wd:Q789012` with Eugène Cattin's actual DBpedia QID. The queries assume these IDs are known or can be found through a preliminary search.",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
871,66,val,"Give me the father of the child, that is a politician, of the alumnus of Eton College and parent of the awardee of Commander of the Royal Victorian Order and parent of the child of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?v3 <http://dbpedia.org/property/father> ?v6 . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v0 . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v5 . ?v3 <http://dbpedia.org/property/father> ?result . ?v6 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?father WHERE {
  # Step 1: Find the alumnus of Eton College
  ?person dbo:almaMater dbr:Eton_College .
  
  # Step 2: Identify their child who is a politician
  ?child dbo:parent ?person ;
         rdf:type dbo:Politician .

  # Step 3: Find the parent of an awardee of Commander of the Royal Victorian Order
  ?awardRecipient dbo:award dbr:Commander_of_the_Royal_Victorian_Order .
  ?politicianChild dbo:child ?awardRecipient ;
                   dbo:parent ?child .

  # Step 4: Identify the child of Frederick Stanley, 16th Earl of Derby
  ?frederickStanley dbr:Fredrick_Stanley,_16th_Earl_of_Derby ;
                    dbo:child ?descendant .

  # Step 5: Find the parent of this descendant
  ?parentOfDescendant dbo:child ?descendant .

  # Step 6: Connect these relationships
  FILTER(?politicianChild = ?parentOfDescendant)

  # Step 7: Identify the father of the politician
  ?father dbo:child ?child .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
941,18,val,"Give me the spouse of the spouse of Duchess Luise of Brunswick-Wolfenbüttel and child of the parent, that is a royalty, of the child of Ferdinand Albert II, Duke of Brunswick-Lüneburg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://dbpedia.org/ontology/child> ?v1 . ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Duchess_Luise_of_Brunswick-Wolfenbüttel> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT DISTINCT ?spouseOfSpouse ?royalChild ?finalSpouse WHERE {
  # Step 1: Identify Duchess Luise of Brunswick-Wolfenbüttel's spouse
  ?duchess dcterms:title ""Duchess Luise of Brunswick-Wolfenbüttel""@en .
  ?duchess dbo:spouse ?husband .

  # Step 2: Find the spouse of her spouse (which is Duchess Luise herself)
  ?husband dbo:spouse ?spouseOfSpouse .

  # Step 3: Identify Ferdinand Albert II, Duke of Brunswick-Lüneburg's child
  ?ferdinand dcterms:title ""Ferdinand Albert II, Duke of Brunswick-Lüneburg""@en .
  ?ferdinand dbo:child ?child .

  # Step 4: Determine the parent of that child (which is Ferdinand Albert II)
  ?parent dbo:child ?child .

  # Step 5: Find a royal child of that parent
  ?parent dbo:child ?royalChild .
  ?royalChild rdf:type dbo:Monarch .

  # Step 6: Identify the spouse of the person from step 2
  ?spouseOfSpouse dbo:spouse ?finalSpouse .
}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
943,64,val,"Give me the child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and reference to .","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://dbpedia.org/property/father> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://dbpedia.org/ontology/parent> ?v2 . ?v5 <http://dbpedia.org/property/father> ?v0 . ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?grandfather WHERE {
  # Step 1: Identify the commander in the Siege of Mukha who is royalty
  ?commander dbo:event dbr:Siege_of_Mukha .
  ?commander a dbo:RoyalFamily .

  # Step 2: Find the child of this royal commander
  ?child dbo:parent ?commander .

  # Step 3: Identify the grandfather (father's father) who is royalty and an office holder
  ?grandfather dbo:child ?father .
  ?father dbo:parent ?child .
  ?grandfather a dbo:RoyalFamily .
  ?grandfather dbo:officeHolder ?position .

  # Step 4: Find the child of Baeda Maryam I
  ?baedaChild dbo:parent dbr:Baeda_Maryam_I .

  # Step 5: Establish connection between grandfather and Baeda's child
  ?reference dbo:reference ?grandfather .
  ?reference dbo:reference ?baedaChild .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
816,65,val,"Give me the parent of the child of Allan Arbus and parent of the professional in the profession of Eugène Cattin and actor of the movie, that is a work, with Herschel Bernardi.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v6 . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v3 . ?v4 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?v6 <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
# Step 1: Find Allan Arbus's child
SELECT ?child WHERE {
    ?allanArbus dbo:spouse ?person .
    FILTER (str(?allanArbus) = ""Allan_Arbus"")
    ?person dbo:child ?child .
}

# Step 2: Find the parent of Allan Arbus's child
SELECT ?parent WHERE {
    ?child dbo:parent ?parent .
    # Use the result from step 1 for ?child
}

# Step 3: Identify Eugène Cattin's profession
SELECT ?profession WHERE {
    ?eugeneCattin dbo:occupation ?profession .
    FILTER (str(?eugeneCattin) = ""Eugène_Cattin"")
}

# Step 4: Find another professional in the same field as Eugène Cattin
SELECT DISTINCT ?professional WHERE {
    ?professional dbo:occupation ?sameProfession .
    # Use the result from step 3 for ?sameProfession
}

# Step 5: Find a movie featuring Herschel Bernardi and this professional
SELECT DISTINCT ?movie WHERE {
    ?herschelBernardi dbo:film ?movie .
    FILTER (str(?herschelBernardi) = ""Herschel_Bernardi"")
    ?professional dbo:film ?sameMovie .
    FILTER (?movie = ?sameMovie)
}

# Step 6: Find the parent of the actor from that movie
SELECT DISTINCT ?parent WHERE {
    ?actor dbo:film ?foundMovie .
    # Use the result from step 5 for ?foundMovie
    ?actor dbo:parent ?parent .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
595,65,val,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House and commander in the war, that is a disease and a societal event, of United States Navy and author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v6 <http://dbpedia.org/property/author> ?v0 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v6 <http://dbpedia.org/property/author> ?result . ?v4 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?spouse WHERE {
    ?author dbr:An_Invitation_to_the_White_House dbo:author ?person .
    ?person rdf:type dbo:Politician ;
            dbo:spouse ?spouse .
    
    ?war dbo:name ""Gulf War"" ;
         dbo:commander ?commander .
    ?commander rdfs:label ""George W. Bush""@en .

    ?resident dbr:Chappaqua,_New_York dbo:residence ?person2 .
    ?person2 rdf:type dbo:Politician ;
             dbo:spouse ?author .
    
    ?work dbr:An_Invitation_to_the_White_House ;
          rdf:type dbo:Book .
    ?author rdfs:label ""Hillary Clinton""@en .

    ?spouse rdfs:label ?name .
}
```",7,16,8,3,3,3,3,71,0,0,1,0,0.0,0
557,65,val,"Give me the producer of the claim to fame, that is a movie and a work, of Janet Gaynor and professional in the alter ego of The Shadow and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy.",SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v3 . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/ontology/producer> ?result . },"```sparql
# Step 1: Find Janet Gaynor's most famous movie
SELECT ?movie WHERE {
  wd:Q12345 dbo:filmRole ?role .
  ?role dbo:work ?movie .
  FILTER EXISTS { ?movie dbo:genre wd:Q11424 } # Assuming the genre is ""Film""
}

# Step 2: Find producer of The Shadow's stories (Lamont Cranston)
SELECT ?producer WHERE {
  wd:Q67890 dbo:alterEgoName ""Lamont Cranston""@en .
  ?story dbo:workCreator wd:Q67890 .
  ?story dbo:producer ?producer .
}

# Step 3: Find the actor of Johnny Doughboy and their claim to fame
SELECT ?actor WHERE {
  ?movie dbo:title ""Johnny Doughboy""@en .
  ?movie dbo:starring ?actor .
}
SELECT ?famousWork WHERE {
  ?actor dbo:filmRole ?role .
  ?role dbo:work ?famousWork .
}

# Step 4: Find common producer
SELECT DISTINCT ?commonProducer WHERE {
  VALUES (?producer1) { (<result from step 2>) }
  VALUES (?producer2) { (<result from step 3>) }
  FILTER(?producer1 = ?producer2)
}
```

Note: Replace `wd:Q12345` with Janet Gaynor's DBpedia ID, `wd:Q67890` with The Shadow's DBpedia ID, and adjust the queries based on actual data available in DBpedia.",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
492,26,val,Give me the death place of the actor of The Sky Ranger (1928 film) and death place of Carolyn Jones and death place of the actor of Aladdin (1958 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . ?v2 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for The Sky Ranger (1928 film) actor's death place
SELECT ?actor ?deathPlace WHERE {
  ?film dcterms:title ""The Sky Ranger""@en .
  ?film dbo:starring ?actor .
  ?actor dbo:deathPlace ?deathPlace .
}

UNION

# Query for Carolyn Jones' death place
SELECT ?person ?deathPlace WHERE {
  ?person foaf:name ""Carolyn Jones"" .
  ?person dbo:deathPlace ?deathPlace .
}

UNION

# Query for Aladdin (1958 film) actor's death place
SELECT ?actor ?deathPlace WHERE {
  ?film dcterms:title ""Aladdin""@en .
  ?film dbo:starring ?actor .
  ?actor dbo:birthYear ?year .
  FILTER(?year <= 1958 && ?year >= 1900) # Assuming the actor was born before or around the film's release
  ?actor dbo:deathPlace ?deathPlace .
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
905,64,val,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and parent of Charles Martel of Anjou.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v5 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v4 <http://dbpedia.org/property/father> ?v2 . ?result <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v5 . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT DISTINCT ?childOfChild WHERE {
  # Step 1: Predecessor of Stephen V of Hungary
  ?predecessor dbo:successor dbr:Stephen_V_of_Hungary .
  
  # Step 2: Child of the predecessor
  ?childOfPredecessor dbo:parent ?predecessor .

  # Step 3: Parent of Philip, Despot of Romania and their father
  ?philipParent dbo:child dbr:Philip_Despot_of_Romania .
  ?fatherOfPhilipsParent dbo:child ?philipParent .
  
  # Spouse of the father of the parent of Philip
  ?spouseOfFather dbp:spouse ?fatherOfPhilipsParent .

  # Step 4: Parent of Charles Martel of Anjou
  ?parentOfCharlesMartel dbo:child dbr:Charles_Martel_of_Anjou .
  
  # Ensure all are royalty
  ?predecessor rdf:type dbo:Monarch ;
               dbp:title ?titlePredecessor .
  ?childOfPredecessor rdf:type dbo:Monarch ;
                      dbp:title ?titleChildOfPredecessor .
  ?spouseOfFather rdf:type dbo:Monarch ;
                  dbp:title ?titleSpouseOfFather .

  # Step 5: Child of the child who is royalty
  ?childOfChild dbo:parent ?childOfPredecessor .
  ?childOfChild rdf:type dbo:Monarch ;
                dbp:title ?titleChildOfChild .
  
  FILTER EXISTS { ?spouseOfFather dbp:spouse ?fatherOfPhilipsParent }
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
595,66,val,"Give me the author of the work, that is a written work and a book and a work, of Bill Clinton and spouse of the author, that is a politician and an office holder, of An Invitation to the White House and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605).",SELECT ?result WHERE { ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v3 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v6 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v6 <http://dbpedia.org/property/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v2 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT ?author ?spouse ?warCommander WHERE {
  ?book dcterms:title ""An Invitation to the White House""@en .
  ?book dbo:author ?author .
  ?author foaf:name ""Hillary Rodham Clinton""@en .
  
  ?author dbo:spouse ?spouse .
  ?spouse foaf:name ""William Jefferson Blythe III""@en .

  ?spouse dbo:officeHolder ?office .
  ?office dbo:positionTitle ?title .
  FILTER(?title IN (""President of the United States"", ""Commander in Chief""))

  ?disease rdfs:label ""AIDS""@en .
  ?war dbp:name ""War on AIDS""@en ;
       dbo:commanderInChief ?spouse .

  ?ship dcterms:title ""USS Arcadia (ID-1605)""@en .
  ?ship dbo:owner ?owner .
  ?owner rdfs:label ""United States government""@en .
}
```",7,14,8,3,3,3,3,71,0,0,1,0,0.0,0
472,26,val,"Give me the administration of Christian IX of Denmark and territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen and administration of the mayor of Duchy of Schleswig.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . ?result <http://dbpedia.org/ontology/capital> ?v1 . <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/property/leader> ?v2 . <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?christianIXAdministration ?deathPlace ?mayorOfSchleswig WHERE {
  # Christian IX of Denmark's administration
  dbr:Christian_IX_of_Denmark dbo:reignStart ?start ;
                               dbo:reignEnd ?end .
  
  BIND(CONCAT(""Kingdom of Denmark from "", STR(?start), "" to "", STR(?end)) AS ?christianIXAdministration)

  # Christian Ditlev Ammentorp Hansen's death place
  dbr:Christian_Ditlev_Ammertorp_Hansen dbo:deathPlace ?deathPlace .
  
  # Ensure the death place is a settlement
  ?deathPlace rdf:type dbo:Settlement .

  # Mayor of Duchy of Schleswig
  OPTIONAL {
    ?schleswig dbo:mayor ?mayorOfSchleswig .
    FILTER EXISTS { ?schleswig rdf:type dbo:Duchy }
  }
}
```",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
905,62,val,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and parent of the father, that is a royalty, of the spouse of Maria of Bytom and child of Stephen V of Hungary.","SELECT ?result WHERE { <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?v2 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/property/father> ?v5 . ?v5 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
# Step 1: Identify Philip, Despot of Romania
SELECT ?philip WHERE {
    ?philip dbo:title ""Despot of Romania""@en .
    ?philip foaf:name ""Philip"" .
}

# Step 2: Find his parent who is royalty
SELECT ?parent WHERE {
    VALUES ?philip { <http://dbpedia.org/resource/Philip,_Despot_of_Romania> }
    ?parent dbo:child ?philip .
    ?parent dbo:title ?title .
    FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""queen""))
}

# Step 3: Determine the spouse of this royal parent
SELECT ?spouse WHERE {
    VALUES ?parent { <result_of_step_2> }
    ?parent dbo:spouse ?spouse .
}

# Step 4: Identify Maria of Bytom's spouse
SELECT ?mariaSpouse WHERE {
    ?maria foaf:name ""Maria of Bytom""@en ;
           dbo:spouse ?mariaSpouse .
}

# Step 5: Find the father of Maria's spouse who is royalty
SELECT ?royalParent WHERE {
    VALUES ?mariaSpouse { <result_of_step_4> }
    ?mariaSpouse dbo:parent ?royalParent .
    ?royalParent dbo:title ?title .
    FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""queen""))
}

# Step 6: Determine the child of Stephen V of Hungary
SELECT ?child WHERE {
    ?stephen foaf:name ""Stephen V of Hungary""@en ;
             dbo:child ?child .
    VALUES ?royalParent { <result_of_step_5> }
    ?child dbo:parent ?royalParent .
}

# Step 7: Link back to the spouse from step 3
SELECT DISTINCT ?spouse WHERE {
    VALUES ?spouse { <result_of_step_3> }
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
557,63,val,"Give me the professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of the claim to fame, that is a work, of Cora Sue Collins and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v4 <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v3 . ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v6 . ?v4 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v6 <http://dbpedia.org/ontology/producer> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?professional WHERE {
  # Kent Allard's alter ego in print media
  OPTIONAL { 
    dbr:Kent_Allard (dbo:alterEgo) ?printAlterEgo .
    ?printAlterEgo dbo:profession ?professional .
  }

  # Cora Sue Collins' claim to fame
  OPTIONAL {
    dbr:Cora_Sue_Collins dbo:famousFor ?collinsWork .
    ?collinsWork dbo:producer ?professional .
  }

  # Janet Gaynor's claim to fame (movie and work)
  OPTIONAL {
    dbr:Janet_Gaynor dbo:famousFor ?gaynorMovie .
    ?gaynorMovie dbo:producer ?professional .
  }
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
769,18,val,"Give me the player in the manager, that is a sports manager and a soccer manager, of Hong Kong C Team and player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on the birthday of Tony Hollings.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Tony_Hollings> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Hong_Kong_C_Team> <http://dbpedia.org/ontology/manager> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?person WHERE {
  # Find Tony Hollings' birthdate
  dbr:Tony_Hollings dbo:birthday ?hollingsBirthday .

  # Identify sports managers of Hong Kong C Team who are also soccer players and athletes
  ?person a dbo:SoccerManager ;
          dbo:managedTeam dbr:Hong_Kong_C_Team ;
          a dbo:Athlete, dbo:SoccerPlayer ;
          dbo:birthday ?birthday .

  FILTER (?birthday = ?hollingsBirthday)
}
```",5,11,6,3,2,3,2,20,0,0,2,0,0.0,0
39,64,val,"Give me the professional in the profession of the producer of Coke Studio Philippines and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in .","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v3 <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v3 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
# Step 1: Find Bob Thompson (musician) and his birth name
SELECT ?birthName WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Bob Thompson"" .
  OPTIONAL { ?person foaf:name ?birthName . }
}

# Step 2: Identify the producer of Coke Studio Philippines
SELECT ?producer WHERE {
  ?show dcterms:title ""Coke Studio (Philippines)"" ;
        dbo:producer ?producer .
}

# Step 3: Find the band associated with this producer
SELECT ?band WHERE {
  ?producer dbo:member ?person .
  ?person dbo:musicalBand ?band .
}

# Step 4: Identify a musical artist born in that band
SELECT ?artist WHERE {
  ?band dbo:member ?person .
  ?person a dbo:MusicalArtist ;
          foaf:birthday ?birthDate .
}
```",7,8,8,3,3,3,3,71,0,0,4,0,0.0,0
905,63,val,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and child of the child, that is a royalty, of Béla IV of Hungary and parent of the father, that is a royalty, of Charles I of Hungary.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v3 <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v5 . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/father> ?v0 . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?spouse WHERE {
  # Step 1: Identify Philip, Despot of Romania
  ?philip dbo:title ""Despot of Romania""@en .
  
  # Step 2: Find his parent that is royalty
  ?parent dbo:child ?philip ;
          a dbo:Monarch .

  # Step 3: Determine the spouse of this parent
  ?spouse dbo:spouseOrPartner ?parent .

  # Step 4: Identify Béla IV of Hungary
  ?belaIV dbo:title ""King of Hungary""@en ;
          foaf:name ""Béla IV""@en .

  # Step 5: Find his child that is royalty
  ?child dbo:parent ?belaIV ;
         a dbo:Monarch .

  # Step 6: Determine the parent of this child
  ?grandParent dbo:child ?child .

  # Step 7: Identify Charles I of Hungary
  ?charlesI dbo:title ""King of Hungary""@en ;
            foaf:name ""Charles I""@en .

  # Step 8: Find his father that is royalty
  ?father dbo:parent ?charlesI ;
          a dbo:Monarch .

  # Step 9: Determine the spouse of this father
  FILTER(?spouse = ?grandParent)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
414,18,val,"Give me the award of the awardee of Nobel Prize in Physics and show of the host, that is an educational institution, of the award of Rainer Weiss.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. ?v1 <http://dbpedia.org/ontology/presenter> ?v2 . ?v3 <http://dbpedia.org/property/awards> ?result . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Nobel_Prize_in_Physics> . ?result <http://dbpedia.org/ontology/presenter> ?v2 . <http://dbpedia.org/resource/Rainer_Weiss> <http://dbpedia.org/property/awards> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?hostInstitution WHERE {
  # Identify Rainer Weiss and his association with the Nobel Prize in Physics
  dbr:Rainer_Weiss dbo:nobelPrizeAwardedFor dbr:Nobel_Prize_in_Physics .
  
  # Retrieve the award information
  dbr:Nobel_Prize_in_Physics dbo:name ?award .

  # Find out which institution hosts the Nobel Prize ceremony for physics
  OPTIONAL {
    ?nobelEvent dbo:prizes dbr:Nobel_Prize_in_Physics ;
                dbo:location dbr:Royal_Swedish_Academy_of_Sciences .
    dbr:Royal_Swedish_Academy_of_Sciences dbo:name ?hostInstitution .
  }
}
```",5,6,6,3,2,3,2,20,0,0,3,0,0.0,0
198,63,val,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and war of the awardee of the show, that is an award, of United States Congress and force of the awardee of Gillmore Medal.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?result <http://dbpedia.org/ontology/place> ?v2 . ?v6 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v3 <http://dbpedia.org/property/awards> ?v4 . ?result <http://dbpedia.org/ontology/commander> ?v6 . },"```sparql
# Query for Henry Clay Lewis's birthplace
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
  FILTER EXISTS { ?birthPlace wdt:P31/wdt:P279* wd:Q515. }
}

# Query for the award related to United States Congress and its associated war
SELECT ?award ?war WHERE {
  ?award wdt:P170 wd:Q1234567 . # Assuming Q1234567 is the entity representing an award by US Congress
  ?recipient wdt:P166 ?award .
  ?recipient wdt:P39 ?war .
}

# Query for Gillmore Medal awardee and their force
SELECT ?force WHERE {
  ?medal wdt:P170 wd:Q7654321 . # Assuming Q7654321 is the entity representing Gillmore Medal
  ?recipient wdt:P166 ?medal .
  ?recipient wdt:P39 ?force .
}
```

Note: The placeholders `wd:Q123456`, `wd:Q1234567`, and `wd:Q7654321` need to be replaced with the actual DBpedia QIDs for Henry Clay Lewis, the specific award related to the United States Congress, and the Gillmore Medal respectively. These can be found by searching DBpedia or using a SPARQL endpoint to query for these entities.",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
159,62,val,"Give me the commander in Great Turkish War and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v3 <http://dbpedia.org/ontology/successor> ?result . ?v0 <http://dbpedia.org/property/writer> ?v6 . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?successor ?ducasWriter WHERE {
  # Identify the Great Turkish War
  VALUES ?war { dbr:Great_Turkish_War }

  # Find Michał Kazimierz Pac's role in the war
  ?pac dbo:role ?role .
  ?role dbo:event ?war .
  ?pac rdfs:label ""Michał Kazimierz Pac""@en .

  # Determine his successor who is a politician and office holder
  ?successor dbo:succeededBy ?pac ;
             dbo:occupation ?occupation1, ?occupation2 .
  FILTER(?occupation1 = dbr:Politician || ?occupation2 = dbr:Office_holder)

  # Reference to George Ducas' works for historical context
  ?ducasWriter dbo:authorOf ?work .
  ?work rdfs:label ""George Ducas""@en .

  # Ensure the commander is related to the war
  ?commander dbo:event ?war ;
             rdfs:label ?commanderLabel .
  FILTER(?commander != ?pac && ?commander = ?successor)
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
513,18,val,Give me the residence of the leader of Ulster Unionist Party and entity in the award of the reference to George Hamilton Cameron.,"SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""George Hamilton Cameron""@en . ?v3 <http://dbpedia.org/ontology/residence> ?result . ?v1 <http://dbpedia.org/property/awards> ?v2 . <http://dbpedia.org/resource/Ulster_Unionist_Party> <http://dbpedia.org/ontology/leader> ?v3 . ?result <http://dbpedia.org/ontology/country> ?v2 . }","```sparql
# Query to get the residence of the leader of the Ulster Unionist Party
SELECT ?leader ?residence WHERE {
  ?party dbo:type dbr:Political_party.
  ?party rdfs:label ""Ulster Unionist Party""@en.
  ?party dbo:leader ?leader.
  ?leader foaf:name ?name.
  OPTIONAL { ?leader dbo:residenceLocation ?residence. }
  FILTER(LANG(?name) = 'en')
}
```

```sparql
# Query to find awards associated with George Hamilton Cameron and related entities
SELECT DISTINCT ?award ?entity WHERE {
  ?person rdfs:label ""George Hamilton Cameron""@en.
  ?person dbo:honoursReceived ?award.
  ?award dbo:recipient ?person.
  OPTIONAL { ?award dbo:relatedEntity ?entity. }
}
```",5,5,6,3,2,3,2,20,0,0,2,0,0.0,0
39,65,val,"Give me the professional in the profession of Sam Concepcion and band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/property/alterEgo> ?v6 . ?result <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v4 . ?v3 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Sam Concepcion's profession
  VALUES ?samProfession { ""Actor"" ""Singer"" ""Dancer"" }
  
  # Band associated with Rob Zombie (Robert Lamar Thompson)
  ?robert a dbo:MusicalArtist ;
          foaf:name ""Rob Zombie"" ;
          dbo:band dbr:White_Zombie .
  
  # Walter B. Gibson's creation
  ?walter a dbo:Writer ;
          dbo:work dbr:The_Shadow ;
          dbo:characterName ""The Shadow"" .

  # Hypothetical person fitting all criteria
  ?person dbo:profession ?samProfession ;
          dbo:bandMemberOf ?robert ;
          dbo:fictionalCharacter ?waltersCreation .
}
```",7,10,8,3,3,3,3,71,0,0,4,0,0.0,0
353,66,val,"Give me the child of the parent of Roger III, Duke of Apulia and child of the child of the spouse, that is a royalty, of Constance of Burgundy and father of the child, that is a royalty, of William I of Sicily.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?v1 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v6 <http://dbpedia.org/property/father> ?result . ?v6 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child
WHERE {
  # Step 1: Find Roger III's parent
  ?rogerIII a dbo:Duke ;
            dbo:parent ?parent .

  FILTER(?rogerIII = dbr:Roger_III,_Duke_of_Sicily)

  # Step 2: Find the child of that parent (sibling/cousin of Roger III)
  ?childSibling dbo:parent ?parent .
  
  # Step 3: Constance of Burgundy's spouse and their child
  dbr:Constance_of_Burgundy dbo:spouse ?conSpouse ;
                            dbo:child ?conChild .

  # Step 4: William I of Sicily's child who is royalty
  dbr:William_I_of_Sicily dbo:child ?williamChild .
  
  FILTER(dbo:Monarch ?williamChild)

  # Step 5: Find the father of that child (who should be a royalty)
  ?father dbo:child ?williamChild ;
          dbo:monarchOf ?place .

  # Ensure the person is both a sibling/cousin of Roger III and the father of William I's royal child
  FILTER(?childSibling = ?father)
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
119,66,val,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and office of the leader of 2009 Galician regional election and tenant of the residence, that is a country, of Álvaro Quirós.","SELECT ?result WHERE { <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v3 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v6 . ?v3 <http://dbpedia.org/property/office> ?result . ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?result <http://dbpedia.org/ontology/headquarter> ?v6 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenant ?country WHERE {
  # Identify PSOE and its leader during the 2009 Galician regional election
  ?psoe a dbo:PoliticalParty ;
        rdfs:label ""Spanish Socialist Workers' Party""@en .
  
  ?election dbo:electionDate ?date ;
            dbo:candidateList ?candidates .

  FILTER (YEAR(?date) = 2009 && CONTAINS(LCASE(STR(?election)), ""galicia""))

  ?candidate dbo:party ?psoe ;
             dbo:officeHolder ?tenant .

  # Identify Álvaro Quirós and his country of residence
  ?alvaroQuirós a dbo:Person ;
                rdfs:label ""Álvaro Quirós""@en .
  
  ?alvaroQuirós dbo:nationality ?country ;
               dbo:residenceCountry ?country .

  # Link Álvaro Quirós to the tenant of PSOE during the election
  ?tenant dbo:officeHolder ?candidate .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
943,66,val,"Give me the child of the parent, that is a royalty, of Yeshaq I and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and reference to the alter ego of The Shadow.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v0 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v6 . ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v3 . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Yeshaq I's child who is royalty
  dbr:Yeshaq_I dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  FILTER EXISTS { ?child a dbo:Monarch . }

  # Zara Yaqob's father (Yeshaq I)
  ?zaraYaqob dbo:father dbr:Yeshaq_I .

  # Baeda Maryam I's child
  dbr:Baeda_Maryam_I dbo:child ?eskender .
  
  # Lamont Cranston as The Shadow's alter ego
  OPTIONAL { 
    dbr:The_Shadow dbo:alterEgo dbr:Lamont_Cranston .
  }
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
39,62,val,"Give me the professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and professional in the profession of the producer of Coke Studio Philippines and band of Bob Thompson (musician).",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v6 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v4 . ?v4 <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/property/alterEgo> ?v6 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find the alter ego of The Shadow created by Walter B. Gibson
  ?shadowCharacter dbo:creator dbr:Walter_B._Gibson .
  ?shadowCharacter dbo:alternateName ""Lamont Cranston"" .

  # Find Jonathan Manalo, producer of Coke Studio Philippines
  ?producer foaf:name ""Jonathan Manalo""@en .
  ?producer dbo:occupation dbr:Music_producer .

  # Find Bob Thompson and his band The Dawn
  ?musician foaf:name ""Bob Thompson""@en .
  ?band dbo:musicalArtist ?musician ;
        foaf:name ""The Dawn""@en .

  # Find a person who is both a music/entertainment producer and linked to Lamont Cranston
  ?person dbo:occupation dbr:Music_producer ;
          dbo:wikiPageRedirects ?shadowCharacter .
}
```",7,9,8,3,3,3,3,71,0,0,4,0,0.0,0
293,66,val,"Give me the party member of the ruling party in Central, Louisiana and person born as the birth name of the parent of Tisha Sterling and spouse of the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v3 . ?result <http://dbpedia.org/ontology/party> ?v3 . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v6 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v1 <http://dbpedia.org/property/birthName> ?v2 . }","```sparql
# Step 1: Identify Tisha Sterling's parent
SELECT ?parent WHERE {
  ?tisha dbo:parent ?parent .
  FILTER (str(?tisha) = ""Tisha_Sterling"")
}

# Step 2: Find the birth name of that parent
SELECT ?birthName WHERE {
  ?parent foaf:name ?name ;
          dbp:birthName ?birthName .
}

# Step 3: Identify the actor from ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
  ?film dbo:title ""1,000 Dollars a Minute"" ;
        dbo:starring ?actor .
}

# Step 4: Determine the spouse of that actor
SELECT ?spouse WHERE {
  ?actor foaf:spouse ?spouse .
}

# Step 5: Find the ruling party member in Central, Louisiana with matching birth name and spouse
SELECT ?partyMember WHERE {
  ?partyMember dbo:birthName ?birthName ;
               foaf:spouse ?spouse ;
               dbo:memberOf ?party .
  ?central dbo:hasRulingParty ?party .
  FILTER (str(?central) = ""Central,_Louisiana"")
}
```",7,7,8,3,3,3,3,71,0,0,1,0,0.0,0
80,65,val,"Give me the actor of the album of the work, that is a song and a musical work, of T.I. and actor of the movie with  and professional in the alter ego of The Shadow.","SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v4 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/ontology/album> ?v6 . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v4 <http://dbpedia.org/property/starring> """"@en . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?actor WHERE {
  # Find songs by T.I.
  ?song dbo:artist dbr:T.I._(rapper) .
  
  # Get the album of the song
  ?album dbo:song ?song .

  # Find any related media projects or movies involving the album
  OPTIONAL { 
    ?movie dbo:starring ?actor .
    ?movie dbo:basedOnWork ?album .
  }

  # Find actors who have portrayed Lamont Cranston/The Shadow
  OPTIONAL {
    ?shadowActor foaf:name ?name .
    FILTER regex(?name, ""Lamont Cranston"", ""i"") .
    ?shadowRole dbo:portrayedBy ?shadowActor .
    ?shadowRole dbo:character dbr:Lamont_Cranston .
  }

  # Combine the information
  VALUES ?actor { ?actor . ?shadowActor }
}
```",7,9,8,3,3,3,3,71,0,0,4,0,0.0,0
119,65,val,"Give me the tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and office of the leader of 2009 Galician regional election.",SELECT ?result WHERE { ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/property/residence> ?v6 . ?v4 <http://dbpedia.org/property/office> ?result . ?v3 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v4 . ?result <http://dbpedia.org/ontology/headquarter> ?v6 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person dbo:nationality dbr:Spain .
  ?person dbo:partyAffiliation dbr:Spanish_Socialist_Workers'_Party .
  ?person dbo:office ?office .
  ?office dbo:election ?election .
  ?election dbp:date ""2009""^^xsd:gYear .
  ?election dbo:region dbr:Galicia .
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
756,65,val,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and native of the administration, that is a country, of the leader of West Germany.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v3 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v4 . ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v4 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v6 <http://dbpedia.org/property/leader> ?v0 . ?result <http://dbpedia.org/ontology/birthPlace> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  # Thomas Letsch as manager of VfL Bochum in the 2007-08 season
  dbr:Thomas_Letsch dbo:managerOf dbr:VfL_Bochum.
  
  # Player managed by Thomas Letsch and part of VfL Bochum team
  ?player dbo:team dbr:VfL_Bochum;
          dbo:spouse ?letsch_managed_team.

  # Filter for the 2007-08 season
  ?letsch_managed_team dbo:sportSeason dbr:2007–08_VfL_Bochum_season.
  
  # Player is native to Germany (administration of leader of West Germany)
  ?player dbo:nationality dbr:Germany.
}
```",7,14,8,3,3,3,3,71,0,0,1,0,0.0,0
159,63,val,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and reference to the writer of Always the Love Songs.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://dbpedia.org/ontology/commander> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v4 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?successor ?conflict ?writer WHERE {
  # Find a war where Jean Baptist, Comte d'Arco was a commander and is also a TV show and societal event
  ?war dbo:commander dbr:Jean_Baptiste,_Comte_d%27Arco .
  ?war rdf:type dbo:TelevisionShow .
  ?war rdf:type dbo:SocietalEvent .

  # Find the successor who is a politician and office holder
  ?successor dbo:predecessor dbr:Jean_Baptiste,_Comte_d%27Arco .
  ?successor rdf:type dbo:Politician .
  ?successor dbo:officeHolder true .

  # Find the military conflict associated with Michał Kazimierz Pac
  ?conflict dbo:commander dbr:Miko%C5%82aj_Kazimierz_Pa%C5%84czycki .
  ?conflict rdf:type dbo:Event .
  ?conflict rdf:type dbo:MilitaryConflict .

  # Find the writer of ""Always the Love Songs""
  ?writer dbo:title dbr:Always_the_Love_Songs .
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
737,65,val,"Give me the predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of the child of the child of Alexander of Württemberg (1804-1881) and child of the child, that is a royalty, of Archduke Charles Louis of Austria.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v6 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v6 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?result <http://dbpedia.org/ontology/successor> ?v4 . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
  # Philipp Albrecht's lineage
  ?philippAlbrecht dbr:Philipp_Albrecht,_Duke_of_Württemberg ;
                  dbo:child ?child1 .
  ?child1 dbo:child ?grandchild1 .
  ?grandchild1 dbo:child ?greatGrandchild1 .

  # Alexander of Württemberg's lineage
  ?alexander dbr:Alexander_of_Württemberg_(1804-1881) ;
             dbo:child ?child2 .
  ?child2 dbo:child ?grandchild2 .
  ?grandchild2 dbo:child ?greatGrandchild2 .

  # Archduke Charles Louis's lineage
  ?charlesLouis dbr:Charles_Louis,_Archduke_of_Austria ;
                dbo:child ?child3 .
  ?child3 dbo:child ?grandchild3 .
  ?grandchild3 dbo:child ?greatGrandchild3 .

  # Find the common great-grandchild who is royalty
  FILTER(?greatGrandchild1 = ?greatGrandchild2 && ?greatGrandchild1 = ?greatGrandchild3)
  
  # Ensure the individual has a royal title
  ?greatGrandchild1 dbo:title ?title .
  FILTER(CONTAINS(LCASE(str(?title)), ""royalty""))

  # Find the predecessor (parent) of this great-grandchild
  ?greatGrandchild1 dbo:parent ?predecessor .

  # Ensure the predecessor is royalty
  ?predecessor dbo:title ?predecessorTitle .
  FILTER(CONTAINS(LCASE(str(?predecessorTitle)), ""royalty""))
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
609,64,val,"Give me the birth place of Glenn Youngkin and birth place of the awardee of the award of Vince Gilligan and birth place of the author of the reference, that is American, to El Deafo.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://dbpedia.org/property/author> ?v1 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Query for the birth place of Glenn Youngkin
SELECT ?birthPlace WHERE {
  wd:Q1116800 dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birth place of a notable awardee related to Vince Gilligan's work (e.g., Bryan Cranston, known for ""Breaking Bad"")
SELECT ?birthPlace WHERE {
  wd:Q1776 dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birth place of Cece Bell, author of El Deafo
SELECT ?birthPlace WHERE {
  wd:Q1065182 dbo:birthPlace ?birthPlace .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
871,65,val,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of the awardee of Commander of the Royal Victorian Order and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v2 <http://dbpedia.org/ontology/child> ?v5 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  ?person rdf:type dbo:Politician .
  ?person dbo:childOf ?parent .
  ?parent rdfs:label ""Frederick Stanley, 16th Earl of Derby""@en .
  
  OPTIONAL { 
    ?awardRecipient dbo:awardeeOf [ a dbo:CommanderOfTheRoyalVictorianOrder ] .
    ?awardRecipient dbo:childOf ?grandParent .
    ?grandParent dbo:parentOf ?person .
  }
  
  OPTIONAL {
    ?officeHolder rdf:type dbo:Politician ;
                  dbo:officeHolder true ;
                  dbo:parentOf ?person2 .
    ?person2 dbo:childOf ?grandParent2 .
    ?grandParent2 rdfs:label ""Edward Stanley, 17th Earl of Derby""@en .
  }
  
  FILTER(?parent = ?father)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
103,63,val,"Give me the professional in the profession of Shatrughan Sinha and actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in the alter ego of The Shadow.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/starring> ?v4 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v6 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://dbpedia.org/property/starring> ?result . ?v4 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?result <http://dbpedia.org/property/occupation> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?televisionShow WHERE {
  # Shatrughan Sinha's profession
  dbr:Shatrughan_Sinha dbo:occupation ?sinhaProfession .
  
  # Richard Grant Esterhuysen (The Shadow) profession
  dbr:The_Shadow dbo:actor ?esterhuysen .
  ?esterhuysen rdfs:label ""Richard Grant Esterhuysen""@en .

  # Check if they share a television show or movie
  OPTIONAL {
    ?sinhaProfession dbo:workExample ?sharedWork .
    ?sharedWork rdf:type dbo:TelevisionSeries .
    BIND(?sharedWork AS ?televisionShow)
  }
  
  FILTER(?sinhaProfession = ?esterhuysen)
}
```",7,8,8,3,3,3,3,71,0,0,13,0,0.0,0
80,63,val,Give me the professional in the alter ego of The Shadow and actor of the movie with the author of Smartbomb (book) and actor of the album of What You Know (T.I. song).,SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v6 . ?v3 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://dbpedia.org/property/starring> ?v4 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v4 . },"```sparql
SELECT DISTINCT ?professional WHERE {
  # Lamont Cranston's alter ego
  ?shadowAlterEgo dbo:alterEgo dbr:Lamont_Cranston .
  
  # Movie with Douglas Coupland
  ?movie dbo:starring ?actor .
  ?movie dbo:author dbr:Douglas_Coupland .

  # Album related to Justin Timberlake (What You Know)
  ?album dbo:artist ?musician .
  ?album dbo:featuring dbr:Justin_Timberlake .
  
  # Find the professional who is connected to all
  ?professional rdfs:label ?name .
  FILTER(CONTAINS(LCASE(?name), ""lamont cranston""))
  OPTIONAL { ?actor foaf:name ?name . }
  OPTIONAL { ?musician foaf:name ?name . }
}
```",7,7,8,3,3,3,3,71,0,0,4,0,0.0,0
706,18,val,Give me the birthplace of the actor of Akaler Shandhaney and birthplace of the awardee of the reference to Sangeet Natak Akademi Fellowship.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> ?v1 . <http://dbpedia.org/resource/Akaler_Shandhaney> <http://dbpedia.org/property/starring> ?v3 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Sangeet Natak Akademi Fellowship""@en . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Query for the birthplace of Soumitra Chatterjee
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
}

# Query for a Sangeet Natak Akademi Fellowship awardee's birthplace (example using Ustad Bismillah Khan)
SELECT ?birthPlace WHERE {
  wd:Q789012 wdt:P19 ?birthPlace .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia entity ID for Soumitra Chatterjee and `wd:Q789012` with the entity ID of a specific Sangeet Natak Akademi Fellowship awardee, such as Ustad Bismillah Khan.",5,5,6,3,2,3,2,20,0,0,2,0,0.0,0
198,65,val,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and war of the awardee of Medal of Honor and force of the awardee of the award of Quincy Adams Gillmore.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/place> ?v3 . ?v6 <http://dbpedia.org/property/awards> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/commander> ?v6 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?settlement ?war WHERE {
  # Henry Clay Lewis's birthplace
  dbr:Henry_Clay_Lewis dbo:birthPlace ?birthPlace .
  
  # Ensure the birthplace is a settlement in America
  ?birthPlace rdf:type dbo:Settlement ;
              dbo:country dbr:United_States_of_America .

  # Quincy Adams Gillmore's Medal of Honor details
  dbr:Quincy_Adams_Gillmore dbo:awardReceived dbr:Medal_of_Honor .
  
  # Find the war associated with Gillmore's Medal of Honor
  ?medalOfHonor dbo:conferralEvent ?war .

  # Ensure the settlement is related to the war (common entity)
  ?settlement rdf:type dbo:Settlement ;
              dbo:country dbr:United_States_of_America .
  
  FILTER(?birthPlace = ?settlement)
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
68,26,val,"Give me the child of Maximilian I, Holy Roman Emperor and father of the parent of Dorothea of Denmark, Electress Palatine and father of the child, that is a royalty, of Philip I of Castile.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v4 . ?v4 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Maximilian I's children
  VALUES ?maximilianChild { 
    dbr:Philip_the_Handsome 
  }
  
  ?maximilianChild dbo:father dbr:Maximilian_I,_Holy_Roman_Emperor .
  
  # Philip the Handsome's child who is royalty
  ?philipChild dbo:childOf ?maximilianChild .
  ?philipChild a dbo:Monarch .

  # Dorothea",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
687,62,val,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and team of Pablo Aimar.",SELECT ?result WHERE { ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://dbpedia.org/property/starring> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v6 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://dbpedia.org/ontology/birthDate> ?v4 . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . },"```sparql
# Step 1: Find Marty Pollio's birthday
SELECT ?birthday WHERE {
  dbpedia:Marty_Polloi dbo:birthday ?birthday .
}

# Step 2: Find athletes born on Marty Pollio's birthday
SELECT DISTINCT ?athlete WHERE {
  ?person dbo:birthday ?birthday ;
          rdf:type dbo:Athlete .
  FILTER(?birthday = <MartyPollioBirthday>) # Replace with actual date from step 1
}

# Step 3: Find films by Manuel Huerga featuring soccer player actors
SELECT DISTINCT ?film WHERE {
  ?film dbo:director dbpedia:Manuel_Huerga ;
        dbo:actor ?actor .
  ?actor rdf:type dbo:SoccerPlayer, dbo:Actor .
}

# Step 4: Find Pablo Aimar's team
SELECT DISTINCT ?team WHERE {
  dbpedia:Pablo_Aimar dbo:memberOfTeam ?team .
}
```

Note: Replace `<MartyPollioBirthday>` with the actual date obtained from step 1.",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
531,62,val,"Give me the office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election and office of Miguel Maura.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v6 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v4 <http://dbpedia.org/property/residence> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v4 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?officeOfCommander WHERE {
  # Manuel Pinto da Costa's office and position as a politician in a military conflict
  dbr:Manuel_Pinto_da_Costa dbo:positionHeld ?commanderPosition .
  ?commanderPosition dbo:office ?officeOfCommander .
  ?commanderPosition dbo:conflict ?militaryConflict .
  FILTER (dbo:PoliticalEvent(?militaryConflict) || dbo:SocietalEvent(?militaryConflict))

  # Leader of the 2003 Madrid City Council election
  dbr:Madrid_City_Council_Election_2003 dbo:electedLeader ?leader .
  
  # Residence of this leader
  ?leader dbo:residence ?residence .

  # Miguel Maura's office and its relation to the residence
  dbr:Miguel_Maura dbo:office ?miguelOffice .
  ?miguelOffice dbo:location ?residence .
}
```",7,12,8,3,3,3,3,71,0,0,1,0,0.0,0
347,66,val,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France) and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?v6 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/property/father> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v6 <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?child ?father ?commander ?event ?tvShow WHERE {
  # Step 1: Find Maria Anna of Bavaria's child who is royalty
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria"" ;
             dbo:spouse ?husband .
  
  ?child dbo:parent ?mariaAnna ;
         dbo:parent ?husband ;
         dbo:title ?royaltyTitle .

  # Step 2: Find the father of that child
  ?father dbo:child ?child .

  # Step 3: Identify commander related to 2nd Dragoon Regiment (France)
  ?commander a dbo:MilitaryPerson ;
             dbo:militaryUnit dbr:2nd_Dragoon_Regiment_(France) .
  
  ?event dbo:relatedWork ?tvShow ;
         rdf:type dbo:SocietalEvent, dbo:Event .

  # Step 4: Find the father of Ferdinand III's child
  ?ferdinandIII a dbo:Person ;
                foaf:name ""Ferdinand III, Holy Roman Emperor"" .
  
  ?childOfFerdinand dbo:parent ?ferdinandIII ;
                    dbo:parent ?father .

  # Step 5: Combine elements to find the final answer
  FILTER(?commander = ?father)
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
58,18,val,Give me the producer of the movie with  and spouse of the person born as the birth name of Linda Bruckheimer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v3 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Linda_Bruckheimer> <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?v3 <http://dbpedia.org/property/starring> """"@en . }","```sparql
# Step 1: Get Linda Bruckheimer's birth name
SELECT ?birthName WHERE {
  dbpedia:Linda_Bruckheimer dbo:birthName ?birthName .
}

# Step 2: Find her spouse using the birth name obtained from step 1
SELECT ?spouse WHERE {
  ?person dbo:birthName ""Linda Bruckheimer""@en .
  ?person foaf:currentOrMostRecentSpouse ?spouse .
}

# Step 3: Identify a movie produced by this spouse
SELECT DISTINCT ?movie WHERE {
  ?spouse dbo:producedAtLeastOneWork ?work .
  ?work rdf:type dbpedia-owl:Film .
  FILTER(?work != dbpedia:Linda_Bruckheimer) # Ensure it's not Linda herself
}

# Step 4: Get the producer of that movie
SELECT DISTINCT ?producer WHERE {
  ?movie dbo:producedBy ?producer .
}
```",5,5,6,3,2,3,2,20,0,0,1,0,0.0,0
198,64,val,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and force of Quincy Adams Gillmore and war of the awardee of the show, that is an award, of United States Congress.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v0 <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v3 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?result <http://dbpedia.org/ontology/place> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. }","```sparql
SELECT ?person ?birthPlace ?entity WHERE {
  ?person dbo:deathDate ""1850-08-05""^^xsd:date .
  ?person dbo:award ?award .
  ?award dbo:awardingBody dbr:United_States_Congress .
  ?person dbo:militaryCommander dbr:Quincy_Adams_Gillmore .
  ?person dbo:war dbr:American_Civil_War .
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:Settlement ;
              dbo:country dbr:United_States .
  OPTIONAL { ?birthPlace dbo:notablePerson ?entity }
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
103,66,val,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and professional in the profession of Shatrughan Sinha and actor of the movie, that is a television show, with Richard E. Grant.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v6 . ?result <http://dbpedia.org/property/occupation> ?v6 . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . ?v3 <http://dbpedia.org/property/starring> ?result . ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character ?profession ?movie ?tvShow WHERE {
  # The Shadow's alter ego in comics
  dbr:The_Shadow dbo:alterEgo dbr:Lamont_Cranston .
  
  # Shatrughan Sinha's profession
  dbr:Shatrughan_Sinha dbo:occupation dbr:Actor .

  # Richard E. Grant's movies and TV shows
  ?movie dbo:starring dbr:Richard_E._Grant ;
         dbo:adaptationOf ?tvShow .
  
  # Find a common professional link
  OPTIONAL { ?character dbo:profession dbr:Actor . }
  FILTER (?character = dbr:Lamont_Cranston || ?character = dbr:Shatrughan_Sinha)
}
```",7,9,8,3,3,3,3,71,0,0,13,0,0.0,0
628,65,val,"Give me the person born as the birth name of the native, that is a musical artist, of Florida and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and band member of the associated musical artist, that is a musical artist, of Bobby Shmurda.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v0 <http://dbpedia.org/property/birthName> ?v6 . ?result <http://dbpedia.org/property/birthName> ?v6 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
# Step 1: Find a musical artist native of Florida
SELECT ?artist WHERE {
  ?artist dbo:nationality dbr:United_States_of_America ;
          dbo:birthPlace dbr:Florida .
  ?artist rdf:type dbo:MusicalArtist .
}

# Step 2: Identify an award related to Coro de la Pontificia Universidad Católica de Puerto Rico
SELECT ?award WHERE {
  ?choir rdfs:label ""Coro de la Pontificia Universidad Católica de Puerto Rico""@en ;
         dbo:awards ?award .
}

# Step 3: Find the region/state/settlement associated with the award
SELECT DISTINCT ?region WHERE {
  ?award dbo:location ?region .
  ?region rdf:type/(dbo:State|dbo:Settlement|dbo:Region) .
}

# Step 4: Find Bobby Shmurda's associated musical artist and their band members
SELECT ?bandMember WHERE {
  ?bobbyShmurda dbo:associatedMusicalArtist ?artist .
  ?artist dbo:member ?bandMember .
  ?bobbyShmurda rdfs:label ""Bobby Shmurda""@en .
}

# Combine the results to find the person born as the birth name of the native
SELECT DISTINCT ?person WHERE {
  # Assuming we have variables from previous queries: ?artist, ?region, ?bandMember
  ?person dbo:birthName ?nativeBirthName ;
          dbo:nationality dbr:United_States_of_America ;
          dbo:birthPlace ?region .
  ?person rdf:type dbo:MusicalArtist .
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
80,66,val,Give me the actor of the movie with  and actor of the album of What You Know (T.I. song) and professional in the alter ego of the series of The Golden Master.,"SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/starring> """"@en . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v6 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . ?v3 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v6 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . }","```sparql
# Assuming ""with"" refers to a specific movie, replace <MovieTitle> with the actual title
SELECT ?actor WHERE {
  ?movie dbo:title ""<MovieTitle>""@en .
  ?movie dbo:starring ?actor .
}

UNION

# Query for actors involved in the album of T.I.'s song ""What You Know""
SELECT ?albumActor WHERE {
  ?song dbo:title ""What You Know""@en ;
        dbo:lyricsBy <T.I.> ;
        dbo:partOfAlbum ?album .
  OPTIONAL { ?album dbo:starring ?albumActor . }
}

UNION

# Query for the professional role in the alter ego of ""The Golden Master"" series
SELECT ?professional WHERE {
  ?series dbo:title ""The Golden Master""@en .
  ?series dbo:alterEgo ?alterEgo .
  ?alterEgo dbo:profession ?professional .
}
```",7,7,8,3,3,3,3,71,0,0,4,0,0.0,0
295,18,val,"Give me the native of the birth place of Victor Saville and writer of the work, that is a musical work, of the true self, that is an artist, of Steven Kapur.","SELECT ?result WHERE { <http://dbpedia.org/resource/Victor_Saville> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v2 <http://dbpedia.org/property/writer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://dbpedia.org/property/writer> ?v1 . ?v1 <http://xmlns.com/foaf/0.1/givenName> ""Steven Kapur""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. }","```sparql
# Step 1: Find Victor Saville's birthplace
SELECT ?birthPlace WHERE {
  dbpedia:Victor_Saville dbo:birthPlace ?birthPlace .
}

# Step 2: Find the native people of Victor Saville's birthplace
SELECT ?nativePeople WHERE {
  ?birthPlace dbo:nativeName ?nativePeople .
}

# Step 3: Identify Steven Kapur and his related musical work
SELECT ?musicalWork WHERE {
  dbpedia:Steven_Kapur dbo:relatedMusicalWork ?musicalWork .
}

# Step 4: Determine the artist behind this musical work
SELECT ?artist WHERE {
  ?musicalWork dbo:composer ?artist .
}

# Step 5: Find out who wrote a work by this artist
SELECT ?writer WHERE {
  ?artist dbo:writtenBy ?writer .
}
```",5,7,6,3,2,3,2,20,0,0,1,0,0.0,0
258,18,val,"Give me the establishment of the founding date of the alma mater, that is a university and an organisation and an educational institution, of Luiza Erundina and alma mater of the person born, that is a politician, as Eleonora Menicucci de Oliveira.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/foundingDate> ?v2 . ?v1 <http://dbpedia.org/ontology/foundingDate> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>. ?v3 <http://dbpedia.org/property/birthName> ""Eleonora Menicucci de Oliveira""@en . <http://dbpedia.org/resource/Luiza_Erundina> <http://dbpedia.org/ontology/almaMater> ?v1 . ?v3 <http://dbpedia.org/ontology/almaMater> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?universityLuiza ?foundingDateLuiza ?universityEleonora ?foundingDateEleonora WHERE {
  # Luiza Erundina's alma mater
  ?luiza dbo:almaMater ?universityLuiza .
  FILTER (str(?luiza) = ""Luiza_Erundina"")
  
  # Eleonora Menicucci de Oliveira's alma mater
  ?eleonora dbo:almaMater ?universityEleonora .
  FILTER (str(?eleonora) = ""Eleonora_Menicucci_de_Oliveira"")

  # Ensure both are universities, organisations, and educational institutions
  ?universityLuiza a dbo:University ;
                  a dbo:Organisation ;
                  a dbo:EducationalInstitution .

  ?universityEleonora a dbo:University ;
                      a dbo:Organisation ;
                      a dbo:EducationalInstitution .

  # Retrieve founding dates
  OPTIONAL { ?universityLuiza dbp:foundingDate ?foundingDateLuiza }
  OPTIONAL { ?universityEleonora dbp:foundingDate ?foundingDateEleonora }
}
```",5,9,6,3,2,3,2,20,0,0,1,0,0.0,0
737,63,val,"Give me the child of the child of Duke Philipp of Württemberg and child of the child, that is a royalty, of Archduke Charles Louis of Austria and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v3 <http://dbpedia.org/property/father> ?v4 . ?result <http://dbpedia.org/ontology/parent> ?v6 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . ?v6 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?grandchildOfPhilipp ?grandchildOfCharlesLouis ?predecessor
WHERE {
  # Duke Philipp of Württemberg's grandchild
  ?philippChild dbo:parent dbr:Duke_Philipp_of_W%C3%BCrttemberg .
  ?grandchildOfPhilipp dbo:parent ?philippChild .

  # Archduke Charles Louis of Austria's royal grandchild
  ?charlesChild dbo:parent dbr:Archduke_Charles_Louis_of_Austria .
  ?grandchildOfCharlesLouis dbo:parent ?charlesChild .
  ?grandchildOfCharlesLouis a dbo:Monarch .

  # Spouse and child of Archduchess Helena of Austria
  ?helenaSpouse dbo:spouse dbr:Archduchess_Helena_of_Austria .
  ?childOfHelenaSpouse dbo:parent ?helenaSpouse .
  ?childOfHelenaSpouse a dbo:Monarch .

  # Predecessor in royal lineage
  ?predecessor dbo:successor ?childOfHelenaSpouse .

  # Find the common individual
  FILTER (?grandchildOfPhilipp = ?grandchildOfCharlesLouis && ?grandchildOfPhilipp = ?predecessor)
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
89,64,val,"Give me the child of the parent of the child of Minye Kyawswa and spouse of Saw Shwe Khet and predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v1 <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?result WHERE {
  # Minye Kyawswa's child
  ?minyeKyawswaChild dbo:childOf dbr:Minye_Kyawswa .
  
  # Parent of Minye Kyawswa's child is Minye Kyawswa himself
  ?parent dbr:Minye_Kyawswa .

  # Saw Shwe Khet's spouse
  ?sawShweKhet dbo:spouse ?spouseOfSawShweKhet .

  # Predecessor of the spouse's child
  ?childOfSpouse dbo:childOf ?spouseOfSawShweKhet .
  ?predecessor dbo:predecessorOf ?childOfSpouse .

  # Saw Min Phyu's spouse and their child
  ?sawMinPhyu dbo:spouse ?spouseOfSawMinPhyu .
  ?childOfSawMinPhyu dbo:childOf ?spouseOfSawMinPhyu .

  # The result is the predecessor who is royalty
  ?result dbo:predecessorOf ?childOfSawMinPhyu ;
          a dbo:Monarch .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
347,64,val,"Give me the father of Eleonore of Austria, Queen of Poland and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574).","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . }","```sparql
SELECT ?father WHERE {
  wd:Q123456 wdt:P22 ?father .
  ?father rdfs:label ""Ferdinand I, Holy Roman Emperor""@en .
}
```

Note: `wd:Q123456` should be replaced with the actual DBpedia resource identifier for Eleonore of Austria.",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
782,62,val,"Give me the associated musical artist of Nick Curran and reference to the real name of the band of Kim Wilson and band of the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://xmlns.com/foaf/0.1/name> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v4 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v6 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . }","```sparql
# Query to find the associated musical artist of Nick Curran
SELECT ?associatedArtist WHERE {
  wd:Q1234567 foaf:knows ?person .
  ?person dbo:musicalArtist ?associatedArtist .
}

# Query to find the real name of the band of Kim Wilson
SELECT ?bandName WHERE {
  wd:Q2345678 dbo:member ?band .
  ?band rdfs:label ?bandName .
}

# Query to find the person born on March 30, 1945, and their associated band
SELECT ?person ?birthDate ?associatedBand WHERE {
  ?person dbo:birthDate ?birthDate ;
          dbo:musicalArtist ?artist .
  FILTER (STR(?birthDate) = ""1945-03-30T00:00:00Z""^^xsd:dateTime)
  
  OPTIONAL { ?artist dbo:band ?associatedBand . }
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia ID for Nick Curran and `wd:Q2345678` with the DBpedia ID for Kim Wilson. The queries assume these IDs are known or can be looked up in DBpedia.",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
816,63,val,"Give me the parent of the professional in Photographer and parent of the child of Allan Arbus and actor of the movie, that is a work, with the person decedent at Los Angeles.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v6 . ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://dbpedia.org/property/starring> ?v4 . ?v4 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v6 <http://dbpedia.org/property/occupation> ""Photographer""@en . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v2 . }","```sparql
# Step 1: Find Allan Arbus's child
SELECT ?child WHERE {
  wd:Q123456 wdt:P40 ?child .
}

# Step 2: Find the parent of Allan Arbus's child
SELECT ?parent WHERE {
  ?child wdt:P22 ?parent .
}

# Step 3: Identify a movie and its actors
SELECT ?movie ?actor WHERE {
  ?movie wdt:P161 ?actor .
  FILTER (STRSTARTS(STR(?movie), ""http://dbpedia.org/resource/""))
}

# Step 4: Find the person who died in Los Angeles
SELECT ?person WHERE {
  ?person wdt:P20 wd:Q159 . # Q159 is Los Angeles
  ?person wdt:P57 ?death .
}
```

Note: Replace `wd:Q123456` with Allan Arbus's actual DBpedia resource identifier.",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
871,63,val,"Give me the parent of the child of Frederick Stanley, 16th Earl of Derby and father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of the awardee of the award of Rodney Lees.","SELECT ?result WHERE { <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v4 . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v3 <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . }","```sparql
# Step 1: Find Frederick Stanley's children
SELECT ?child WHERE {
  wd:Q123456 # Frederick Stanley, 16th Earl of Derby
  wdt:P40 ?child .
}

# Step 2: Identify which child is a politician
SELECT ?politicianChild WHERE {
  ?child wdt:P106 wd:Q82955 . # P106 is the occupation property, Q82955 is politician
}

# Step 3: Find the parent of that politician child
SELECT ?parentOfPolitician WHERE {
  ?politicianChild wdt:P22 ?parentOfPolitician .
}

# Step 4: Identify Rodney Lees' award
SELECT ?award WHERE {
  wd:Q789012 # Rodney Lees
  wdt:P166 ?award . # P166 is the award property
}

# Step 5: Find who awarded it and their parent
SELECT ?awardeeParent WHERE {
  ?award wdt:P921 ?awardee .
  ?awardee wdt:P22 ?awardeeParent .
}

# Step 6: Determine if there's a common parent
SELECT DISTINCT ?commonParent WHERE {
  { ?parentOfPolitician wdt:P31 wd:Q5 . } # P31 is the instance of property, Q5 is human
  UNION
  { ?awardeeParent wdt:P31 wd:Q5 . }
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
668,62,val,"Give me the person born as Darryl Paa Kwesi Bannerman-Martin and professional in the profession of the writer, that is a musical artist, of The Live Anthology and associated musical artist of the person born as the birth name of $pacely.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/occupation> ?v6 . ?v3 <http://dbpedia.org/property/birthName> ?v4 . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/occupation> ?v6 . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v4 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Darryl Paa Kwesi Bannerman-Martin""@en .
  ?person dbo:profession dbr:Writer .
  ?person dbo:musicalArtist dbr:The_Live_Anthology .
  
  ?snoopDog dbr:Snoop_Dogg .
  ?snoopDog dbo:birthName ""$pacely""@en .

  ?collaboration dbo:artist ?person ;
                 dbo:artist ?snoopDog .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
595,62,val,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and commander in Third Taiwan Strait Crisis.","SELECT ?result WHERE { ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v4 <http://dbpedia.org/property/author> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v6 <http://dbpedia.org/property/author> ?v0 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v6 <http://dbpedia.org/property/author> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?work WHERE {
  ?person dbo:nationality dbr:United_States ;
          dbo:spouse dbr:Bill_Clinton ;
          dbo:residence dbr:Chappaqua,_New_York .
  ?person rdfs:label ""Hillary Clinton""@en .

  ?book dbo:author ?person ;
        a dbo:Book, dbo:WrittenWork ;
        rdfs:label ?work .
}
```",7,16,8,3,3,3,3,71,0,0,1,0,0.0,0
943,63,val,"Give me the father of the father, that is a royalty and an office holder, of Na'od and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and reference to the alter ego of The Shadow.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/ontology/parent> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Na'od's father Dawit II
  dbr:Na'od_I_of_Ethiopia dbo:father dbr:Dawit_II_of_Ethiopia .
  
  # Dawit II's father Zara Yaqob
  dbr:Dawit_II_of_Ethiopia dbo:father dbr:Zara_Yaqob .

  # Zara Yaqob's father Amda Seyon I
  dbr:Zara_Yaqob dbo:father dbr:Amda_Seyon_I .
  
  # Amda Seyon I's parent Yeshaq
  dbr:Amda_Seyon_I dbo:father ?person .

  # Ensure the person is royalty
  ?person a dbo:Monarch .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
39,66,val,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the profession of Sam Concepcion and professional in the alter ego of The Shadow.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v6 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/occupation> ?v6 . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v3 . },"```sparql
# Step 1: Get Bob Thompson (musician)'s birth name
SELECT ?birthName WHERE {
    ?person dbo:birthName ?birthName .
    ?person rdfs:label ""Bob Thompson (musician)""@en .
}

# Step 2: Find Sam Concepcion's profession
SELECT ?profession WHERE {
    ?person dbo:occupation ?profession .
    ?person rdfs:label ""Sam Concepcion""@en .
}

# Step 3: Identify the real identity of The Shadow
SELECT ?realIdentity WHERE {
    ?alterEgo foaf:name ""The Shadow"" .
    ?alterEgo dbp:realName ?realIdentity .
}

# Step 4: Find a musical artist with the birth name from step 1, profession from step 2, and real identity from step 3
SELECT DISTINCT ?artist WHERE {
    ?artist dbo:birthName ?birthName .
    ?artist dbo:occupation ?profession .
    ?artist dbp:realName ?realIdentity .
    FILTER(?birthName IN (SELECT ?birthName WHERE { ... })) # Replace with actual birth name from Step 1
    FILTER(?profession IN (SELECT ?profession WHERE { ... })) # Replace with actual profession from Step 2
    FILTER(?realIdentity IN (SELECT ?realIdentity WHERE { ... })) # Replace with actual real identity from Step 3
}

# Step 5: Query for the band associated with this artist
SELECT DISTINCT ?band WHERE {
    ?artist dbo:member ?band .
}
```",7,8,8,3,3,3,3,71,0,0,4,0,0.0,0
23,25,val,"Give me the party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre and entity in the country of Daniel Elahi Galán and party of Gustavo Petro.","SELECT ?result WHERE { <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/country> ?v1 . ?v4 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . ?v4 <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?royParty ?danielCountry ?gustavoParty WHERE {
  # Roy Leonardo Barreras Montealegre's political party
  OPTIONAL { 
    dbr:Roy_Leonardo_Barreras_Montealegre dbo:party ?royParty .
  }

  # Daniel Elahi Galán's country
  OPTIONAL {
    dbr:Daniel_Elahi_Galán dbo:nationality ?danielCountry .
  }
  
  # Gustavo Petro's political party
  OPTIONAL {
    dbr:Gustavo_Petro dbo:party ?gustavoParty .
  }
}
```",5,6,6,2,3,2,3,28,1,5,0,0.16666666666666666,1.0,0.2857142857142857
159,64,val,"Give me the reference to George Ducas and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v3 <http://dbpedia.org/ontology/commander> ?v2 . ?v1 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?event ?war ?tvShow WHERE {
  # George Ducas reference
  OPTIONAL { 
    dbr:George_Ducas dbo:succeededBy ?successor .
  }

  # Successor is a politician and office holder in the force
  FILTER EXISTS { ?successor dbo:occupation dbr:Politician . }
  FILTER EXISTS { ?successor dbo:officeHolderOf ?force . }

  # Event and military conflict of Michał Kazimierz Pac
  OPTIONAL {
    dbr:Michał_Kazimierz_Pac dbo:participatedIn ?event .
    FILTER (EXISTS { ?event a dbo:MilitaryConflict } || EXISTS { ?event a dbo:Event })
  }

  # Commander in the war, that is a television show and societal event
  OPTIONAL {
    ?war dbo:commandedBy ?commander .
    FILTER EXISTS { ?war dbo:participatedIn dbr:Battle_of_Vienna . }
    FILTER EXISTS { ?tvShow dbo:genre dbr:Military_Drama . }
    FILTER EXISTS { ?societalEvent a dbo:SocietalEvent . }
  }

  # Military force of Battle of Vienna
  OPTIONAL {
    dbr:Battle_of_Vienna dbo:militaryForce ?militaryForce .
  }
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
375,18,val,"Give me the parent of the native, that is an artist and a musical artist, of London and author of the movie, that is a work and a television show, with the person deceased, that is an artist and a musical artist, on 2020-06-18.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/ontology/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://dbpedia.org/property/starring> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/London> . ?v1 <http://dbpedia.org/ontology/deathDate> ""2020-06-18""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/ontology/child> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
SELECT ?parent WHERE {
  ?person dbo:birthPlace dbr:Londres ;
          rdf:type dbo:MusicalArtist , dbo:Artist ;
          foaf:isPrimaryTopicOf <https://en.wikipedia.org/wiki/Adam_Schlesinger> .
  ?person dbo:dateOfDeath ""2020-06-18""^^xsd:date .
  ?person dbo:parent ?parent .
}
```",5,11,6,3,2,3,2,20,0,0,1,0,0.0,0
246,18,val,"Give me the parent of the child, that is a royalty, of the parent, that is a royalty, of Princess Aisha bint Faisal and parent of the child, that is a royalty, of Prince Faisal bin Hussein.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Princess_Aisha_bint_Faisal> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  # Step 1: Find King Faisal II as a parent of Princess Aisha bint Faisal
  dbr:Princess_Aisha_bint_Faisal dbo:child dbr:King_Faisal_II_of_Iraq .
  
  # Step 2: Find Princess Aisha bint Faisal as a child of Prince Faisal bin Hussein
  dbr:Princess_Aisha_bint_Faisal dbo:parent dbr:Prince_Faisal_bin_Hussein .

  # Step 3: Identify Queen Nazikah as the common parent
  dbr:King_Faisal_II_of_Iraq dbo:spouse ?queenNazikah .
  ?queenNazikah rdfs:label ""Queen Nazikah""@en .
  
  # Find Queen Nazikah's parent (Prince Abdul Ilah)
  ?queenNazikah dbo:parent ?parent .
  ?parent rdfs:label ""Prince Abdul Ilah""@en .
}
```",5,8,6,3,2,3,2,20,0,0,1,0,0.0,0
103,62,val,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in  and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v6 . ?v0 <http://dbpedia.org/property/occupation> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v4 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v3 <http://dbpedia.org/property/starring> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find John Cleese's role in Fawlty Towers
  ?tvShow dbo:title ""Fawlty Towers""@en .
  ?tvShow dbo:starring dbr:John_Cleese .

  # Find Raj Babbar's profession as a politician
  ?person rdfs:label ""Raj Babbar""@en ;
          dbo:profession dbr:Politician ;
          dbo:actorIn dbr:Ab_Kya_Hoga .
  
  # Return the actor from Fawlty Towers who is also an actor in Ab Kya Hoga
  ?tvShow dbo:starring ?actor .
}
```",7,9,8,3,3,3,3,71,0,0,13,0,0.0,0
557,64,val,"Give me the producer of The Adventures of Tom Sawyer (1938 film) and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v3 <http://dbpedia.org/property/alterEgo> ?v2 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
# Query to find the producer of ""The Adventures of Tom Sawyer"" (1938 film)
SELECT ?producer WHERE {
  ?film dbp:title ""The Adventures of Tom Sawyer""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1938) .
  ?film dbo:productionCompany ?company .
  ?company dbo:president|dbo:executiveProducer ?producer .
}

UNION

# Query to find the actor of ""High Society Blues""
SELECT ?actor WHERE {
  ?movie dbp:title ""High Society Blues""@en .
  ?movie dbo:starring ?actor .
}

UNION

# Query to find another notable work (claim to fame) of this actor
SELECT DISTINCT ?notableWork WHERE {
  ?actor dbo:film ?notableWork .
  FILTER(?notableWork != ?movie) .
}

UNION

# Query to identify the alter ego of Kent Allard
SELECT ?alterEgo WHERE {
  ?reference dbp:character ""Kent Allard""@en .
  ?reference dbo:alterEgo|dbo:fictionalCharacter ?alterEgo .
}

UNION

# Query to find the producer of the notable work identified in step 3
SELECT ?producer WHERE {
  ?notableWork dbo:productionCompany ?company .
  ?company dbo:president|dbo:executiveProducer ?producer .
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
782,65,val,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and band of the band member of the person born, that is a musical artist, on 1945-03-30 and reference to the real name of The Fabulous Thunderbirds.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?v6 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v4 . ?result <http://dbpedia.org/ontology/bandMember> ?v6 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
# Query to find Nick Curran's associated musical artist
SELECT ?artist WHERE {
  ?person foaf:name ""Nick Curran""@en .
  ?person dbo:birthName ""Nicholas Michael Curran""@en .
  ?person dbo:associatedBandOrMusicalArtist ?artist .
}

UNION

# Query to find the band of a person born on March 30, 1945
SELECT ?band WHERE {
  ?person dbo:birthDate ""1945-03-30""^^xsd:date .
  ?person dbo:associatedBandOrMusicalArtist ?band .
  FILTER EXISTS { ?band rdfs:label ""The Fabulous Thunderbirds""@en }
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
87,26,val,"Give me the spouse of Janusz Kamiński and actor of the movie, that is a work and a film, with Audrey Hepburn and actor of the movie, that is a work and a film, with Iliza Shlesinger.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v4 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . ?v4 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Query to find Meryl Streep's spouse
SELECT ?spouse WHERE {
  wd:Q12345 wdt:P26 ?spouse .
}

# Query to find a movie with both Audrey Hepburn and Meryl Streep
SELECT DISTINCT ?film WHERE {
  ?film wdt:P161 wd:Q1198 . # Audrey Hepburn
  ?film wdt:P161 wd:Q1240 . # Meryl Streep
}

# Query to find a movie with Iliza Shlesinger
SELECT DISTINCT ?film2 WHERE {
  ?film2 wdt:P161 wd:Q1234567 . # Iliza Shlesinger
}

# Query to find a common actor in both films and link them through ""Death Becomes Her""
SELECT DISTINCT ?actor WHERE {
  ?film wdt:P161 ?actor .
  ?film2 wdt:P161 ?actor .
  ?deathFilm wdt:P161 ?actor .
  FILTER(?deathFilm = wd:Q1234568) # Death Becomes Her
}
```",5,9,6,2,3,2,3,28,0,0,1,0,0.0,0
225,18,val,"Give me the birthplace of the awardee, that is Japanese, of Anita Borg Institute Women of Vision Awards and entity in the region of the time zone in Kiyosu.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Anita_Borg_Institute_Women_of_Vision_Awards> . ?result <http://dbpedia.org/ontology/country> ?v2 . ?v2 <http://dbpedia.org/property/timeZone> ?v1 . ?v3 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. <http://dbpedia.org/resource/Kiyosu> <http://dbpedia.org/ontology/timeZone> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee ?birthPlace ?region WHERE {
  # Find Japanese awardees of the Anita Borg Institute Women of Vision Awards
  ?awardee dbo:nationality dbr:Japan ;
          dbo:awardReceived dbr:Anita_Borg_Institute_Women_of_Vision_Awards .

  # Get their birthplace
  ?awardee dbo:birthPlace ?birthPlace .

  # Find regions associated with the Japan Standard Time zone (JST)
  ?region dbo:timeZone dbr:Japan_Standard_Time ;
          dbo:location ?location .
  
  # Ensure the awardee's entity is in one of these regions
  ?awardee dbo:location ?location .

}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
943,62,val,"Give me the child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and father of Baeda Maryam I and reference to the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v4 <http://dbpedia.org/ontology/parent> ?v2 . ?v1 <http://dbpedia.org/property/alterEgo> ?v5 . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Find the commander in Siege of Mukha
  ?commander dbo:occupation ""Commander"" .
  ?commander dbo:event ""Siege of Mukha"" .

  # Identify the parent who is royalty
  ?parent dbo:spouseOrPartner ?commander .
  ?parent a dbo:Monarch .

  # Find the child of this parent who is royalty and father of Baeda Maryam I
  ?child dbo:parent ?parent ;
         dbo:spouseOrPartner dbr:Baeda_Maryam_I ;
         a dbo:Monarch .

  # Reference to The Shadow (alter ego of Lamont Cranston)
  OPTIONAL {
    ?shadow dbo:alternateName ""The Shadow"" .
    FILTER(?shadow = ?child) # Assuming there's a connection or reference
  }
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
756,63,val,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and native of the administration, that is a country, of Theodor Heuss and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/birthPlace> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v6 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v3 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v4 <http://dbpedia.org/ontology/team> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?manager WHERE {
  # Find the successor season of 2006–07 VfL Bochum
  ?season1 dbo:succeeds dbr:2006%E2%80%9307_VfL_Bochum_season .
  
  # Identify Thomas Letsch's team and season
  ?teamSeason dbo:manager dbr:Thomas_Letsch ;
              a dbo:SoccerClubSeason ;
              dbo:participatesIn ?league1 .

  # Find the country of Theodor Heuss
  dbr:Theodor_Heuss dbo:nationality ?country .
  
  # Ensure the team is also an organization and sports club
  ?teamSeason dbo:club ?team ;
              a dbo:SoccerClub, dbo:SportsOrganization, dbo:SportsTeam .

  # Find the manager of the player in the successor season
  ?player dbo:playsFor ?team ;
          dbo:playedIn ?season1 .
  
  ?player dbo:manager ?manager .
}
```",7,17,8,3,3,3,3,71,0,0,1,0,0.0,0
816,64,val,"Give me the parent of Amy Arbus and parent of the child of the spouse of Mariclare Costello and actor of the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/ontology/child> ?v1 . ?v3 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v0 . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . },"```sparql
SELECT DISTINCT ?parentOfAmyArbus ?parentOfChildOfSpouseOfMariclareCostello WHERE {
  # Step 1: Find the parent(s) of Amy Arbus
  ?amyArbus dbo:birthName ""Amy Arbus""@en .
  ?amyArbus dbo:parent ?parentOfAmyArbus .

  # Step 2: Identify the spouse of Mariclare Costello
  ?mariclareCostello dbo:birthName ""Mariclare Costello""@en .
  ?mariclareCostello dbo:spouse ?spouseOfMariclareCostello .

  # Step 3: Find the child(ren) of the spouse of Mariclare Costello
  ?spouseOfMariclareCostello dbo:child ?childOfSpouseOfMariclareCostello .

  # Step 4: Identify a movie (work) with an actor who died in Los Angeles
  ?movie dbo:actor ?decedent .
  ?decedent dbo:deathPlace ?deathPlace .
  FILTER(CONTAINS(LCASE(str(?deathPlace)), ""los angeles"")) .

  # Step 5: Find the parent(s) of the child from step 3
  ?childOfSpouseOfMariclareCostello dbo:parent ?parentOfChildOfSpouseOfMariclareCostello .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
687,64,val,"Give me the player in Sergio Agüero and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento and player in the person born, that is an athlete, on the birthday of Marty Pollio.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v3 . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://dbpedia.org/ontology/birthDate> ?v3 . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v0 . ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . },"```sparql
# Step 1: Find Marcelo Sarmiento's Birthday
SELECT ?birthday WHERE {
  dbpedia:MarceloSarmiento dbo:birthday ?birthday .
}

# Step 2: Find a Soccer Player and Manager Born on That Date
SELECT ?person WHERE {
  ?person dbo:birthday ?birthday ;
          rdf:type dbo:SoccerPlayer ;
          dbo:occupation dbo:SoccerManager .
}

# Step 3: Determine Sergio Agüero's Team
SELECT ?team WHERE {
  dbpedia:Sergio_Ag%C3%BCero dbo:playsFor ?team .
}

# Step 4: Find Marty Pollio's Birthday
SELECT ?birthday WHERE {
  dbpedia:Marty_Polloi dbo:birthday ?birthday .
}

# Step 5: Find an Athlete Born on That Date
SELECT ?athlete WHERE {
  ?athlete dbo:birthday ?birthday ;
           rdf:type dbo:Athlete .
}

# Step 6: Determine the Player in the Team of the Person Identified in Step 2
SELECT ?player WHERE {
  ?team dbo:member ?player .
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
737,64,val,"Give me the child of Albrecht, Duke of Württemberg and child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> ?v3 . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v0 . }","```sparql
# Step 1: Find a child of Albrecht, Duke of Württemberg
SELECT ?child WHERE {
    wd:Q123456 wdt:P40 ?child .
}

# Step 2: From the identified child, find their royal child (grandchild)
SELECT ?royalGrandChild WHERE {
    ?child wdt:P40 ?royalGrandChild .
    ?royalGrandChild wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is a placeholder for royalty
}

# Step 3: Find the parent of Archduchess Margarete Sophie of Austria
SELECT ?parent WHERE {
    wd:Q654321 wdt:P22 ?parent .
}

# Step 4: Identify the spouse's royal child and find their predecessor
SELECT ?spouse, ?royalChild, ?predecessor WHERE {
    ?parent wdt:P26 ?spouse . # Spouse of the parent
    ?spouse wdt:P40 ?royalChild .
    ?royalChild wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is a placeholder for royalty

    OPTIONAL { 
        ?predecessor wdt:P62 ?royalChild . # Predecessor in terms of succession
    }
}

# Step 5: Match the grandchild from step 2 with the predecessor found in step 4
SELECT DISTINCT ?royalGrandChild WHERE {
    ?royalGrandChild = ?predecessor .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
531,63,val,"Give me the office of the commander, that is an office holder and a politician, in Central African Republic Civil War and office of the leader, that is a politician, of Conservative Republican Party (Spain) and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v6 . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v4 <http://dbpedia.org/property/residence> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v2 . ?v6 <http://dbpedia.org/property/office> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v4 . ?v2 <http://dbpedia.org/property/office> ?result . },"```sparql
# Query for the office of the commander in Central African Republic Civil War
SELECT ?office WHERE {
  ?person dbo:occupation dbr:Politician ;
          dbo:officeHolderOf ?office .
  ?war dbo:participatedIn dbr:Central_African_Republic_Civil_War .
  ?person dbo:participatedIn ?war .
}

# Query for the office of the leader of Conservative Republican Party (Spain)
SELECT ?office WHERE {
  ?leader dbo:partyLeaderOf dbr:Conservative_and_Reformist_Party_(Spain) ;
          dbo:occupation dbr:Politician .
  ?leader dbo:officeHolderOf ?office .
}

# Query for the tenant of the residence of the leader in 2003 Madrid City Council election
SELECT ?tenant WHERE {
  ?election dbo:electionDate ?date .
  FILTER (YEAR(?date) = 2003 && CONTAINS(LCASE(STR(?election)), ""madrid city council""))
  ?leader dbo:officeHolderOf ?office ;
          dbo:residence ?residence .
  ?residence dbo:tenant ?tenant .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
668,66,val,"Give me the associated musical artist of the person born as Elorm Kabu Amenyah and person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in the profession of Rod Argent.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v6 . ?v3 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v6 . }","```sparql
SELECT ?artist WHERE {
  # Elorm Kabu Amenyah is known as Shatta Wale
  ?shatta_wale dbo:birthName ""Elorm Kabu Amenyah""@en .
  ?shatta_wale rdf:type dbo:MusicalArtist .

  # Rod Argent's profession is musician
  ?rod_argent dbo:profession dbo:Musician .
  ?rod_argent foaf:name ""Rod Argent"" .

  # Find a musical artist from the Central Region of Ghana
  ?central_artist dbo:nativeCountry dbr:Ghana ;
                  dbo:nativeRegion dbr:Central_Region_(Ghana) ;
                  rdf:type dbo:MusicalArtist .

  # Check if Shatta Wale is associated with this region and profession
  FILTER(?shatta_wale = ?central_artist)
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
398,18,val,"Give me the player in the writer of The First Glove and figure known as the nickname of the player, that is a soccer club, in Denis Kolodin.",SELECT ?result WHERE { <http://dbpedia.org/resource/Denis_Kolodin> <http://dbpedia.org/ontology/team> ?v1 . ?result <http://dbpedia.org/property/nickname> ?v2 . ?v3 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/The_First_Glove> <http://dbpedia.org/property/writer> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v1 <http://dbpedia.org/property/nickname> ?v2 . },"```sparql
# Step 1: Find the writer of ""The First Glove""
SELECT ?writer WHERE {
  ?work rdfs:label ""The First Glove""@en .
  ?work dbo:author ?person .
  ?person foaf:name ?writer .
}

# Step 2: Find Denis Kolodin's nickname that is a soccer club
SELECT ?nickname WHERE {
  wd:Q123456 foaf:nick ?nickname . # Replace Q123456 with the actual DBpedia ID for Denis Kolodin
  ?club rdfs:label ?nickname .
  ?club dbo:type dbr:Soccer_Club .
}

# Step 3: Check if there is any connection between the writer and the soccer club/nickname
SELECT ?writer ?nickname WHERE {
  # Assuming we have found ?writer from step 1 and ?nickname from step 2
  ?writer foaf:nick ?nickname .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Denis Kolodin. The queries assume that ""The First Glove"" is a well-defined entity in DBpedia.",5,6,6,3,2,3,2,20,0,0,2,0,0.0,0
668,65,val,"Give me the associated musical artist of the person born as Elorm Kabu Amenyah and person born as the birth name of Joey B and professional in the profession of the writer, that is a musical artist, of The Live Anthology.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v6 . ?v0 <http://dbpedia.org/property/occupation> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v3 . }","```sparql
# Query to find Stonebwoy's birth name and profession
SELECT ?person WHERE {
  ?person rdfs:label ""Stonebwoy""@en .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""elorm kabu amenyah""))
}

UNION

# Query to find Joey B's birth name
SELECT ?person WHERE {
  ?person rdfs:label ""Joey B""@en .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""joseph benjamin""))
}

UNION

# Query to find the writer of The Live Anthology who is a musical artist
SELECT ?person WHERE {
  ?work dbo:author ?person ;
        rdfs:label ""The Live Anthology""@en .
  ?person dbo:occupation dbc:Musicians_by_instrument .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
386,26,val,Give me the war of the awardee of Golden Sword for Bravery and war of Karl Gustav von Baggovut and entity in the birth place of Elena Žalinkevičaitė-Petrauskienė.,SELECT ?result WHERE { <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/place> ?v1 . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardeeWar ?baggovutWar ?birthPlaceEntity WHERE {
  # Find an awardee of the Golden Sword for Bravery and their associated war
  ?awardee dbo:award dbr:Golden_Sword_for_Bravery .
  ?awardee dbo:militaryConflict ?awardeeWar .

  # Find Karl Gustav von Baggovut and his associated war
  dbr:Karl_Gustav_von_Baggovut dbo:militaryConflict ?baggovutWar .

  # Find the birthplace of Elena Žalinkevičaitė-Petrauskienė and an entity related to it
  dbr:Elena_Žalinkevičaitė-Petrauskienė dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:wikiPageRedirects ?birthPlaceEntity .
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
80,62,val,"Give me the actor of the album of the work, that is a song and a musical work, of T.I. and actor of the movie with the author of Smartbomb (book) and professional in .","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v4 . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?result <http://dbpedia.org/property/occupation> """"@en . ?v6 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/ontology/album> ?v6 . ?v3 <http://dbpedia.org/property/starring> ?v4 . ?v3 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Step 1: Find a song by T.I. that is also a musical work
SELECT ?song WHERE {
    ?song dbo:artist dbr:T.I._(rapper) .
    ?song rdf:type dbo:Songs .
}

# Step 2: Identify the album of the song
SELECT ?album WHERE {
    ?album dbo:song ?song .
}

# Step 3: Find any notable actors involved in the album (assuming producers or artists who are also actors)
SELECT DISTINCT ?actor WHERE {
    ?album dbo:producer ?person .
    ?person rdf:type dbo:Actor .
}

# Step 4: Identify the author of ""Smartbomb""
SELECT ?author WHERE {
    ?book dbo:title ""Smartbomb""@en ;
          dbo:author ?author .
}

# Step 5: Find a movie featuring both the actor and the author
SELECT DISTINCT ?movie WHERE {
    ?actor dbo:actedIn ?movie .
    ?author dbo:actedIn ?movie .
}

# Step 6: Determine the professional role of the actor
SELECT DISTINCT ?role WHERE {
    ?actor rdf:type ?role .
}
```",7,9,8,3,3,3,3,71,0,0,4,0,0.0,0
203,62,val,"Give me the military force of Battle of Cape Finisterre (1805) and military force of the war, that is a military conflict and an event, of the reference to William Bayne and commander in the war, that is a military conflict and an event, of the figure known as The Triple X's.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v6 . ?v4 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v4 <http://dbpedia.org/ontology/battle> ?v3 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v0 <http://dbpedia.org/ontology/battle> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
# Query for military forces involved in the Battle of Cape Finisterre (1805)
SELECT ?battle ?force1 ?force2 WHERE {
  ?battle dbo:wikiPageRedirects db:Battle_of_Cape_Finisterre_(1805) .
  ?battle dbo:militaryConflicts ?conflict .
  ?conflict dbo:participatingMilitaryUnit ?unit1 .
  ?conflict dbo:opposingMilitaryUnit ?unit2 .
  BIND(?unit1 AS ?force1)
  BIND(?unit2 AS ?force2)
}

# Query for military conflict and event related to William Bayne
SELECT DISTINCT ?war ?event WHERE {
  ?bayne foaf:name ""William Bayne""@en .
  ?bayne dbo:commanderOf ?war .
  OPTIONAL { ?war dbo:event ?event }
}

# Query for war involving The Triple X's and its commanders
SELECT DISTINCT ?conflict ?commander WHERE {
  ?tripleXs rdfs:label ""The Triple X's""@en .
  ?tripleXs dbo:participatingIn ?conflict .
  ?conflict dbo:commander ?commander .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
89,63,val,"Give me the predecessor of the child of Saw Shwe Khet and child of the parent of the child of Minye Kyawswa and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/child> ?v4 . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v6 . ?result <http://dbpedia.org/ontology/parent> ?v3 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v4 . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v6 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
  # Step 1: Find Saw Shwe Khet's child
  ?childSawShweKhet dbo:parent dbr:Saw_Shwe_Khet .
  
  # Step 2: Find Minye Kyawswa's grandchild
  ?minyeChild dbo:parent dbr:Minye_Kyawswa ;
              dbo:child ?grandchildMinyeKyawswa .

  # Step 3: Determine Myat Hpone Pyo's father and spouse
  ?myatHponePyoParent dbo:child dbr:Myat_Hpone_Pyo .
  ?spouse dbp:spouse ?myatHponePyoParent .

  # Step 4: Find commonality
  ?commonPerson 
    (dbo:parent ?childSawShweKhet ; dbo:parent ?grandchildMinyeKyawswa) ;
    dbo:royalty ""true""^^xsd:boolean ;
    dbo:spouse ?spouse .

  # Step 5: Identify the predecessor
  ?predecessor dbo:successor ?commonPerson .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
140,18,val,"Give me the commander in the war, that is a societal event, of the military force of Pickett's Charge and party member of the ruling party, that is a political party and an organisation, in Westport, Connecticut.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Pickett's_Charge> . <http://dbpedia.org/resource/Westport,_Connecticut> <http://dbpedia.org/property/leaderParty> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?result <http://dbpedia.org/ontology/party> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?party WHERE {
  # Identify General George Pickett as commander in Pickett's Charge
  dbr:Picketts_Charge dbo:commander ?commander .
  
  # Ensure the commander is a person and involved in the American Civil War
  ?commander rdf:type dbo:MilitaryPerson ;
             dbo:militaryConflict dbr:American_Civil_War .

  # Identify political parties or organizations in Westport, Connecticut
  ?party rdf:type dbo:PoliticalParty ;
         dbo:location dbr:Westport,_Connecticut .

  # Check if the commander was a member of any such party
  OPTIONAL { ?commander dbo:memberOf ?party }
}
```",5,8,6,3,2,3,2,20,0,0,4,0,0.0,0
353,62,val,"Give me the child of the parent of the child, that is a royalty, of Roger II of Sicily and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v6 <http://dbpedia.org/property/father> ?result . ?v6 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/ontology/child> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?father WHERE {
  # Step 1: Identify a child of Roger II who is royalty
  ?child1 dbo:parent dbr:Roger_II_of_Sicily ;
         dbo:title ?title1 .
  FILTER(CONTAINS(LCASE(?title1), ""king"") || CONTAINS(LCASE(?title1), ""queen""))

  # Step 2 & 3: Find another child of Roger II who is royalty
  ?child2 dbo:parent dbr:Roger_II_of_Sicily ;
         dbo:title ?title2 .
  FILTER(CONTAINS(LCASE(?title2), ""king"") || CONTAINS(LCASE(?title2), ""queen""))

  # Step 4: Identify a reference related to William I who is royalty and an office holder
  ?reference dbo:officeHolder ?office ;
             dbo:parent dbr:William_I_of_Sicily ;
             dbo:title ?title3 .
  FILTER(CONTAINS(LCASE(?title3), ""king"") || CONTAINS(LCASE(?title3), ""queen""))

  # Step 5: Find the child of this reference who is royalty and also the child of Elvira
  ?child3 dbo:parent ?reference ;
          dbo:parent dbr:Elvira_of_Castile,_Queen_of_Sicily ;
          dbo:title ?title4 .
  FILTER(CONTAINS(LCASE(?title4), ""king"") || CONTAINS(LCASE(?title4), ""queen""))

  # Step 6: Determine the father of this child
  ?father dbo:child ?child3 .
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
293,62,val,"Give me the spouse of the actor of the product, that is a film, of Nat Levine and party member of the ruling party in the landmark at elevation of 20.116800000000001347 and person born as Harriette Arlene Lake.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?v0 <http://dbpedia.org/property/starring> ?v6 . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?result <http://dbpedia.org/ontology/party> ?v3 . ?v4 <http://dbpedia.org/property/leaderParty> ?v3 . ?v6 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Nat Levine's film
  ?film dbo:producer dbr:Nat_Levine .
  
  # Step 2: Find an actor of that film
  ?film dbo:starring ?actor .

  # Step 3: Determine the spouse of the actor
  ?actor dbo:spouse ?spouse .

  # Step 4: Identify Harriette Arlene Lake's birth name
  ?harriette a dbo:Person ;
             foaf:name ""Harriette Arlene Lake""^^xsd:string .

  # Step 5: Find the landmark at elevation 20.1168
  ?landmark dbo:elevation ""20.116800000000001347""^^xsd:float .

  # Step 6: Identify the ruling party member associated with that landmark
  ?partyMember dbo:memberOf ?rulingParty ;
               dbo:location ?landmark .
  
  # Ensure all conditions are met
  FILTER(?actor = ?harriette)
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
756,66,val,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and native of the administration, that is a country, of Theodor Heuss and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v6 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?result <http://dbpedia.org/ontology/birthPlace> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager WHERE {
  # Theodor Heuss's country of administration
  dbr:Theodor_Heuss dbo:nationality dbr:Germany .

  # Manager of VfL Bochum in the 2007-08 season
  ?vflBochumSeason dbp:team dbr:VfL_Bochum ;
                   dbp:manager ?manager .

  # Person born on August 26, 1968, who is a sports manager
  ?person dbo:birthDate ""1968-08-26""^^xsd:date ;
          rdf:type dbo:SportsManager .

  # Team managed by this person in a specific season
  ?teamSeason dbp:manager ?person ;
              rdf:type dbo:SoccerClubSeason, dbo:SportsTeamSeason .

  # Ensure the manager is native to Germany (Theodor Heuss's country)
  ?manager dbo:nationality dbr:Germany .
}
```",7,15,8,3,3,3,3,71,0,0,1,0,0.0,0
293,65,val,"Give me the person born as the birth name of Ann Sothern and spouse of the actor of the product, that is a film, of Nat Levine and party member of the ruling party in Central, Louisiana.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/property/starring> ?v6 . ?result <http://dbpedia.org/ontology/party> ?v4 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v4 . ?v6 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?result <http://dbpedia.org/property/birthName> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Ann Sothern's birth name
  dbr:Ann_Sothern dbo:birthName dbr:Ann_Norton .

  # Nat Levine's film product
  dbr:Nat_Levine dbo:film dbr:The_Maltese_Falcon .

  # Actor of the film
  dbr:The_Maltese_Falcon dbo:actor dbr:Humphrey_Bogart .

  # Spouse of the actor
  dbr:Humphrey_Bogart dbo:spouse ?person .

  # Ensure person is Lauren Bacall (as per known historical data)
  FILTER(?person = dbr:Lauren_Bacall)

  # Check if Lauren Bacall has any political affiliation in Central, Louisiana
  OPTIONAL { ?person dbo:politicalAffiliation ?party . }
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
668,64,val,"Give me the associated musical artist of the person born as the birth name of $pacely and person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in Musician.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Find the artist associated with Pacely Nwosu ($pacely)
  OPTIONAL { 
    dbr:Pacely_Nwosu dbo:musicalArtist ?artist .
  }
  
  # Find the artist associated with Stonebwoy (Livingstone Etse Satekla)
  OPTIONAL {
    dbr:Stonebwoy dbo:musicalArtist ?artist .
  }

  FILTER(?artist != dbr:Pacely_Nwosu && ?artist != dbr:Stonebwoy) # Exclude the individuals themselves
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
871,62,val,"Give me the father of Arthur Stanley (politician) and parent of the awardee of the award of Rodney Lees and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/ontology/child> ?v4 . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v0 . }","```sparql
# Query 1: Retrieve Arthur Stanley's father
SELECT ?father WHERE {
  dbpedia:Arthur_Stanley_(politician) dbo:parent ?person .
  ?person rdf:type dbo:Person .
  ?person rdfs:label ?name .
  FILTER(CONTAINS(LCASE(?name), ""father""))
}

# Query 2: Identify the awardee of Rodney Lees and find their parent
SELECT ?awardeeParent WHERE {
  ?award dbo:recipient ?awardee .
  ?award dbo:givenBy dbpedia:Rodney_Lees .
  ?awardee dbo:parent ?awardeeParent .
}

# Query 3: Find Edward Stanley, 17th Earl of Derby's parent who is a politician and office holder, then identify their child
SELECT ?child WHERE {
  dbpedia:Edward_Stanley,_17th_Earl_of_Derby dbo:parent ?parent .
  ?parent rdf:type dbo:Politician ;
          dbo:officeHolder ?office .
  ?parent dbo:child ?child .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
392,9,val,Give me the member of the figure known as Der Blau and reference to the designer of Aston Martin AMR1.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Aston_Martin_AMR1> <http://dbpedia.org/property/designer> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?result <http://dbpedia.org/ontology/team> ?v1 . ?v1 <http://dbpedia.org/property/nickname> ""Der Blau""@en . }","```sparql
# Query for members of Der Blau
SELECT ?member WHERE {
  ?entity rdfs:label ""Der Blau""@en.
  ?entity dbp:member ?member.
}

UNION

# Query for designer of Aston Martin AMR1
SELECT ?designer WHERE {
  ?car rdfs:label ""Aston Martin AMR1""@en.
  ?car dbp:designer ?designer.
}
```",4,4,5,2,2,2,2,9,0,0,6,0,0.0,0
628,66,val,"Give me the person born as the birth name of Bobby Shmurda and band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/property/birthName> ?v6 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v6 . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. },"```sparql
SELECT ?person WHERE {
  # Bobby Shmurda's birth name
  wd:Q5066887 foaf:name ""Ackquille Jean Pollard""@en .
  
  # GS9 as associated musical artist
  wd:Q5066887 wdt:P106 wd:Q482994 .
  wd:Q482994 wdt:P127 ?gs9Member .

  # Band member who is a musical artist
  ?gs9Member wdt:P106 wd:Q215380 .
  
  # Grammy Award related to New York State
  wd:Q134064 wdt:P131* wd:Q60 . # Grammy Awards in New York City

  # Awardee band from New York State
  ?band wdt:P166 wd:Q134064 .
  ?band wdt:P19/wdt:P31 wd:Q515 . # Band is a settlement in New York State

  # Native region of the awardee band
  ?band wdt:P19 ?nativeRegion .

  # Find the person who matches all criteria
  ?person wdt:P106 wd:Q215380 .
  ?person wdt:P31 ?gs9Member .
  ?person wdt:P19 ?nativeRegion .
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
687,63,val,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the person born, that is an athlete, on the birthday of Marty Pollio and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v6 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v6 <http://dbpedia.org/ontology/team> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> ?v2 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://dbpedia.org/ontology/birthDate> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v4 . ?v2 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://dbpedia.org/ontology/team> ?result . }","```sparql
# Step 1: Get Marty Pollio's birthdate
SELECT ?birthdate WHERE {
  dbpedia:Marty_Polio dbo:birthday ?birthdate .
}

# Step 2: Find a soccer player and manager born on 1979-11-03
SELECT ?person WHERE {
  ?person dbo:birthDate ""1979-11-03""^^xsd:date ;
          rdf:type dbo:SoccerPlayer, dbo:SoccerManager .
}

# Step 3: Find an athlete with the same birthday as Marty Pollio
SELECT ?athlete WHERE {
  ?athlete dbo:birthday ?birthdate ;
           rdf:type dbo:Athlete .
  FILTER(?birthdate = <Marty_Polio_birthdate>)
}

# Step 4: Find an actor from ""All or Nothing: Manchester City"" who is also a soccer player and athlete
SELECT ?actor WHERE {
  ?actor dbo:spouse ?show ;
         rdf:type dbo:Actor, dbo:SoccerPlayer, dbo:Athlete .
  ?show rdfs:label ""All or Nothing: Manchester City""@en .
}

# Step 5: Determine the team of the person identified in step 2
SELECT ?team WHERE {
  ?person dbpedia-owl:member ?team ;
          rdf:type dbo:SoccerPlayer, dbo:SoccerManager .
}
```

Note: Replace `<Marty_Polio_birthdate>` with the actual birthdate obtained from Step 1.",7,12,8,3,3,3,3,71,0,0,1,0,0.0,0
687,66,val,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and player in the person born, that is an athlete, on 1955-02-22 and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.","SELECT ?result WHERE { <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?result <http://dbpedia.org/ontology/coach> ?v2 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v3 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v6 . ?v3 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v6 <http://dbpedia.org/ontology/team> ?result . }","```sparql
# Query for player in ""All or Nothing: Manchester City"" who is a soccer player and an athlete
SELECT ?player WHERE {
  ?movie dcterms:title ""All or Nothing: Manchester City""@en .
  ?movie dbo:castMember ?person .
  ?person dbo:occupation dbc:Soccer_players .
  ?person dbo:occupation dbc:Athletes .
}

# Query for person born on 1955-02-22 who is an athlete
SELECT ?athlete WHERE {
  ?person dbo:birthday ""1955-02-22""^^xsd:date .
  ?person dbo:occupation dbc:Athletes .
}

# Query for team associated with Marcelo Sarmiento, who is a soccer player and manager
SELECT ?team WHERE {
  ?sarmiento foaf:name ""Marcelo Sarmiento""@en .
  ?sarmiento dbo:birthDate ?date .
  FILTER(?date = ""1955-02-22""^^xsd:date) .
  ?sarmiento dbo:occupation dbc:Soccer_players .
  ?sarmiento dbo:occupation dbc:Soccer_managers .
  ?sarmiento dbo:team ?team .
}
```",7,12,8,3,3,3,3,71,0,0,1,0,0.0,0
731,18,val,Give me the war of the commander in Sinking of Prince of Wales and Repulse and force of the awardee of the award of Edmund Hakewill-Smith.,SELECT ?result WHERE { <http://dbpedia.org/resource/Edmund_Hakewill-Smith> <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/commander> ?v2 . ?v3 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Sinking_of_Prince_of_Wales_and_Repulse> <http://dbpedia.org/ontology/commander> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?war ?commander ?force ?awardee WHERE {
  # Find the war related to the sinking of Prince of Wales and Repulse
  ?event dbo:wikiPageRedirects dbr:Sinking_of_Prince_of_Wales_and_Repulse .
  ?event dbo:partOf ?war .

  # Identify the commander involved in this event
  ?commander dbo:occupation ""Royal Navy officer""@en ;
             dbo:associatedWith ?event .

  # Find the force associated with the commander
  ?force dbo:hasMember ?commander .

  # Find awardees of the Edmund Hakewill-Smith award during World War II
  ?awardee dbo:award dbr:Edmund_Hakewill-Smith_Medal ;
           dbo:associatedWith ?war .
}
```",5,5,6,3,2,3,2,20,0,0,3,0,0.0,0
628,62,val,"Give me the native of Florida and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and person born as the birth name of the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v6 . ?v0 <http://dbpedia.org/property/birthName> ?v6 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . },"```sparql
SELECT ?person WHERE {
  # Step 1: Identify a member of GS9 who is both an artist and a musical artist
  ?gs9Member dbo:memberOf dbr:GS9 ;
             rdf:type dbo:MusicalArtist, dbo:Artist .
  
  # Step 2: Find out the birth name of this person (Yo Gotti)
  FILTER(?gs9Member = dbp:Mario_Mims) .

  # Step 3: Locate a native of Florida whose birth name matches ""Mario Mims""
  ?floridaNative foaf:name ""Mario Mims""@en ;
                 dbo:nativePlace dbr:Florida ;
                 rdf:type dbo:MusicalArtist .
  
  # Step 4 and 5: Check if this person is part of another band or associated with another musical artist
  ?bandMember dbo:memberOf ?associatedBand ;
              owl:sameAs ?floridaNative .

  # Ensure the person found is a musical artist
  FILTER(?floridaNative = ?bandMember)
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
159,65,val,"Give me the reference to the writer of the work of George Ducas and commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v6 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v4 . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/property/writer> ?v6 . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?writer ?tvShow ?societalEvent ?commander ?successor WHERE {
  # George Ducas and his works related to a TV show or societal event
  OPTIONAL { 
    ?work dbo:author dbr:George_Ducas .
    ?work dbo:title ?title .
    FILTER regex(?title, ""television|TV"", ""i"") .
    ?tvShow dbo:name ?title .
  }
  
  # Jean Baptist, Comte d'Arco and his connection to a TV show or societal event
  OPTIONAL {
    ?event dbo:relatedTo dbr:Jean_Baptist_Comte_d%27Arco .
    ?event dbo:name ?eventName .
    FILTER regex(?eventName, ""television|TV"", ""i"") .
    ?tvShow dbo:name ?eventName .
  }
  
  # Russo-Polish War commander and successor
  OPTIONAL {
    ?war dbr:Russo-Polish_War_(1654%E2%80%931667) .
    ?commander dbo:commanded ?war .
    ?successor dbo:succeededBy ?commander .
    ?successor a dbo:Politician ;
              dbo:officeHolder ?office .
  }
  
  # Linking the elements
  OPTIONAL { ?writer dbr:George_Ducas . }
  OPTIONAL { ?tvShow dbr:Jean_Baptist_Comte_d%27Arco . }
  OPTIONAL { ?commander ?successor . }
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
375,26,val,Give me the war of the child of Toyotomi Hideyoshi and entity in the birth place of Yamaza Enjirō and war of Toyotomi Hidenaga.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v2 . <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war1 ?war2 WHERE {
  # Toyotomi Hidetsugu's war (Incident at Sakai)
  ?incident a dbo:MilitaryConflict ;
            dbo:participatedIn [dbo:participant dbr:Toyotomi_Hidetsugu] .
  
  # Yamaza Enjirō's birthplace
  dbr:Yamaza_Enjirō dbo:birthPlace dbr:Kyoto .

  # Toyotomi Hidenaga's war (Battle of Shizugatake)
  ?battle a dbo:MilitaryConflict ;
          dbo:location dbr:Kyoto ;
          dbo:participatedIn [dbo:participant dbr:Toyotomi_Hidenaga] .
  
  # Common entity in both wars
  ?incident dbo:participatedIn [dbo:participant dbr:Toyotomi_Hideyoshi] .
  ?battle dbo:participatedIn [dbo:participant dbr:Toyotomi_Hideyoshi] .

  BIND(?incident AS ?war1)
  BIND(?battle AS ?war2)
}
```",5,5,6,2,3,2,3,28,0,0,2,0,0.0,0
198,62,val,"Give me the war of the awardee of the show, that is an award, of United States Congress and entity in Charleston, South Carolina and force of the awardee of the award of Quincy Adams Gillmore.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v4 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?v6 <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/commander> ?v6 . ?v3 <http://dbpedia.org/property/awards> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?force WHERE {
  # Find the award given by U.S. Congress and related to Charleston, SC
  ?award dbo:awardedBy dbr:United_States_Congress ;
         dbo:location dbr:Charleston,_South_Carolina .

  # Find the awardee of this award and their associated war
  ?recipient dbo:receivedAward ?award .
  ?recipient dbo:participatedIn ?war .

  # Find the force awarded by Quincy Adams Gillmore
  ?force dbo:awardedBy dbr:Quincy_Adams_Gillmore ;
         dbo:partOf ?war .

  FILTER(?war != ?war) # Ensure we get a common war for both conditions
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
213,18,val,"Give me the birth place of the child, that is a politician, of the person decedent at Taipei and country of the work of Lao She.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/property/father> ?v1 . ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Lao_She> . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/ontology/country> ?result . ?v1 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Taipei> . },"```sparql
# Query to find Chiang Kai-shek's death place and his child who is a politician
SELECT ?child ?birthPlace WHERE {
  ?person dbo:deathPlace dbr:Taipei .
  ?person foaf:name ""Chiang Kai-shek""@en .
  ?person dbo:child ?child .
  ?child dbo:occupation dbc:Politicians_by_country#Taiwan .
  ?child dbo:birthPlace ?birthPlace .
}

UNION

# Query to find the country associated with Lao She's work
SELECT ?workCountry WHERE {
  dbr:Lao_She dbo:notableWork ?work .
  ?work dbo:setInLocation ?location .
  ?location dbo:countryName ?workCountry .
}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
737,62,val,"Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and child of Archduchess Margarete Sophie of Austria and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v4 . ?v6 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v6 . ?v3 <http://dbpedia.org/property/father> ?v4 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?individual WHERE {
  # Step 1: Alexander of Württemberg's lineage
  ?alexander a dbo:Person ;
             foaf:name ""Alexander of Württemberg""@en ;
             dbo:birthDate ?birthDateAlex .
  FILTER(YEAR(?birthDateAlex) = 1804 && YEAR(STRDT(?deathDateAlex, xsd:gYear)) = 1881)
  
  ?child1 dbo:spouse ?alexander ;
          dbo:child ?grandChild1 .

  ?grandChild2 dbo:parent ?grandChild1 ;
               dbo:child ?greatGrandChild .

  ?greatGrandChild dbo:parent ?grandChild2 ;
                   dbo:child ?targetDescendant .

  # Step 2: Archduchess Margarete Sophie of Austria's child
  ?margarete a dbo:Person ;
             foaf:name ""Archduchess Margarete Sophie of Austria""@en .
  
  ?margareteChild dbo:parent ?margarete .

  # Step 3: Predecessor of Archduchess Helena's spouse's child
  ?helena a dbo:Person ;
          foaf:name ""Archduchess Helena of Austria""@en .
  
  ?spouseHelena dbo:spouse ?helena ;
                dbo:child ?childSpouse .

  ?predecessorChild dbo:parent ?childSpouse .

  # Step 4: Combine information
  ?targetDescendant = ?margareteChild .
  ?targetDescendant = ?predecessorChild .
  
  FILTER EXISTS { ?individual dbo:royaltyStatus ""Royal""@en }
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
609,66,val,"Give me the birth place of the governor, that is a politician, of Virginia and birth place of the author of the reference, that is American, to El Deafo and birth place of the awardee of List of awards and nominations received by Vince Gilligan.","SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/author> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v6 . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Query for the birthplace of the current Governor of Virginia
SELECT ?birthPlace WHERE {
  ?governor dbo:officeHolderOf dbr:Governor_of_Virginia.
  ?governor foaf:birthPlace ?birthPlace.
  FILTER EXISTS { ?governor dbo:currentOfficeHolder true }
}

UNION

# Query for the birthplace of Cece Bell, author of ""El Deafo""
SELECT ?birthPlace WHERE {
  ?author dbo:wikiPageRedirects dbr:Cecelia_Bell.
  ?author foaf:birthPlace ?birthPlace.
  FILTER EXISTS { ?author dbo:genre dbr:Children's_literature }
}

UNION

# Query for the birthplace of an awardee associated with Vince Gilligan
SELECT ?awardeeBirthPlace WHERE {
  ?award dbo:recipient ?awardee.
  ?award dbo:subject dbr:Vince_Gilligan.
  ?awardee foaf:birthPlace ?awardeeBirthPlace.
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
871,64,val,"Give me the parent of Edward Stanley, 17th Earl of Derby and parent of the awardee of the award of Rodney Lees and father of the child, that is a politician, of the alumnus of Eton College.","SELECT ?result WHERE { <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?v6 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v2 <http://dbpedia.org/property/father> ?v6 . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://dbpedia.org/property/father> ?result . }","```sparql
# Query to find the parent of Edward Stanley, 17th Earl of Derby
SELECT ?parent WHERE {
  wd:Q1234567 wdt:P22 ?parent .
}

UNION

# Query to find the awardee of Rodney Lees and their parent
SELECT ?parent WHERE {
  ?person wdt:P166 wd:Q7890123 . # Assuming Q7890123 is the award named after Rodney Lees
  ?person wdt:P22 ?parent .
}

UNION

# Query to find the alumnus of Eton College who is a politician and has a child that is also a politician, then their father
SELECT ?father WHERE {
  ?alumnus wdt:P69 wd:Q6789012 . # Assuming Q6789012 is Eton College
  ?alumnus wdt:P106 wd:Q5 .       # Politician
  ?child wdt:P40 ?alumnus .
  ?child wdt:P106 wd:Q5 .         # Child is also a politician
  ?alumnus wdt:P22 ?father .
}

# Find the common parent among the results of the above queries
SELECT DISTINCT ?commonParent WHERE {
  VALUES ?parent1 { ?parent2 ?parent3 }
  ?parent1 rdfs:subClassOf* wd:Q5 . # Assuming Q5 is a class for people
  FILTER EXISTS { ?person wdt:P22 ?parent1 } .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
203,65,val,"Give me the commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of the war, that is a military conflict and an event, of the reference to William Bayne and military force of the force, that is an event and a societal event, of Robert Calder.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v6 . ?v0 <http://dbpedia.org/ontology/battle> ?v6 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v4 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?war30thRegiment ?commander30thRegiment 
         ?bayneWar ?bayneForce 
         ?calderEvent ?calderForce
WHERE {
  # Find the war and commander for the 30th (Cambridgeshire) Regiment of Foot
  dbr:30th_(Cambridgeshire)_Regiment_of_Foot dbo:militaryConflict ?war30thRegiment .
  OPTIONAL { ?war30thRegiment dbo:commander ?commander30thRegiment . }

  # Find the war and military force for William Bayne
  dbr:William_Bayne dbo:militaryConflict ?bayneWar .
  OPTIONAL { ?bayneWar dbo:militaryForce ?bayneForce . }

  # Find the societal event and military force for Robert Calder
  dbr:Robert_Calder dbo:event ?calderEvent .
  OPTIONAL { ?calderEvent dbo:militaryForce ?calderForce . }
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
595,63,val,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and commander in the war, that is a disease and a societal event, of United States Navy and author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v6 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v6 <http://dbpedia.org/property/author> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v4 <http://dbpedia.org/property/author> ?v3 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
SELECT ?spouse WHERE {
  ?book dcterms:creator ?author .
  ?author foaf:name ""Hillary Rodham Clinton""@en .
  ?author dbo:spouse ?spouse .
  ?war dbo:commander ?navy .
  ?navy rdfs:label ""United States Navy""@en .
  ?societalEvent dbo:relatedWar ?war .
  ?societalEvent rdf:type dbo:Disease ;
                 rdfs:label ?eventLabel .
  FILTER(CONTAINS(LCASE(?eventLabel), ""spanish flu"") || CONTAINS(LCASE(?eventLabel), ""world war ii""))
}
```",7,16,8,3,3,3,3,71,0,0,1,0,0.0,0
782,64,val,"Give me the reference to the real name of the band of Kim Wilson and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran and band of Kim Wilson.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v0 . ?v3 <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v3 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v1 <http://dbpedia.org/property/birthName> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandKimWilson ?bandNickCurran WHERE {
  # Find the band associated with Kim Wilson
  ?person rdfs:label ""Kim Wilson""@en .
  ?person dbo:musicGroup ?bandKimWilson .

  # Find the bands or projects associated with Nick Curran
  ?curranPerson rdfs:label ""Nick Curran""@en .
  ?curranPerson dbo:musicGroup ?bandNickCurran .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
263,25,val,"Give me the native of the birthplace, that is a region and a country, of William Gayner and parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne and parent of the person born as Hon. Mary Frances Bowes-Lyon.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://dbpedia.org/ontology/child> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v3 . <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . }","```sparql
# Step 1: Find William Gayner's birthplace
SELECT ?birthPlace WHERE {
  ?gayner dbo:birthName ""William Gayner"" .
  ?gayner dbo:birthPlace ?birthPlace .
}

# Step 2: Identify Patrick Bowes-Lyon and his parents
SELECT ?patrick ?parent WHERE {
  ?patrick foaf:name ""Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne""@en .
  ?parent dbo:child ?patrick .
}

# Step 3: Identify Hon. Mary Frances Bowes-Lyon and her parent (who is also Patrick's parent)
SELECT ?mary ?commonParent WHERE {
  ?mary foaf:name ""Hon. Mary Frances Bowes-Lyon""@en .
  ?commonParent dbo:child ?mary .
  ?commonParent dbo:child ?patrick .
}

# Step 4: Determine the native of William Gayner's birthplace
SELECT ?native WHERE {
  ?birthPlace dbo:native ?native .
}
```",5,7,6,2,3,2,3,28,0,0,2,0,0.0,0
353,63,val,"Give me the father of the child, that is a royalty, of William I of Sicily and child of the child of Alfonso VI of León and Castile and child of the parent of the child, that is a royalty, of Roger II of Sicily.",SELECT ?result WHERE { ?v6 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/child> ?v4 . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v6 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v4 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . },"```sparql
SELECT ?father WHERE {
  # William I of Sicily's children who are royalty
  ?child1 dbo:parent dbr:William_I_of_Sicily ;
          a dbo:RoyalFamilyMember .

  # One of these children has a child who is also royalty and a descendant of Alfonso VI
  ?grandchild1 dbo:parent ?child1 ;
               dbo:parent ?alfonsoVIChild ;
               a dbo:RoyalFamilyMember .
  
  # Identify the child of Alfonso VI
  ?alfonsoVIChild dbo:parent dbr:Alfonso_VI_of_León_and_Castile .

  # Roger II's royal child and their parent
  ?rogerIIChild dbo:parent dbr:Roger_II_of_Sicily ;
                a dbo:RoyalFamilyMember .
  
  ?parentOfRogerIIChild dbo:child ?rogerIIChild .

  # The father of the grandchild1, who is also the parent of Roger II's royal child
  ?father dbo:child ?grandchild1 ;
          dbo:child ?parentOfRogerIIChild .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
723,18,val,"Give me the band member of the associated musical artist, that is an organisation, of Cavalera Conspiracy and band member of the producer, that is an organisation and a group, of the reference to Nothing to Gein.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> ?v2 . <http://dbpedia.org/resource/Cavalera_Conspiracy> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v1 <http://xmlns.com/foaf/0.1/name> ""Nothing to Gein""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . }","```sparql
# Step 1: Get band members of Cavalera Conspiracy
SELECT ?member WHERE {
    ?band dbr:Cavalera_Conspiracy ;
          dbo:bandMember ?member .
}

UNION

# Step 2: Find the producer of ""Nothing to Gein""
SELECT ?producer WHERE {
    ?album dbr:Nothing_to_Gein ;
           dbo:recordProducer ?producer .
}

# Step 3: Find common band member
SELECT DISTINCT ?commonMember WHERE {
    # Band members of Cavalera Conspiracy
    ?band dbr:Cavalera_Conspiracy ;
          dbo:bandMember ?member .

    # Producers of ""Nothing to Gein""
    ?album dbr:Nothing_to_Gein ;
           dbo:recordProducer ?producer .

    # Check if any member is also a producer
    FILTER (?member = ?producer)
    
    BIND(?member AS ?commonMember)
}
```",5,8,6,3,2,3,2,20,0,0,1,0,0.0,0
609,62,val,"Give me the birth place of the awardee of the award of Vince Gilligan and birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of Cece Bell.",SELECT ?result WHERE { ?v6 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v4 . ?v3 <http://dbpedia.org/property/awards> ?v4 . ?v0 <http://dbpedia.org/property/governor> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query 1: Vince Gilligan's award and awardee's birthplace
SELECT ?award ?awardee ?awardeeBirthPlace WHERE {
  ?person dbo:nationality dbr:United_States_of_America ;
          foaf:name ""Vince Gilligan""@en .
  ?person dbo:awardReceived ?award .
  ?award dbo:recipient ?awardee .
  ?awardee dbo:birthPlace ?awardeeBirthPlace .
}

# Query 2: Paulus Powell's birth region and its governor
SELECT ?region ?governor WHERE {
  ?person foaf:name ""Paulus Powell""@en ;
          dbo:birthPlace ?place .
  ?place a dbo:AdministrativeRegion ;
         rdfs:label ?regionLabel .
  FILTER (lang(?regionLabel) = 'en') .
  BIND(str(?regionLabel) AS ?region)
  OPTIONAL {
    ?governor dbo:governmentRole dbr:Governor_of_?region ;
             foaf:name ?governorName .
    FILTER(lang(?governorName) = 'en')
  }
}

# Query 3: Cece Bell's birthplace
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Cece Bell""@en ;
          dbo:birthPlace ?birthPlace .
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
23,26,val,"Give me the entity in Colombia and party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre and party of the father of Sofía Petro.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/party> ?result . ?v4 <http://dbpedia.org/ontology/party> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v1 . }","```sparql
# Query for Roy Leonardo Barreras Montealegre
SELECT ?birthPlaceInColombia ?party WHERE {
  ?person a dbo:Politician ;
          foaf:name ""Roy Leonardo Barreras Montealegre"" ;
          dbo:birthPlace ?birthPlace .
  OPTIONAL { ?birthPlace dbp:country ""Colombia""@en . }
  OPTIONAL { ?person dbo:politicalParty ?party . }
  FILTER(?birthPlaceInColombia = ?birthPlace)
}
```

```sparql
# Query for Sofía Petro's father
SELECT ?fatherName ?fatherParty WHERE {
  ?sofia a dbo:Person ;
         foaf:name ""Sofía Petro"" .
  OPTIONAL { ?sofia dbo:parent ?father . }
  OPTIONAL { ?father foaf:name ?fatherName . }
  OPTIONAL { ?father dbo:politicalParty ?fatherParty . }
}
```",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
203,66,val,"Give me the military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/commander> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v6 . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v3 . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v6 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
SELECT DISTINCT ?militaryForce WHERE {
  # William Bayne's military force
  ?bayne dbo:occupation dbr:Royal_Navy_officer .
  ?bayne dbo:militaryConflict ?conflict1 .
  
  # 30th (Cambridgeshire) Regiment of Foot's military conflict and commander
  ?regiment dbr:30th_(Cambridgeshire)_Regiment_of_Foot ;
            dbo:militaryConflict ?conflict2 ;
            dbo:commander ?commander .

  # Awardee of Knight Commander of the Order of the Bath
  ?awardee dbo:award dbr:Knight_Commander_of_the_Order_of_the_Bath .
  ?awardee dbo:militaryForce ?militaryForce .

  # Linking conflicts and forces
  ?conflict1 rdfs:label ?conflictLabel1 ;
             dbo:militaryForce ?force1 .
  
  ?conflict2 rdfs:label ?conflictLabel2 ;
             dbo:militaryForce ?force2 .

  FILTER(?force1 = ?force2)
  FILTER(?force2 = ?militaryForce)

  # Ensure the commander is linked to the same military force
  ?commander dbo:militaryForce ?militaryForce .
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
87,25,val,"Give me the actor of the movie, that is a work and a film, with Iliza Shlesinger and actor of Always (1989 film) and spouse of the awardee of List of awards and nominations received by Janusz Kamiński.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . ?v4 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/spouse> ?v1 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Step 1: Find movies with Iliza Shlesinger
SELECT ?movie WHERE {
  ?movie dbo:starring dbp:Iliza_Shlesinger .
}

# Step 2: Find actors from ""Always"" (1989)
SELECT DISTINCT ?actor WHERE {
  ?always dbo:starring ?actor .
  FILTER(STRSTARTS(LCASE(?always), ""http://dbpedia.org/resource/always_(1989_film)""))
}

# Step 3: Find movies with Ellen Kuras
SELECT ?movie WHERE {
  ?movie dbo:starring dbp:Ellen_Kuras .
}

# Step 4: Combine the results to find a common movie
SELECT DISTINCT ?commonMovie WHERE {
  # Movies featuring Iliza Shlesinger
  VALUES ?ilizaMovies { 
    <http://dbpedia.org/resource/Movie1> 
    <http://dbpedia.org/resource/Movie2>
    # Add more movies as found from Step 1
  }
  
  # Movies featuring actors from ""Always"" (1989)
  VALUES ?alwaysActors {
    <http://dbpedia.org/resource/Richard_Dreyfuss> 
    <http://dbpedia.org/resource/Holly_Hunter>
    <http://dbpedia.org/resource/Brad_Johnson>
    # Add more actors as found from Step 2
  }
  
  # Movies featuring Ellen Kuras
  VALUES ?ellenMovies {
    <http://dbpedia.org/resource/MovieA> 
    <http://dbpedia.org/resource/MovieB>
    # Add more movies as found from Step 3
  }

  # Find common movie
  ?commonMovie rdf:type dbo:Film .
  ?commonMovie dbo:starring ?ilizaActors .
  FILTER(?ilizaActors IN ?ilizaMovies)
  
  ?commonMovie dbo:starring ?alwaysActor .
  FILTER(?alwaysActor IN ?alwaysActors)

  ?commonMovie dbo:starring dbp:Ellen_Kuras .
}

# Step 5: Get the full cast of the identified movie
SELECT DISTINCT ?actor WHERE {
  ?commonMovie dbo:starring ?actor .
}
```",5,7,6,2,3,2,3,28,0,0,1,0,0.0,0
347,63,val,"Give me the child of the father of Cecilia Renata of Austria and father of the child of Ferdinand III, Holy Roman Emperor and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v6 <http://dbpedia.org/property/father> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v2 . ?v6 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?leopoldI ?frenchConnection WHERE {
  # Leopold I, Holy Roman Emperor
  dbr:Leopold_I,_Holy_Roman_Emperor dbo:father dbr:Ferdinand_III,_Holy_Roman_Empire .
  
  # The French Connection as a television show and event
  dbr:The_French_Connection_(film) a dbo:Film ;
     dbo:basedOn dbr:The_French_Connection ;
     dbo:country dbr:France .

  # France's involvement in the Algerian War
  dbr:Algerian_War dbo:participatingMilitaryForce dbr:France .
  
  BIND(dbr:Leopold_I,_Holy_Roman_Emperor AS ?leopoldI)
  BIND(dbr:The_French_Connection_(film) AS ?frenchConnection)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
249,9,val,"Give me the native of the birthplace, that is a country, of Shobhna Samarth and native of the work, that is Indian, of Jamsetji Tata.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Jamsetji_Tata> . <http://dbpedia.org/resource/Shobhna_Samarth> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . },"```sparql
# Part 1: Shobhna Samarth's Birthplace
SELECT ?birthPlaceLabel ?nativeOfBirthPlaceLabel WHERE {
  ?s dbo:birthPlace ?birthPlace .
  FILTER(?s = dbpedia:Shobhna_Samarth) .
  
  # Check if the birth place is a country
  OPTIONAL { 
    ?birthPlace wdt:P31/wdt:P279* wd:Q6256 . # Instance of Country
    ?nativeOfBirthPlace dbo:nativeOf ?birthPlace .
    SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
  }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}

UNION

# Part 2: Jamsetji Tata's Work
SELECT ?workLocationLabel ?nativeOfWorkLocationLabel WHERE {
  # Assuming the notable work is related to Tata Steel in Jamshedpur
  ?t dbo:notableWork ?work .
  FILTER(?t = dbpedia:Jamsetji_Tata) .
  
  OPTIONAL {
    ?work dbo:location ?workLocation .
    ?workLocation wdt:P31/wdt:P279* wd:Q515 . # Instance of City
    ?nativeOfWorkLocation dbo:nativeOf ?workLocation .
    SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
  }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```",4,6,5,2,2,2,2,9,0,0,22,0,0.0,0
687,65,val,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the person born, that is an athlete, on 1955-02-22 and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v4 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v4 <http://dbpedia.org/ontology/team> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v6 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/property/starring> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?result <http://dbpedia.org/ontology/coach> ?v3 . }","```sparql
# Step 1: Find the soccer player and manager born on 1979-11-03
SELECT ?person WHERE {
  ?person dbo:birthDate ""1979-11-03""^^xsd:date .
  ?person dbo:sport dbr:Soccer .
  ?person dbo:occupation dbr:Soccer_manager .
}

# Step 2: Find the athlete born on 1955-02-22
SELECT ?athlete WHERE {
  ?athlete dbo:birthDate ""1955-02-22""^^xsd:date .
  ?athlete dbo:sport ?sport .
}

# Step 3: Find the actor who is both a soccer player and an athlete
SELECT ?actor WHERE {
  ?actor dbo:occupation dbr/Actor .
  ?actor dbo:sport dbr:Soccer .
  ?actor dbo:sport ?otherSport .
}

# Step 4: Identify the film directed by Manuel Huerga featuring this actor
SELECT ?film WHERE {
  ?film dbo:director dbr:Manuel_Huerga .
  ?film dbo:starring ?actor .
}

# Step 5: Find the team of the person from step 1
SELECT ?team WHERE {
  ?person dbo:playsFor ?team .
}
```",7,13,8,3,3,3,3,71,0,0,1,0,0.0,0
609,65,val,"Give me the birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the author of El Deafo.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v6 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v3 . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://dbpedia.org/property/governor> ?v6 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query 1: Find Vince Gilligan's awards
SELECT ?award WHERE {
  dbpedia:Vince_Gilligan dbo:awardReceived ?award .
}

# Query 2: For each award, find other awardees and their birthplaces
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?awardee ?birthPlace WHERE {
  VALUES ?award { 
    # Replace with actual awards found from Query 1
  }
  ?recipient dbo:awardReceived ?award .
  FILTER(?recipient != dbpedia:Vince_Gilligan)
  OPTIONAL { ?recipient foaf:birthPlace ?birthPlace . }
}

# Query 3: Find Paulus Powell's birthplace (region and administrative region)
SELECT DISTINCT ?birthPlace WHERE {
  dbr:Paulus_Powell dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:AdministrativeRegion ;
              a dbo:Region .
}

# Query 4: Identify the governor of that region
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?governor WHERE {
  # Replace with actual birthplace found from Query 3
  VALUES ?region { 
    # BirthPlace URI from Query 3
  }
  ?governor dbo:governmentRole dbp:governorOf ?region .
}

# Query 5: Find the author of ""El Deafo"" and their birthplace
SELECT DISTINCT ?author ?birthPlace WHERE {
  dbr:El_Deafo dbo:author ?author .
  OPTIONAL { ?author foaf:birthPlace ?birthPlace . }
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
375,25,val,Give me the war of Hashiba Hidekatsu and entity in the birth place of Yamaza Enjirō and war of the person born as Koichirō.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v2 . <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v2 . ?v4 <http://dbpedia.org/property/birthName> ""Koichirō""@en . ?v4 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
# Query to find the war involving Hashiba Hidekatsu
SELECT ?war WHERE {
  dbpedia:Hashiba_Hidekatsu dbo:participatedIn ?war .
}

# Query to find Yamaza Enjirō's birthplace and an associated entity
SELECT DISTINCT ?birthPlaceEntity WHERE {
  dbpedia:Yamaza_Enjiro dbo:birthPlace ?birthPlace .
  ?birthPlace rdfs:label ?birthPlaceLabel .
  FILTER (lang(?birthPlaceLabel) = 'en')
  OPTIONAL { ?birthPlaceEntity dbo:location ?birthPlace . }
}

# Query to find the person born as Koichirō and their involvement in a war
SELECT DISTINCT ?person ?war WHERE {
  ?person rdfs:label ?name .
  FILTER (CONTAINS(LCASE(?name), ""koichirō""))
  ?person dbo:participatedIn ?war .
}
```",5,5,6,2,3,2,3,28,0,0,2,0,0.0,0
119,64,val,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana and tenant of Spain and tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v3 <http://dbpedia.org/property/leader> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v2 <http://dbpedia.org/property/office> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?office WHERE {
  ?administration dbo:country dbr:Spain .
  ?administration dbo:party dbr:Spanish_Socialist_Workers'_Party .
  ?person rdfs:label ""Anxo Quintana""@en .
  ?person dbo:position ?office .
  ?administration dbo:head ?person .
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
293,63,val,"Give me the person born as the birth name of Ann Sothern and spouse of the actor of 1,000 Dollars a Minute and party member of the ruling party in the landmark at elevation of 20.116800000000001347.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v3 . ?v4 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v6 . ?v6 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v2 . ?v4 <http://dbpedia.org/property/leaderParty> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?spouse WHERE {
  ?person a dbo:Person ;
          foaf:name ""Ann Sothern""@en .
  OPTIONAL { ?person dbo:birthName ?birthName . }
  OPTIONAL { ?person dbo:spouse ?spouse . }
  
  ?actor a dbo:Actor ;
         foaf:name ""George Raft""@en .
  FILTER(?spouse = ?actor)
}
```",7,7,8,3,3,3,3,71,0,0,1,0,0.0,0
311,18,val,"Give me the band member of the writer of No Alternative and associated musical artist of the associated musical artist, that is an artist, of the producer, that is an organisation and a band and a group, of Lotus (R.E.M. song).",SELECT ?result WHERE { <http://dbpedia.org/resource/No_Alternative> <http://dbpedia.org/property/writer> ?v3 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/Lotus_(R.E.M._song)> <http://dbpedia.org/ontology/producer> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . },"```sparql
# Step 1: Identify the producer of ""Lotus"" by R.E.M.
SELECT ?producer WHERE {
  ?song dcterms:title ""Lotus""@en .
  ?song dbo:artist <http://dbpedia.org/resource/R.E.M.> .
  ?song dbo:producer ?producer .
}

# Step 2: Determine if the producer is an organization and a band/group
SELECT DISTINCT ?producer WHERE {
  VALUES ?producer { ?p } # Replace ?p with the actual URI obtained from step 1
  ?producer rdf:type <http://dbpedia.org/ontology/Organization> .
  ?producer rdf:type <http://dbpedia.org/ontology/Band> .
}

# Step 3: Find associated musical artists of the producer
SELECT DISTINCT ?associatedArtist WHERE {
  VALUES ?producer { ?p } # Replace ?p with the actual URI obtained from step 2
  ?artist dbo:associatedMusicalArtist ?producer .
  ?artist rdf:type <http://dbpedia.org/ontology/MusicalArtist> .
}

# Step 4: Identify the writer of ""No Alternative""
SELECT DISTINCT ?writer WHERE {
  ?album dcterms:title ""No Alternative""@en .
  ?album dbo:composer ?writer .
}

# Step 5: Determine the band member of the writer
SELECT DISTINCT ?bandMember WHERE {
  VALUES ?writer { ?w } # Replace ?w with the actual URI obtained from step 4
  ?bandMember dbo:member ?writer .
  ?bandMember rdf:type <http://dbpedia.org/ontology/Band> .
}

# Step 6: Find associated musical artists of this band member that are also recognized as artists
SELECT DISTINCT ?associatedArtist WHERE {
  VALUES ?bandMember { ?b } # Replace ?b with the actual URI obtained from step 5
  ?artist dbo:associatedMusicalArtist ?bandMember .
  ?artist rdf:type <http://dbpedia.org/ontology/MusicalArtist> .
}
```",5,9,6,3,2,3,2,20,0,0,1,0,0.0,0
609,63,val,"Give me the birth place of the author of El Deafo and birth place of the governor, that is a politician, of Virginia and birth place of the awardee of the award of Vince Gilligan.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/awards> ?v4 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v2 . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v6 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v6 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v4 . },"```sparql
# Query for Cece Bell's birth place
SELECT ?birthPlace WHERE {
  wd:QXXXXX dbo:birthPlace ?birthPlace .
}

UNION

# Query for Glenn Youngkin's birth place
SELECT ?birthPlace WHERE {
  wd:QYYYYY dbo:birthPlace ?birthPlace .
}

UNION

# Query for Bryan Cranston's birth place
SELECT ?birthPlace WHERE {
  wd:ZZZZZZ dbo:birthPlace ?birthPlace .
}
```

**Note**: Replace `wd:QXXXXX`, `wd:QYYYYY`, and `wd:ZZZZZZ` with the actual DBpedia resource identifiers (QIDs) for Cece Bell, Glenn Youngkin, and Bryan Cranston respectively. You can find these QIDs by searching their names on DBpedia or Wikidata.",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
943,65,val,"Give me the father of the father, that is a royalty and an office holder, of Na'od and child of the parent, that is a royalty, of Yeshaq I and reference to the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/property/alterEgo> ?v5 . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?zaraYaqob WHERE {
  # Find Yeshaq I and his parent (Zara Yaqob)
  dbr:Yeshaq_I dbo:father dbr:Zara_Yaqob .
  
  # Find ""The Shadow"" as the alter ego of Lamont Cranston
  OPTIONAL { 
    ?shadow dbo:alterEgo dbr:Lamont_Cranston .
    FILTER(?shadow = dbr:The_Shadow)
  }
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
905,66,val,"Give me the parent of the father, that is a royalty, of Charles I of Hungary and spouse of the father of Philip I, Prince of Taranto and child of the child, that is a royalty, of the predecessor of Stephen V of Hungary.","SELECT ?result WHERE { ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v3 . ?v0 <http://dbpedia.org/property/father> ?v5 . ?v5 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v6 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v6 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?parentOfCharlesIFather ?spouseOfPhilipIFathersFather WHERE {
  # Step 1: Identify Charles I of Hungary's father
  ?charlesI dbo:father ?charlesIFather .
  FILTER(STRSTARTS(STR(?charlesI), ""http://dbpedia.org/resource/Charles_I_of_Hungary""))

  # Step 2: Find the parent of that father who is royalty
  ?charlesIFather dbo:parent ?parentOfCharlesIFather .
  ?parentOfCharlesIFather a ?royaltyClass .
  FILTER(STRSTARTS(STR(?royaltyClass), ""http://dbpedia.org/ontology/RoyalFamilyMember""))

  # Step 3: Identify Philip I, Prince of Taranto's father
  ?philipI dbo:father ?philipIFather .
  FILTER(STRSTARTS(STR(?philipI), ""http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto""))

  # Step 4: Find the spouse of that father
  ?philipIFather dbo:spouse ?spouseOfPhilipsFather .

  # Step 5: Determine the child of that spouse who is royalty
  ?spouseOfPhilipsFather dbo:child ?royalChild .
  ?royalChild a ?royaltyClass2 .
  FILTER(STRSTARTS(STR(?royaltyClass2), ""http://dbpedia.org/ontology/RoyalFamilyMember""))

  # Step 6: Identify Stephen V of Hungary's predecessor
  ?stephenV dbo:predecessor ?predecessorOfStephenV .
  FILTER(STRSTARTS(STR(?stephenV), ""http://dbpedia.org/resource/Stephen_V_of_Hungary""))

  # Step 7: Find the child of that predecessor who is royalty
  ?predecessorOfStephenV dbo:child ?royalChild2 .
  ?royalChild2 a ?royaltyClass3 .
  FILTER(STRSTARTS(STR(?royaltyClass3), ""http://dbpedia.org/ontology/RoyalFamilyMember""))

  # Step 8: Combine these relationships
  FILTER(?parentOfCharlesIFather = ?spouseOfPhilipsFather)
}
```",7,9,8,3,3,3,3,71,0,0,1,0,0.0,0
531,65,val,"Give me the office of the leader, that is a politician, of Conservative Republican Party (Spain) and tenant of the residence of Alberto Ruiz-Gallardón and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v4 . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v3 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v6 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/ontology/commander> ?v6 . ?v3 <http://dbpedia.org/property/office> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/headquarter> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?officeLeader ?residenceTenant ?commanderOffice WHERE {
  # Step 1 and 2: Leader of the Conservative Republican Party (Spain) and their office
  dbr:Conservative_Republican_Party_(Spain) dbo:leader ?personLeader .
  ?personLeader foaf:name ?nameLeader .
  ?personLeader dbo:officeHolder ?officeLeader .

  # Step 3: Residence of Alberto Ruiz-Gallardón and its tenant
  OPTIONAL {
    dbr:Alberto_Ruiz-Gallardón dbo:residence ?residence .
    ?residence dbo:tenant ?personTenant .
    ?personTenant foaf:name ?nameTenant .
    FILTER(?nameLeader = ?nameTenant)
  }

  # Step 4 and 5: Manuel Pinto da Costa's office as a commander
  dbr:Manuel_Pinto_da_Costa dbo:officeHolder ?commanderOffice .
  ?commanderOffice dbo:commanderIn ?conflictEvent .
  FILTER(STRSTARTS(STR(?conflictEvent), ""http://dbpedia.org/resource/Category:Military_conflicts"") || 
         STRSTARTS(STR(?conflictEvent), ""http://dbpedia.org/resource/Category:Societal_events""))
}
```",7,12,8,3,3,3,3,71,0,0,1,0,0.0,0
158,25,val,"Give me the person decedent at the birthplace, that is a country, of Sandro Bertaggia and native of the administration of Alexander II, Grand Duke of Finland and native of Russian Empire.","SELECT ?result WHERE { <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . ?result <http://dbpedia.org/ontology/deathPlace> ?v3 . ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?decedent WHERE {
    # Step 1: Find Sandro Bertaggia's birthplace that is a country
    dbr:Sandro_Bertaggia dbo:birthPlace ?birthCountry .
    
    FILTER (isBlank(?birthCountry) = false && 
            EXISTS { ?birthCountry a dbo:Country . })

    # Step 2: Identify Alexander II, Grand Duke of Finland's native place and administration
    dbr:Alexander_II,_Grand_Duke_of_Finland dbo:nativePlace ?nativePlace .
    FILTER (str(?nativePlace) = ""Russian Empire"")

    # Step 3: Find individuals who died at Sandro Bertaggia's birthplace
    ?decedent dbo:deathPlace ?birthCountry .

    # Step 4: Ensure the decedent was native to Russian Empire
    ?decedent dbo:nativePlace ?nativePlace .
}
```",5,6,6,2,3,2,3,28,0,0,1,0,0.0,0
628,64,val,"Give me the band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and person born as Ackquille Jean Pollard and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . }","```sparql
SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Identify French Montana
  ?frenchMontana dbo:birthName ""Ackquille Jean Pollard""@en .
  
  # Step 2: Determine his association with GS9
  ?gs9 dbo:member ?frenchMontana ;
       a dbo:MusicalGroup .

  # Step 3: Find other members of GS9 who are artists and musical artists
  ?otherMember dbo:memberOf ?gs9 ;
               a dbo:Artist, dbo:MusicalArtist .
  
  # Step 4: Identify associated musical artist(s)
  ?associatedArtist dbo:associatedBandOrMusicalArtist ?otherMember .

  # Step 5: Determine if the associated artist is also a band member
  ?bandMember dbo:member ?associatedArtist ;
              a dbo:Band .

  # Step 6: Find an award related to New York (state)
  ?award dbo:location ?newYorkRegion .
  ?newYorkRegion rdf:type dbo:State, dbo:Settlement, dbo:Region ;
                 rdfs:label ""New York""@en .

  # Step 7: Identify the awardee of this award
  ?band dbo:awarded ?award ;
        a dbo:Band .

  # Step 8: Determine the native place of the awardee
  ?nativePlace rdf:type dbo:State, dbo:Settlement, dbo:Region ;
               rdfs:label ?placeLabel .
  ?bandMember dbo:nativePlace ?nativePlace .
}
```",7,15,8,3,3,3,3,71,0,0,1,0,0.0,0
386,25,val,Give me the war of the awardee of 25 and entity in the birth place of Elena Žalinkevičaitė-Petrauskienė and war of Alexander Lvovich Davydov.,"SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v2 . <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v4 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
# Step 1: Find a notable awardee from 1925
SELECT ?person WHERE {
  ?award dcterms:date ""1925"" ;
         dbo:recipient ?person .
}

# Step 2: Determine the war involving this awardee
SELECT DISTINCT ?war WHERE {
  ?person dbo:occupation dbo:MilitaryPerson ;
          dbo:militaryConflict ?war .
}

# Step 3: Find the birthplace of Elena Žalinkevičaitė-Petrauskienė and an entity related to that place
SELECT ?birthPlace (SAMPLE(?entity) AS ?relatedEntity) WHERE {
  dbpedia:Elena_Žalinkevičaitė-Petrauskienė dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:wikiPageRedirects ?entity .
}

# Step 4: Determine the war involving Alexander Lvovich Davydov
SELECT DISTINCT ?war WHERE {
  dbpedia:Aleksandr_Davydov dbo:militaryConflict ?war .
}
```",5,5,6,2,3,2,3,28,0,0,1,0,0.0,0
756,62,val,"Give me the native of the administration, that is a country, of the leader of West Germany and manager of 2020–21 SBV Vitesse season and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v3 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v4 . ?v6 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v6 . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v4 <http://dbpedia.org/ontology/team> ?v3 . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v6 <http://dbpedia.org/property/leader> ?v0 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. },"```sparql
SELECT ?nativeCountry WHERE {
  # Find Helmut Kohl's native country
  wd:Q11696 wdt:P19 ?placeOfBirth .
  ?placeOfBirth wdt:P17 ?country .
  
  # Find the manager of SBV Vitesse for the 2020-21 season
  ?vitesseTeam wdt:P127* wd:Q123456 . # Replace Q123456 with the actual DBpedia ID for SBV Vitesse
  ?manager wdt:P39 ?vitesseTeam .
  ?manager rdfs:label ""John Stegeman""@en .

  # Find a player managed by John Stegeman in a club that is also an organization and soccer club
  ?player wdt:P39 ?manager .
  ?club wdt:P127* ?player .
  ?club rdf:type wd:Q43229 . # Soccer club type

  # Find the successor of the 2006-07 VfL Bochum season
  ?bochumTeam wdt:P127* wd:Q1234567 . # Replace Q1234567 with the actual DBpedia ID for VfL Bochum
  ?season1 wdt:P136 ?bochumTeam .
  ?season1 wdt:P195 ?date2006 .
  ?date2006 dbp:endDate ""2007-05-27""^^xsd:date .
  
  ?season2 wdt:P136 ?bochumTeam .
  ?season2 wdt:P195 ?date2007 .
  ?date2007 dbp:startDate ""2007-07-01""^^xsd:date .

  FILTER(?season1 != ?season2)
}
```",7,14,8,3,3,3,3,71,0,0,1,0,0.0,0
742,18,val,Give me the birthplace of the resident of Sofia and birthplace of the alumnus of the reference to Пловдивски университет „Паисий Хилендарски“.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://xmlns.com/foaf/0.1/name> ""Пловдивски университет „Паисий Хилендарски“""@en . ?v2 <http://dbpedia.org/ontology/almaMater> ?v1 . ?v3 <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Sofia> . }","```sparql
# Query for a notable resident of Sofia
SELECT ?person ?birthPlace WHERE {
  ?person dbo:residence dbr:Sofia .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for an alumnus of Пловдивски университет „Паисий Хилендарски“
SELECT ?alumnus ?birthPlace WHERE {
  ?alumnus dbo:almaMater dbr:Plovdiv_University_of_Saints_Kiril_and_Methodius .
  ?alumnus dbo:birthPlace ?birthPlace .
}
```",5,5,6,3,2,3,2,20,0,0,2,0,0.0,0
203,64,val,"Give me the military force of Battle of Fort Royal and military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and commander in the war, that is a military conflict and an event, of the figure known as The Triple X's.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v3 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v1 <http://dbpedia.org/ontology/commander> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
# Query for Battle of Fort Royal military forces
SELECT ?battle ?force1 ?force2 WHERE {
  ?battle dbo:wikiPageRedirects dbpedia-fr:Fort_Royal_(bataille_de_1795) .
  ?battle dbo:militaryConflicts ?conflict .
  ?conflict dbo:combatant1 ?force1 .
  ?conflict dbo:combatant2 ?force2
}

UNION

# Query for Knight Commander of the Order of the Bath and associated societal event
SELECT ?person ?event WHERE {
  ?person dbo:award ""Knight Commander of the Order of the Bath""@en .
  ?person dbo:societalEvent ?event .
}

UNION

# Query for The Triple X's commander in war and military forces involved
SELECT ?figure ?war ?force1 ?force2 WHERE {
  ?figure rdfs:label ""The Triple X's""@en .
  ?figure dbo:commanderInWar ?war .
  ?war dbo:militaryConflicts ?conflict .
  ?conflict dbo:combatant1 ?force1 .
  ?conflict dbo:combatant2 ?force2
}
```",7,11,8,3,3,3,3,71,0,0,1,0,0.0,0
143,18,val,"Give me the associated musical artist of the person born as Cynthia Ikponmwenosa Morgan and actor of the show, that is a movie, with the reference to Afeez Oyetoro.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/property/starring> ?result . ?v2 <http://dbpedia.org/ontology/starring> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://xmlns.com/foaf/0.1/name> ""Afeez Oyetoro""@en . ?v3 <http://dbpedia.org/property/birthName> ""Cynthia Ikponmwenosa Morgan""@en . }","```sparql
SELECT ?artist WHERE {
  wd:Q134064 wdt:P735 wd:Q134064 ; # Cynthia ""Ciara"" Harris is a musical artist
  wdt:P106 wd:Q33999 . # Musical artist

  OPTIONAL { 
    wd:Q134064 wdt:P569 ?birthDate .
    FILTER (YEAR(?birthDate) = 1985 && MONTH(?birthDate) = 10 && DAY(?birthDate) = 25)
  }

  OPTIONAL {
    wd:Q134064 wdt:P400 ?work . # Works associated with Ciara
    ?work wdt:P31/wdt:P279* wd:Q11424 . # Work is a song or album
  }
}
```",5,6,6,3,2,3,2,20,0,0,1,0,0.0,0
80,64,val,Give me the professional in the alter ego of the series of The Golden Master and actor of the movie with the author of Smartbomb (book) and actor of ATL (film).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v3 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v0 . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/starring> ?v3 . },"```sparql
# Query to find the author of Smartbomb
SELECT ?author WHERE {
  ?book dcterms:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Query to find movies featuring Wil Wheaton and another actor
SELECT DISTINCT ?actor WHERE {
  ?movie dbo:starring ?wheatonRole .
  ?wheatonRole dbo:agent ?wilWheaton .
  FILTER(?wilWheaton = wd:Q1776) # Wil Wheaton's Wikidata ID

  ?movie dbo:starring ?otherRole .
  ?otherRole dbo:agent ?actor .
  FILTER(?actor != ?wilWheaton)
}

# Query to find actors in the film ATL
SELECT DISTINCT ?atlActor WHERE {
  ?film dcterms:title ""ATL""@en .
  ?film dbo:starring ?atlRole .
  ?atlRole dbo:agent ?atlActor .
}
```",7,7,8,3,3,3,3,71,0,0,4,0,0.0,0
816,66,val,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of the professional in Photographer and parent of the child of the spouse of Mariclare Costello.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v6 . ?v6 <http://dbpedia.org/property/occupation> ""Photographer""@en . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
SELECT DISTINCT ?actor WHERE {
  # Step 1: Find Mariclare Costello's spouse
  ?mariclare dbo:spouse ?spouse .
  
  FILTER (str(?mariclare) = ""Mariclare_Costello"") .

  # Step 2: Find the child of Mariclare Costello's spouse
  ?child dbo:parent ?spouse ;
         a dbo:Person .

  # Step 3: Determine the parent of this child
  ?parent dbo:child ?child .
  
  # Step 4: Identify professionals related to Photography
  ?professional dbo:profession dbr:Photographer ;
                dbo:parent ?parent .

  # Step 5: Find movies featuring Herschel Bernardi
  ?movie dbo:starring ?herchelBernardi ;
         a dbo:Film .
  
  FILTER (str(?herchelBernardi) = ""Herschel_Bernardi"") .

  # Step 6: Determine which of these movies is a work involving the professional photographer
  ?movie dbo:actor ?actor .
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
347,62,val,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and child of Ferdinand II, Holy Roman Emperor and father of the child of the parent of Archduke Charles Joseph of Austria.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v4 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v4 <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v6 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v6 <http://dbpedia.org/property/father> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find the commander in the Algerian War
  ?commander dbo:militaryConflict dbr:Algerian_War .
  
  # Ensure this person is also associated with a societal event and a television show
  ?societalEvent dbo:relatedPerson ?commander .
  ?televisionShow dbo:relatedPerson ?commander .

  # Check lineage to Ferdinand II, Holy Roman Emperor
  ?person dbo:child dbr:Ferdinand_II,_Holy_Roman_Emperor .
  
  # Ensure this person is an ancestor of Archduke Charles Joseph of Austria
  ?ancestor dbo:parent ?person ;
            dbo:child dbr:Archduke_Charles_Joseph_of_Austria .

  # Link the commander to the lineage
  FILTER(?commander = ?person)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
782,63,val,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and band of the band member of Eric Clapton and reference to the real name of the band of Kim Wilson.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v2 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> ?v6 . ?v6 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?v4 <http://xmlns.com/foaf/0.1/name> ?v3 . }","```sparql
# Query to find Nicky James (Nicholas Michael Curran) and his musical associations
SELECT ?artist WHERE {
  ?person foaf:name ""Nicky James""@en .
  ?person dbo:birthName ""Nicholas Michael Curran"" .
  ?person dbo:profession dbr_Musician .
  OPTIONAL { ?person dbo:musicalArtist ?artist . }
}

# Query to find a band member of Eric Clapton and their associated band
SELECT DISTINCT ?bandMember ?associatedBand WHERE {
  ?clapton dbo:memberOf ?band .
  ?band dbo:bandMember ?bandMember .
  FILTER(?clapton = dbr:Eric_Clapton) .
  OPTIONAL { ?bandMember dbo:musicalArtist ?associatedBand . }
}

# Query to confirm the real name of Kim Wilson's band
SELECT ?band WHERE {
  ?person foaf:name ""Kim Wilson""@en .
  ?person dbo:memberOf ?band .
  FILTER(?band = dbr:The_Fabulous_Thunderbirds)
}
```",7,8,8,3,3,3,3,71,0,0,1,0,0.0,0
859,18,val,"Give me the band member of the associated musical artist, that is a band and a group and an organisation, of the reference, that is a group, to Burnt by the Sun and associated musical artist of the associated musical artist of James Plotkin.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. <http://dbpedia.org/resource/James_Plotkin> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Burnt by the Sun""@en . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . }","```sparql
# Step 1: Find James Plotkin's associated musical artist
SELECT ?artist1 WHERE {
    ?jamesPlotkin dbo:associatedMusicalArtist ?artist1 .
    ?jamesPlotkin rdfs:label ""James Plotkin""@en .
}

# Step 2: Find the associated musical artist of that artist
SELECT ?artist2 WHERE {
    ?artist1 dbo:associatedMusicalArtist ?artist2 .
}

# Step 3: Determine the reference group for Burnt by the Sun
SELECT ?referenceGroup WHERE {
    ?burntByTheSun rdfs:label ""Burnt by the Sun""@en .
    ?burntByTheSun dbo:reference ?referenceGroup .
    ?referenceGroup rdf:type dbo:MusicalArtist .
}

# Step 4: Identify the band and organization associated with the reference group
SELECT ?band WHERE {
    ?referenceGroup dbo:associatedMusicalArtist ?band .
    ?band rdf:type dbo:Band ;
          rdf:type dbo:Organization .
}

# Step 5: Find a band member of this band
SELECT ?member WHERE {
    ?band dbo:bandMember ?member .
}
```",5,9,6,3,2,3,2,20,0,0,5,0,0.0,0
531,64,val,"Give me the office of Mariano Rajoy and office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v0 . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v3 . ?v1 <http://dbpedia.org/property/office> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v3 <http://dbpedia.org/property/residence> ?v2 . ?v0 <http://dbpedia.org/property/leader> ?v1 . },"```sparql
# Query for Mariano Rajoy's office
SELECT ?office WHERE {
  wd:Q1329 dbo:positionHeld ?position .
  ?position dbo:office ?office .
}

UNION

# Query for Miguel Maura's political party
SELECT ?party WHERE {
  wd:Q1234567 dbo:memberOfPoliticalParty ?party .
}

UNION

# Query for the leader of Miguel Maura's party in 2003
SELECT ?leader WHERE {
  ?party dbo:leader ?person .
  ?person dbo:birthDate ?date .
  FILTER (YEAR(?date) <= 2003 && YEAR(?date) >= 2000)
}

UNION

# Query for the tenant of the residence of the leader from the 2003 Madrid City Council election
SELECT ?tenant WHERE {
  wd:Q7890123 dbo:electedAsLeaderOf ?position .
  ?position dbo:office ""Madrid City Council"" .
  ?position dbo:startDate ?start .
  FILTER (YEAR(?start) = 2003)
  ?position dbo:person ?tenant .
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
263,26,val,"Give me the parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne and parent of Mary Elphinstone, Lady Elphinstone and native of the birthplace, that is a region and a country, of William Gayner.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
    # Step 1: Find Claude Bowes-Lyon's children
    ?child dbo:spouse dbr:Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne .
    
    # Step 2: Identify Mary Elphinstone as one of those children
    ?child rdfs:label ""Mary Elphinstone""@en .

    # Step 3: Determine William Gayner's birthplace
    dbr:William_Gayner dbo:birthPlace ?birthPlace .
    
    # Ensure the birth place is both a region and a country
    ?birthPlace rdf:type dbo:Region ;
                rdf:type dbo:Country .

    # Step 4: Find the parent who is native to that place and also a parent of the child
    ?parent dbo:nativePlace ?birthPlace .
    ?parent dbo:child ?child .
}
```",5,7,6,2,3,2,3,28,0,0,2,0,0.0,0
347,65,val,"Give me the child of the father of Cecilia Renata of Austria and father of the child of the parent of Archduke Charles Joseph of Austria and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v3 . ?v6 <http://dbpedia.org/property/father> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v6 <http://dbpedia.org/property/father> ?v0 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v4 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person WHERE {
  # Step 1: Find Cecilia Renata of Austria's father
  ?ceciliaRenata a dbo:Person ;
                foaf:surname ""Austria"" ;
                dbo:father ?fatherOfCeciliaRenata .

  # Step 2: Find the child of Cecilia Renata's father
  ?childOfFather dbr:Cecilia_Renata_of_Austria ;
                 dbo:father ?fatherOfCeciliaRenata .

  # Step 3: Identify Archduke Charles Joseph of Austria's parent
  ?archdukeCharlesJoseph a dbo:Person ;
                        foaf:surname ""Austria"" ;
                        dbo:parent ?parentOfArchdukeCharlesJoseph .

  # Step 4: Find the child of this parent
  ?childOfParent dbr:Archduke_Charles_Joseph_of_Austria ;
                 dbo:parent ?parentOfArchdukeCharlesJoseph .

  # Step 5: Identify commander in the war associated with 2nd Dragoon Regiment (France)
  ?commander a dbo:MilitaryPerson ;
             dbo:militaryUnit dbr:2nd_Dragoon_Regiment_(France) .

  # Step 6: Find societal event, an event, and a television show
  ?event1 dbo:type dbr:SocietalEvent .
  ?event2 dbo:type dbr:Event .
  ?tvShow dbo:type dbr:TelevisionShow .

  # Connect the person to these events
  ?person dbo:relatedTo ?event1 ;
          dbo:relatedTo ?event2 ;
          dbo:relatedTo ?tvShow .

  FILTER(?childOfFather = ?childOfParent && ?childOfFather = ?commander)
}
```",7,10,8,3,3,3,3,71,0,0,1,0,0.0,0
633,18,val,"Give me the spouse of the parent, that is a royalty and a noble, of the child, that is a royalty, of Antoine, Duke of Lorraine and parent of the father of Dorothea of Lorraine.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Antoine,_Duke_of_Lorraine> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/ontology/parent> ?v2 . ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Dorothea_of_Lorraine> <http://dbpedia.org/property/father> ?v3 . }","```sparql
SELECT ?spouse WHERE {
  # Antoine, Duke of Lorraine
  wd:Q123456 a dbo:Duke ; 
             foaf:surname ""Lorraine"" ;
             dbo:child ?child .

  # Child is royalty
  ?child a dbo:Royalty .

  # Parent of Dorothea of Lorraine
  wd:Q654321 dbo:parent ?father .
  
  # Father matches Antoine's child's parent
  ?child dbo:parent ?parent .
  ?parent = ?father .

  # Parent is royalty and noble
  ?parent a dbo:Royalty ;
          a dbo:Noble .

  # Find spouse of the parent
  ?parent foaf:spouse ?spouse .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Antoine, Duke of Lorraine, and `wd:Q654321` with the identifier for Dorothea of Lorraine's father.",5,8,6,3,2,3,2,20,0,0,1,0,0.0,0
557,8,train,"Give me the claim to fame, that is a movie and a work, of Janet Gaynor.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie WHERE {
  ?actor a dbo:Actor ;
         foaf:name ""Janet Gaynor""@en .
  
  ?actor dbo:film ?movie .

  FILTER (str(?movie) = str(dbr:Seventh_Heaven_(1927_film)))
}
```",1,3,2,1,1,3,3,71,0,0,3,0,0.0,0
23,18,train,Give me the party of the father of Sofía Petro and entity in Colombia.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/party> ?result . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v1 . },"```sparql
SELECT ?father ?party WHERE {
  ?s dbr:Sofía_Petro_father ?father .
  ?father dbo:politicalParty ?party .
  FILTER (lang(?party) = ""es"")
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
782,45,train,"Give me the associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran and reference to The Fabulous Thunderbirds and band of Kim Wilson.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?person dbo:birthPlace ?place .
  ?person dbo:occupation dbr:Musical_artist .
  
  # Nick Curran's persona connection (rockabilly)
  ?person dbo:genre dbr:Rockabilly_music .

  # Connection to The Fabulous Thunderbirds and Kim Wilson
  OPTIONAL { ?person dbo:musicGroup dbr:The_Fabulous_Thunderbirds . }
  OPTIONAL { ?person dbo:associatedBandMember dbr:Kim_Wilson . }

  FILTER EXISTS {
    ?artist dbo:birthPlace ?place .
    ?artist dbo:occupation dbr:Musical_artist .

    # Ensure the artist is connected to both Nick Curran's persona and The Fabulous Thunderbirds
    OPTIONAL { ?artist dbo:genre dbr:Rockabilly_music . }
    OPTIONAL { ?artist dbo:musicGroup dbr:The_Fabulous_Thunderbirds . }
    OPTIONAL { ?artist dbo:associatedBandMember dbr:Kim_Wilson . }
  }

  # Ensure the person is a musical artist
  FILTER EXISTS { ?person dbo:occupation dbr:Musical_artist . }
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
361,9,train,Give me the professional in  and actor of Rustlers' Rhapsody.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?movie dbo:title ""Rustlers' Rhapsody""@en .
  ?movie dbo:starring ?actor .
  ?actor a dbo:Actor .
}
```",2,2,3,1,2,2,3,28,0,0,3,0,0.0,0
668,42,train,Give me the associated musical artist of the person born as Elorm Kabu Amenyah and person born as the birth name of Joey B and professional in Musician.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?genre WHERE {
  # Stonebwoy (Elorm Kabu Amenyah)
  { 
    ?stonebwoy dbo:name ""Stonebwoy""@en .
    ?stonebwoy dbo:birthName ""Elorm Kabu Amenyay""@en .
    ?stonebwoy dbo:occupation dbp:musician .
    ?stonebwoy dbo:genre ?genre .
  }
  
  UNION
  
  # Joey B (Joseph Adu Boaitey)
  { 
    ?joeyb dbo:name ""Joey B""@en .
    ?joeyb dbo:birthName ""Joseph Adu Boaitey""@en .
    ?joeyb dbo:occupation dbp:musician .
    ?joeyb dbo:genre ?genre .
  }
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
87,3,train,"Give me the movie, that is a work and a film, with Iliza Shlesinger.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?film WHERE {
  ?film rdf:type dbo:Film .
  ?film dbo:starring dbr:Iliza_Schlesinger .
  FILTER EXISTS { ?film rdf:type dbr:Work }
}
```",1,3,2,1,1,2,3,28,0,0,1,0,0.0,0
628,23,train,"Give me the band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Identify GS9 and its members
  dbr:GS9 a dbo:Band ;
         dbo:member ?gs9Member .

  # Step 2: Filter members who are both artists and musicians
  ?gs9Member dbo:occupation ?occupation .
  FILTER (
    EXISTS { ?gs9Member dbo:occupation dbr:Musician . }
    && EXISTS { ?gs9Member dbo:occupation dbr:Artist . }
  )

  # Step 3: Find associated musical artists of these members
  ?gs9Member dbo:associatedMusicalArtist ?associatedArtist .

  # Step 4: Identify band members from these associated artists who are musicians
  ?associatedArtist dbo:member ?bandMember .
  FILTER EXISTS { ?bandMember dbo:occupation dbr:Musician . }
}
```",3,6,4,3,1,3,3,71,0,0,10,0,0.0,0
782,39,train,"Give me the associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran and band of Kim Wilson.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v0 . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nickCurranArtist ?kimWilsonBand WHERE {
  # Nick Curran's associated musical artist or band
  OPTIONAL { 
    dbr:Nick_Curran dbo:musicalArtist ?nickCurranArtist .
  }
  
  # Kim Wilson's band, The Fabulous Thunderbirds
  OPTIONAL {
    dbr:Kim_Wilson dbo:bandMember ?kimWilsonBand .
    FILTER (strstarts(str(?kimWilsonBand), ""http://dbpedia.org/resource/The_Fabulous_Thunderbirds""))
  }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
119,35,train,"Give me the tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and office of the leader of 2009 Galician regional election.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> ?v1 . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v2 . ?v2 <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?candidate ?position
WHERE {
  ?election dbo:winner ?party .
  ?party rdfs:label ""Spanish Socialist Workers' Party""@en .
  
  ?election dbo:electionDate ?date .
  FILTER (YEAR(?date) = 2009 && CONTAINS(LCASE(STR(?election)), ""galicia""))

  ?candidate dbo:officeHolder ?position .
  ?candidate dbo:partyAffiliation ?party .

  OPTIONAL { ?candidate rdfs:label ?candidateLabel . }
}
```",4,5,5,2,2,3,3,71,0,0,2,0,0.0,0
80,52,train,Give me the actor of the album of What You Know (T.I. song) and professional in  and actor of the movie with the author of Smartbomb (book).,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?v3 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v3 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v5 . }","```sparql
# Step 1: Find the album of ""What You Know"" by T.I.
SELECT ?album WHERE {
  ?song dcterms:title ""What You Know""@en .
  ?song dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> .
  ?song dbo:releaseAlbum ?album .
}

# Step 2: Find actors associated with the album
SELECT DISTINCT ?actor WHERE {
  VALUES ?album {<ALBUM_URI>} # Replace <ALBUM_URI> with the result from step 1
  ?album dbo:performer ?artist .
  ?artist a dbo:Actor .
  BIND(?artist AS ?actor)
}

# Step 3: Find the author of ""Smartbomb""
SELECT ?author WHERE {
  ?book dcterms:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Step 4: Find a movie featuring both the actor and the author
SELECT DISTINCT ?movie WHERE {
  VALUES ?actor {<ACTOR_URI>} # Replace <ACTOR_URI> with the result from step 2
  VALUES ?author {<AUTHOR_URI>} # Replace <AUTHOR_URI> with the result from step 3
  ?movie dbo:starring ?actor .
  ?movie dbo:starring ?author .
}
```",6,6,7,3,3,3,3,71,0,0,4,0,0.0,0
89,29,train,"Give me the predecessor of Myat Hpone Pyo and child of Saw Min Hla and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v3 . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person WHERE {
  ?myatHponePyo dbo:predecessor ?predecessor .
  ?predecessor dbo:child ?sawMinHlaChild .
  ?sawMinHlaChild foaf:sibling ?fatherOfMyatHponePyo .
  ?fatherOfMyatHponePyo foaf:mother ?motherOfMyatHponePyo .
  ?myatHponePyo dbo:parent ?fatherOfMyatHponePyo .
  
  FILTER EXISTS { ?person rdf:type dbo:Monarch . }
  FILTER (?sawMinHlaChild = ?person)
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
39,44,train,"Give me the professional in Singer and professional in the alter ego of The Shadow and band of the person born, that is a musical artist, as Robert Lamar Thompson.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?robertProfession ?lamontProfession ?bandName WHERE {
  # Robert Lamar Thompson's profession as a singer
  OPTIONAL { 
    dbr:Robert_Lamar_Thompson dbo:profession ?robertProfession .
    FILTER(CONTAINS(LCASE(STR(?robertProfession)), ""singer""))
  }

  # Lamont Cranston (The Shadow's alter ego) profession as a singer
  OPTIONAL {
    dbr:Lamont_Cranston dbo:profession ?lamontProfession .
    FILTER(CONTAINS(LCASE(STR(?lamontProfession)), ""singer""))
  }
  
  # Band associated with Robert Lamar Thompson
  OPTIONAL {
    dbr:Robert_Lamar_Thompson dbo:band ?band .
    ?band rdfs:label ?bandName .
    FILTER(langMatches(lang(?bandName), ""en""))
  }
}
```",5,6,6,2,3,3,3,71,0,0,3,0,0.0,0
628,16,train,"Give me the birth name of the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/birthName> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthName WHERE {
  ?person dbo:birthPlace dbr:Florida .
  ?person a ?type .
  FILTER (
    ?type IN (dbo:MusicalArtist, dbo:Singer) 
  ) .
  OPTIONAL { ?person foaf:name ?birthName . }
}
LIMIT 10
```",2,3,3,2,1,3,3,71,0,10,59,0.0,0.0,0
687,36,train,"Give me the player in Juan Carlos Molina (footballer) and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v0 . ?result <http://dbpedia.org/ontology/coach> ?v1 . <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. },"```sparql
# Step 1: Get Marcelo Sarmiento's birthday
SELECT ?birthday WHERE {
    dbpedia:Marcelo_Sarmiento dbo:birthday ?birthday .
}

# Step 2: Find a soccer player and manager born on the same day as Marcelo Sarmiento
SELECT DISTINCT ?person WHERE {
    ?person dbo:birthday ?bday .
    FILTER (?bday = <BIRTHDAY_OF_MARCELO_SARMIENTO>) # Replace with actual date from step 1
    ?person rdf:type dbpedia:SoccerPlayer .
    ?person rdf:type dbpedia:SoccerManager .
}

# Step 3: Get Juan Carlos Molina's team
SELECT DISTINCT ?team WHERE {
    dbpedia:Juan_Carlos_Molina dbo:member ?team .
}

# Step 4: Find a player in that team who is also a soccer player and manager born on Marcelo Sarmiento's birthday
SELECT DISTINCT ?player WHERE {
    ?player dbo:birthday ?bday .
    FILTER (?bday = <BIRTHDAY_OF_MARCELO_SARMIENTO>) # Replace with actual date from step 1
    ?player rdf:type dbpedia:SoccerPlayer .
    ?player rdf:type dbpedia:SoccerManager .
    ?player dbo:member ?team .
    FILTER(?team = <TEAM_OF_JUAN_CARLOS_MOLINA>) # Replace with team obtained in step 3
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
293,52,train,"Give me the party member of the ruling party in the landmark at elevation of 20.116800000000001347 and spouse of the actor of 1,000 Dollars a Minute and person born as Harriette Arlene Lake.","SELECT ?result WHERE { <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v5 . ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/party> ?v2 . ?v3 <http://dbpedia.org/property/leaderParty> ?v2 . ?v3 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . }","```sparql
# Step 1: Find the landmark with the specified elevation
SELECT ?landmark WHERE {
  ?landmark dbo:elevation ""20.116800000000001347""^^xsd:float .
}

# Step 2: Find the ruling party and a member of that party in the location of the landmark
SELECT DISTINCT ?partyMember WHERE {
  # Assuming we have identified the country or region from the landmark
  ?country dbo:government ?government .
  ?government dbo:rulingParty ?party .
  ?member dbo:memberOf ?party ;
           rdf:type dbo:Politician .
}

# Step 3: Find the actor of ""1,000 Dollars a Minute""
SELECT DISTINCT ?actor WHERE {
  ?film dbo:title ""'1,000 Dollars a Minute'""@en .
  ?film dbo:starring ?actor .
}

# Step 4: Find the spouse of this actor
SELECT DISTINCT ?spouse WHERE {
  ?actor foaf:surname ?surname ;
         dbo:spouse ?spouse .
}

# Step 5: Find the person born as Harriette Arlene Lake
SELECT DISTINCT ?person WHERE {
  ?person foaf:name ""Harriette Arlene Lake""@en ;
          rdf:type dbo:Person .
}

# Final step: Check if the ruling party member and the spouse are the same person
SELECT DISTINCT ?commonPerson WHERE {
  VALUES (?partyMember ?spouse) { (<party_member_uri> <spouse_uri>) }
  FILTER(?partyMember = ?spouse)
}
```

Note: Replace `<party_member_uri>` and `<spouse_uri>` with the actual URIs obtained from previous queries.",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
585,9,train,"Give me the award, that is American and a settlement, of the awardee of New York (state).",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardSettlement WHERE {
  ?awardSettlement a dbo:Award .
  ?awardSettlement a dbo:Settlement .
  
  OPTIONAL { 
    ?awardSettlement dbo:recipient ?person .
    ?person dbo:birthPlace dbr:New_York_(state) .
  }
}
```",2,4,3,2,1,3,2,20,0,0,3,0,0.0,0
816,37,train,Give me the parent of Doon Arbus and parent of the professional in the profession of Eugène Cattin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/ontology/child> ?v3 . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
# Query to find the parent(s) of Doon Arbus
SELECT ?parent WHERE {
  ?person dbo:name ""Doon Arbus""@en .
  ?person dbo:parent ?parent .
}

UNION

# Query to find Eugène Cattin's profession and then find parents of others with that same profession
{
  # Find the occupation of Eugène Cattin
  SELECT DISTINCT ?occupation WHERE {
    ?eugeneCattin dbo:name ""Eugène Cattin""@en .
    ?eugeneCattin dbo:occupation ?occupation .
  }
  
  # Use the found occupation to find other professionals and their parents
  SELECT ?parent WHERE {
    ?person dbo:occupation ?occupation .
    ?person dbo:parent ?parent .
  }
}
```",4,4,5,3,2,3,3,71,0,0,2,0,0.0,0
39,40,train,Give me the professional in  and band of Bob Thompson (musician) and professional in the profession of the producer of Coke Studio Philippines.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v2 <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v2 . }","```sparql
# Query for Bob Thompson (musician) and his band
SELECT ?band ?role WHERE {
  ?person rdfs:label ""Bob Thompson (musician)""@en .
  ?person dbo:associatedBand ?band ;
          dbo:occupation ?role .
  FILTER(LANG(?band) = 'en' && LANG(?role) = 'en')
}

# Query for the producer of Coke Studio Philippines and their profession
SELECT ?producer ?profession WHERE {
  ?show rdfs:label ""Coke Studio (Philippines)""@en ;
        dbo:producer ?producer .
  ?producer dbo:occupation ?profession .
  FILTER(LANG(?producer) = 'en' && LANG(?profession) = 'en')
}
```",5,5,6,3,3,3,3,71,0,0,4,0,0.0,0
80,36,train,Give me the actor of Shelby Oaks and professional in the alter ego of the series of The Golden Master.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v0 . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT ?actor ?alterEgo WHERE {
  # Find the actor for Shelby Oaks
  ?series dbo:starring ?character .
  ?character rdfs:label ""Shelby Oaks""@en .
  ?character dbo:portrayedBy ?actor .

  # Find the professional alter ego in The Golden Master series
  ?goldenMasterSeries dbo:starring ?alterEgoCharacter .
  ?goldenMasterSeries rdfs:label ""The Golden Master""@en .
  ?alterEgoCharacter dbo:profession ?alterEgo .
  
  FILTER (lang(?actor) = 'en' && lang(?alterEgo) = 'en')
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
782,8,train,"Give me the person born, that is a musical artist, as Nicholas Michael Curran.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?fullName WHERE {
  ?person a dbo:MusicalArtist .
  OPTIONAL { ?person foaf:name ?fullName . }
  FILTER regex(?fullName, ""Nicholas Michael Curran"", ""i"")
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
816,7,train,Give me the spouse of Mariclare Costello.,SELECT ?result WHERE { <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?spouse WHERE {
  ?person foaf:name ""Mariclare Costello""@en .
  ?person dbo:spouse ?spouse .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
941,7,train,"Give me the child of the parent, that is a royalty, of Duke Anthony Ulrich of Brunswick.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Duke_Anthony_Ulrich_of_Brunswick> . },"```sparql
SELECT ?child WHERE {
  # Find Duke Anthony Ulrich of Brunswick
  wd:Q123456 dbo:parent ?parent . 

  # Check if the parent is a royalty
  ?parent wdt:P31/wdt:P279* wd:Q5 ; 
          wdt:P106 wd:Q82955 .

  # Find children who are also royals
  ?parent dbo:child ?child .
  ?child wdt:P31/wdt:P279* wd:Q5 ;
         wdt:P106 wd:Q82955 .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Duke Anthony Ulrich of Brunswick. The query assumes that royalty is defined by being a human (`wd:Q5`) and having an occupation related to royalty (`wd:Q82955`). Adjust these as necessary based on more specific definitions available in DBpedia.",2,3,3,2,1,3,2,20,0,0,6,0,0.0,0
737,11,train,"Give me the predecessor of the child of Philipp Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v0 . }","```sparql
# Step 1: Find the children of Philipp Albrecht, Duke of Württemberg
SELECT ?child WHERE {
    wd:Q1234567 wdt:P40 ?child .
}

# Assuming we get a child with an identifier like Q7890123 from the above query

# Step 2: Find the predecessor of that child (assuming they held a title or position)
SELECT ?predecessor WHERE {
    # Replace Q7890123 with the actual ID of one of Philipp Albrecht's children
    wd:Q7890123 wdt:P39 ?position .
    ?predecessor wdt:P39 ?position .
    FILTER(?predecessor != wd:Q7890123)
}
```

Note: The placeholders `wd:Q1234567` and `wd:Q7890123` should be replaced with the actual DBpedia identifiers for Philipp Albrecht, Duke of Württemberg, and one of his children respectively. These can be found by querying DBpedia or using a resource like Wikidata.",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
737,14,train,"Give me the child of the child, that is a royalty, of Archduke Charles Louis of Austria.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?grandchild WHERE {
  # Find the child of Archduke Charles Louis
  ?child dbo:parent dbr:Archduke_Charles_Louis_of_Austria .
  
  # For each child, find their children (grandchildren of Archduke Charles Louis)
  ?grandchild dbo:parent ?child .

  # Filter grandchildren who are royalty
  OPTIONAL { ?grandchild dbp:royaltyTitle ?title . }
  FILTER EXISTS { ?grandchild dbp:royaltyTitle ?title }
}
```",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
347,4,train,"Give me the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?regiment dbo:participatedIn ?war .
  FILTER EXISTS { ?regiment rdfs:label ""2nd Dragoon Regiment (France)""@en }
  FILTER EXISTS { ?war dbo:wikiPageRedirects dbr:World_War_II } # To ensure the war is World War II
  FILTER EXISTS {
    ?tvShow dbo:subject ?war .
    ?tvShow rdfs:label ""Band of Brothers""@en .
  }
}
```",1,4,2,1,1,3,3,71,0,0,1,0,0.0,0
38,11,train,"Give me the author of the work, that is a work and a written work and American and a book, of Joe Biden and author of Promise Me, Dad.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/ontology/author> ?result . <http://dbpedia.org/resource/Promise_Me,_Dad> <http://dbpedia.org/property/author> ?result . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?authorName WHERE {
  ?work a dbo:Book ;
        a dbo:WrittenWork ;
        dbo:author dbr:Joe_Biden ;
        rdfs:label ""Promise Me, Dad""@en .
  
  OPTIONAL { ?work dbo:country dbr:United_States . }
  
  ?biden a dbo:American ;
         foaf:name ?authorName ;
         owl:sameAs dbr:Joe_Biden .

}
```",3,7,4,2,2,3,2,20,0,0,1,0,0.0,0
756,29,train,"Give me the native of the administration, that is a country, of Theodor Heuss and manager of 2020–21 SBV Vitesse season and manager of VfL Bochum.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
SELECT ?person ?nativeCountry WHERE {
  VALUES (?person) { 
    (dbr:Theodor_Heuss)
    (dbr:John_Stegeman) # Assuming John Stegeman has a DBpedia entry
    (dbr:Thomas_Reis)   # Assuming Thomas Reis has a DBpedia entry
  }
  
  ?person dbo:nationality ?nationality .
  ?nationality rdfs:label ?nativeCountry .
  FILTER(LANG(?nativeCountry) = 'en')
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
492,11,train,Give me the death place of the actor of Aladdin (1958 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
SELECT ?deathPlace WHERE {
  ?actor foaf:name ""Gene Kelly""@en .
  ?actor dbo:starring <http://dbpedia.org/resource/Aladdin_(1958_film)> .
  ?actor dbo:deathPlace ?deathPlace .
}
```",2,2,3,2,1,2,3,28,0,0,4,0,0.0,0
557,14,train,"Give me the producer of the claim to fame, that is a movie and a work, of Janet Gaynor.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
SELECT ?producer WHERE {
  ?film dbo:starring dbp:Janet_Gaynor .
  OPTIONAL { 
    ?film dbo:award ""Academy Award for Best Actress"". 
  }
  ?film dbo:producer ?producer .
}
```",2,4,3,2,1,3,3,71,0,0,2,0,0.0,0
668,53,train,Give me the associated musical artist of the person born as the birth name of $pacely and person born as the birth name of Joey B and professional in Musician.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v3 . ?v2 <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?artist WHERE {
  # Tupac Shakur
  { 
    ?tupac a dbo:MusicalArtist ;
           foaf:givenName ""$pacely"" .
    ?association dbo:associatedMusicalArtist ?artist .
    FILTER(?tupac = <http://dbpedia.org/resource/Tupac_Shakur>)
  }
  
  UNION
  
  # Joey B
  { 
    ?joeyb a dbo:MusicalArtist ;
           foaf:givenName ""Joey"" .
    ?association dbo:associatedMusicalArtist ?artist .
    FILTER(?joeyb = <http://dbpedia.org/resource/Joey_B_(musician)>)
  }
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
143,6,train,Give me the actor of The Campus Queen and associated musical artist of Cynthia Morgan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Campus_Queen> <http://dbpedia.org/property/starring> ?result . },"```sparql
# Query for finding the actor of ""The Campus Queen""
SELECT ?actor WHERE {
  ?film dcterms:title ""The Campus Queen""@en .
  ?film dbo:starring ?actor .
}

UNION

# Query for finding associated musical artist of Cynthia Morgan
SELECT ?associatedArtist WHERE {
  ?cynthia foaf:name ""Cynthia Morgan""@en ;
           dbo:collaboratesWith ?associatedArtist .
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
472,18,train,Give me the administration of the mayor of Duchy of Schleswig and administration of Christian IX of Denmark.,SELECT ?result WHERE { <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v0 . ?result <http://dbpedia.org/property/leader> ?v0 . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administration WHERE {
  ?person dbo:monarchOf dbr:Denmark .
  ?person rdfs:label ""Christian IX of Denmark""@en .
  OPTIONAL { ?person dbo:office ?administration . }
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
203,15,train,"Give me the war, that is a military conflict and an event, of the figure known as The Triple X's.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/battle> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?war WHERE {
  ?person rdfs:label ""John F. Kennedy""@en .
  ?person dbo:participatedIn ?war .
  ?war rdf:type dbo:MilitaryConflict ;
       rdf:type dbp:Event .
}
```",2,4,3,2,1,3,3,71,0,0,5,0,0.0,0
19,7,train,Give me the spouse of Carrie Johnson and professional in the birth name of John Boxer.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Carrie_Johnson> . ?result <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/John_Boxer> <http://dbpedia.org/property/birthName> ?v0 . },"```sparql
SELECT ?spouseName ?birthName WHERE {
  # Find the spouse of Carrie Johnson
  ?carrie foaf:name ""Carrie Johnson""@en .
  ?carrie dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .

  # Find the birth name of John Boxer
  ?john foaf:name ""John Boxer""@en .
  OPTIONAL { 
    ?john foaf:birthday ?birthday .
    ?john foaf:name ?birthName .
  }
}
```",3,3,4,2,2,2,2,9,0,0,1,0,0.0,0
386,24,train,Give me the war of the awardee of 25 and war of the awardee of Golden Sword for Bravery.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . }","```sparql
SELECT DISTINCT ?war WHERE {
  # Find wars associated with an award containing ""25""
  ?award dbp:wikiPageRedirects ?redirect .
  FILTER(CONTAINS(LCASE(str(?redirect)), ""25""))
  ?award dbo:awardedFor ?context .
  ?context dbo:isPartOf ?war .

  UNION

  # Find wars associated with the ""Golden Sword for Bravery""
  ?award dbp:name ""Golden Sword for Bravery""@en .
  ?award dbo:awardedFor ?context .
  ?context dbo:isPartOf ?war .
}
```",4,4,5,2,2,2,3,28,0,0,1,0,0.0,0
557,25,train,"Give me the producer of The Adventures of Tom Sawyer (1938 film) and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Query for the producer of ""The Adventures of Tom Sawyer"" (1938 film)
SELECT ?producer WHERE {
  ?film dcterms:title ""The Adventures of Tom Sawyer""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1938) .
  ?film dbo:producer ?producer .
}

UNION

# Query for the producer of ""Seventh Heaven"" (1927), Janet Gaynor's claim to fame
SELECT ?producer WHERE {
  ?film dcterms:title ""Seventh Heaven""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1927) .
  ?film dbo:actor ?janetGaynor .
  ?janetGaynor foaf:name ""Janet Gaynor""@en .
  ?film dbo:producer ?producer .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
386,14,train,Give me the entity in Russian Empire and war of the awardee of 25.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity ?awardName WHERE {
  ?entity dbo:nationality dbr:Russian_Empire .
  ?entity dbo:award ?award .
  ?award dbo:name ?awardName .
  FILTER regex(?awardName, ""25"", ""i"") .

  OPTIONAL { 
    ?war dbo:participant ?entity .
    ?war dbo:place dbr:Russia .
  }
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
943,2,train,Give me the father of Baeda Maryam I.,SELECT ?result WHERE { <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?person dbo:givenName ""Baeda Maryam"" .
  ?person dbo:familyName ""I""@en .
  ?person dbo:father ?father .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
609,22,train,Give me the birth place of Vince Gilligan and birth place of the author of El Deafo.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . },"```sparql
# Query to get the birthplace of Vince Gilligan
SELECT ?birthPlace WHERE {
  ?person dbo:name ""Vince Gilligan""@en .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query to get the birthplace of Cece Bell
SELECT ?birthPlace WHERE {
  ?person dbo:name ""Cece Bell""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
557,7,train,Give me the actor of High Society Blues.,SELECT ?result WHERE { <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film rdf:type dbo:Film .
  ?film rdfs:label ""High Society Blues""@en .
  ?film dbo:starring ?actor .
  ?actor rdf:type dbo:Actor .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
347,29,train,"Give me the child of Ferdinand II, Holy Roman Emperor and commander in Thirty Years' War and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . }","```sparql
SELECT ?person WHERE {
  ?f2 dbo:spouse ?mother .
  ?f2 foaf:name ""Ferdinand II""@en .
  ?child dbp:father ?f2 ;
         dbo:occupation ""Military commander""@en ;
         dbo:parentOrganization dbr:Thirty_Years'_War .

  ?f3 dbo:spouse ?mother2 .
  ?f3 foaf:name ""Ferdinand III""@en .
  ?leopold dbp:father ?f3 .

  FILTER (?child = ?f3)
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
198,58,train,"Give me the force of the awardee of Gillmore Medal and war of Amasa Tracy and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/commander> ?v5 . ?v5 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/place> ?v2 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?v2 . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?birthPlace ?war ?awardee ?force 
WHERE {
  # Find the person who died on 1850-08-05
  ?person dbo:dateOfDeath ?deathDate .
  FILTER (str(?deathDate) = ""1850-08-05"") .

  # Get their birthplace
  ?person dbo:birthPlace ?birthPlace .

  # Ensure the birthplace is an American settlement
  ?birthPlace a dbo:Settlement ;
              dbo:country dbr:United_States_of_America .

  # Find Amasa Tracy's war involvement
  dbr:Amasa_Tracy dbo:militaryConflict ?war .
  
  # Identify the awardee of the Gillmore Medal
  ?awardee dbo:awardReceived dbr:Gillmore_Medal ;
          dbo:militaryService ?force .

  # Ensure the force is related to the war Amasa Tracy was involved in
  ?force dbo:militaryConflict ?war .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
198,34,train,"Give me the war of the awardee of the show, that is an award, of United States Congress and entity in Charleston, South Carolina.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v2 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . }","```sparql
SELECT ?recipient ?war ?charlestonEntity WHERE {
  # Find recipients of the Congressional Gold Medal
  ?recipient dbo:award <http://dbpedia.org/resource/Congressional_Gold_Medal> .
  
  # Determine which war they were associated with
  ?recipient dbo:associatedWithWar ?war .

  # Find entities in Charleston, South Carolina
  ?charlestonEntity dbo:location <http://dbpedia.org/resource/Charleston,_South_Carolina> .

  # Optional: Check if there's a direct connection between the recipient and Charleston
  OPTIONAL { ?recipient dbo:relatedTo ?charlestonEntity }
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
347,52,train,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and child of Ferdinand II, Holy Roman Emperor and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v3 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v5 <http://dbpedia.org/property/father> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:commanderOfMilitaryForce dbr:Algerian_War .
  ?person dbo:child dbr:Ferdinand_II,_Holy_Roman_Emperor .
  ?person dbo:father ?parent .
  ?parent dbo:child dbr:Ferdinand_III,_Holy_Roman_Emperor .
  FILTER EXISTS { ?person dbo:societalEvent ?event . }
  FILTER EXISTS { ?person dbo:televisionShow ?show . }
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
159,54,train,"Give me the successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and reference to the writer of the work of George Ducas and commander in Great Turkish War.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/successor> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/writer> ?v5 . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . }","```sparql
# Query for commander in Russo-Polish War (1654–1667) who was a politician and office holder
SELECT ?commander ?successor WHERE {
  ?war dbo:wikiPageRedirects db:Q123456 ; # Replace with actual QID for Russo-Polish War
    dbo:participant ?commander .
  ?commander rdf:type dbo:Politician ;
             dbo:officeHolder ?office .
  OPTIONAL { ?commander dbo:succeededBy ?successor . }
}

# Query for writer of the work of George Ducas
SELECT ?writer WHERE {
  ?work dbo:author ?georgeDucas ;
        dbo:wikiPageRedirects db:Q789012 ; # Replace with actual QID for George Ducas' work
  ?writer dbo:worksFor ?work .
}

# Query for commander in the Great Turkish War
SELECT ?commander WHERE {
  ?war dbo:wikiPageRedirects db:Q345678 ; # Replace with actual QID for Great Turkish War
    dbo:participant ?commander ;
    rdf:type dbo:MilitaryConflict .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
731,16,train,Give me the force of the awardee of Commander of the Order of the British Empire and war of the commander in Sinking of Prince of Wales and Repulse.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> ?v2 . <http://dbpedia.org/resource/Sinking_of_Prince_of_Wales_and_Repulse> <http://dbpedia.org/ontology/commander> ?v3 . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Commander_of_the_Order_of_the_British_Empire> . ?v3 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?force WHERE {
  ?commander a dbo:MilitaryPerson ;
             dbo:honoursReceived dbr:Commander_of_the_Order_of_the_British_Empire ;
             dbo:commanded ?ship .
  
  ?ship dbo:partOfBattle dbr:Sinking_of_Prince_of_Wales_and_Repulse ;
        dbo:force ?force .

  FILTER (str(?ship) IN (""HMS Prince of Wales"", ""HMS Repulse""))
}
```",4,4,5,2,2,3,2,20,0,0,1,0,0.0,0
103,45,train,"Give me the professional in Actor and actor of Dispatches from Elsewhere and professional in the alter ego of the series, that is a comics character, of The Shadow (video game).","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v0 . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor ?roleInSeries ?alterEgo
WHERE {
  # Find the actor in Dispatches from Elsewhere
  ?series dbo:title ""Dispatches from Elsewhere""@en .
  ?series dbo:starring ?actor .
  
  # Check if this actor has an alter ego related to The Shadow
  OPTIONAL { 
    ?actor dbo:alterEgo dbr:The_Shadow_(character) .
  }
  
  # Ensure the alter ego is a comic book character
  ?alterEgo dbo:wikiPageRedirects dbr:The_Shadow_(character) .
  ?alterEgo dbo:genre dbr:Comic_book_genre .

  FILTER EXISTS { ?series dbo:title ""Dispatches from Elsewhere""@en }
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
905,5,train,Give me the spouse of Maria of Bytom.,SELECT ?result WHERE { <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?spouse WHERE {
  ?maria a dbo:Person ;
         foaf:name ""Maria of Bytom""@en .
  OPTIONAL { ?maria dbo:spouse ?spouse . }
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
668,59,train,"Give me the professional in the profession of the writer, that is a musical artist, of The Live Anthology and associated musical artist of the person born as the birth name of $pacely.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v0 <http://dbpedia.org/property/occupation> ?v5 . ?v2 <http://dbpedia.org/property/birthName> ?v3 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Step 1: Find ""The Live Anthology"" and its creator who is a writer and musician
SELECT ?creator WHERE {
  ?work dcterms:title ""The Live Anthology""@en .
  ?work dbo:author ?creator .
  ?creator dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""writer"") && CONTAINS(LCASE(?occupation), ""musician""))
}

# Step 2: Find the birth name of $pacely (Tupac Shakur)
SELECT ?birthName WHERE {
  ?person foaf:name ""$pacely""@en .
  ?person dbo:birthName ?birthName .
}

# Step 3: Find associated musical artists with Tupac Shakur
SELECT DISTINCT ?associatedArtist WHERE {
  ?association dbo:subject <http://dbpedia.org/resource/Tupac_Shakur> ;
               dbo:predicate <http://dbpedia.org/ontology/associatedMusicalArtist> ;
               dbo:object ?associatedArtist .
}
```",6,7,7,3,2,3,3,71,0,0,2,0,0.0,0
756,1,train,Give me the native of West Germany.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . },"```sparql
SELECT ?person ?name WHERE {
  ?person dbo:birthPlace dbr:West_Germany .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,1,2,1,1,3,3,71,5170,4701,0,0.5237564583122277,1.0,0.6874542916029519
472,17,train,"Give me the administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck and administration of Olaf I of Denmark.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . ?result <http://dbpedia.org/property/leader> ?v1 . }","```sparql
SELECT ?person ?name ?administrationRole WHERE {
  VALUES (?person ?name) {
    (dbpedia:Prince_Christian_of_Schleswig-Holstein-Sonderburg-Beck ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck"")
    (dbpedia:Olaf_I_of_Denmark ""Olaf I of Denmark"")
  }
  
  ?person rdfs:label ?name .
  OPTIONAL {
    ?person dbo:position ?administrationRole .
  }
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
687,11,train,"Give me the player in the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://dbpedia.org/ontology/team> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?player WHERE {
  ?player rdf:type dbo:Athlete .
  ?player dbo:birthDate ""1955-02-22""^^xsd:date .
}
```",2,3,3,2,1,3,3,71,0,10,18,0.0,0.0,0
943,60,train,"Give me the child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v4 <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v4 . ?v5 <http://dbpedia.org/property/father> ?v0 . },"```sparql
# Step 1: Find the commander in the Siege of Mukha who is royalty
SELECT ?commander WHERE {
  ?event dbo:event dbp:Siege_of_Mukha .
  ?event dbo:agent ?commander .
  ?commander rdf:type dbo:Monarch .
}

# Step 2: Find the child of this royal commander
SELECT ?child WHERE {
  ?commander dbo:spouseOrPartner ?parent .
  ?parent dbo:child ?child .
}

# Step 3: Identify Baeda Maryam I's child
SELECT ?baedaChild WHERE {
  dbp:Baeda_Maryam_I dbo:child ?baedaChild .
}

# Step 4: Find the father of Baeda Maryam I's child who is royalty and an office holder
SELECT ?father WHERE {
  ?baedaChild dbo:parent ?father .
  ?father rdf:type dbo:Monarch .
  ?father dbo:officeHolder ?office .
}

# Step 5: Find the grandfather (father of the father) of Baeda Maryam I's child
SELECT ?grandfather WHERE {
  ?father dbo:parent ?grandfather .
}
```",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
628,31,train,"Give me the person born as Ackquille Jean Pollard and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v1 . ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
    # Ackquille Jean Pollard is known as 2 Chainz
    dbr:2_Chainz a dbo:MusicalArtist ;
        foaf:name ""Ackquille Jean Pollard"" .

    # Playaz Circle includes 2 Chainz and Dolla Boy
    ?playazCircle dbo:member dbr:2_Chainz ;
                  dbo:member ?dollaBoy .
    
    # GS9 includes Waka Flocka Flame
    ?gs9 dbo:member ?wakaFlockaFlame .

    # Waka Flocka Flame is an artist and a musical artist
    ?wakaFlockaFlame a dbo:MusicalArtist, dbo:Artist ;
                     foaf:name ""Waka Flocka Flame"" .
    
    # Find the associated musical artist of Playaz Circle that connects to GS9 through Waka Flocka Flame
    ?playazCircle dbo:associatedBandOrMusicalArtist ?associatedArtist .

    FILTER (?associatedArtist = ?wakaFlockaFlame)
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
225,13,train,Give me the entity in the region of the time zone in Kiyosu.,SELECT ?result WHERE { <http://dbpedia.org/resource/Kiyosu> <http://dbpedia.org/ontology/timeZone> ?v0 . ?v1 <http://dbpedia.org/property/timeZone> ?v0 . ?result <http://dbpedia.org/ontology/country> ?v1 . },"```sparql
SELECT ?entity WHERE {
  ?region rdfs:label ""Japan""@en .
  ?region dbo:wikiPageWikiLink ?entity .
}
```",3,3,4,3,1,3,2,20,81,687,8835,0.10546875,0.00908479138627187,0.016728624535315983
816,31,train,"Give me the actor of the movie, that is a work, with the person decedent at Los Angeles and parent of Amy Arbus.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v1 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v0 <http://dbpedia.org/property/starring> ?v1 . },"```sparql
SELECT ?actor WHERE {
  # Step 1: Find Amy Arbus's parent
  ?parent dbo:child dbr:Amy_Arbus .
  
  # Step 2: Identify the decedent at Los Angeles
  ?parent dbo:placeOfDeath ?deathPlace .
  FILTER(CONTAINS(LCASE(STR(?deathPlace)), ""los angeles""))
  
  # Step 3: Find the work associated with this person that is a movie
  ?work dbo:creatorOrContributor ?parent ;
        rdf:type dbo:Film .
  
  # Step 4: Retrieve the actor of the movie
  ?work dbo:actor ?actor .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
159,34,train,"Give me the commander in Great Turkish War and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac.",SELECT ?result WHERE { <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?successor ?successorName WHERE {
  # Find Michał Kazimierz Pac's role in the Great Turkish War
  ?pac a dbo:MilitaryPerson ;
       foaf:name ""Mikołaj Kazimierz Pac""@en ;
       dbp:commanded ?force .
  
  # Ensure the force is part of the Great Turkish War
  ?force dbo:partOfEvent ?event .
  ?event rdfs:label ""Great Turkish War""@en .

  # Find the successor who took over command
  ?successor a dbo:MilitaryPerson ;
             dbp:commanded ?force ;
             foaf:name ?successorName .

  # Check if the successor was also a politician or office holder
  OPTIONAL { ?successor dbo:officeHolderOf ?office . }
}
ORDER BY ?successorName
```",4,8,5,3,2,3,3,71,0,0,1,0,0.0,0
492,15,train,Give me the death place of Sal Mineo and death place of the actor of The Sky Ranger (1928 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v1 . },"```sparql
# Query for Sal Mineo's death place
SELECT ?deathPlace WHERE {
  dbpedia:Sal_Mineo dbo:placeOfBirth ?birthPlace .
  dbpedia:Sal_Mineo dbo:deathPlace ?deathPlace .
}

UNION

# Query to find the actor of ""The Sky Ranger"" (1928 film) and their death place
SELECT ?actorDeathPlace WHERE {
  # Find the movie ""The Sky Ranger"" from 1928
  ?movie dbp:title ""The Sky Ranger""@en ;
         dbo:releaseDate ?date .
  
  FILTER(YEAR(?date) = 1928)

  # Find an actor associated with this movie
  ?actor dbo:actedIn ?movie .

  # Get the death place of that actor
  ?actor dbo:deathPlace ?actorDeathPlace .
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
345,0,train,Give me the reference to Mitaka.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Mitaka""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mitaka WHERE {
  ?mitaka a dbo:City .
  ?mitaka rdfs:label ?label .
  FILTER (CONTAINS(LCASE(?label), ""mitaka""))
}
```",1,1,2,1,1,2,2,9,1,0,0,1.0,1.0,1.0
492,24,train,Give me the death place of the actor of Color Me Dead and death place of the actor of Aladdin (1958 film).,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/deathPlace> ?result . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v1 . },"```sparql
# Query to find the death place of the actor from ""Color Me Dead""
SELECT ?actor ?deathPlace WHERE {
  ?film dbo:starring ?actor .
  ?film rdfs:label ""Color Me Dead""@en .
  OPTIONAL { ?actor dbo:deathPlace ?deathPlace . }
} LIMIT 1

# Query to find the death place of an actor from ""Aladdin (1958 film)""
SELECT ?actor ?deathPlace WHERE {
  ?film dbo:starring ?actor .
  ?film rdfs:label ""Aladdin (1958 film)""@en .
  OPTIONAL { ?actor dbo:deathPlace ?deathPlace . }
} LIMIT 1
```",4,4,5,2,2,2,3,28,0,0,1,0,0.0,0
293,41,train,"Give me the person born as Harriette Arlene Lake and party member of the ruling party in Central, Louisiana and spouse of the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v4 . ?v4 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/party> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?party ?actor ?spouse WHERE {
  # Find Harriette Arlene Lake and her political affiliation
  ?person a dbo:Person ;
          foaf:name ""Harriette Arlene Lake"" ;
          dbo:birthName ""Harriette Arlene Lake"" .
  
  OPTIONAL { ?person dbo:partyMemberOf ?party . }
  
  # Find the actor of ""1,000 Dollars a Minute""
  ?movie dbo:title ""1,000 Dollars a Minute""@en ;
         dbo:actor ?actor .

  # Check if Harriette Arlene Lake is the spouse of this actor
  ?person foaf:mbox <mailto:some-email@example.com> ; # Placeholder for actual email or identifier
          dbo:spouse ?actor .
  
  OPTIONAL { ?actor dbo:spouse ?spouse . }
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
706,0,train,Give me the birthplace of Ebrahim Alkazi.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ebrahim_Alkazi> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  dbr:Ebrahim_Alkazi dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,2,20,3,0,0,1.0,1.0,1.0
557,20,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins and professional in .","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v2 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer ?profession WHERE {
  # Identify Cora Sue Collins and her notable work
  ?collins a dbo:Person ;
           foaf:name ""Cora Sue Collins"" .
  
  ?work dbo:author ?collins ;
        dbo:title ?title .

  # Assuming we know the title of her claim to fame, replace 'Title_of_Claim_to_Fame' with the actual title
  FILTER(?title = ""Title_of_Claim_to_Fame"") .

  # Find the producer of that work
  ?work dbo:producer ?producer .

  # Get the producer's profession
  ?producer dbo:occupation ?profession .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
198,51,train,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and force of the awardee of Gillmore Medal.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?result <http://dbpedia.org/ontology/commander> ?v4 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/place> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?entityInBirthplace WHERE {
  ?person dbo:deathDate ""1850-08-05""^^xsd:date ;
          dbo:nationality dbr:United_States ;
          dbo:awardReceived dbr:Gillmore_Medal .
  
  ?person dbo:birthPlace ?birthPlace .

  ?birthPlace a dbo:Settlement ;
              dbo:country dbr:United_States .

  ?entityInBirthplace rdfs:label ?label .
  FILTER (lang(?label) = 'en')
}
```",5,7,6,3,2,3,3,71,0,0,2,0,0.0,0
68,1,train,"Give me the child of Maximilian I, Holy Roman Emperor.","SELECT ?result WHERE { <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child WHERE {
  ?person dbo:spouse ?partner .
  OPTIONAL { ?person dbo:child ?child . }
  FILTER (str(?person) = ""Maximilian_I,_Holy_Roman_Emperor"")
}
```",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
398,3,train,Give me the nickname of Russia national football team.,SELECT ?result WHERE { <http://dbpedia.org/resource/Russia_national_football_team> <http://dbpedia.org/property/nickname> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname WHERE {
  ?team a dbo:NationalSoccerTeam ;
        dbo:country dbr:Russia ;
        dbo:nickname ?nickname .
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
585,10,train,Give me the professional in the profession of Shirley Stoler.,SELECT ?result WHERE { <http://dbpedia.org/resource/Shirley_Stoler> <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
SELECT ?person ?name WHERE {
  # Find Shirley Stoler's profession
  dbpedia:Shirley_Stoler dbo:occupation ?profession .
  
  # Find other professionals with the same occupation
  ?person a dbo:Person ;
          rdfs:label ?name ;
          dbo:occupation ?profession .
  
  FILTER(?person != dbpedia:Shirley_Stoler) # Exclude Shirley Stoler herself
  FILTER(langMatches(lang(?name), ""EN""))   # Ensure names are in English
}
ORDER BY ?name
LIMIT 10
```",2,2,3,2,1,3,2,20,0,0,19241,0,0.0,0
472,12,train,Give me the administration of Christian IX of Denmark and administration of Olaf I of Denmark and territory administered from Copenhagen.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?king ?reignStart ?reignEnd ?adminCenter WHERE {
  VALUES ?king { 
    dbr:Christian_IX_of_Denmark 
    dbr:Olaf_I_of_Denmark
  }
  
  OPTIONAL { ?king dbo:beginOfReign ?reignStart . }
  OPTIONAL { ?king dbo:endOfReign ?reignEnd . }

  # Check if Copenhagen was the administrative center
  OPTIONAL {
    ?king dbo:capital dbr:Copenhagen .
    BIND(""Copenhagen"" AS ?adminCenter)
  }
  
  FILTER(?adminCenter = ""Copenhagen"")
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
905,22,train,"Give me the spouse of Charles II of Naples and child of the child, that is a royalty, of Béla IV of Hungary.",SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse ?grandchild WHERE {
  # Find the spouse of Charles II of Naples
  dbr:Charles_II_of_Naples dbo:spouse ?spouse .

  # Find Béla IV's children
  dbr:Béla_IV_of_Hungary dbo:child ?belasChild .

  # Find a royal grandchild of Béla IV (i.e., child of one of his children)
  ?belasChild dbo:child ?grandchild .
  
  # Ensure the grandchild is royalty
  ?grandchild rdf:type dbo:Monarch .

  # Check if the spouse of Charles II is this grandchild
  FILTER (?spouse = ?grandchild)
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
595,30,train,"Give me the commander in the war, that is a disease and a societal event, of United States Navy and author of Back to Work (book) and spouse of Hillary Clinton.",SELECT ?result WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?person WHERE {
  ?person dbo:nationality dbr:United_States.
  ?person dbo:militaryBranch dbr:United_States_Navy.
  ?person dbo:spouse dbr:Hillary_Clinton.
  ?book dbo:title ""Back to Work""@en .
  ?book dbo:author ?person .
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
103,4,train,"Give me the movie, that is a television show, with Richard E. Grant.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  ?actor foaf:name ""Richard E. Grant""@en.
  ?actor dbo:film ?work.
  ?work a dbo:TelevisionSeries .
  FILTER NOT EXISTS { ?work dbo:starring ?otherActor . }
}
```",1,2,2,1,1,3,3,71,0,0,10,0,0.0,0
595,38,train,"Give me the author of the work, that is a written work and a book and a work, of Bill Clinton and commander in the war, that is a disease and a societal event, of United States Navy.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/property/author> ?result . ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?book WHERE {
  ?book dbo:author dbr:Bill_Clinton .
  ?book a dbo:Book .
  OPTIONAL { ?book dbo:subject dbr:HIV/AIDS . }
  OPTIONAL { ?book dbo:subject dbr:United_States_Navy . }
}
```",4,9,5,2,2,3,3,71,0,0,1,0,0.0,0
737,59,train,"Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v2 <http://dbpedia.org/property/father> ?v3 . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commonPerson WHERE {
  # Alexander of Württemberg's lineage
  ?alexander rdfs:label ""Alexander of Württemberg""@en .
  FILTER(YEAR(?alexander dbo:dateOfBirth) = 1804 && YEAR(?alexander dbo:dateOfDeath) = 1881)
  
  ?child1 dbo:parent ?alexander ;
          a dbo:Person .

  ?grandchild1 dbo:parent ?child1 ;
               a dbo:Person .

  ?greatGrandchild dbo:parent ?grandchild1 ;
                   a dbo:Person .

  # Archduchess Helena of Austria's lineage
  ?helena rdfs:label ""Archduchess Helena of Austria""@en .
  
  ?spouse dbo:spouse ?helena ;
          a dbo:Person .

  ?child2 dbo:parent ?spouse ;
          a dbo:Person .

  # Predecessor of the child of Archduchess Helena's spouse
  ?predecessor dbo:parent ?child2 ;
               a dbo:Person .

  # Find common person who is royalty
  FILTER(?greatGrandchild = ?predecessor)
  
  OPTIONAL { ?commonPerson rdfs:label ?name . }
  FILTER(STRSTARTS(LCASE(?name), ""alexander"") || STRSTARTS(LCASE(?name), ""helena""))
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
871,33,train,"Give me the parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?parent WHERE {
  wd:Q123456 wdt:P40 wd:Q789012 . # Edward Stanley, 17th Earl of Derby (P40 is child)
  wd:Q789012 wdt:P22 ?parent .    # Victor Stanley's parent
  ?parent wdt:P31/wdt:P279* wd:Q5 . # Parent is a human
  ?parent wdt:P39 ?office .       # Check if the parent held an office (P39)
  FILTER EXISTS { ?office wdt:P31 wd:Q13442814 } # Office is a political position
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Edward Stanley, 17th Earl of Derby, and `wd:Q789012` with the ID for Victor Stanley. The query checks if the parent held an office that is classified as a political position.",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
905,10,train,Give me the spouse of Charles II of Naples and child of Stephen V of Hungary.,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
SELECT ?spouse WHERE {
  ?charles dbo:spouse ?spouse .
  FILTER (str(?charles) = ""Charles_II_of_Naples"")
  
  OPTIONAL { 
    ?stephen dbo:child ?spouse .
    FILTER (str(?stephen) = ""Stephen_V_of_Hungary"") 
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
414,10,train,Who is the awardee of the reference to Nobel Prize in Physics?,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Nobel Prize in Physics""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient WHERE {
  ?award dbo:category dbr:Nobel_Prize_in_Physics .
  ?award dbo:recipient ?recipient .
}
```",2,2,3,2,1,3,2,20,0,0,31,0,0.0,0
414,1,train,Give me the award of Max Born.,SELECT ?result WHERE { <http://dbpedia.org/resource/Max_Born> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  dbr:Max_Born dbo:award ?award .
}
```",1,1,2,1,1,3,2,20,4,0,0,1.0,1.0,1.0
361,13,train,Give me the professional in the profession of Frédéric Bouraly and professional in .,"SELECT ?result WHERE { <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?profession (SAMPLE(?otherPerson) AS ?anotherProfessional)
WHERE {
  # Find Frédéric Bouraly's profession
  dbp:name ""Frédéric Bouraly""@en .
  dbo:occupation ?profession .

  # Find another professional in the same field
  ?otherPerson dbo:occupation ?profession .
  FILTER (?otherPerson != <http://dbpedia.org/resource/Frédéric_Bouraly>)
}
```",3,3,4,2,2,2,3,28,0,0,4210,0,0.0,0
943,13,train,Give me the reference to the alter ego of The Shadow.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . },"```sparql
SELECT ?alterEgo WHERE {
  ?shadow dbo:wikiPageRedirects db:The_Shadow .
  ?shadow dbo:aliasName ?name .
  FILTER(?name = ""Lamont Cranston"")
  OPTIONAL { 
    ?shadow dbo:characterAlias ?alterEgo .
  }
}
```",2,2,3,2,1,3,3,71,0,0,98447,0,0.0,0
89,37,train,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and predecessor of Myat Hpone Pyo.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v3 . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/spouse> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  # Step 1: Identify Saw Shwe Khet
  ?sawShweKhet a dbo:Person ;
               foaf:name ""Saw Shwe Khet""@en .

  # Step 2: Find the child of Saw Shwe Khet who is royalty
  ?child dbo:parent ?sawShweKhet ;
         dbo:title ?royalTitle .
  
  FILTER EXISTS { ?royalTitle dbo:isPartOf dbr:Monarchy_of_Burma }

  # Step 3: Identify Myat Hpone Pyo's predecessor
  ?myatHponePyo a dbo:Person ;
                foaf:name ""Myat Hpone Pyo""@en .
  
  ?predecessor dbo:succeededBy ?myatHponePyo .

  # Ensure the child is related to the predecessor
  FILTER (?child = ?predecessor)

  # Step 4: Determine the spouse of the father (who is royalty) of the child
  ?father dbo:parentOf ?child ;
          dbo:title ?royalTitle .
  
  ?spouse dbo:spouse ?father .
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
557,29,train,"Give me the professional in  and producer of the claim to fame, that is a work, of Cora Sue Collins and producer of A Star Is Born (1937 film).","SELECT ?result WHERE { <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v3 . ?v3 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?producer WHERE {
  # Find works related to Cora Sue Collins
  ?work dbo:performer dbr:Cora_Sue_Collins .
  
  # Get the producer of these works
  ?work dbo:producer ?producer .

  # Check if this producer also produced ""A Star Is Born (1937 film)""
  OPTIONAL {
    dbr:A_Star_Is_Born_(1937_film) dbo:producer ?producer .
  }
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
23,7,train,Give me the party of Gustavo Petro and party of Roy Barreras.,SELECT ?result WHERE { <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name ?partyLabel WHERE {
  VALUES ?person { 
    dbr:Gustavo_Petro 
    dbr:Roy_Barreras
  }
  
  ?person rdfs:label ?name .
  OPTIONAL { ?person dbo:party ?party . }
  OPTIONAL { ?party rdfs:label ?partyLabel . FILTER (lang(?partyLabel) = 'en') }
}
```",2,2,3,1,2,2,3,28,0,14,1,0.0,0.0,0
249,1,train,Give me the native of India.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/India> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:nationality dbr:India .
  OPTIONAL { ?person rdfs:label ?name FILTER (lang(?name) = 'en') }
}
UNION
SELECT ?person ?name WHERE {
  ?person dbo:birthPlace dbr:India .
  OPTIONAL { ?person rdfs:label ?name FILTER (lang(?name) = 'en') }
}
ORDER BY ?name
LIMIT 100
```",1,1,2,1,1,2,2,9,0,0,8977,0,0.0,0
353,2,train,"Give me the child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?person dbo:spouse ?partner .
  ?person foaf:name ""Elvira of Castile""@en .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,4,0,0,1.0,1.0,1.0
816,11,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . },"```sparql
SELECT DISTINCT ?movie ?actor WHERE {
  ?person foaf:name ""Herschel Bernardi""@en .
  ?person dbo:birthName ""Herschel Bernardi"" .
  ?person dbo:starring ?movie .
  ?movie dbo:starring ?actor .
  FILTER(?person != ?actor)
}
```",2,3,3,2,1,3,3,71,0,0,67,0,0.0,0
737,54,train,"Give me the child of Archduchess Margarete Sophie of Austria and predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of the child of the child of Alexander of Württemberg (1804-1881).","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v5 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> ?v5 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . }","```sparql
# Step 1: Find a child of Archduchess Margarete Sophie of Austria
SELECT ?child WHERE {
    ?person dbo:spouse ?partner .
    ?partner foaf:name ""Margarete Sophie of Austria""@en .
    ?person dbo:child ?child .
}

UNION

# Step 2: Find a child of Philipp Albrecht, Duke of Württemberg
SELECT ?philippChild WHERE {
    ?person dbo:spouse ?partner .
    ?partner foaf:name ""Philipp Albrecht, Duke of Württemberg""@en .
    ?person dbo:child ?philippChild .
}

UNION

# Step 3: Trace lineage from Alexander of Württemberg (1804-1881)
SELECT ?grandGrandChild WHERE {
    ?alexander foaf:name ""Alexander of Württemberg""@en ;
               dbo:birthYear ""1804""^^xsd:gYear ;
               dbo:deathYear ""1881""^^xsd:gYear .
    ?alexander dbo:child ?child .
    ?child dbo:child ?grandChild .
    ?grandChild dbo:child ?grandGrandChild .
}

# Step 4: Find the predecessor relationship
SELECT ?margareteChild WHERE {
    # Assuming we have identified specific individuals from previous queries
    VALUES (?philippChild) { <http://dbpedia.org/resource/Philipp_Albrecht_Duke_of_W%C3%BCrttemberg> }
    VALUES (?grandGrandChild) { <http://dbpedia.org/resource/Some_GrandGrandChild> } # Replace with actual resource

    ?margareteChild dbo:predecessorOf ?philippChild .
    ?philippChild dbo:successorOf ?grandGrandChild .
}
```

Note: The above SPARQL query is a template and requires specific URIs for individuals identified in the queries. You would need to replace placeholders like `<http://dbpedia.org/resource/Some_GrandGrandChild>` with actual DBpedia resource identifiers obtained from intermediate results.",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
119,33,train,"Give me the office of Alberto Núñez Feijóo and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v0 <http://dbpedia.org/property/residence> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v3 . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?office ?country WHERE {
  ?person foaf:name ""Alberto Núñez Feijóo""@en .
  ?person dbo:nationality dbr:Spain .
  ?person dbo:office ?office .
  OPTIONAL { 
    ?office dbp:residence ?residence .
    ?residence dbo:country ?country .
  }
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
213,12,train,Give me the country of the work of Lao She and birth place of Winston Chang.,SELECT ?result WHERE { <http://dbpedia.org/resource/Winston_Chang> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Lao_She> . ?v0 <http://dbpedia.org/ontology/country> ?result . },"```sparql
SELECT DISTINCT ?country ?birthPlace WHERE {
  # Find the country associated with Lao She's work ""Rickshaw Boy""
  ?work dcterms:creator dbc:Lao_She ;
        foaf:name ""Camel Xiangzi""@en .
  OPTIONAL { 
    ?work dbo:locationCreated ?place .
    ?place geo:hasCountry ?country .
  }
  
  # Find the birthplace of Winston Chang
  ?person dbp:birthPlace ?birthPlace .
  FILTER (str(?person) = ""Winston_Chang"")
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
731,4,train,"Give me the reference, that is a societal event and a military conflict, to Sinking of Prince of Wales and Repulse.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://xmlns.com/foaf/0.1/name> ""Sinking of Prince of Wales and Repulse""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
SELECT ?event WHERE {
  ?event dbo:wikiPageRedirects dbpedia:Sinking_of_Prince_of_Wales_and_Repulse_(1941) .
  ?event rdf:type dbo:MilitaryConflict .
  ?event dbo:relatedEvent dbpedia:Attack_on_Pearl_Harbor .
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
742,11,train,"Give me the birthplace of the alumnus of Plovdiv University ""Paisii Hilendarski"" and birthplace of Reneta Kamberova.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Reneta_Kamberova> <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Plovdiv_University_%22Paisii_Hilendarski%22> . },"```sparql
# Query to find the birthplace of a notable alumnus of Plovdiv University ""Paisii Hilendarski""
SELECT ?alumnus ?birthPlace WHERE {
  ?alumnus dbo:almaMater dbr:Plovdiv_University_Paisii_Hilendarski ;
           foaf:name ?name .
  OPTIONAL { ?alumnus dbp:birthPlace ?birthPlace . }
  FILTER (LANG(?name) = ""en"")
} LIMIT 1

# Query to find the birthplace of Reneta Kamberova
SELECT ?birthPlace WHERE {
  dbr:Reneta_Kamberova dbo:birthPlace ?birthPlace .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
68,4,train,"Who is the commander, that is a royalty, in Siege of Padua?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT ?person WHERE {
  ?event dcterms:subject dbc:Siege_of_Padua_(1509) .
  ?event dbo:commander ?person .
  ?person rdf:type dbo:Monarch .
}
```",1,2,2,1,1,2,3,28,0,0,2,0,0.0,0
59,5,train,Give me the native of the residence of David Luckman.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . <http://dbpedia.org/resource/David_Luckman> <http://dbpedia.org/property/residence> ?v0 . },"```sparql
SELECT ?nativeLanguage WHERE {
  ?person dbo:name ""David Luckman""@en .
  ?person dbo:residence ?residence .
  ?residence dbo:officialLanguages ?language .
  ?language rdfs:label ?nativeLanguage .
  FILTER(LANG(?nativeLanguage) = 'en')
}
```",2,2,3,2,1,2,2,9,0,0,971,0,0.0,0
347,42,train,"Give me the commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France) and child of the father of Cecilia Renata of Austria and father of Eleonore of Austria, Queen of Poland.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?war dbo:type dbr:War_of_the_Spanish_Succession .
  ?regiment dbo:partOf ?war ;
            rdfs:label ""2nd Dragoon Regiment (France)""@en .
  ?commander dbo:commanded ?regiment ;
             dbo:father dbr:Ferdinand_III,_Holy_Roman_Emperor ;
             dbo:mother ?mother .
  ?c1 dbo:childOf dbr:Ferdinand_III,_Holy_Roman_Emperor ;
      rdfs:label ""Cecilia Renata of Austria""@en .
  ?c2 dbo:childOf dbr:Ferdinand_III,_Holy_Roman_Emperor ;
      rdfs:label ""Eleonore of Austria, Queen of Poland""@en .
}
```",5,8,6,2,3,3,3,71,0,0,1,0,0.0,0
103,49,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant and professional in the alter ego of the series, that is a comics character, of The Shadow (video game).",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/starring> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. },"```sparql
SELECT ?actor WHERE {
  # Step 1: Find the comics character related to The Shadow video game
  ?videoGame dbo:wikiPageRedirects db:The_Shadow_(video_game) .
  ?videoGame dbo:basedOn dbpedia-en:The_Shadow .

  # Step 2: Identify the television show featuring Richard E. Grant as Lamont Cranston
  ?tvShow dbo:starring db:Richard_E._Grant ;
          dbo:characterName ""Lamont Cranston"" ;
          dbo:basedOn ?comicsCharacter .
  
  # Step 3: Retrieve other actors from that television series
  ?tvShow dbo:starring ?actor .
  FILTER(?actor != db:Richard_E._Grant)
}
```",5,7,6,3,2,3,3,71,0,0,13,0,0.0,0
103,9,train,Give me the actor of Dispatches from Elsewhere and professional in Actor.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?show dbo:title ""Dispatches from Elsewhere""@en .
  ?show dbo:castMember ?actor .
  ?actor dbo:occupation dbr:Actor .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
731,14,train,"Give me the war of the commander in the reference, that is a societal event and a military conflict, to Sinking of Prince of Wales and Repulse.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://xmlns.com/foaf/0.1/name> ""Sinking of Prince of Wales and Repulse""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://dbpedia.org/ontology/commander> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event WHERE {
  ?event rdf:type dbo:MilitaryConflict .
  ?event dbo:wikiPageRedirects dbr:World_War_II .
  ?event dbo:wikiPageDisambiguates ?disambiguation .
  FILTER EXISTS { 
    ?disambiguation rdf:type dbo:SocietalEvent .
  }
}
```",3,5,4,3,1,3,2,20,0,0,12,0,0.0,0
39,0,train,Give me the professional in Singer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Singer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name WHERE {
  ?person a dbo:Singer .
  ?person foaf:name ?name .
  FILTER regex(?name, ""Singer"", ""i"")
}
```",1,1,2,1,1,3,3,71,0,0,10364,0,0.0,0
89,42,train,Give me the child of the parent of Min Hla Htut of Pyakaung and spouse of Saw Shwe Khet and predecessor of the child of Saw Shwe Khet.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?individual WHERE {
  # Step 1: Find the parent of Min Hla Htut of Pyakaung
  ?minHlaHtut dbo:parent ?parentMinHlaHtut .
  FILTER(STRSTARTS(?minHlaHtut, ""http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung""))

  # Step 2: Find the spouse of Saw Shwe Khet
  ?sawShweKhet dbo:spouse ?spouseSawShweKhet .
  FILTER(STRSTARTS(?sawShweKhet, ""http://dbpedia.org/resource/Saw_Shwe_Khet""))

  # Step 3: Find the child of Saw Shwe Khet
  ?sawShweKhet dbo:child ?childSawShweKhet .

  # Step 4: Identify the predecessor of the child of Saw Shwe Khet
  ?predecessor dbo:succeededBy ?childSawShweKhet .

  # Step 5: Find the child of the parent of Min Hla Htut
  ?parentMinHlaHtut dbo:child ?childParentMinHlaHtut .

  # Step 6: Identify the common individual
  FILTER(?spouseSawShweKhet = ?childParentMinHlaHtut)
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
668,54,train,"Give me the associated musical artist of the person born as Elorm Kabu Amenyah and professional in the profession of the writer, that is a musical artist, of The Live Anthology and person born as Darryl Paa Kwesi Bannerman-Martin.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . }","```sparql
SELECT ?artist WHERE {
  ?shaggy dbo:birthName ""Elorm Kabu Amenyah""@en .
  ?shaggy rdf:type dbo:MusicalArtist .

  ?steviewonder dbo:birthName ""Darryl Paa Kwesi Bannerman-Martin""@en .
  ?steviewonder rdf:type dbo:MusicalArtist .

  OPTIONAL {
    ?collaboration dbo:artist ?shaggy ;
                   dbo:artist ?steviewonder .
  }

  FILTER EXISTS { ?collaboration a dbo:MusicComposition }
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
595,5,train,"Give me the resident, that is a politician and an office holder, of Chappaqua, New York.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:residence dbr:Chappaqua,_New_York .
  ?person a dbo:Politician ;
          dbo:officeHolder true .
  OPTIONAL { ?person rdfs:label ?name . FILTER (lang(?name) = 'en') }
}
```",1,3,2,1,1,3,3,71,0,0,2,0,0.0,0
943,47,train,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and child of the parent, that is a royalty, of Yeshaq I.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v0 <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?shadowAlterEgo ?royalChild WHERE {
  # Find the alter ego of Lamont Cranston (The Shadow)
  dbr:Lamont_Cranston dbo:alterEgo ?shadowAlterEgo .
  
  # Identify Zara Yaqob
  dbr:Zara_Yaqob a dbo:Monarch ;
                 dbo:spouse ?spouse .

  # Find children of Zara Yaqob who are royalty
  ?child dbo:parent dbr:Zara_Yaqob ;
         a dbo:Monarch .
  
  # Filter for Dawit II as the royal child
  FILTER(?child = dbr:Dawit_II)
  
  # Bind the alter ego and the royal child to variables
  BIND(?shadowAlterEgo AS ?alterEgoOfLamontCranston)
  BIND(?child AS ?royalChild)
}
```",5,6,6,3,2,3,3,71,0,0,3,0,0.0,0
706,7,train,Give me the birthplace of the awardee of Sangeet Natak Akademi Fellowship.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Sangeet_Natak_Akademi_Fellowship> . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person ?birthPlace WHERE {
  ?award dbo:recipient ?person .
  ?award rdf:type dbr:Sangeet_Natak_Akademi_Fellowship .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
```",2,2,3,2,1,3,2,20,0,0,3,0,0.0,0
782,55,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and reference to the real name of The Fabulous Thunderbirds and band of the band member of Eric Clapton.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?result <http://dbpedia.org/ontology/bandMember> ?v5 . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Find the musical artist associated with Nick Curran
  OPTIONAL { 
    dbr:Nick_Curran dbo:musicalArtist ?artist .
  }
  
  # Find the real name of The Fabulous Thunderbirds (band)
  OPTIONAL {
    dbr:The_Fabulous_Thunderbirds dbo:member ?member .
    ?member dbo:associatedBand dbr:The_Fabulous_Thunderbirds .
  }

  # Find a band member of Eric Clapton
  OPTIONAL {
    dbr:Cream dbo:member ?claptonMember .
    FILTER (str(?claptonMember) = ""Jack Bruce"")
  }
  
  # Combine the results to find an associated musical artist
  FILTER (?artist != dbr:Nick_Curran && ?artist != dbr:The_Fabulous_Thunderbirds)
}
```",6,7,7,2,3,3,3,71,0,0,1,0,0.0,0
198,59,train,"Give me the force of the awardee of the award of Quincy Adams Gillmore and war of the awardee of the show, that is an award, of United States Congress.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> ?v5 . ?v3 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v5 <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. },"```sparql
# Query 1: Find Quincy Adams Gillmore's award and the associated war
SELECT ?award ?war WHERE {
  ?person rdfs:label ""Quincy Adams Gillmore""@en .
  ?person dbo:awardedBy ?award .
  ?award dbo:relatedToWar ?war .
}

# Query 2: Find an awardee of a Congressional award and the associated war
SELECT ?recipient ?congressionalAward ?war WHERE {
  ?congressionalAward rdfs:label ""Congressional Gold Medal""@en ;
                      dbo:awardedBy dbr:United_States_Congress .
  ?recipient dbo:receivedAwards ?congressionalAward .
  ?recipient dbo:servedInWar ?war .
}
```",6,7,7,3,2,3,3,71,0,0,3,0,0.0,0
119,41,train,"Give me the tenant of the residence, that is a country, of Álvaro Quirós and office of the leader of 2009 Galician regional election and tenant of Santiago de Compostela.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v4 . ?v2 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country WHERE {
  ?person a dbo:Person ;
          foaf:name ""Álvaro Quirós""@en .
  
  # Check if he was an office holder in the 2009 Galician regional election
  OPTIONAL { 
    ?office dbo:election dbr:Galician_regional_election,_2009 ;
            dbo:incumbent ?person .
  }
  
  # Verify his connection to Santiago de Compostela
  OPTIONAL {
    ?place a dbo:Place ;
          foaf:name ""Santiago de Compostela""@en ;
          dbo:resident ?person .
  }

  # Find the country of residence
  ?person dbo:nationality ?country .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
203,56,train,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of Battle of Fort Royal.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> ?v0 . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v2 . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
  # Find a person who is a Knight Commander of the Order of the Bath and commander in a war
  ?person dbo:knightCommanderOfTheOrderOfTheBath true .
  ?person dbo:militaryConflict ?war .

  # Ensure this person commanded the 30th (Cambridgeshire) Regiment of Foot
  ?commandPosition dbo:positionHeldBy ?person ;
                   dbo:unit ?regiment .
  FILTER(STRSTARTS(STR(?regiment), ""http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot""))

  # Find the military force involved in the Battle of Fort Royal
  ?battle dbr:Battle_of_Fort_Royal ;
         dbo:participatingMilitaryUnit ?militaryForce .

  # Ensure this person commanded a military force during the war
  ?commandPosition2 dbo:positionHeldBy ?person ;
                    dbo:militaryConflict ?war ;
                    dbo:unit ?militaryForce .
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
38,17,train,"Give me the author of Promises to Keep (Biden book) and author of the work, that is a written work and a work, of the commander, that is an office holder, in Korean conflict.",SELECT ?result WHERE { <http://dbpedia.org/resource/Promises_to_Keep_(Biden_book)> <http://dbpedia.org/ontology/author> ?result . ?v3 <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/Korean_conflict> <http://dbpedia.org/ontology/commander> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/property/author> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
# Query for Joe Biden as the author of ""Promises to Keep""
SELECT ?author WHERE {
  ?book dcterms:title ""Promises to Keep""@en .
  ?book dbo:author ?person .
  ?person foaf:name ""Joe Biden""@en .
}

UNION

# Query for Douglas MacArthur as a commander in the Korean conflict and an author
SELECT ?commander WHERE {
  ?person foaf:name ""Douglas MacArthur""@en .
  ?person dbo:occupation dbo:MilitaryPerson .
  ?person dbo:officeHolderOf ?office .
  ?office rdfs:label ?officeLabel .
  FILTER(CONTAINS(LCASE(?officeLabel), ""korean conflict"") || CONTAINS(LCASE(?officeLabel), ""commander"")) .
  
  OPTIONAL {
    ?person dbo:authorOf ?work .
    ?work rdf:type dbo:Book .
  }
}
```",4,7,5,3,2,3,2,20,0,0,1,0,0.0,0
731,9,train,Who is the awardee of the award of Edmund Hakewill-Smith?,SELECT ?result WHERE { <http://dbpedia.org/resource/Edmund_Hakewill-Smith> <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/property/awards> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee WHERE {
  ?award dbo:wikiPageRedirects dbr:Edmund_H._W._Smith_Award .
  ?award dbo:recipient ?awardee .
}
```",2,2,3,2,1,3,2,20,0,0,3570,0,0.0,0
203,17,train,"Give me the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?awardee ?event ?societalEvent ?force WHERE {
  ?awardee dbo:honoraryTitle dbr:Knight_Commander_of_the_Order_of_the_Bath .
  
  # Check if the awardee is linked to an event
  ?awardee dbo:event ?event .

  # Check if the awardee is linked to a societal event
  ?societalEvent dbo:type dbr:Societal_Event ;
                dbo:participant ?awardee .

  # Check if the awardee is associated with any force
  OPTIONAL { ?awardee dbo:force ?force . }

  FILTER EXISTS { ?event a dbo:Event }
  FILTER EXISTS { ?societalEvent a dbo:SocietalEvent }
}
```",2,4,3,2,1,3,3,71,0,0,298,0,0.0,0
859,17,train,"Give me the band member of Human Remains (band) and associated musical artist of the associated musical artist of the member, that is a musical artist, of Khlyst (band).",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Human_Remains_(band)> . <http://dbpedia.org/resource/Khlyst_(band)> <http://dbpedia.org/ontology/bandMember> ?v0 . },"```sparql
# Step 1: Find band members of Human Remains
SELECT ?member WHERE {
  ?humanRemains dbr:Human_Remains_(band) .
  ?humanRemains dbo:bandMember ?member .
}

UNION

# Step 2: For each member, find associated musical artists
SELECT DISTINCT ?associatedArtist WHERE {
  ?member dbo:associatedMusicalArtist ?associatedArtist .
  FILTER EXISTS { 
    ?humanRemains dbr:Human_Remains_(band) .
    ?humanRemains dbo:bandMember ?member .
  }
}

UNION

# Step 3: Find band members of Khlyst
SELECT ?khlystMember WHERE {
  ?khlyst dbr:Khlyst_(band) .
  ?khlyst dbo:bandMember ?khlystMember .
}

UNION

# Step 4: For each Khlyst member, find associated musical artists
SELECT DISTINCT ?associatedArtist2 WHERE {
  ?khlystMember dbo:associatedMusicalArtist ?associatedArtist2 .
  FILTER EXISTS { 
    ?khlyst dbr:Khlyst_(band) .
    ?khlyst dbo:bandMember ?khlystMember .
  }
}

# Step 5: Filter to ensure the associated artists are also musical artists
SELECT DISTINCT ?finalArtist WHERE {
  VALUES (?artist1 ?artist2) { 
    (VALUES ?artist1 ?artist2) {
      SELECT ?associatedArtist ?associatedArtist2 WHERE {
        ?member dbo:associatedMusicalArtist ?associatedArtist .
        FILTER EXISTS { 
          ?humanRemains dbr:Human_Remains_(band) .
          ?humanRemains dbo:bandMember ?member .
        }
        
        ?khlystMember dbo:associatedMusicalArtist ?associatedArtist2 .
        FILTER EXISTS { 
          ?khlyst dbr:Khlyst_(band) .
          ?khlyst dbo:bandMember ?khlystMember .
        }
      }
    }
  }

  ?artist1 rdf:type dbo:MusicalArtist .
  ?artist2 rdf:type dbo:MusicalArtist .

  BIND(?artist1 AS ?finalArtist)
}
```",4,5,5,3,2,3,2,20,0,0,3,0,0.0,0
258,3,train,Give me the founding date of Federal University of Paraíba.,SELECT ?result WHERE { <http://dbpedia.org/resource/Federal_University_of_Paraíba> <http://dbpedia.org/ontology/foundingDate> ?result . },"```sparql
SELECT ?foundingDate WHERE {
  ?university rdfs:label ""Universidade Federal da Paraíba""@pt .
  ?university dbo:foundingDate ?foundingDate .
  FILTER (lang(?university) = 'pt')
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
203,59,train,"Give me the military force of the war, that is a military conflict and an event, of the reference to William Bayne and commander in the war, that is a military conflict and an event, of the figure known as The Triple X's.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v5 . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v0 <http://dbpedia.org/ontology/battle> ?v5 . ?v3 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?militaryForce WHERE {
  # Step 1: Identify ""The Triple X's"" figure
  ?tripleX a dbo:MilitaryPerson ;
           rdfs:label ?tripleXLabel .
  
  FILTER(CONTAINS(LCASE(?tripleXLabel), ""the triple x's"")) .

  # Step 2: Determine the war associated with The Triple X's
  ?tripleX dbo:militaryConflict ?war1 .

  # Step 3: Identify William Bayne and his role
  ?williamBayne a dbo:MilitaryPerson ;
                rdfs:label ""William Bayne"" .
  
  ?williamBayne dbo:militaryCommanderOf ?war2 .

  # Step 4: Find the reference to William Bayne in the context of The Triple X's war
  FILTER(?war1 = ?war2) .

  # Step 5: Identify the military force involved in the war
  ?war1 dbo:participatingMilitaryForce ?militaryForce .
}
```",6,10,7,3,2,3,3,71,0,0,2,0,0.0,0
386,13,train,Give me the war of Karl Gustav von Baggovut and entity in the birth place of Elena Žalinkevičaitė-Petrauskienė.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?entityInBirthPlace WHERE {
  # Find the war Karl Gustav von Baggovut participated in
  dbr:Karl_Gustav_von_Baggovut dbo:participatedIn ?war .

  # Find the birthplace of Elena Žalinkevičaitė-Petrauskienė
  dbr:Elena_Žalinkevičaitė-Petrauskienė dbo:birthPlace ?birthPlace .

  # Find notable entities in her birthplace
  ?entityInBirthPlace dbo:location ?birthPlace .
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
782,5,train,"Give me the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:MusicalArtist .
  ?person dbo:birthDate ""1945-03-30""^^xsd:date .
  ?person foaf:name ?name .
}
```",1,2,2,1,1,3,3,71,2,2,0,0.5,1.0,0.6666666666666666
103,1,train,Give me the professional in Actor.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?professional WHERE {
  ?professional rdfs:subClassOf* dbo:Actor .
}
```",1,1,2,1,1,3,3,71,0,4,21580,0.0,0.0,0
871,11,train,Give me the parent of the awardee of Commander of the Royal Victorian Order.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . }","```sparql
SELECT ?parentAward WHERE {
  ?award dbo:name ""Commander of the Royal Victorian Order""@en .
  OPTIONAL { ?award dbo:parentAward ?parentAward . }
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
246,1,train,Give me the parent of Prince Omar bin Faisal.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Prince_Omar_bin_Faisal> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?person rdfs:label ""Prince Omar bin Faisal""@en .
  ?person dbo:parent ?parent .
}
```",1,1,2,1,1,3,2,20,1,1,1,0.5,0.5,0.5
468,4,train,Give me the parent of Martin of Aragon.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Martin_of_Aragon> . },"```sparql
SELECT ?parent WHERE {
  ?martin dbo:birthName ""Martin of Aragon""@en .
  OPTIONAL { ?martin dbo:father ?parent . }
  OPTIONAL { ?martin dbo:mother ?parent . }
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
347,58,train,"Give me the father of the child of Ferdinand III, Holy Roman Emperor and commander in Thirty Years' War and child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574).","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v5 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/property/father> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  # Identify Ferdinand III, Holy Roman Emperor
  dbr:Ferdinand_III,_Holy_Roman_Emperor dbo:child dbr:Leopold_I,_Holy_Roman_Empress.
  
  # Determine the father of Leopold I (who is Ferdinand III)
  dbr:Leopold_I,_Holy_Roman_Empress dbo:father ?father.

  # Identify Maria Anna of Bavaria and her child
  dbr:Maria_Anna_of_Bavary dbo:child dbr:Isabella_Clara_Eugenia.
  
  # Determine the father of Isabella Clara Eugenia (who is Albert VII)
  dbr:Isabella_Clara_Eugenia dbo:father ?alfred.

  FILTER(?father = dbr:Ferdinand_III,_Holy_Roman_Emperor)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
59,0,train,Give me the native of Bristol.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bristol> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthPlace dbr:Bristol .
}
```",1,1,2,1,1,2,2,9,971,0,0,1.0,1.0,1.0
119,48,train,"Give me the tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and office of the leader of the administration, that is an event, of Anxo Quintana.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leader> ?v2 . ?v2 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?primeMinister ?officeEvent WHERE {
  # Find Anxo Quintana's office event within the PSOE
  ?quintanaOffice a dbo:PoliticalPartyMembership ;
                  dbo:member dbr:Anxo_Quintana ;
                  dbo:politicalParty dbr:Spanish_Socialist_Workers'_Party .

  # Find the Prime Minister during Anxo Quintana's tenure
  ?primeMinister dbo:headOfState dbr:Spain ;
                 dbo:officePeriod ?period .
  
  # Ensure the period overlaps with Anxo Quintana's office event
  ?quintanaOffice dbo:startDate ?startQuintana ;
                  dbo:endDate ?endQuintana .

  FILTER (?startQuintana <= ?period && ?endQuintana >= ?period)

  # Get the office event for Anxo Quintana
  ?officeEvent a dbo:PoliticalPartyMembership ;
               dbo:member dbr:Anxo_Quintana .
}
```",5,7,6,3,2,3,3,71,0,0,2,0,0.0,0
119,17,train,"Give me the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/property/leaderParty> ?v1 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administration WHERE {
  ?party rdfs:label ""Spanish Socialist Workers' Party""@en .
  ?party dbo:memberOf ?government.
  ?government dbo:country dbr:Spain ;
              a dbo:Government .
  ?government dbo:headOfStateOrGovernment ?administration.
}
```",2,3,3,2,1,3,3,71,0,0,320,0,0.0,0
871,23,train,Give me the parent of the awardee of the award of Rodney Lees.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?award ?parent
WHERE {
  # Find Rodney Lees in DBpedia
  dbr:Rodney_Lees a dbo:Person .

  # Find awards associated with Rodney Lees
  dbr:Rodney_Lees dbo:award ?award .

  # Find the parent organization of each award
  OPTIONAL { ?award dbo:parentOrganization ?parent . }
}
```",3,3,4,3,1,3,3,71,0,1,1,0.0,0.0,0
225,5,train,"Give me the awardee, that is Japanese, of Anita Borg Institute Women of Vision Awards.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Anita_Borg_Institute_Women_of_Vision_Awards> . ?result <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. },"```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?name WHERE {
  ?person dbo:award <http://dbpedia.org/resource/Anita_Borg_Institute_Women_of_Vision_Award> .
  ?person foaf:name ?name .
  ?person foaf:nationality <http://dbpedia.org/resource/Japan> .
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
737,28,train,"Give me the predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of Archduchess Margarete Sophie of Austria and child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v1 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?predecessor WHERE {
  # Identify the child of Philipp Albrecht and Archduchess Margarete Sophie
  ?philippAlbrecht dbo:spouse ?margareteSophie .
  ?philippAlbrecht dbr:Philipp_Albrecht,_Duke_of_Württemberg .
  ?margareteSophie dbr:Margarete_Sophie_of_Austria .

  # Find their child
  ?child dbo:parent ?philippAlbrecht ;
         dbo:parent ?margareteSophie .

  # Ensure the child is also a child of Albrecht, Duke of Württemberg
  ?albrecht dbr:Albrecht,_Duke_of_Württemberg .
  ?child dbo:parent ?albrecht .

  # Find the title or position held by this child
  ?title dbo:holder ?child ;
         a dbo:Title .

  # Determine who held that title before them (predecessor)
  ?predecessor dbo:successor ?child ;
               dbo:title ?title .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
737,2,train,Give me the child of Archduchess Margarete Sophie of Austria.,SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?person a dbo:Person ;
          foaf:name ""Margarete Sophie, Archduchess of Austria""@en .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
609,8,train,Who is the author of El Deafo?,SELECT ?result WHERE { <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?book rdfs:label ""El Deafo""@en .
  ?book dbo:author ?author .
  FILTER (lang(?book) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
203,60,train,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  # Identify the Triple X's and its military force
  ?tripleX a dbo:MilitaryUnit ;
           dbo:participatedIn ?war .

  # Ensure the war is both a military conflict and an event
  ?war a dbo:MilitaryConflict, dbo:Event .

  # Find the commander of the war
  ?commander dbo:commanded ?war .

  # Identify the force associated with the Triple X's
  ?force a dbo:MilitaryUnit ;
         dbo:participatedIn ?war ;
         dbo:societalEvent ?event .

  # Ensure the force is also an event and societal event
  ?event a dbo:Event, dbo:SocietalEvent .

  # Identify the awardee of Knight Commander of the Order of the Bath
  ?awardee dbo:awardReceived dbr:Knight_Commander_of_the_Order_of_the_Bath ;
          dbo:commanded ?force .

  # Ensure all elements are connected through their roles in the same conflict
  FILTER(?tripleX = ?force)
}
```",6,10,7,3,2,3,3,71,0,0,2,0,0.0,0
706,9,train,Who is the awardee of the reference to Sangeet Natak Akademi Fellowship?,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Sangeet Natak Akademi Fellowship""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?award dbo:recipient ?person ;
         rdfs:label ""Sangeet Natak Akademi Fellowship""@en .
  OPTIONAL { ?person foaf:name ?name . }
}
ORDER BY ?name
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
557,9,train,Give me the professional in  and producer of The Adventures of Tom Sawyer (1938 film).,"SELECT ?result WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?director ?producer WHERE {
  VALUES ?film { dbr:The_Adventures_of_Tom_Sawyer_(1938_film) }
  
  OPTIONAL { ?film dbo:director ?director . }
  OPTIONAL { ?film dbo:producer ?producer . }

  FILTER (lang(?directorLabel) = 'en' && lang(?producerLabel) = 'en')
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
943,25,train,"Give me the reference to  and father of the father, that is a royalty and an office holder, of Na'od.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v0 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?naod ?father ?grandfather WHERE {
  ?naod dbo:name ""Na'od""@en .
  ?naod dbo:father ?father .
  ?father dbo:father ?grandfather .

  # Ensure the father is royalty and an office holder
  OPTIONAL { ?father dbo:royalTitle ?title . }
  OPTIONAL { ?father dbo:officeHolder ?office . }

  # Ensure the grandfather is royalty and an office holder
  OPTIONAL { ?grandfather dbo:royalTitle ?g_title . }
  OPTIONAL { ?grandfather dbo:officeHolder ?g_office . }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
158,10,train,"Give me the native of the administration of Alexander II, Grand Duke of Finland.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativeLanguage WHERE {
  ?person a dbo:Monarch ;
          foaf:name ""Alexander II"" ;
          dbo:reignOver dbr:Finnish_Grand_Duchy .
  
  OPTIONAL { ?person dbo:nationality ?nationality . }
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }

  # Assuming native language can be inferred from nationality or birthplace
  OPTIONAL {
    ?nationality rdfs:label ?nativeLanguage ;
                FILTER (lang(?nativeLanguage) = ""en"")
  }
  
  OPTIONAL {
    ?birthPlace dbo:countryName ?country .
    ?country rdfs:label ?nativeLanguage ;
             FILTER (lang(?nativeLanguage) = ""en"")
  }

  # Filter to ensure we get the correct Alexander II
  FILTER regex(str(?person), ""Alexander_II,_Grand_Duke_of_Finland"", ""i"")
}
```",2,2,3,2,1,2,3,28,0,0,355,0,0.0,0
311,4,train,"Give me the album, that is a musical work and a work and an album, of Sappy.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. <http://dbpedia.org/resource/Sappy> <http://dbpedia.org/ontology/album> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?album WHERE {
  ?sappy a dbo:Band ;
         foaf:name ""Sappy""@en .
  
  ?album rdf:type dbo:Album ;
         dbo:artist ?sappy .

  FILTER EXISTS { ?album rdf:type dbo:MusicalWork }
}
```",1,4,2,1,1,3,2,20,0,0,4,0,0.0,0
859,1,train,Give me the associated musical artist of Phantomsmasher.,SELECT ?result WHERE { <http://dbpedia.org/resource/Phantomsmasher> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?album a dbo:Album .
  ?album dbo:title ""Phantomsmasher"" ;
         dbo:performer ?artist .
}
```",1,1,2,1,1,3,2,20,0,0,11,0,0.0,0
816,27,train,Give me the parent of the child of the spouse of Mariclare Costello.,SELECT ?result WHERE { <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
SELECT ?parent WHERE {
  ?mariclare dbo:spouse ?spouse .
  FILTER (str(?mariclare) = ""Mariclare_Costello"") .

  ?spouse dbo:child ?child .

  ?child dbo:parent ?parent .
}
```",3,3,4,3,1,3,3,71,0,0,2,0,0.0,0
737,13,train,Give me the child of the child of Duke Philipp of Württemberg.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> ?v1 . },"```sparql
SELECT DISTINCT ?grandchild ?grandchildLabel WHERE {
  # Find the child of Duke Philipp of Württemberg
  ?person dbo:spouse ?duke .
  ?duke foaf:name ""Philipp Ludwig II, Duke of Württemberg""@en ;
        dbo:child ?child .

  # For each child found, find their children (grandchildren of the duke)
  ?child dbo:child ?grandchild .
  
  # Get labels for better readability
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,2,3,2,1,3,3,71,0,0,2,0,0.0,0
295,5,train,Give me the birth place of Victor Saville.,SELECT ?result WHERE { <http://dbpedia.org/resource/Victor_Saville> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthPlace WHERE {
  ?person a dbo:FilmDirector ;
          foaf:name ""Victor Saville""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
293,25,train,Give me the spouse of Roger Pryor (actor) and person born as the birth name of Ann Sothern.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
# Query to find the spouse of Roger Pryor (actor)
SELECT ?spouse WHERE {
  ?person dbo:birthName ""Roger Pryor""@en .
  ?person dbo:occupation dbp:Actor .
  ?person dbo:spouse ?spouse .
}

UNION

# Query to find a person born with the birth name Ann Sothern
SELECT ?fullName WHERE {
  ?person foaf:name ""Ann Sothern""@en ;
          dbo:birthName ""Ann Sothern""@en .
  ?person foaf:name ?fullName .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
258,1,train,Give me the alma mater of Eleonora Menicucci.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/ontology/almaMater> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?almaMater WHERE {
  dbr:Eleonora_Menicucci dbo:almaMater ?almaMater .
}
```",1,1,2,1,1,3,2,20,3,0,0,1.0,1.0,1.0
414,14,train,Give me the award of the awardee of the reference to Nobel Prize in Physics.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?v2 . ?v2 <http://xmlns.com/foaf/0.1/name> ""Nobel Prize in Physics""@en . ?v0 <http://dbpedia.org/property/awards> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee ?award WHERE {
  ?awardee dbo:field dbr:Nobel_Prize_in_Physics .
  ?awardee rdfs:label ""Albert Einstein""@en .
  ?awardee dbo:honoraryTitle ?award .
}
```",3,3,4,3,1,3,2,20,0,0,87,0,0.0,0
39,60,train,"Give me the professional in the profession of the producer of Coke Studio Philippines and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician).",SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v0 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://dbpedia.org/property/occupation> ?v2 . },"```sparql
# Step 1: Find Bob Thompson's birth name
SELECT ?birthName WHERE {
  ?person foaf:name ""Bob Thompson (musician)""@en .
  ?person dbo:birthName ?birthName .
}

# Step 2: Identify the producer of Coke Studio Philippines who is also a band member and musical artist
SELECT DISTINCT ?producer WHERE {
  ?cokeStudio dcterms:creator ?producer .
  FILTER(CONTAINS(LCASE(STR(?cokeStudio)), ""coke studio philippines""))
  
  ?producer dbo:bandMemberOf ?band .
  ?producer dbo:occupation dbc:Musical_artist .
}

# Step 3: Find the professional role of this producer
SELECT DISTINCT ?profession WHERE {
  ?producer dbo:occupation ?profession .
}
```",6,7,7,3,2,3,3,71,0,0,4,0,0.0,0
609,1,train,Give me the birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person dbo:name ""Glenn Youngkin""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
87,7,train,Give me the actor of Paradise (2013 film) and actor of Always (1989 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Query to find actors of ""Paradise"" (2013)
SELECT ?actor WHERE {
  ?movie dbo:title ""Paradise""@en .
  ?movie dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 2013) .
  ?movie dbo:starring ?actor .
}

UNION

# Query to find actors of ""Always"" (1989)
SELECT ?actor WHERE {
  ?movie dbo:title ""Always""@en .
  ?movie dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1989) .
  ?movie dbo:starring ?actor .
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
943,55,train,"Give me the reference to the alter ego of The Shadow and father of the father, that is a royalty and an office holder, of Na'od and child of the parent, that is a royalty, of Yeshaq I.",SELECT ?result WHERE { <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v5 . },"```sparql
SELECT ?person WHERE {
  ?yeshaq dbo:child ?naod .
  ?naod dbo:parent ?father .
  ?father rdf:type dbo:Monarch .
  ?father dbo:officeHolder ?office .
  
  OPTIONAL { ?yeshaq rdfs:label ""Yeshaq I""@en }
}
```",6,9,7,2,3,3,3,71,0,0,1,0,0.0,0
816,42,train,"Give me the parent of Amy Arbus and parent of the child of Allan Arbus and actor of the movie, that is a work, with Herschel Bernardi.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
# Query to get the parent of Amy Arbus
SELECT ?parent WHERE {
  wd:Q1234567 wdt:P40 ?parent .
}

# Query to find Allan Arbus's child and then the parent of that child
SELECT ?childParent WHERE {
  wd:Q2345678 wdt:P40 ?child . # Allan Arbus's child
  ?child wdt:P40 ?childParent . # Parent of Allan Arbus's child
}

# Query to find movies with Herschel Bernardi and other actors in those movies
SELECT DISTINCT ?actor WHERE {
  ?movie wdt:P161 wd:Q3456789 ; # Movie featuring Herschel Bernardi
         wdt:P162 ?actor .      # Other actor in the movie
}
```

Note: Replace `wd:Q1234567`, `wd:Q2345678`, and `wd:Q3456789` with the actual DBpedia QIDs for Amy Arbus, Allan Arbus, and Herschel Bernardi respectively. These IDs can be found by searching their names in DBpedia.",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
871,50,train,"Give me the parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby and father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/child> ?v3 . ?v2 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT DISTINCT ?politicianOfficeHolder WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  ?edward dbp:title ""Edward Stanley, 17th Earl of Derby""@en .
  
  # Step 2: Find his child that is a politician
  ?childOfEdward dbo:parent ?edward ;
                dbo:occupation ?politicianOccupation .
  FILTER(CONTAINS(LCASE(?politicianOccupation), ""politician"")) .

  # Step 3: Identify Frederick Stanley, 16th Earl of Derby
  ?frederick dbp:title ""Frederick Stanley, 16th Earl of Derby""@en ;
             dbo:child ?childOfFrederick .
  
  # Step 4: Find the child of Frederick Stanley who is a politician
  ?childOfFrederick dbo:occupation ?politicianOccupation2 .
  FILTER(CONTAINS(LCASE(?politicianOccupation2), ""politician"")) .

  # Step 5: Identify the parent of this child
  ?parentOfChild dbp:spouse|dbo:partner ?frederick ;
                 dbo:child ?childOfFrederick .

  # Step 6: Find a child of this parent
  ?childOfParent dbo:parent ?parentOfChild .

  # Step 7: Check if this child is a politician and an office holder
  ?childOfParent dbo:occupation ?politicianOfficeHolder .
  FILTER(CONTAINS(LCASE(?politicianOfficeHolder), ""politician"") &&
         CONTAINS(LCASE(?politicianOfficeHolder), ""office holder"")) .
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
119,23,train,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/office> ?result . ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/property/leader> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  ?person dbo:birthName ""Anxo Quintana"" .
  ?person dbo:position ?position .
  ?position dbo:event ?event .
  ?position dbo:office ?office .
  FILTER EXISTS { ?event a dbo:Event } .
}
```",3,4,4,3,1,3,3,71,0,0,34,0,0.0,0
347,45,train,"Give me the commander in Thirty Years' War and father of Eleonore of Austria, Queen of Poland and child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574).","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:spouse ?eleonore .
  ?eleonore rdfs:label ""Eleonore of Austria, Queen of Poland""@en .
  
  ?maximilian dbo:child ?eleonore ;
              dbo:fatherOf ?eleonore .
  
  ?williamV dbo:child ?maximilian .
  ?williamV rdfs:label ""William V, Duke of Bavaria""@en .

  ?mariaAnna dbo:parent ?williamV .
  ?mariaAnna rdfs:label ""Maria Anna of Bavaria (1574–1616)""@en .

  OPTIONAL { ?person dbo:occupation dbr:Commander_in_the_Thirty_Years'_War . }
  
  FILTER(LANG(?eleonore) = 'en')
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
293,17,train,Give me the birth name of the parent of Tisha Sterling.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v1 <http://dbpedia.org/property/birthName> ?result . },"```sparql
SELECT ?parent ?birthName WHERE {
  # Find Tisha Sterling in DBpedia
  ?tisha a dbo:Person ;
         foaf:name ""Tisha Sterling""@en .
  
  # Identify her parent(s)
  ?tisha dbo:parent ?parent .

  # Retrieve the birth name of the parent
  OPTIONAL { ?parent foaf:name ?birthName . }
}
```",2,2,3,2,1,3,3,71,0,4,3,0.0,0.0,0
531,10,train,Give me the office of Miguel Maura and tenant of Madrid.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?officePosition ?madridConnection
WHERE {
  ?person dbo:birthName ""Miguel Maura"" .
  
  OPTIONAL { 
    ?person dbo:positionHeld ?officePosition .
  }
  
  OPTIONAL {
    ?person dbp:residence ?location .
    FILTER (CONTAINS(LCASE(str(?location)), ""madrid""))
    BIND(""Madrid"" AS ?madridConnection)
  }

  OPTIONAL {
    ?person dbp:officeLocation ?location .
    FILTER (CONTAINS(LCASE(str(?location)), ""madrid""))
    BIND(""Office in Madrid"" AS ?madridConnection)
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
375,1,train,Give me the parent of Kate Dimbleby.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Kate_Dimbleby> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?person rdfs:label ""Kate Dimbleby""@en .
  ?person dbo:parent ?parent .
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
263,2,train,"Give me the parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?parent WHERE {
  ?person dbo:givenName ""Patrick""@en .
  ?person dbo:familyName ""Bowes-Lyon""@en .
  ?person dbo:title ""15th Earl of Strathmore and Kinghorne""@en .
  ?person dbo:father ?parent .
}
```",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
293,51,train,"Give me the person born as the birth name of the parent of Tisha Sterling and spouse of the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v4 . }","```sparql
# Step 1: Find Tisha Sterling's parent
SELECT ?parent WHERE {
  wd:Q1234567 wdt:P40 ?parent .
}

# Step 2: Get the birth name of that parent
SELECT ?birthName WHERE {
  ?parent wdt:P1476 ?birthName .
}

# Step 3: Identify the actor from ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
  wd:Q7890123 wdt:P161 ?actor .
}

# Step 4: Find the spouse of that actor
SELECT ?spouse WHERE {
  ?actor wdt:P26 ?spouse .
}

# Step 5: Match the birth name to find the corresponding person
SELECT ?person WHERE {
  ?person wdt:P1476 ?birthName .
}
```

Note: Replace `wd:Q1234567` with Tisha Sterling's DBpedia QID and `wd:Q7890123` with the QID for ""1,000 Dollars a Minute"" or its associated actor.",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
943,49,train,"Give me the father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and child of the parent, that is a royalty, of Yeshaq I.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v4 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . },"```sparql
SELECT DISTINCT ?greatGrandfather WHERE {
  # Baeda Maryam I's child
  ?baedaChild dbo:parent dbr:Baeda_Maryam_I .
  
  # Yeshaq I's grandchild through a royal parent
  ?yeshaqParent dbo:parent dbr:Yeshaq_I ;
                rdf:type dbo:Monarch .
  ?yeshaqGrandchild dbo:parent ?yeshaqParent .

  # Common child between Baeda Maryam I's child and Yeshaq I's grandchild
  ?commonChild dbo:parent ?baedaChild, ?yeshaqGrandchild .

  # Father of the common child
  ?fatherOfCommonChild dbo:parent ?commonChild .
  
  # Great-grandfather (Father of the father)
  ?greatGrandfather dbo:parent ?fatherOfCommonChild ;
                   rdf:type dbo:Monarch ;
                   dbo:officeHolder ?office .

  FILTER EXISTS { ?office a dbo:GovernmentPost }
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
89,53,train,Give me the child of the parent of the child of Minye Kyawswa and predecessor of the child of Saw Shwe Khet and spouse of Saw Shwe Khet.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v3 . ?v2 <http://dbpedia.org/ontology/child> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Minye Kyawswa's child
  ?minyeKyawswaChild dbo:parent dbr:Minye_Kyawswa .
  
  # Saw Shwe Khet's spouse and their child
  ?sawShweKhetSpouse dbo:spouse dbr:Saw_Shwe_Khet ;
                    dbo:child ?sawShweKhetChild .

  # The child of Minye Kyawswa who is also the spouse of Saw Shwe Khet
  ?minyeKyawswaChild dbr:Saw_Shwe_Khet .
  
  # Ensure it's the same individual
  FILTER(?minyeKyawswaChild = ?sawShweKhetSpouse)
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
723,1,train,Give me the band member of Stone Sour.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Stone_Sour> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?member WHERE {
  ?group dbo:name ""Stone Sour""@en .
  ?group dbo:bandMember ?member .
}
```",1,1,2,1,1,3,2,20,0,0,14,0,0.0,0
159,56,train,"Give me the reference to George Ducas and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
# Step 1: Find George Ducas and his reference
SELECT ?georgeDucas ?reference WHERE {
  ?georgeDucas dbo:wikiPageID ""George_Ducas"" .
  ?georgeDucas rdfs:label ""George Ducas""@en .
  OPTIONAL { ?georgeDucas foaf:name ?name . }
  OPTIONAL { ?georgeDucas dbp:reference ?reference . }
}

# Step 2: Find the successor of George Ducas who is a politician and office holder
SELECT ?successor WHERE {
  ?successor dbo:predecessor ?georgeDucas .
  ?successor rdf:type dbo:Politician .
  ?successor dbo:officeHolder true .
}

# Step 3: Find the commander in the Battle of Vienna linked to a TV show and societal event
SELECT ?commander WHERE {
  ?commander dbo:commandedMilitaryForce ?battleOfVienna .
  ?battleOfVienna rdfs:label ""Battle of Vienna (1683)""@en .
  OPTIONAL { ?commander dbo:associatedWithTVShow true . }
  OPTIONAL { ?commander dbo:relatedToSocietalEvent true . }
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
89,57,train,"Give me the predecessor of the child of Saw Shwe Khet and spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and child of Saw Min Hla.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://dbpedia.org/property/father> ?v5 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v5 . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Find a royal child of Saw Shwe Khet
SELECT ?child WHERE {
    ?sawShweKhet dbo:spouse ?parent .
    ?parent dbo:child ?child .
    ?child rdf:type dbo:Monarch .
    FILTER(CONTAINS(LCASE(?sawShweKhet), ""saw shwe khet""))
}

# Step 2: Find the father of this royal child
SELECT ?father WHERE {
    ?child dbo:parent ?father .
    # Assuming ?child is bound from previous query result
}

# Step 3: Find the spouse of this father
SELECT ?spouse WHERE {
    ?father dbo:spouse ?spouse .
    # Assuming ?father is bound from previous query result
}

# Step 4: Find the predecessor of this spouse
SELECT ?predecessor WHERE {
    ?spouse dbo:successor ?currentRole .
    ?predecessor dbo:successor ?spouse .
    # Assuming ?spouse is bound from previous query result
}

# Step 5: Find a royal child of Saw Min Hla
SELECT ?child2 WHERE {
    ?sawMinHla dbo:spouse ?parent2 .
    ?parent2 dbo:child ?child2 .
    ?child2 rdf:type dbo:Monarch .
    FILTER(CONTAINS(LCASE(?sawMinHla), ""saw min hla""))
}

# Step 6: Find the predecessor of this royal child
SELECT ?predecessor2 WHERE {
    ?child2 dbo:successor ?currentRole2 .
    ?predecessor2 dbo:successor ?child2 .
    # Assuming ?child2 is bound from previous query result
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
293,10,train,Give me the person born as Harriette Arlene Lake and party member of Republican Party (United States).,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Harriette Arlene Lake""@en .
  ?person dbo:partyAffiliation dbr:Republican_Party_(United_States) .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
119,46,train,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the residence, that is a country, of Álvaro Quirós.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v4 . ?v2 <http://dbpedia.org/property/leader> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?country 
WHERE {
  ?anxo dbo:office ?office .
  ?office rdf:type dbo:Event .
  FILTER (str(?anxo) = ""Anxo_Quintana"") .

  ?alvaro dbo:residenceCountry ?country .
  FILTER (str(?alvaro) = ""Álvaro_Quirós"") .
}
```",5,7,6,3,2,3,3,71,0,0,2,0,0.0,0
384,1,train,Give me the party of Bruno Retailleau.,SELECT ?result WHERE { <http://dbpedia.org/resource/Bruno_Retailleau> <http://dbpedia.org/ontology/party> ?result . },"```sparql
SELECT ?party WHERE {
  ?person foaf:name ""Bruno Retailleau""@en .
  ?person dbo:party ?party .
}
```",1,1,2,1,1,2,2,9,1,0,0,1.0,1.0,1.0
246,2,train,"Give me the parent, that is a royalty, of Princess Aisha bint Faisal.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Princess_Aisha_bint_Faisal> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?parent ?parentLabel WHERE {
  ?person rdfs:label ""Princess Aisha bint Faisal""@en .
  ?person dbo:parent ?parent .

  OPTIONAL { ?parent dbo:occupation ?occupation . }
  OPTIONAL { ?parent dbp:title ?title . }

  FILTER (CONTAINS(LCASE(?occupation), ""royalty"") || CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen""))
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
295,4,train,Who is the producer of Storm in a Teacup (film)?,SELECT ?result WHERE { <http://dbpedia.org/resource/Storm_in_a_Teacup_(film)> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer WHERE {
  ?film rdfs:label ""Storm in a Teacup""@en .
  ?film dbo:producer ?producer .
  FILTER (lang(?producerLabel) = 'en')
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
159,48,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://dbpedia.org/ontology/commander> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor WHERE {
  # Find wars involving Jean Baptist, Comte d'Arco
  dbr:Jean_Baptiste,_Comte_d%27Arco dbo:militaryConflict ?war .
  
  # Ensure the war is also a television show and societal event
  ?war dbo:wikiPageWikiLink ?tvShow .
  ?tvShow rdf:type dbo:TelevisionSeries .
  ?war dbo:wikiPageWikiLink ?societalEvent .
  ?societalEvent rdf:type dbo:SocietalEvent .

  # Find Michał Kazimierz Pac's military conflict
  dbr:Mikołaj_Kazimierz_Paç dbo:militaryConflict ?militaryConflict .
  
  # Ensure the conflict is an event and a military conflict
  ?militaryConflict rdf:type dbo:Battle .
  ?militaryConflict rdf:type dbo:Event .

  # Find the commander who succeeded Jean Baptist, Comte d'Arco in the war
  ?war dbo:commander ?successor .
  
  # Ensure the successor is both a politician and an office holder
  ?successor rdf:type dbo:Politician .
  ?successor dbo:officeHolder ?office .
}
```",5,11,6,3,2,3,3,71,0,0,1,0,0.0,0
80,49,train,Give me the actor of the movie with  and professional in the alter ego of the series of The Golden Master.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> """"@en . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v0 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Assuming ""The Golden Master"" is a known series or character in DBpedia
  ?series rdfs:label ""The Golden Master""@en .
  
  # Find the professional alter ego within that series
  ?character dbo:alterEgo ?professionalAlterEgo ;
             dbo:partOfSeries ?series .

  # Identify movies featuring actors associated with this alter ego
  ?movie dbo:starring ?actor .
  ?actor dbo:profession ?professionalAlterEgo .
}
```",5,5,6,3,2,3,3,71,0,0,7802,0,0.0,0
756,40,train,"Give me the manager of 2020–21 SBV Vitesse season and native of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://dbpedia.org/ontology/team> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager WHERE {
  # Manager of SBV Vitesse in the 2020-21 season
  ?vitesseSeason a dbo:SoccerLeagueSeason ;
                 dbo:sportTeam dbr:SBV_Vitesse ;
                 dbo:season ""2020–21""^^xsd:string .
  
  ?vitesseSeason dbo:manager ?manager .

  # Manager's nationality is West Germany
  ?manager dbo:nationality dbr:West_Germany .

  # SBV Vitesse as a sports club, organisation, and soccer club
  dbr:SBV_Vitesse a dbo:SoccerClub ;
                 a dbo:SportsOrganization ;
                 a dbo:Organisation .

  # Manager managed a player from VfL Bochum in the 2006-07 season
  ?bochumSeason a dbo:SoccerLeagueSeason ;
                dbo:sportTeam dbr:VfL_Bochum ;
                dbo:season ""2006–07""^^xsd:string .

  ?bochumSeason dbo:player ?player .
  
  ?player dbo:manager ?manager .
}
```",5,11,6,3,3,3,3,71,0,0,1,0,0.0,0
943,19,train,"Give me the reference to  and child of the parent, that is a royalty, of Yeshaq I.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . }","```sparql
# Step 1: Find Yeshaq I's parent who is a royalty
SELECT ?parent ?parentLabel WHERE {
  wd:Q123456 wdt:P22 ?parent . # Yeshaq I has parent (P22)
  ?parent wdt:P31/wdt:P279* wd:Q5 . # Parent is an instance of human (Q5) or subclass thereof
  OPTIONAL { ?parent wdt:P106 wd:Q82955 } # Check if the parent is a royalty (occupation Q82955)
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}

# Step 2: Get reference and child of this royal parent
SELECT ?parent ?child WHERE {
  ?parent wdt:P22 ?child . # Parent has a child (P22)
}
```

Note: Replace `wd:Q123456` with the actual DBpedia URI for Yeshaq I.",3,4,4,2,2,3,3,71,0,0,3,0,0.0,0
668,35,train,Give me the person born as the birth name of Joey B and associated musical artist of the person born as Elorm Kabu Amenyah.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
# Find the person born as Joseph Aning (Joey B)
SELECT ?person WHERE {
  ?person dbo:birthName ""Joseph Aning""@en .
}

# Find Stonebwoy and his associated musical artists
SELECT ?stonebwoy ?artist WHERE {
  ?stonebwoy rdfs:label ""Stonebwoy""@en ;
             dbo:associatedMusicalArtist ?artist .
}

# Check for any shared musical artist between the two individuals
SELECT DISTINCT ?sharedArtist WHERE {
  # Person born as Joseph Aning (Joey B)
  ?joeyB dbo:birthName ""Joseph Aning""@en .
  
  # Stonebwoy's associated artists
  ?stonebwoy rdfs:label ""Stonebwoy""@en ;
             dbo:associatedMusicalArtist ?sharedArtist .

  # Check if Joey B has the same artist as an associated musical artist
  ?joeyB dbo:associatedMusicalArtist ?sharedArtist .
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
361,10,train,Give me the professional in the alter ego of The Shadow.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v0 . },"```sparql
SELECT ?person WHERE {
  ?character dbo:alterEgoOf ?person .
  ?character rdfs:label ""The Shadow""@en .
}
```",2,2,3,2,1,2,3,28,0,0,39640,0,0.0,0
103,36,train,"Give me the actor of Dispatches from Elsewhere and professional in the alter ego of the series, that is a comics character, of The Shadow (video game).",SELECT ?result WHERE { <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . },"```sparql
SELECT ?actor WHERE {
  # Find the actor in ""Dispatches from Elsewhere"" with an alter ego related to comics
  ?series dcterms:title ""Dispatches from Elsewhere""@en .
  ?series dbo:starring ?actor .
  ?character dbo:portrayedBy ?actor ;
             rdfs:label ?characterLabel .
  FILTER(CONTAINS(LCASE(?characterLabel), ""alter ego"") || CONTAINS(LCASE(?characterLabel), ""professional identity"")) .

  # Find the comics character associated with The Shadow video game
  ?game dcterms:title ""The Shadow""@en .
  ?game dbo:basedOn ?comicsCharacter .
  ?comicsCharacter rdfs:label ?comicsCharacterLabel .
  FILTER(CONTAINS(LCASE(?comicsCharacterLabel), ""lamont cranston"") || CONTAINS(LCASE(?comicsCharacterLabel), ""the shadow"")) .

  # Ensure the actor matches both criteria
  VALUES ?actor { ?actor }
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
345,5,train,"Give me the reference to the name of Mitaka, Tokyo.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . <http://dbpedia.org/resource/Mitaka,_Tokyo> <http://xmlns.com/foaf/0.1/name> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?name WHERE {
  ?place a dbo:Municipality ;
        rdfs:label ?name ;
        dbp:prefecture ""Tokyo"" .
  FILTER (lang(?name) = 'en')
}
```",2,2,3,2,1,2,2,9,0,0,1,0,0.0,0
295,14,train,Give me the native of the birth place of the producer of Storm in a Teacup (film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Storm_in_a_Teacup_(film)> <http://dbpedia.org/ontology/producer> ?v2 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?v0 . ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . },"```sparql
# Step 1: Find the producer(s) of the film ""Storm in a Teacup""
SELECT ?producer WHERE {
  ?film dcterms:title ""Storm in a Teacup""@en .
  ?film dbo:productionCompany ?company .
  ?company dbo:employee ?producer .
}

# Assuming we have identified a producer, let's say 'ProducerName'

# Step 2: Find the birthplace of this producer
SELECT ?birthPlace WHERE {
  dbpedia:ProducerName dbo:birthPlace ?birthPlace .
}

# Assuming we have found the birthplace, let's say 'BirthPlaceName'

# Step 3: Identify the native(s) of this birthplace
SELECT ?native WHERE {
  ?native dbo:nativePlace dbpedia:BirthPlaceName .
}
```

Note: Replace `ProducerName` and `BirthPlaceName` with actual values obtained from executing the previous queries.",3,3,4,3,1,3,2,20,0,0,4250,0,0.0,0
398,9,train,"Give me the nickname of the player, that is a soccer club, in Denis Kolodin.",SELECT ?result WHERE { <http://dbpedia.org/resource/Denis_Kolodin> <http://dbpedia.org/ontology/team> ?v0 . ?v0 <http://dbpedia.org/property/nickname> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. },"```sparql
# Step 1: Find the soccer club associated with Denis Kolodin
SELECT ?club WHERE {
  ?kolodin dbo:nationality dbr:Russia ;
           foaf:name ""Denis Kolodin""@en .
  ?kolodin dbo:team ?club .
}

# Step 2: Retrieve the nickname of the identified club (assuming ?club is replaced with the actual URI)
SELECT ?nickname WHERE {
  ?club rdfs:label ?label .
  FILTER(CONTAINS(LCASE(?label), ""soccer club""))
  OPTIONAL { ?club foaf:nick ?nickname }
}
```",2,3,3,2,1,3,2,20,0,0,10,0,0.0,0
89,56,train,"Give me the spouse of Saw Shwe Khet and child of the parent of Min Hla Htut of Pyakaung and predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?finalPerson WHERE {
    # Step 1: Find the spouse of Saw Shwe Khet
    ?sawShweKhet a dbo:Person ;
        foaf:name ""Saw Shwe Khet""@en .
    ?spouse dbo:spouseOf ?sawShweKhet .

    # Step 2: Find Min Hla Htut's parent
    ?minHlaHtut a dbo:Person ;
        foaf:name ""Min Hla Htut""@en ;
        dbo:birthPlace dbr:Pyakaung .
    ?parent dbo:child ?minHlaHtut .

    # Step 3: Find predecessor of the child of Saw Shwe Khet's spouse
    ?spouseChild dbo:childOf ?spouse .
    ?predecessor dbo:succeededBy ?spouseChild .

    # Step 4: Identify royalty related to Saw Min Phyu and their child
    ?sawMinPhyu a dbo:Person ;
        foaf:name ""Saw Min Phyu""@en .
    ?royaltySpouse dbo:spouseOf ?sawMinPhyu ;
        dbo:isRoyalMember true .
    ?royaltyChild dbo:childOf ?royaltySpouse .

    # Step 5: Combine information to find the final person
    ?finalPerson dbo:spouseOf ?parent ;
                 dbo:childOf ?predecessor .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
756,9,train,Give me the native of West Germany and manager of VfL Bochum.,SELECT ?result WHERE { <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:nationality dbr:West_Germany .
  ?person dbo:managerOfTeam dbr:VfL_Bochum .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
293,26,train,"Give me the spouse of the actor of the product, that is a film, of Nat Levine.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/property/starring> ?v2 . ?v1 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Nat Levine and his products that are films
  ?natLevine dbo:birthName ""Nat Levine""@en .
  
  ?product dbo:producer ?natLevine ;
           a dbo:Film .

  # Step 2: Find actors in these films
  ?filmRole dbo:actor ?actor ;
            dbo:workProduct ?product .

  # Step 3: Retrieve spouse information for each actor
  OPTIONAL { ?actor dbo:spouse ?spouse . }
  
  FILTER(?spouse != """")
}
```",3,4,4,3,1,3,3,71,0,0,62,0,0.0,0
89,50,train,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and predecessor of the child of Saw Shwe Khet.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v4 . ?result <http://dbpedia.org/ontology/spouse> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Saw Shwe Khet
  ?sawShweKhet dbo:wikiPageRedirects db:Saw_Shwe_Khet .
  
  # Step 2: Find children of Saw Shwe Khet who are royalty
  ?child dbo:parent ?sawShweKhet ;
         a dbo:RoyalFamilyMember .

  # Step 3: Identify the predecessor (parent) of this royal child
  ?predecessor dbo:child ?child .
  
  # Step 4: Find the spouse of this predecessor who is royalty
  ?predecessor dbo:spouse ?spouse ;
              a dbo:RoyalFamilyMember .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
384,4,train,Give me the party of Guillaume Peltier and party of Bruno Retailleau.,SELECT ?result WHERE { <http://dbpedia.org/resource/Guillaume_Peltier> <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Bruno_Retailleau> <http://dbpedia.org/ontology/party> ?result . },"```sparql
SELECT ?person ?name ?party WHERE {
  VALUES (?person ?name) { 
    (db:Guillaume_Peltier ""Guillaume Peltier"") 
    (db:Bruno_Retailleau ""Bruno Retailleau"")
  }
  ?person foaf:name ?name .
  OPTIONAL { ?person db:politicalParty ?party . }
}
```",2,2,3,1,2,2,2,9,0,0,1,0,0.0,0
39,6,train,Give me the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
SELECT ?alterEgo WHERE {
  ?shadow dbo:wikiPageRedirects db:The_Shadow .
  ?shadow dbo:alterEgo ?alterEgoEntity .
  ?alterEgoEntity rdfs:label ?alterEgo .
  FILTER (lang(?alterEgo) = ""en"")
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
513,3,train,Give me the award of George H. Cameron.,SELECT ?result WHERE { <http://dbpedia.org/resource/George_H._Cameron> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?person dbo:honorificTitle ""George H. Cameron""@en .
  ?person dbo:award ?award .
}
```",1,1,2,1,1,3,2,20,0,0,5,0,0.0,0
39,1,train,Give me the professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
# This is a placeholder query structure for when the profession is specified.
SELECT ?person ?name WHERE {
  ?person dbo:occupation dbr:Category:Medicine. # Example category for Medicine
  ?person foaf:name ?name .
}
```",1,1,2,1,1,3,3,71,0,0,39640,0,0.0,0
419,8,train,"Give me the alma mater of the awardee, that is australian and a scientist, of Australian Laureate Fellowship and entity in Andhra Pradesh.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ""Australian Laureate Fellowship""@en . ?v0 <http://dbpedia.org/ontology/almaMater> ?result . ?result <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Andhra_Pradesh> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Australia>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?scientist ?almaMater WHERE {
  ?scientist a dbo:Scientist ;
             dbo:nationality dbr:Australia ;
             dbo:award dbr:Australian_Laureate_Fellowship .
  
  ?scientist dbo:almaMater ?almaMater .
  
  ?almaMater dbo:location dbr:Andhra_Pradesh .
}
```",3,5,4,2,2,2,2,9,0,0,2,0,0.0,0
203,46,train,"Give me the military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and commander in the war, that is a military conflict and an event, of the figure known as The Triple X's.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v4 . ?v2 <http://dbpedia.org/ontology/battle> ?v1 . ?result <http://dbpedia.org/ontology/battle> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
SELECT ?war1 ?force1 ?commander1 ?war2 ?force2 ?commander2 WHERE {
  # Find the war involving William Bayne
  ?bayne dbo:occupation dbr:Royal_Navy_officer .
  ?bayne foaf:name ""William Bayne"" .
  ?bayne dbo:commanded ?unit1 .
  ?unit1 dbo:partOf ?war1 .
  
  OPTIONAL {
    ?war1 dbo:militaryForce ?force1 .
    ?war1 dbo:commander ?commander1 .
  }
  
  # Find the war involving ""The Triple X's""
  ?tripleXs foaf:name ""The Triple X's"" .
  ?tripleXs dbo:commanded ?unit2 .
  ?unit2 dbo:partOf ?war2 .

  OPTIONAL {
    ?war2 dbo:militaryForce ?force2 .
    ?war2 dbo:commander ?commander2 .
  }
}
```",5,9,6,3,2,3,3,71,0,0,2,0,0.0,0
158,16,train,"Give me the person decedent at Switzerland and native of the administration, that is a country, of Nicholas II of Russia.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?deathPlace ?birthPlace WHERE {
  ?person a dbo:Person ;
          dbo:spouse dbr:Nicholas_II_of_Russia ;
          dbo:placeOfBirth dbr:Russia ;
          dbo:deathPlace dbr:Switzerland .
  
  FILTER (str(?person) = ""Olga_Nikolaevna_of_Russia"")
}
```",3,4,4,2,2,2,3,28,0,0,36,0,0.0,0
943,21,train,"Give me the child of the parent, that is a royalty, of Yeshaq I and father of Baeda Maryam I.",SELECT ?result WHERE { <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?yeshaq dbo:spouse ?parent .
  ?yeshaq dbo:child ?child .
  ?child a dbo:Monarch .
  ?child dbo:child ?baedaMaryamI .
  FILTER(?yeshaq = dbr:Yeshaq_I)
  FILTER(?baedaMaryamI = dbr:Baeda_Maryam_I)
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
943,22,train,"Give me the child of Dawit I and father of the father, that is a royalty and an office holder, of Na'od.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Dawit I's children
  ?child dbo:parent dbr:Dawit_I_of_Ethiopia .
  
  # Na'od's father and grandfather (Dawit I)
  dbr:Amda_Seyon_II dbo:father dbr:Na'od .
  dbr:Dawit_I_of_Ethiopia dbo:child ?child .

  # Check if the person is Dawit I
  FILTER (?person = dbr:Dawit_I_of_Ethiopia)

  # Ensure the person was royalty and an office holder
  ?person a dbo:Monarch .
  OPTIONAL { ?person dbo:officeHolderOf ?office }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
159,36,train,"Give me the successor of Yurii Khmelnytsky and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/ontology/battle> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?war ?tvShow ?event WHERE {
  # Find Tymish Khmelnytsky as successor to Yurii Khmelnytsky
  ?yuriikhmelnytsky dbo:successor ?successor .
  FILTER(STR(?successor) = ""Tymish_Khmelnytsky"")

  # Identify the war associated with them, focusing on Cossacks in Battle of Vienna
  ?cossackForce dbo:commander ?successor ;
                dbo:participatedInWar ?war .
  ?battle dbr:Battle_of_Vienna dbo:involvedMilitaryForce ?cossackForce .

  # Find a television show and societal event related to this context
  OPTIONAL { ?tvShow dbo:subject ?battle . }
  OPTIONAL { ?event dbo:relatedEvent ?battle . }

  FILTER(STR(?war) = ""Battle_of_Vienna"")
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
531,45,train,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and office of Mariano Rajoy and tenant of Madrid.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/leader> ?v1 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v1 <http://dbpedia.org/property/office> ?result . },"```sparql
# Step 1: Find Miguel Maura's Political Party
SELECT ?party WHERE {
  dbr:Miguel_Maura dbo:memberOf ?party .
  ?party a dbo:PoliticalParty .
}

# Step 2: Find the Leader of Miguel Maura's Party
SELECT DISTINCT ?leader WHERE {
  # Assuming we found the party URI from step 1, replace <MiguelMauraPartyURI> with that URI
  <MiguelMauraPartyURI> dbo:leader ?person .
  ?person a dbo:Politician .
  OPTIONAL { ?person foaf:name ?leader . }
}

# Step 3: Find Mariano Rajoy's Office
SELECT DISTINCT ?office WHERE {
  dbr:Mariano_Rajoy dbo:positionHeld ?office .
  ?office a dbo:GovernmentPost .
  OPTIONAL { ?office rdfs:label ?officeLabel . FILTER (lang(?officeLabel) = ""en"") }
}

# Step 4: Find the Tenant of Madrid
SELECT DISTINCT ?tenant WHERE {
  dbr:Madrid dbo:mayor ?person .
  ?person a dbo:Politician .
  OPTIONAL { ?person foaf:name ?tenant . }
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
119,16,train,"Give me the entity in the residence, that is a country, of Dawid Olejniczak and war of the commander in French Revolutionary Wars.",SELECT ?result WHERE { <http://dbpedia.org/resource/Dawid_Olejniczak> <http://dbpedia.org/property/residence> ?v3 . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v3 . <http://dbpedia.org/resource/French_Revolutionary_Wars> <http://dbpedia.org/ontology/commander> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
# Step 1: Find the country of residence for Dawid Olejniczak
SELECT ?country WHERE {
    wd:Q123456 wdt:P19 ?location .
    ?location wdt:P17 ?country .
}

# Step 2: Find wars during the French Revolutionary Wars and their commanders from the identified country
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?war ?commander WHERE {
    ?war a dbo:MilitaryConflict ;
        dbo:dateStart ?dateStart ;
        dbo:dateEnd ?dateEnd .
    
    FILTER (?dateStart >= ""1792-01-01""^^xsd:date && ?dateEnd <= ""1802-12-31""^^xsd:date)
    
    ?commander dbo:countryOfCitizenship ?country ;
              dbo:militaryConflictFought ?war .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia entity ID for Dawid Olejniczak.",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
89,12,train,Give me the spouse of Saw Shwe Khet and predecessor of Myat Hpone Pyo.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
SELECT ?spouse WHERE {
  ?sawShweKhet dbo:spouse ?spouse .
  FILTER EXISTS { ?myatHponePyo dbo:predecessor ?spouse . }
  FILTER EXISTS { ?sawShweKhet foaf:name ""Saw Shwe Khet""@en . }
  FILTER EXISTS { ?myatHponePyo foaf:name ""Myat Hpone Pyo""@en . }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
263,16,train,"Give me the parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne and native of Middlesex.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . ?v2 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?parent WHERE {
  ?claudius a dbo:Person ;
            foaf:name ""Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne""@en .
  
  ?child dbo:spouse ?claudius ;
         dbo:birthPlace ?place .

  FILTER(CONTAINS(LCASE(str(?place)), ""middlesex"") || CONTAINS(LCASE(str(?place)), ""london""))

  ?parent dbo:spouse ?claudius ;
          foaf:name ?name .
  
  FILTER(?child != ?parent)
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
943,4,train,"Who is the parent, that is a royalty, of Yeshaq I?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?parent ?title WHERE {
  ?yeshaqI dbo:wikiPageID ""Yeshaq_I"" .
  ?yeshaqI dbo:parent ?parent .
  OPTIONAL { ?parent dbo:royalTitle ?title . }
  FILTER EXISTS { ?parent dbo:royalTitle ?title }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
293,54,train,"Give me the person born as Harriette Arlene Lake and spouse of the actor of the product, that is a film, of Nat Levine and party member of the ruling party in Central, Louisiana.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v3 . ?result <http://dbpedia.org/ontology/party> ?v3 . ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/starring> ?v5 . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. }","```sparql
# Step 1: Find Harriette Arlene Lake's details
SELECT ?person WHERE {
  ?person foaf:name ""Harriette Arlene Lake""@en .
}

# Step 2: Identify films produced by Nat Levine and their actors
SELECT DISTINCT ?actor WHERE {
  ?film dbo:producer <http://dbpedia.org/resource/Nat_Levine> .
  ?film dbo:starring ?actor .
}

# Step 3: Find Harriette Arlene Lake's spouse who is an actor from Nat Levine's films
SELECT ?spouse WHERE {
  ?person foaf:name ""Harriette Arlene Lake""@en .
  ?person dbo:spouse ?spouse .
  ?spouse rdf:type <http://dbpedia.org/ontology/Actor> .
  ?film dbo:starring ?spouse .
  ?film dbo:producer <http://dbpedia.org/resource/Nat_Levine> .
}

# Step 4: Verify party membership in Central, Louisiana
SELECT ?partyMember WHERE {
  ?person foaf:name ""Harriette Arlene Lake""@en .
  ?person dbo:memberOf ?politicalParty .
  ?politicalParty dbo:location <http://dbpedia.org/resource/Central,_Louisiana> .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
345,7,train,"Give me the region of Japan Standard Time and reference to the name of Mitaka, Tokyo.","SELECT ?result WHERE { <http://dbpedia.org/resource/Mitaka,_Tokyo> <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?region ?mitakaDescription WHERE {
  # Find the region associated with Japan Standard Time
  ?timeZone a dbo:TimeZone ;
            rdfs:label ""Japan Standard Time""@en .
  
  OPTIONAL { 
    ?timeZone dbo:country dbr:Japan .
    ?country dbo:administrativeRegion ?region .
  }
  
  # Get information about Mitaka in Tokyo
  dbr:Mitaka a dbo:PopulatedPlace ;
              dbo:partOf dbr:Tokyo .
  
  OPTIONAL {
    ?mitakaDescription rdfs:label ?label .
    FILTER (lang(?label) = 'en')
  }
}
```",3,3,4,2,2,2,2,9,0,0,1,0,0.0,0
414,15,train,"Give me the award of Max Born and show of the host, that is an educational institution, of the award of Rainer Weiss.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/presenter> ?v1 . <http://dbpedia.org/resource/Max_Born> <http://dbpedia.org/property/awards> ?result . ?result <http://dbpedia.org/ontology/presenter> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. <http://dbpedia.org/resource/Rainer_Weiss> <http://dbpedia.org/property/awards> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bornAward ?weissHostInstitution WHERE {
  # Max Born's award
  dbr:Max_Born dbo:nobelPrizeReceivedBy ?bornAward .

  # Rainer Weiss's award and host institution
  OPTIONAL {
    dbr:Nobel_Prize_in_Physics_2017 dbo:recipient dbr:Rainer_Weiss .
    dbr:Rainer_Weiss dbo:almaMater ?weissHostInstitution .
  }
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
756,44,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of VfL Bochum and native of the administration, that is a country, of Theodor Heuss.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . },"```sparql
# Step 1: Find Thomas Letsch's managed team
SELECT ?team WHERE {
  ?person foaf:name ""Thomas Letsch""@en .
  ?person dbo:managerOf ?team .
  ?team a dbo:SoccerClub .
}

# Step 2: Find the current manager of VfL Bochum
SELECT ?currentManager WHERE {
  ?club foaf:name ""VfL Bochum""@en ;
        dbo:manager ?currentManager .
}

# Step 3: Determine Theodor Heuss's native country
SELECT ?country WHERE {
  ?person foaf:name ""Theodor Heuss""@en .
  ?person dbo:nationality ?nationality .
  ?nationality dbp:countryName ?country .
}

# Step 4: Find a common link (manager) between the teams and Theodor Heuss's country
SELECT DISTINCT ?commonManager WHERE {
  # Thomas Letsch's team manager
  ?team1 dbo:manager ?commonManager .
  
  # VfL Bochum current manager
  ?club2 foaf:name ""VfL Bochum""@en ;
         dbo:manager ?commonManager .

  # Theodor Heuss's country
  ?person dbp:nationality ?nationality .
  ?nationality dbp:countryName ?country .
  
  # Link the manager to the country
  ?commonManager dbo:nationality ?nationality .
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
361,5,train,"Give me the album, that is a film and a work, of Lasso the Moon.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?album WHERE {
  ?album a dbo:Album ;
         dbo:artist dbr:Lasso_the_Moon .
  OPTIONAL { 
    ?film dbo:work ?album .
    FILTER EXISTS { ?film a dbo:Film }
  }
}
```",1,3,2,1,1,2,3,28,0,0,1,0,0.0,0
198,55,train,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and force of the awardee of Gillmore Medal and war of the awardee of Medal of Honor.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v2 . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v5 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/commander> ?v5 . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v2 . },"```sparql
# Query to find Henry Clay Lewis's birthplace
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
  FILTER (lang(?birthPlace) = ""en"")
}

# Query to find the Gillmore Medal awardee and their force
SELECT ?awardee ?force WHERE {
  ?gillmoreMedalAward wdt:P31/wdt:P279* wd:Q1234567 ; # Assuming Q1234567 is the Gillmore Medal class
    wdt:P921 ?awardee .
  OPTIONAL { ?awardee wdt:P39 ?force . }
}

# Query to find the Medal of Honor awardee and their war
SELECT ?medalOfHonorAwardee ?war WHERE {
  ?medalOfHonorAward wdt:P31/wdt:P279* wd:Q1234568 ; # Assuming Q1234568 is the Medal of Honor class
    wdt:P921 ?medalOfHonorAwardee .
  OPTIONAL { ?medalOfHonorAwardee wdt:P506 ?war . }
}

# Query to find common entity between birthplace, force, and war
SELECT DISTINCT ?commonEntity WHERE {
  VALUES (?entity1) { (<birthPlaceURI> <forceURI> <warURI>) } # Replace with actual URIs from previous queries
  ?commonEntity wdt:P31 wd:Q515 ; # Assuming Q515 is the class for settlements
    rdfs:label ?label .
  FILTER (lang(?label) = ""en"")
}
```

Note: The above SPARQL queries assume certain Wikidata item IDs (`wd:Q123456`, `wd:Q1234567`, `wd:Q1234568`) which need to be replaced with the actual IDs for Henry Clay Lewis, Gillmore Medal, and Medal of Honor. Additionally, `<birthPlaceURI>`, `<forceURI>`, and `<warURI>` should be replaced with the URIs obtained from the first two queries.",6,8,7,2,3,3,3,71,0,0,1,0,0.0,0
668,23,train,Give me the associated musical artist of the person born as the birth name of $pacely.,SELECT ?result WHERE { <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v2 . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/property/birthName> ?v2 . },"```sparql
SELECT ?artist WHERE {
  wd:Q32958 foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""tupac shakur"") || CONTAINS(LCASE(?name), ""2pac""))
}
```",3,3,4,3,1,3,3,71,0,0,7,0,0.0,0
119,26,train,"Give me the tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/residence> ?v2 . ?v1 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v1 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person ?countryResidence WHERE {
  ?person dbo:nationality dbr:Spain .
  ?person dbo:residence ?residence .
  ?residence a dbo:Country .
  BIND(str(?residence) AS ?countryResidence)
}
```",3,5,4,3,1,3,3,71,0,13,1184,0.0,0.0,0
87,19,train,"Give me the spouse of Janusz Kamiński and actor of Always (1989 film) and actor of the movie, that is a work and a film, with Iliza Shlesinger.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
# Find the spouse of Janusz Kamiński
SELECT ?spouse WHERE {
  wd:Q123456 wdt:P26 ?spouse .
}

# Find actors in ""Always"" (1989 film)
SELECT DISTINCT ?actor WHERE {
  wd:Q789012 dbo:starring ?actor .
}

# Find movies that are both works and films with Iliza Shlesinger
SELECT DISTINCT ?movie ?actor WHERE {
  ?movie wdt:P31/wdt:P279* wd:Q11424 ; # Ensure it's a film
         wdt:P50 wd:Q1234567 . # Iliza Shlesinger acted in this movie
  ?movie dbo:starring ?actor .
}

# Combine results to find common individuals
SELECT DISTINCT ?commonIndividual WHERE {
  VALUES ?individual1 { ?spouse }
  VALUES ?individual2 { ?actor }
  VALUES ?individual3 { ?actor }

  FILTER (?individual1 = ?individual2 || ?individual1 = ?individual3 || ?individual2 = ?individual3)
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Janusz Kamiński and `wd:Q789012` with the DBpedia ID for ""Always"" (1989 film). Similarly, replace `wd:Q1234567` with Iliza Shlesinger's DBpedia ID.",4,6,5,2,3,2,3,28,0,0,1,0,0.0,0
80,26,train,"Give me the actor of the album of the work, that is a song and a musical work, of T.I..",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v1 <http://dbpedia.org/ontology/album> ?v2 . },"```sparql
SELECT ?album ?actor WHERE {
  ?song dcterms:title ""Whatever You Like"" ;
        dbo:artist <http://dbpedia.org/resource/T.I.> .
  
  ?song dbo:release <http://dbpedia.org/resource/Paper_Trail_(T.I._album)> .

  ?album dbo:artist <http://dbpedia.org/resource/T.I.> ;
         dbo:releaseDate ?date ;
         rdfs:label ?albumLabel .

  OPTIONAL {
    ?album dbo:featuredArtist ?actor .
  }

  FILTER (lang(?albumLabel) = 'en')
}
```",3,5,4,3,1,3,3,71,0,0,10,0,0.0,0
375,12,train,Give me the entity in Japan and war of Hashiba Hidekatsu and war of Toyotomi Hidenaga.,SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name ?war WHERE {
  VALUES (?person ?name) {
    (dbr:Hashiba_Hidekatsu ""Hashiba Hidekatsu"")
    (dbr:Toyotomi_Hidenaga ""Toyotomi Hidenaga"")
  }
  
  ?person dbo:name ?name .
  OPTIONAL { 
    ?person dbo:participatedIn ?war .
    FILTER EXISTS { ?war a dbo:MilitaryConflict } # Ensuring it's a military conflict
  }
}
```",3,3,4,1,3,2,3,28,0,0,2,0,0.0,0
628,39,train,"Give me the person born as Ackquille Jean Pollard and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?birthPlace ?band WHERE {
  # Identify the person known as 2 Chainz
  ?person rdfs:label ""2 Chainz""@en .
  ?person dbo:birthName ""Ackquille Jean Pollard"" .

  # Find the birthplace of 2 Chainz
  ?person dbo:birthPlace ?birthPlace .

  # Ensure the birthplace is a region/state and settlement in America
  ?birthPlace rdf:type dbo:StateOrTerritory .
  ?birthPlace rdf:type dbo:Settlement .
  ?birthPlace dbo:country dbr:United_States .

  # Identify an award-winning band from New York (state)
  ?band dbo:location dbr:New_York_(state) .
  ?band dbo:award ?award .
  
  FILTER regex(?award, ""Grammy"", ""i"") # Assuming the award is a Grammy for relevance
}
```",4,9,5,3,2,3,3,71,0,0,1,0,0.0,0
628,50,train,"Give me the person born as the birth name of the native, that is a musical artist, of Florida and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://dbpedia.org/property/birthName> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/property/birthName> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?birthName WHERE {
  ?person dbo:nationality dbr:United_States ;
          dbo:birthPlace dbr:Florida ;
          a dbo:MusicalArtist .
  
  OPTIONAL { ?person foaf:name ?birthName . }
  
  ?award dbo:recipient ?person ;
         dbo:location dbr:Puerto_Rico .

  FILTER EXISTS {
    ?choir dbo:location dbr:Puerto_Rico ;
           dbo:award ?award .
    ?choir rdfs:label ""Coro de la Pontificia Universidad Católica de Puerto Rico""@en .
  }
}
```",5,10,6,3,2,3,3,71,0,0,59,0,0.0,0
311,9,train,"Who is the associated musical artist, that is an artist, of the producer, that is an organisation and a band and a group, of Lotus (R.E.M. song)?",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/Lotus_(R.E.M._song)> <http://dbpedia.org/ontology/producer> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?artist WHERE {
  # Step 1: Find the producer of the song ""Lotus"" by R.E.M.
  dbr:Lotus_(R.E.M._song) dbo:producer ?producer .

  # Step 2: Check if the producer is part of any organization, band, or group
  OPTIONAL { ?producer dbo:member ?bandGroup . }
  OPTIONAL { ?producer dbo:organization ?org . }

  # Step 3: Find associated musical artists with the band/group or organization
  OPTIONAL {
    ?bandGroup dbo:member ?artist .
    FILTER(?artist != ?producer)
  }
  
  OPTIONAL {
    ?org dbo:member ?artist .
    FILTER(?artist != ?producer)
  }

  # Return the artist if found
  VALUES ?artist { ?artist }
}
```",2,6,3,2,1,3,2,20,0,0,2,0,0.0,0
595,23,train,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://dbpedia.org/property/author> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  # Identify books written by Hillary Clinton
  ?book dbo:author dbr:Hillary_Clinton .
  ?book a dbo:Book .

  # Find the spouse of Hillary Clinton who is also a politician and an office holder
  dbr:Hillary_Clinton dbo:spouse ?spouse .
  ?spouse a dbo:Politician ;
         dbo:officeHolder ?office .
}
```",3,7,4,3,1,3,3,71,0,0,1,0,0.0,0
943,56,train,"Give me the reference to  and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and child of the parent, that is a royalty, of Yeshaq I.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> """"@en . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?ancestor WHERE {
  # Baeda Maryam I's children
  ?baedaChild dbo:parent dbr:Baeda_Maryam_I .
  
  # Yeshaq I's parent who is royalty
  ?yeshaqParent dbo:child dbr:Yeshaq_I ;
                a dbo:Monarch .

  # Yeshaq I's child
  ?yeshaqChild dbo:parent ?yeshaqParent .

  # Common child between Baeda Maryam I and Yeshaq I
  VALUES (?commonChild) { ?baedaChild ?yeshaqChild }

  # Father of the common child (X)
  ?x dbo:child ?commonChild ;
     a dbo:Monarch .

  # X's father who is royalty and an office holder
  ?ancestor dbo:child ?x .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
78,5,train,Give me the associated musical artist of David Paton.,SELECT ?result WHERE { <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?band WHERE {
  ?person foaf:name ""David Paton""@en .
  ?person dbo:musicalArtist ?band .
}
```",1,1,2,1,1,2,3,28,0,0,5,0,0.0,0
143,15,train,"Give me the actor of the show, that is a movie, with the reference to Afeez Oyetoro and associated musical artist of Cynthia Morgan.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""Afeez Oyetoro""@en . ?v1 <http://dbpedia.org/ontology/starring> ?v0 . <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://dbpedia.org/property/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  # Find movies/shows associated with Afeez Oyetoro
  ?movie dbo:starring dbr:Afeez_Oyetoro .
  
  # Find the musical artist associated with Cynthia Morgan
  ?artist dbo:associatedBandMember dbr:Cynthia_Morgan .

  # Find actors common to both entities
  ?actor dbo:starring ?movie ;
         dbo:associatedBandMember ?artist .
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
263,12,train,"Give me the parent of Mary Elphinstone, Lady Elphinstone and native of Middlesex and parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?person a dbo:Person ;
          foaf:name ""Mary Elphinstone, Lady Elphinstone""@en .
  ?person dbo:parent ?parent .
  FILTER EXISTS { ?parent dbo:gender dbo:Male }
}
```",3,3,4,1,3,2,3,28,0,0,2,0,0.0,0
293,53,train,Give me the person born as the birth name of Ann Sothern and party member of the ruling party in the landmark at elevation of 20.116800000000001347 and spouse of Roger Pryor (actor).,"SELECT ?result WHERE { <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/ontology/party> ?v2 . ?v3 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?v3 <http://dbpedia.org/property/leaderParty> ?v2 . }","```sparql
# Step 1: Get Ann Sothern's birth name
SELECT ?birthName WHERE {
  dbpedia:Ann_Sothern dbo:birthName ?birthName .
}

# Step 2: Find a landmark with elevation around 20.1168 meters and its ruling party
SELECT DISTINCT ?landmark ?country ?rulingParty WHERE {
  ?landmark dbo:elevation ?elevation .
  FILTER(?elevation >= 20.1 && ?elevation <= 20.13) # Approximate range for elevation
  ?landmark dbo:locationCountry ?country .
  ?country dbo:rulingParty ?rulingParty .
}

# Step 3: Find Roger Pryor's spouse
SELECT DISTINCT ?spouse WHERE {
  dbpedia:Roger_Pryor_(actor) dbo:spouse ?spouse .
}

# Final Query: Combine all conditions
SELECT DISTINCT ?person WHERE {
  # Ann Sothern's birth name
  dbpedia:Ann_Sothern dbo:birthName ?birthName .

  # Landmark and ruling party
  ?landmark dbo:elevation ?elevation .
  FILTER(?elevation >= 20.1 && ?elevation <= 20.13)
  ?landmark dbo:locationCountry ?country .
  ?country dbo:rulingParty ?rulingParty .

  # Roger Pryor's spouse
  dbpedia:Roger_Pryor_(actor) dbo:spouse ?person .

  # Person born with Ann Sothern's birth name and member of the ruling party
  ?person foaf:name ?birthName .
  ?person dbo:memberOf ?rulingParty .
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
198,27,train,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/place> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthPlaceEntity WHERE {
  ?person dbo:dateOfDeath ?deathDate .
  FILTER (STR(?deathDate) = ""1850-08-05""^^xsd:date)
  
  ?person dbo:placeOfBirth ?birthPlace .
  ?birthPlace a dbo:Settlement ;
             dbp:country dbr:United_States_of_America .

  BIND(?birthPlace AS ?birthPlaceEntity)
}
```",3,5,4,3,1,3,3,71,0,0,12,0,0.0,0
270,7,train,"Give me the predecessor of the person born, that is a politician, as Ada Jane Low and person decedent at Melbourne.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/birthName> ""Ada Jane Low""@en . ?result <http://dbpedia.org/ontology/successor> ?v0 . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Melbourne> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?predecessor WHERE {
  ?person a dbo:Politician ;
          foaf:name ""Ada Jane Low""@en ;
          dbo:birthName ""Ada Jane Low"" ;
          dbo:deathPlace dbr:Melbourne .

  OPTIONAL { 
    ?position dbo:officeHolder ?person .
    ?position dbo:predecessor ?predecessor .
  }
}
```",3,4,4,2,2,2,2,9,0,0,1,0,0.0,0
737,44,train,"Give me the child of the child, that is a royalty, of Archduke Charles Louis of Austria and predecessor of Carl, Duke of Württemberg and child of the child of Duke Philipp of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v4 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find children of Archduke Charles Louis of Austria
  ?child1 dbo:parent dbr:Archduke_Charles_Louis_of_Austria .
  
  # Find grandchildren (children of the above children)
  ?grandchild dbo:parent ?child1 .

  # Check if this grandchild is royalty and predecessor to Carl, Duke of Württemberg
  ?grandchild a dbo:Monarch ;
              dbo:predecessor dbr:C._Duke_of_W%C3%BCrttemberg .
  
  # Ensure the person is also a descendant of Duke Philipp of Württemberg
  ?descendant dbo:parent ?ancestor .
  ?ancestor dbo:parent dbr:Duke_Philipp_of_W%C3%BCrttemberg .
  FILTER(?grandchild = ?descendant)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
595,29,train,"Give me the spouse of Hillary Clinton and commander in Third Taiwan Strait Crisis and author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/property/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?spouse ?book WHERE {
  # Find the spouse of Hillary Clinton
  VALUES ?hillary { dbr:Hillary_Clinton }
  ?hillary dbo:spouse ?spouse .
  
  # Ensure the spouse is Bill Clinton
  FILTER(?spouse = dbr:Bill_Clinton)
  
  # Find a book authored by Bill Clinton
  ?book dbo:author ?billClinton .
  FILTER(?billClinton = dbr:Bill_Clinton)
}
```",4,7,5,2,3,3,3,71,1,7,0,0.125,1.0,0.2222222222222222
557,60,train,"Give me the professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/alterEgo> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v3 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
# Step 1: Find Chris Isaak's famous movie work
SELECT ?movie WHERE {
  wd:Q12345 dbo:starring wd:Q67890 .
  ?movie dbo:title ""Bacharach & David: The Story Behind the Music""@en .
}

# Step 2: Identify Kent Allard's fictional character and alter ego
SELECT ?character ?alterEgo WHERE {
  ?author foaf:name ""Kent Allard"" .
  ?author dbo:created ?character .
  ?character dbo:alterEgo ?alterEgo .
}

# Step 3: Find the professional of the alter ego
SELECT ?profession WHERE {
  ?alterEgo dbo:occupation ?profession .
}
```

Note: The above SPARQL queries assume that DBpedia has structured data for these entities. You may need to adjust entity identifiers (like `wd:Q12345` and `wd:Q67890`) based on actual DBpedia entries.",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
905,15,train,"Give me the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  # Identify Philip, Despot of Romania
  ?philip a dbo:Person ;
          foaf:name ""Philip, Despot of Romania""@en .
  
  # Find his mother, Princess Margareta of Romania
  ?mother dbo:spouse ?philip ;
          foaf:name ""Margareta of Romania""@en .

  # Retrieve her father, King Michael I of Romania
  ?mother dbo:childOf ?father .
  ?father foaf:name ""Michael I of Romania""@en .
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
782,28,train,Give me the reference to the real name of The Fabulous Thunderbirds and associated musical artist of Nick Curran and band of Kim Wilson.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v1 . },"```sparql
# Query to get the real name of The Fabulous Thunderbirds
SELECT ?realName WHERE {
  ?band foaf:name ""The Fabulous Thunderbirds""@en .
  OPTIONAL { ?band dbo:officialName ?realName . }
}

# Query to find the associated musical artist of Nick Curran
SELECT DISTINCT ?artist WHERE {
  ?person foaf:name ""Nick Curran""@en .
  ?person dbo:musicalArtist ?artist .
}

# Query to find the band that Kim Wilson is part of
SELECT DISTINCT ?band WHERE {
  ?person foaf:name ""Kim Wilson""@en .
  ?person dbo:band ?band .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
871,45,train,"Give me the parent of Victor Stanley (Royal Navy officer) and father of the child, that is a politician, of the alumnus of Eton College and parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v4 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?parent WHERE {
  ?victor foaf:name ""Victor Stanley""@en .
  ?victor dbo:spouse ?spouse .
  ?spouse dbo:child ?edward17 .

  ?edward17 dbo:parent ?parent .
  
  ?alumnus dbo:almaMater dbr:Eton_College ;
           dbo:child ?politicianChild .
  
  ?politicianChild dbo:parent ?parent .
  
  FILTER(?victor = ?edward17)
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
943,31,train,"Give me the reference to  and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v0 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v2 <http://dbpedia.org/ontology/parent> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?parent ?child WHERE {
  # Find the Siege of Mukha event
  ?siege a dbo:MilitaryConflict ;
         rdfs:label ""Siege of Mukha""@en .
  
  # Identify the commander who is royalty
  ?siege dbo:commander ?commander .
  ?commander rdf:type dbo:Monarch .

  # Find parent (ancestor) of the commander
  ?parent dbo:child ?commander .

  # Find child (descendant) of the commander
  ?commander dbo:child ?child .
}
```",4,6,5,3,2,3,3,71,0,0,3,0,0.0,0
419,5,train,Give me the entity in the birthplace of Yandamuri Veerendranath.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yandamuri_Veerendranath> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/state> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?birthplaceEntity ?birthplaceLabel WHERE {
  ?person a foaf:Person ;
          foaf:name ""Yandamuri Veerendranath""@en .
  ?person dbo:birthPlace ?birthplaceEntity .
  ?birthplaceEntity rdfs:label ?birthplaceLabel .
  FILTER (lang(?birthplaceLabel) = 'en')
}
```",2,2,3,2,1,2,2,9,0,6,166,0.0,0.0,0
103,23,train,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> ?result . ?v2 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v0 <http://dbpedia.org/property/starring> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
SELECT ?actor WHERE {
  ?person foaf:name ""John Cleese""@en .
  ?person dbo:birthName ""Richard Grant Esterhuysen"" .
  
  ?tvShow dbo:starring ?person ;
          rdf:type dbo:TelevisionSeries .

  ?movie dbo:basedOnWork ?tvShow ;
         rdf:type dbo:Film .

  ?actor dbo:starring ?movie .
}
```",3,4,4,3,1,3,3,71,0,0,53,0,0.0,0
816,41,train,"Give me the parent of Doon Arbus and actor of the movie, that is a work, with Herschel Bernardi and parent of the professional in Photographer.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/property/occupation> ""Photographer""@en . ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?result <http://dbpedia.org/ontology/child> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor WHERE {
  # Find Doon Arbus's parent
  ?doonArbus dbo:parent ?parentDoonArbus .
  VALUES ?doonArbus { <http://dbpedia.org/resource/Doon_Arbus> } .

  # Find a movie with Herschel Bernardi as an actor
  ?movie dbo:actor ?herSchelBernardi .
  VALUES ?herSchelBernardi { <http://dbpedia.org/resource/Herschel_Bernardi> } .

  # Find the parent of a professional photographer
  ?photographer dbo:profession dbp:Photography ;
                dbo:parent ?parentPhotographer .

  # Combine to find the actor who is also Doon Arbus's parent and the parent of a photographer
  ?actor dbo:actor ?movie .
  FILTER (?actor = ?parentDoonArbus && ?actor = ?parentPhotographer)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
293,0,train,Give me the party member of Republican Party (United States).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?party rdfs:label ""Republican Party (United States)""@en .
  ?party dbo:member ?person .
  ?person foaf:name ?name .
}
```",1,1,2,1,1,3,3,71,0,0,21486,0,0.0,0
198,19,train,Give me the war of the awardee of Medal of Honor and force of Quincy Adams Gillmore.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?v0 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . },"```sparql
SELECT DISTINCT ?war WHERE {
  ?gillmore dbo:rank dbr:Brigadier_general_(United_States);
            dbo:military_unit dbr:Union_Army.
  ?medalOfHonorAwarded dbo:recipient ?recipient;
                       dbo:awarder dbr:United_States_Military.
  ?recipient dbo:serviceInWar ?war.
  FILTER EXISTS { ?gillmore dbo:servedIn ?war }
}
```",3,3,4,2,2,3,3,71,0,0,3,0,0.0,0
585,14,train,Give me the child of the professional in the profession of Shirley Stoler.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/occupation> ?v2 . ?v0 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Shirley_Stoler> <http://dbpedia.org/property/occupation> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?profession ?childName WHERE {
  ?shirleyStoler a dbo:Person ;
                 foaf:name ""Shirley Stoler""@en ;
                 dbo:occupation ?profession .
  
  OPTIONAL {
    ?shirleyStoler dbo:child ?child .
    ?child foaf:name ?childName .
  }
}
```",3,3,4,3,1,3,2,20,0,1,935,0.0,0.0,0
353,54,train,"Give me the child of Elvira of Castile, Queen of Sicily and child of the parent of Roger III, Duke of Apulia and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v5 <http://dbpedia.org/property/father> ?v0 . }","```sparql
SELECT ?child WHERE {
  # Find Roger III, Duke of Apulia
  ?roger3 a dbo:Duke ;
          foaf:name ""Roger III"" ;
          dbo:spouse ?elvira .
  
  # Find Elvira's parent (which is also Roger III's parent)
  ?parent dbo:child ?roger3 .

  # Find the child of Elvira
  ?elvira a dbo:Queen ;
          foaf:name ""Elvira of Castile"" ;
          dbo:spouse ?roger3 .
  
  ?elvira dbo:child ?child .

  # Ensure this child is also connected to William I as royalty and office holder
  ?child a dbo:Monarch ;
         dbo:officeHolder ?office ;
         dbo:parent ?william1 .

  ?william1 foaf:name ""William I"" .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
472,22,train,"Give me the territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen and administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/capital> ?v2 . <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v2 . ?result <http://dbpedia.org/property/leader> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?deathPlace ?administeredTerritory1 ?birthPerson ?administeredTerritory2 WHERE {
  # Find the death place of Christian Ditlev Ammentorp Hansen that is a settlement
  dbr:Christian_Ditlev_Ammertorp_Hansen dbo:deathPlace ?deathPlace .
  ?deathPlace rdf:type dbo:Settlement .

  # Determine which territory administers from this settlement
  ?administeredTerritory1 dbo:administrativeCenter ?deathPlace .

  # Find Prince Christian of Schleswig-Holstein-Sonderburg-Beck's birth information and verify royalty status
  dbr:Prince_Christian_of_Schleswig-Holstein-Sonderburg-Beck dbo:birthPlace ?birthPlace .
  ?birthPerson dbo:birthPlace ?birthPlace ;
              rdf:type dbo:Monarch .

  # Identify the territory he administered
  ?administeredTerritory2 dbo:monarch ?birthPerson .
}
```",4,6,5,2,2,2,3,28,0,0,1,0,0.0,0
472,4,train,"Who is the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck?","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?person ?birthDate WHERE {
  ?person rdfs:label ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en .
  OPTIONAL { ?person dbo:birthDate ?birthDate . }
  FILTER (LANG(?person) = 'en')
}
```",1,2,2,1,1,2,3,28,0,0,1,0,0.0,0
119,61,train,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v5 . ?v0 <http://dbpedia.org/property/residence> ?v5 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v3 <http://dbpedia.org/property/leaderParty> ?v1 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?headOfGovernment ?residence WHERE {
  # Find the PSOE entity
  ?psoe a dbo:PoliticalParty ;
        rdfs:label ""Spanish Socialist Workers' Party""@en .
  
  # Find the administration led by PSOE
  ?administration dbo:minister ?minister .
  ?minister dbo:party ?psoe .

  # Identify the head of government (tenant) from that administration
  ?headOfGovernment dbo:position ?position ;
                   dbp:residence ?residence .
  FILTER(CONTAINS(LCASE(?position), ""prime minister"") || CONTAINS(LCASE(?position), ""president""))

  # Ensure the residence is a country and check citizenship
  ?residence a dbo:Country .
  ?headOfGovernment dbo:nationality dbr:Spain .

}
```",6,9,7,3,2,3,3,71,0,0,23,0,0.0,0
941,5,train,Who is the spouse of Duchess Luise of Brunswick-Wolfenbüttel?,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Duchess_Luise_of_Brunswick-Wolfenbüttel> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  ?person a dbo:Duchess ;
          foaf:name ""Luise of Brunswick-Wolfenbüttel""@en .
  OPTIONAL { ?person dbo:spouse ?spouse . }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
492,18,train,Give me the death place of Carolyn Jones and death place of the actor of Aladdin (1958 film).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v0 . },"```sparql
# Query to find the death place of Carolyn Jones
SELECT ?deathPlace WHERE {
  dbpedia:Carolyn_Jones dbo:deathPlace ?deathPlace .
}

UNION

# Query to find the actor who played Aladdin in the 1958 film and their death place
{
  # Find the actor for Aladdin role
  SELECT ?actor WHERE {
    dbpedia:The_Story_of_Robin_Hood_and_His_Merrie_Men dbo:castMember ?role .
    ?role rdfs:label ""Aladdin""@en .
    ?role dbo:agent ?actor .
  }

  # Find the death place of this actor
  SELECT ?deathPlace WHERE {
    ?actor dbo:deathPlace ?deathPlace .
  }
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
297,8,train,Give me the institution in the administration of Brian Kemp and entity in United States.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . ?v1 <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Brian_Kemp> . ?result <http://dbpedia.org/ontology/state> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?institution ?entityInUS WHERE {
  # Find institution related to Brian Kemp's administration
  ?person dbo:officeHolder ?position .
  ?position dbo:department ?institution .
  ?person foaf:name ""Brian Kemp"" .

  FILTER regex(str(?institution), ""Georgia"", ""i"")

  # Find an entity in the United States
  ?entityInUS dbo:country dbr:United_States .
  ?entityInUS rdfs:label ?label .
  
  FILTER (langMatches(lang(?label), ""en"") && contains(lcase(str(?label)), ""new york city""))
}
```",3,3,4,2,2,2,2,9,0,0,346,0,0.0,0
756,7,train,"Give me the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?result <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:birthDate ?date .
  FILTER (YEAR(?date) = 1968 && MONTH(?date) = 8 && DAY(?date) = 26)
  ?person dbo:occupation dbr:Sports_manager .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,2,2,1,1,3,3,71,0,0,2,0,0.0,0
89,10,train,Give me the child of Saw Min Hla and predecessor of Myat Hpone Pyo.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . },"```sparql
SELECT ?person WHERE {
  ?child dbo:parent dbr:Saw_Min_Hla .
  ?child rdfs:label ?nameChild .
  
  OPTIONAL { 
    ?predecessor dbo:succeededBy dbr:Myat_Hpone_Pyo .
    ?predecessor rdfs:label ?namePredecessor .
    
    FILTER(?child = ?predecessor)
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
213,5,train,Give me the work of Lao She.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Lao_She> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  dbr:Lao_She dbo:work ?work .
}
```",1,1,2,1,1,3,2,20,0,0,8,0,0.0,0
531,54,train,"Give me the office of Miguel Maura and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and tenant of the residence of Alberto Ruiz-Gallardón.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v0 <http://dbpedia.org/ontology/commander> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/headquarter> ?v3 . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?miguelOffice ?commanderOffice ?conflict ?event WHERE {
  # Miguel Maura's office
  dbr:Miguel_Maura dbo:office ?miguelOffice .

  # Commander who is an office holder and politician
  ?commander a dbo:Politician ;
            dbo:office ?commanderOffice .
  
  # Military conflict involving Manuel Pinto da Costa
  dbr:Manuel_Pinto_da_Costa dbo:participatedInMilitaryConflict ?conflict .

  # Societal event related to Alberto Ruiz-Gallardón as tenant of a residence
  dbr:Alberto_Ruiz-Gallardón dbo:residence ?residence .
  ?event dbo:location ?residence ;
         rdf:type dbo:SocietalEvent .

  # Ensure the conflict is also a societal event
  ?conflict rdf:type dbo:SocietalEvent .
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
943,26,train,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?v2 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?result <http://xmlns.com/foaf/0.1/name> ?v0 . ?v2 <http://dbpedia.org/property/alterEgo> ?v0 . }","```sparql
SELECT ?shadow WHERE {
  ?person rdfs:label ""Lamont Cranston""@en .
  ?person dbo:alterEgo ?shadow .
  ?shadow rdfs:label ?shadowLabel .
  FILTER (CONTAINS(LCASE(?shadowLabel), ""the shadow""))
}
```",3,3,4,3,1,3,3,71,0,0,98447,0,0.0,0
492,7,train,Give me the death place of Reed Howes and death place of Sal Mineo.,SELECT ?result WHERE { <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
SELECT ?person ?name ?deathPlace WHERE {
  VALUES (?person ?name) { 
    (dbpedia:Reed_Howes ""Reed Howes"") 
    (dbpedia:Sal_Mineo ""Sal Mineo"")
  }
  ?person dbo:name ?name .
  OPTIONAL { ?person dbo:deathPlace ?deathPlace . }
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
119,42,train,"Give me the tenant of Spain and office of the leader of 2009 Galician regional election and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v2 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v2 . ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?capitalCity ?officeTitle ?partyHeadquarters WHERE {
  # Capital city of Spain
  dbr:Spain dbo:capital dbr:Madrid .
  dbr:Madrid rdfs:label ?capitalCity .

  # Office title in the 2009 Galician regional election
  dbr:Xunta_de_Galicia dbo:head dbr:Emilio_Perez_Torres ;
                      dbo:officeTitle ?officeTitle .

  # Headquarters of Spanish Socialist Workers' Party (PSOE)
  dbr:Spanish_Socialist_Workers'_Party dbo:headquartersLocation dbr:Madrid .
  dbr:Madrid rdfs:label ?partyHeadquarters .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
609,17,train,"Who is the author of the reference, that is American, to El Deafo?","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/author> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?authorName WHERE {
  ?book dbo:title ""El Deafo""@en .
  ?book dbo:author ?author .
  ?author foaf:name ?authorName .
  ?author dbo:nationality dbr:United_States .
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
347,17,train,"Give me the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574).",SELECT ?result WHERE { <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?child ?father WHERE {
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria""@en ;
             dbo:birthDate ?birthDate .
  FILTER(YEAR(?birthDate) = 1574)
  
  ?mariaAnna dbo:child ?child .

  OPTIONAL { ?child dbo:royalTitle ?title . }
  
  ?child dbo:father ?father .
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
585,12,train,Give me the child of the professional in Actress and native of New York (state).,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_(state)> . ?v0 <http://dbpedia.org/property/occupation> ""Actress""@en . ?v0 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?person dbo:nationality dbr:United_States ;
          dbo:birthPlace dbr:Summit_(New_Jersey) ; # Meryl Streep's birthplace
          rdfs:label ""Meryl Streep""@en .
  
  OPTIONAL { 
    ?person dbo:child ?child .
  }
}
```",3,3,4,2,2,3,2,20,0,0,9,0,0.0,0
414,0,train,Give me the show of Royal Swedish Academy of Sciences.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Royal_Swedish_Academy_of_Sciences> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  dbr:Royal_Swedish_Academy_of_Sciences 
    dbo:wikiPageWikiLink ?show .
}
```",1,1,2,1,1,3,2,20,5,99,6,0.04807692307692308,0.45454545454545453,0.08695652173913043
398,17,train,Give me the player in the writer of the work of Aleksandr Filimonov and figure known as Наши парни / Nashi parni.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Aleksandr_Filimonov> . ?v3 <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/property/nickname> ""Наши парни / Nashi parni""@en . ?v0 <http://dbpedia.org/property/writer> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?writer WHERE {
  # Find Aleksandr Filimonov's resource
  VALUES ?filimonov { dbr:Aleksandr_Filimonov }

  # Get works associated with him
  ?filimonov dbo:creator ?work .

  # Filter by work title ""Наши парни"" or ""Nashi parni""
  FILTER (
    (CONTAINS(LCASE(?work), 'nashi parni') || CONTAINS(LCASE(?work), 'наши парни'))
  )

  # Find the writer of this work
  ?work dbo:creator ?writer .
}
```",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
39,19,train,Give me the professional in the profession of Sam Concepcion and professional in .,"SELECT ?result WHERE { <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/property/occupation> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person WHERE {
  # Find Sam Concepcion's profession
  ?sam a dbo:Person ;
       foaf:name ""Sam Concepcion""@en .
  
  ?sam dbo:occupation ?occupation .

  # Find other professionals with the same occupation
  ?person a dbo:Person ;
          dbo:occupation ?occupation .
  
  FILTER(?person != ?sam) # Exclude Sam Concepcion from results
}
```",3,3,4,2,2,3,3,71,31,58,39609,0.34831460674157305,0.0007820383451059536,0.0015605728812706082
347,21,train,"Give me the child of Ferdinand II, Holy Roman Emperor and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . }","```sparql
# This query is hypothetical and unlikely to return results due to the abstract nature of the question.
SELECT ?child WHERE {
  ?emperor rdf:type dbo:HolyRomanEmperor .
  ?emperor foaf:name ""Ferdinand II, Holy Roman Emperor"" .
  
  ?emperor dbo:spouse ?mother .
  ?mother dbo:child ?child .

  ?child dbo:occupation dbr:Military_Commander .
  
  # Hypothetical properties for societal event and television show
  ?event1 rdfs:label ?childLabel .
  ?event2 rdfs:label ?childLabel .
  ?tvShow rdfs:label ?childLabel .

  ?commander dbo:militaryUnit dbr:2nd_Dragoon_Regiment_(France) .
  
  FILTER(?child = ?commander)
}
```",3,6,4,2,2,3,3,71,0,0,1,0,0.0,0
628,60,train,"Give me the band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Identify GS9 members who are artists and musicians
  ?gs9Member dbo:type dbr:MusicalArtist .
  ?gs9Member dbo:memberOf dbr:GS9 .

  # Step 2: Find associated musical artists of the GS9 member
  ?gs9Member dbo:associatedBand ?associatedArtist .
  
  # Step 3: Determine if the associated artist is a band member
  ?associatedArtist dbo:type dbr:MusicalArtist .
  ?associatedArtist dbo:member ?bandMember .

  # Step 4: Identify New York state award that fits criteria
  ?award dbo:type dbr:Region ;
         dbo:country dbr:United_States ;
         dbo:stateOrProvince dbr:New_York_(state) ;
         dbo:settlement dbr:New_York_City .

  # Step 5: Find the awardee band of this award
  ?award dbo:recipient ?awardeeBand .
  
  # Step 6: Determine native region of the awardee band
  ?awardeeBand dbo:nativeCountryOrRegion ?nativeRegion .

  # Filter to ensure the native region matches the award's region
  FILTER(?nativeRegion = ?award)

  # Final step: Ensure the band member is associated with the GS9 member's artist
}
```",6,14,7,3,2,3,3,71,0,0,1,0,0.0,0
557,26,train,"Give me the producer of the claim to fame, that is a work, of the actor of Johnny Doughboy.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/knownFor> ?v2 . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v1 . ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Step 1: Find the actor who played Johnny Doughboy
SELECT ?actor WHERE {
  ?film dbo:character ?character .
  ?character rdfs:label ""Johnny Doughboy""@en .
  ?film dbo:starring ?actor .
}

# Assuming we find an actor, let's say 'ActorName', proceed to Step 2

# Step 2: Find the claim to fame of this actor
SELECT ?work WHERE {
  ?actor dbo:notableWork ?work .
  FILTER (lang(?work) = ""en"")
}
ORDER BY DESC(?workPopularity) # Assuming there is a popularity metric available

# Assuming we find a work, let's say 'ClaimToFame', proceed to Step 3

# Step 3: Find the producer of this claim to fame
SELECT ?producer WHERE {
  ?claimToFame dbo:productionCompany ?company .
  ?company dbo:president ?producer .
}
```

Note: The above SPARQL queries are structured based on assumptions about available properties and data in DBpedia. Adjustments may be needed depending on the actual schema and data availability.",3,4,4,3,1,3,3,71,0,0,2,0,0.0,0
58,10,train,Give me the movie with the award of Ian Gregson (poet).,SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> ?v0 . <http://dbpedia.org/resource/Ian_Gregson_(poet)> <http://dbpedia.org/property/awards> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie WHERE {
  ?person a dbo:Person ;
          foaf:name ""Ian Gregson""@en .
  
  ?award dbo:recipient ?person ;
         dbo:awardedTo ?movie .

  FILTER EXISTS { ?person foaf:name ""Ian Gregson""@en }
}
```",2,2,3,2,1,3,2,20,0,0,39790,0,0.0,0
59,7,train,Give me the native of the residence of David Luckman and manager of Hartlepool United F.C..,SELECT ?result WHERE { <http://dbpedia.org/resource/Hartlepool_United_F.C.> <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . <http://dbpedia.org/resource/David_Luckman> <http://dbpedia.org/property/residence> ?v0 . },"```sparql
SELECT ?residence ?nativeLanguage WHERE {
  ?person dbo:manager <http://dbpedia.org/resource/Hartlepool_United_F.C.> .
  ?person foaf:name ""David Luckman""@en .
  ?person dbo:residenceLocation ?location .
  ?location rdfs:label ?residence .
  FILTER (lang(?residence) = 'en') .

  OPTIONAL {
    ?location dbo:officialLanguage ?language .
    ?language rdfs:label ?nativeLanguage .
    FILTER (lang(?nativeLanguage) = 'en')
  }
}
```",3,3,4,2,2,2,2,9,0,0,1,0,0.0,0
38,1,train,"Give me the author of Promise Me, Dad.","SELECT ?result WHERE { <http://dbpedia.org/resource/Promise_Me,_Dad> <http://dbpedia.org/property/author> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?book dbo:title ""Promise Me, Dad"" .
  ?book dbo:author ?author .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
386,12,train,Give me the war of Alexander Lvovich Davydov and war of Karl Gustav von Baggovut and entity in Russian Empire.,SELECT ?result WHERE { <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war1 ?war2 WHERE {
  # War associated with Alexander Lvovich Davydov
  ?davydov dbo:nationality dbr:Russian_Empire ;
          dbo:occupation dbr:Military_person .
  
  ?war1 dbo:participatedIn ?davydov .

  # War associated with Karl Gustav von Baggovut
  ?baggovut dbo:nationality dbr:Russian_Empire ;
           dbo:occupation dbr:Military_person .
  
  ?war2 dbo:participatedIn ?baggovut .

  FILTER(?war1 != ?war2)
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
398,4,train,Give me the work of Aleksandr Filimonov.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Aleksandr_Filimonov> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  VALUES ?filimonov { dbr:Aleksandr_Filimonov }
  ?filimonov dbo:work ?work .
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
198,24,train,"Give me the force of the awardee of Gillmore Medal and entity in Charleston, South Carolina.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> ?v2 . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . }","```sparql
# Query to find the awardee of the Gillmore Medal and their force
SELECT ?awardee ?force WHERE {
  ?award dcterms:isPartOf <http://dbpedia.org/resource/Gillmore_Medal> .
  ?award dbo:recipient ?person .
  ?person foaf:name ?awardee .
  OPTIONAL { ?person dbo:militaryUnit ?unit . }
  BIND(IF(BOUND(?unit), ?unit, ""Unknown"") AS ?force)
}

UNION

# Query to find entities in Charleston, South Carolina
SELECT ?entity WHERE {
  ?entity dbo:location <http://dbpedia.org/resource/Charleston,_South_Carolina> .
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
288,5,train,"Give me the native of the figure known, that is a settlement and Pakistani, as The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Pakistan>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://dbpedia.org/property/nickname> ""The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city WHERE {
  ?city a dbo:City ;
        dbo:country dbr:Pakistan .
  OPTIONAL { ?city rdfs:label ?label . FILTER (CONTAINS(LCASE(?label), ""heart of pakistan"") || CONTAINS(LCASE(?label), ""paris of the east"") || CONTAINS(LCASE(?label), ""city of gardens"") || CONTAINS(LCASE(?label), ""city of literature"")) }
  OPTIONAL { ?city dbo:commonName ?nickname . FILTER (CONTAINS(LCASE(?nickname), ""heart of pakistan"") || CONTAINS(LCASE(?nickname), ""paris of the east"") || CONTAINS(LCASE(?nickname), ""city of gardens"") || CONTAINS(LCASE(?nickname), ""city of literature"")) }
}
```",2,4,3,2,1,2,2,9,0,273,881,0.0,0.0,0
89,3,train,Give me the child of Minye Kyawswa.,SELECT ?result WHERE { <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?minyeKyawswa dbo:wikiPageID ""Minye_Kyawswa"" .
  ?minyeKyawswa dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
871,21,train,Give me the father of Arthur Stanley (politician) and parent of the awardee of Commander of the Royal Victorian Order.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?result <http://dbpedia.org/ontology/child> ?v2 . }","```sparql
# Query to get the father of Arthur Stanley (politician)
SELECT ?father WHERE {
  ?person dbo:birthName ""Arthur Stanley""@en .
  ?person dbo:parent ?father .
}

UNION

# Query to find a recipient of Commander of the Royal Victorian Order and their parent
SELECT ?recipientParent WHERE {
  ?recipient dbo:honoraryTitle [
    rdf:type dbo:Honor ;
    dbo:name ""Commander of the Royal Victorian Order""@en
  ] .
  ?recipient dbo:parent ?recipientParent .
}

# Combine results to find if they are the same person
SELECT DISTINCT ?father AS ?commonParent WHERE {
  VALUES (?person) { (SELECT ?person WHERE {
    ?person dbo:birthName ""Arthur Stanley""@en .
  }) }
  
  ?person dbo:parent ?father .

  VALUES (?recipient) { (SELECT ?recipient WHERE {
    ?recipient dbo:honoraryTitle [
      rdf:type dbo:Honor ;
      dbo:name ""Commander of the Royal Victorian Order""@en
    ] .
  }) }

  ?recipient dbo:parent ?commonParent .
  
  FILTER(?father = ?commonParent)
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
595,39,train,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and author of Back to Work (book).",SELECT ?result WHERE { <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v0 . <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . },"```sparql
# Step 1: Find the owner/associated person with USS Arcadia (ID-1605)
SELECT ?person WHERE {
  ?ship dcterms:title ""USS Arcadia (ID-1605)"" .
  ?ship dbo:owner ?person .
}

# Step 2: Find the author of Back to Work
SELECT ?author WHERE {
  ?book dcterms:title ""Back to Work""@en .
  ?book dbo:author ?author .
}

# Step 3: Check if these two entities refer to the same individual
SELECT DISTINCT ?commonPerson WHERE {
  { 
    ?ship dcterms:title ""USS Arcadia (ID-1605)"" .
    ?ship dbo:owner ?commonPerson .
  }
  UNION
  {
    ?book dcterms:title ""Back to Work""@en .
    ?book dbo:author ?commonPerson .
  }
}

# Step 4: Find the war commanded by this person, described as a disease and societal event
SELECT DISTINCT ?war WHERE {
  ?person foaf:name ?name .
  ?person dbo:commanderOf ?war .
  FILTER EXISTS { 
    ?war rdfs:label ?label .
    FILTER(CONTAINS(LCASE(?label), ""disease"") || CONTAINS(LCASE(?label), ""societal event""))
  }
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
375,11,train,Give me the war of the child of Toyotomi Hideyoshi.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
SELECT ?war WHERE {
  ?child rdf:type dbo:Child .
  ?child dbo:parent dbr:Toyotomi_Hideyoshi .
  ?child rdfs:label ""Hideyori""@en .
  ?event dbo:participant ?child ;
         rdf:type dbo:MilitaryConflict .
  ?event rdfs:label ?war .
}
```",2,2,3,2,1,2,3,28,0,0,5,0,0.0,0
198,16,train,Give me the awardee of the award of Quincy Adams Gillmore.,SELECT ?result WHERE { <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/property/awards> ?v1 . },"```sparql
SELECT ?awardee WHERE {
  ?award dcterms:isPartOf <http://dbpedia.org/resource/United_States_Army_Corps_of_Engineers> ;
         foaf:name ""Quincy A. Gillmore Medal""@en .
  ?award dbo:recipient ?person .
  ?person foaf:name ?awardee .
  FILTER NOT EXISTS {
    ?award2 dbo:recipient ?person .
    ?award2 rdfs:label ?awardLabel .
    ?award2 dcterms:date ?date .
    FILTER (?date > ?award.dbo:date)
  }
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
295,15,train,"Give me the writer of the work, that is a musical work, of the true self, that is an artist, of Steven Kapur and native of Birmingham.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/givenName> ""Steven Kapur""@en . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Birmingham> . ?v1 <http://dbpedia.org/property/writer> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/property/writer> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?writer WHERE {
  ?artist a dbo:MusicalArtist ;
          foaf:name ""The True Self"" ;
          dbo:hometown dbr:Birmingham ;
          dbo:member ?member .
  
  ?member foaf:name ""Steven Kapur"" .

  ?work dbo:title ""The True Self"" ;
        dbo:composer ?writer .

  FILTER EXISTS { ?artist dbo:album ?work }
}
```",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
399,6,train,Give me the professional in the profession of Jamie T.,SELECT ?result WHERE { <http://dbpedia.org/resource/Jamie_T> <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  # Find Jamie T's occupation
  ?jamieT dbo:occupation ?occupation .
  
  FILTER (str(?jamieT) = ""Jamie_T_(musician)"")

  # Find other individuals with the same occupation
  ?person dbo:occupation ?sameOccupation .

  FILTER (?sameOccupation = ?occupation)
  FILTER (!str(?person) = ""Jamie_T_(musician)"")
}
```",2,2,3,2,1,2,2,9,0,0,44694,0,0.0,0
782,33,train,"Give me the band of the band member of the person born, that is a musical artist, on 1945-03-30 and reference to The Fabulous Thunderbirds.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?result <http://dbpedia.org/ontology/bandMember> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?band WHERE {
  ?person dbo:birthday ""1945-03-30""^^xsd:date ;
          a dbo:MusicalArtist .
  
  ?person dbo:memberOfBand ?band .

  OPTIONAL { 
    ?band dbo:associatedBand dbr:The_Fabulous_Thunderbirds .
  }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
68,3,train,"Who is the parent of Dorothea of Denmark, Electress Palatine?","SELECT ?result WHERE { <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  VALUES ?dorothea { dbr:Dorothea_of_Denmark_(1574-1639) }
  ?dorothea dbo:parent ?parent .
}
```",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
531,15,train,"Give me the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/property/residence> ?result . },"```sparql
SELECT ?residence WHERE {
  ?person dbo:officeHolderOf dbr:Madrid_City_Council_Election,_2003 .
  ?person dbo:positionTitle ""Mayor of Madrid""@en .
  ?person dbo:termStart ?start .
  FILTER(?start <= ""2003-05-01""^^xsd:date && (?end >= ""2003-05-01""^^xsd:date || NOT EXISTS { ?person dbo:termEnd ?end }))
  ?office dbo:residence ?residence .
  ?office dbo:positionTitle ""Mayor of Madrid""@en .
}
```",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
353,59,train,"Give me the child of the parent of the child, that is a royalty, of Roger II of Sicily and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . }","```sparql
SELECT ?childOfParent WHERE {
  # Step 1: Identify Roger II of Sicily
  wd:Q12345 rdfs:label ""Roger II of Sicily""@en . 

  # Step 2: Find his child who is royalty
  ?royalChild wdt:P40 wd:Q12345 ; 
              wdt:P31/wdt:P279* wd:Q5 .

  # Step 3: Determine the parent of this child (should be Roger II)
  ?parent wdt:P40 ?royalChild .
  
  # Step 4: Identify another child of this parent who is royalty
  ?childOfParent wdt:P40 ?parent ;
                 wdt:P31/wdt:P279* wd:Q5 .

  # Step 5: Find William I and his reference that is royalty and an office holder
  wd:Q67890 rdfs:label ""William I""@en .
  ?reference wdt:P463 wd:Q67890 ;
             wdt:P31/wdt:P279* wd:Q5 ;
             wdt:P39 ?office .

  # Step 6: Determine the father of this referenced child
  ?father wdt:P22 ?childOfReference .
  ?childOfReference wdt:P40 ?reference ;
                    wdt:P31/wdt:P279* wd:Q5 .

  FILTER(?parent = wd:Q12345)
}
```",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
628,49,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v0 <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember ?nativeRegion WHERE {
  # Step 1: Identify GS9 as Bobby Shmurda's associated musical artist
  VALUES (?associatedArtist) { dbr:GS9 }

  # Step 2: Find members of GS9 who are also individual artists
  ?member dbo:memberOf ?associatedArtist .
  ?member a dbo:MusicalArtist .

  # Step 3: Identify Grammy-winning bands and their native regions
  ?band dbo:award dbr:Grammy_Award .
  ?band dbo:nativePlace ?nativeRegion .

  # Step 4: Filter for regions in New York State
  FILTER (strStarts(str(?nativeRegion), ""New York""))

  # Step 5: Combine the results to find the band member and native region
  BIND (?member AS ?bandMember)
}
```",5,11,6,3,2,3,3,71,0,0,1,0,0.0,0
159,30,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of Yurii Khmelnytsky and reference to George Ducas.","SELECT ?result WHERE { <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?commander WHERE {
  ?show a dbo:TelevisionShow .
  ?show dbo:genre ?genre .
  FILTER(CONTAINS(LCASE(?genre), ""war"") || CONTAINS(LCASE(?genre), ""drama"")) .

  OPTIONAL { ?show dbo:basedOn dbr:Khmelnytsky_Uprising . }
  
  ?commander dbo:characterIn ?show .
  ?commander rdfs:label ?name .
  FILTER(CONTAINS(LCASE(?name), ""jean baptist"") || CONTAINS(LCASE(?name), ""comte d'arco"")) .

  OPTIONAL { ?successor dbo:succeededBy ?yuriiKhmelnytsky . }
  OPTIONAL { ?reference dbo:relatedTo dbr:George_Ducas . }
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
311,5,train,Who is the writer of No Alternative?,SELECT ?result WHERE { <http://dbpedia.org/resource/No_Alternative> <http://dbpedia.org/property/writer> ?result . },"```sparql
SELECT ?artist WHERE {
  dbpedia:No_Alternative dbo:artist ?artist .
}
```",1,1,2,1,1,3,2,20,0,0,23,0,0.0,0
297,4,train,Give me the institution in Georgia (U.S. state) and entity in United States.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . ?result <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Georgia_(U.S._state)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?institution WHERE {
  ?institution dbo:location dbpedia:Georgia_(U.S._state) .
  OPTIONAL { ?institution dbo:country dbpedia:United_States . }
}
```",2,2,3,1,2,2,2,9,0,0,346,0,0.0,0
80,11,train,Give me the actor of the movie with .,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> """"@en . ?v0 <http://dbpedia.org/ontology/starring> ?result . }","```
# No valid SPARQL query can be generated due to lack of information about the movie.
```",2,2,3,2,1,3,3,71,0,0,55786,0,0.0,0
531,12,train,Give me the office of Mariano Rajoy and office of Miguel Maura.,SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?officeName WHERE {
  VALUES ?person { 
    dbr:Mariano_Rajoy 
    dbr:Miguel_Maura 
  }
  
  ?person dbo:officeHeld ?office .
  ?office rdfs:label ?officeName .
  FILTER (lang(?officeName) = 'en')
}
ORDER BY ?person
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
38,12,train,"Give me the author of Promises to Keep (Biden book) and author of the work, that is a written work and a work, of Joe Biden.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . <http://dbpedia.org/resource/Promises_to_Keep_(Biden_book)> <http://dbpedia.org/ontology/author> ?result . ?v0 <http://dbpedia.org/property/author> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?author WHERE {
  # Confirming the author of ""Promises to Keep""
  VALUES (?bookTitle) { (""Promises to Keep"") }
  
  ?book dbr:Promises_to_Keep ;
        dbo:author ?author .
  
  FILTER(?author = dbr:Joe_Biden)
  
  # Finding other written works by Joe Biden
  OPTIONAL {
    ?otherWork dbo:author dbr:Joe_Biden .
    FILTER(?work != ?otherWork)
  }
}
```",3,5,4,2,2,3,2,20,0,0,1,0,0.0,0
203,2,train,Give me the military force of Battle of Cape Finisterre (1805).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?militaryForce WHERE {
  ?battle dbp:battle ""Battle of Cape Finisterre (1805)""@en .
  ?battle dbo:participatingMilitaryUnit ?militaryForce .
}
```",1,1,2,1,1,3,3,71,0,0,22,0,0.0,0
80,28,train,Give me the actor of the movie with  and professional in  and actor of ATL (film).,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/starring> """"@en . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Step 1: Find all actors of the movie ""ATL""
SELECT ?actor WHERE {
    ?movie dbo:title ""ATL""@en .
    ?movie dbo:starring ?actor .
}

# Step 2: Check if these actors are in a movie with ""and"" in its title
SELECT DISTINCT ?actor WHERE {
    # Find all movies with ""and"" in their titles
    ?otherMovie dbo:title ?title .
    FILTER(CONTAINS(LCASE(?title), ""and""))
    
    # Find the actors of those movies
    ?otherMovie dbo:starring ?actor .
    
    # Ensure these actors are also from ""ATL""
    {
        SELECT DISTINCT ?actor WHERE {
            ?atlMovie dbo:title ""ATL""@en .
            ?atlMovie dbo:starring ?actor .
        }
    }
}
```",4,4,5,2,3,3,3,71,0,0,4,0,0.0,0
198,4,train,Give me the awardee of Medal of Honor.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . },"```sparql
SELECT ?recipient WHERE {
  ?medalOfHonor a dbo:Medal .
  ?medalOfHonor rdfs:label ""Medal of Honor""@en .
  ?medalOfHonor dbo:recipient ?recipient .
}
```",1,1,2,1,1,3,3,71,0,0,2190,0,0.0,0
89,59,train,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and child of the parent of the child of Minye Kyawswa.",SELECT ?result WHERE { <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://dbpedia.org/property/father> ?v5 . ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v5 . },"```sparql
SELECT ?spouse WHERE {
  # Find the common individual who is both a child of Saw Shwe Khet and a grandchild of Minye Kyawswa
  ?individual dbo:parent ?sawShweKhetChild .
  ?individual dbo:royalty ?royalTitle1 .
  
  ?minyeKyawswaChild dbo:parent ?minyeKyawswa .
  ?minyeKyawswaChild dbo:child ?grandchild .
  FILTER(?grandchild = ?individual) .
  ?minyeKyawswa dbo:royalty ?royalTitle2 .

  # Ensure Saw Shwe Khet and Minye Kyawswa are royalty
  ?sawShweKhet dbo:royalty ?royaltySawShweKhet .
  ?sawShweKhetChild dbo:parent ?sawShweKhet .

  # Find the father of this individual
  ?individual dbo:father ?father .

  # Ensure the father is royalty and find his spouse
  ?father dbo:royalty ?royalTitleFather .
  ?father dbo:spouse ?spouse .
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
375,8,train,"Give me the parent of the native, that is an artist and a musical artist, of London.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/London> . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
SELECT ?artist ?parentLabel WHERE {
  ?artist dbo:birthPlace dbr:London .
  ?artist dbo:occupation dbr:Artist .
  ?artist dbo:genre dbr:Musical_artist .
  OPTIONAL { ?artist foaf:parent ?parent . }
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,4,3,2,1,3,2,20,0,0,21,0,0.0,0
347,1,train,"Give me the father of Eleonore of Austria, Queen of Poland.","SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  ?eleonore dbo:givenName ""Eleonore""@en .
  ?eleonore dbo:birthPlace dbr:Austria .
  ?eleonore dbo:spouse dbr:Sigismund_III_of_Poland .
  ?eleonore dbo:father ?father .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
158,9,train,Give me the native of Russian Empire and native of Grand Duchy of Finland.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person WHERE {
  ?person dbo:birthPlace ?place .
  
  # Ensure the place is within the Grand Duchy of Finland
  VALUES ?finlandPlace { 
    dbr:Helsinki 
    dbr:Tampere 
    dbr:Turku 
    dbr:Viipuri 
    dbr:Oulu 
    dbr:Vaasa 
    dbr:Kuopio 
    dbr:Pori 
    dbr:Lappeenranta 
    dbr:Joensuu 
  }
  
  ?place rdfs:label ?placeLabel .
  FILTER (CONTAINS(LCASE(?placeLabel), ""finland"") && CONTAINS(LCASE(?placeLabel), ""grand duchy""))

  # Ensure the place is part of the Russian Empire during the relevant period
  OPTIONAL {
    ?place dbo:country ?country .
    VALUES ?russianEmpire { 
      dbr:Russian_Empire 
    }
    FILTER (?country = ?russianEmpire)
  }
}
```",2,2,3,1,2,2,3,28,126,229,0,0.35492957746478876,1.0,0.5239085239085239
80,14,train,Give me the professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
SELECT ?person WHERE {
  ?character dbo:alterEgoOf ?person .
  ?character rdfs:label ""The Shadow""@en .
}
```",2,2,3,2,1,3,3,71,0,0,39640,0,0.0,0
140,16,train,"Give me the party member of the ruling party, that is a political party and an organisation, in Westport, Connecticut and commander in the war, that is a societal event, of George Pickett.","SELECT ?result WHERE { <http://dbpedia.org/resource/George_Pickett> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?result <http://dbpedia.org/ontology/party> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Westport,_Connecticut> <http://dbpedia.org/property/leaderParty> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?partyMember WHERE {
  # Find the ruling political party in Westport, Connecticut
  ?westport dbo:locatedIn dbr:Connecticut .
  ?westport rdfs:label ""Westport, Connecticut""@en .

  ?party dbo:location ?westport ;
         a dbo:PoliticalParty .

  # Find a member of this party who was also a commander in the American Civil War
  ?partyMember dbo:memberOf ?party ;
               dbo:occupation dbr:Military_commander ;
               dbo:participatedIn dbr:American_Civil_War .

}
```",4,7,5,2,2,3,2,20,0,0,4,0,0.0,0
668,24,train,Give me the professional in the profession of Rod Argent and person born as Darryl Paa Kwesi Bannerman-Martin.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . }","```sparql
# Query to find a musician like Rod Argent
SELECT ?person WHERE {
  ?person dbo:occupation dbr/Musician .
  FILTER NOT EXISTS { ?person rdfs:label ""Rod Argent""@en }
}

UNION

# Query to find someone born as Darryl Paa Kwesi Bannerman-Martin
SELECT ?person WHERE {
  ?person foaf:name ""Darryl Paa Kwesi Bannerman-Martin"" .
  FILTER NOT EXISTS { ?person rdfs:label ""Dizzee Rascal""@en }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
225,14,train,"Give me the birthplace of the awardee, that is Japanese, of the reference, that is a television show, to Anita Borg Institute Women of Vision Awards.","SELECT ?result WHERE { ?v2 <http://xmlns.com/foaf/0.1/name> ""Anita Borg Institute Women of Vision Awards""@en . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/property/awards> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthPlace WHERE {
  ?person dbo:award dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  ?person dbo:nationality dbr:Japan .
  ?person dbo:profession dbr:Television_director ; 
          dbo:profession dbr:Television_writer ; 
          dbo:profession dbr:Television_producer ;
          dbo:profession dbr:Actress ; 
          dbo:profession dbr:Screenwriter .
  OPTIONAL { ?person dbp:birthPlace ?birthPlace . }
}
```",3,5,4,3,1,3,2,20,0,0,2,0,0.0,0
203,21,train,"Give me the commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of Battle of Cape Finisterre (1805).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v1 . },"```sparql
# Query to find the commander of the 30th (Cambridgeshire) Regiment of Foot during a military conflict
SELECT ?commander WHERE {
  ?regiment dbr:30th_(Cambridgeshire)_Regiment_of_Foot .
  ?conflict dbo:military_unit ?regiment ;
            dbo:commander ?commander .
}

# Query to find the commander of the British naval force at the Battle of Cape Finisterre (1805)
SELECT ?commander WHERE {
  ?battle dbr:Battle_of_Cape_Finisterre_(1805) .
  ?battle dbo:commander ?commander ;
          dbo:nationality dbr:United_Kingdom .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
816,22,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of the child of Allan Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
# Part 1: Find actors in ""Judgment: The Trial of Julius and Ethel Rosenberg""
SELECT ?actor WHERE {
  ?movie dcterms:title ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
  ?movie dbo:starring ?actor .
}

UNION

# Part 2: Find parent of Allan Arbus's child
SELECT DISTINCT ?parent WHERE {
  # Find Allan Arbus's children
  ?child dbo:parent ?allanArbus .
  ?allanArbus foaf:name ""Allan Arbus""@en .

  # Find the parents of those children (excluding Allan Arbus)
  ?child dbo:parent ?parent .
  FILTER (?parent != ?allanArbus)
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
737,24,train,Give me the child of Archduchess Margarete Sophie of Austria and child of the child of Duke Philipp of Württemberg.,SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commonChild WHERE {
  # Get children of Archduchess Margarete Sophie of Austria
  ?child1 dbo:parent dbr:Archduchess_Margarete_Sophie_of_Austria .
  
  # Get grandchildren of Duke Philipp of Württemberg
  ?grandchild2 dbo:parent ?child2 .
  ?child2 dbo:parent dbr:Duke_Philipp_of_W%C3%BCrttemberg .

  # Find common child
  FILTER (?child1 = ?commonChild && ?grandchild2 = ?commonChild)
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
203,40,train,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of Battle of Cape Finisterre (1805) and military force of Battle of Fort Royal.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v1 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?nickname WHERE {
  # Find commander of Battle of Cape Finisterre (1805)
  ?battle1 dbo:commander ?commander .
  ?battle1 rdfs:label ""Battle of Cape Finisterre (1805)""@en .

  UNION

  # Find commander of Battle of Fort Royal
  ?battle2 dbo:commander ?commander .
  ?battle2 rdfs:label ""Battle of Fort Royal""@en .

  OPTIONAL {
    ?commander dbo:nickName ?nickname .
    FILTER(CONTAINS(LCASE(?nickname), ""triple x's""))
  }
  
  # Ensure the commander is associated with both battles
  FILTER EXISTS { ?battle1 dbo:commander ?commander . }
  FILTER EXISTS { ?battle2 dbo:commander ?commander . }

}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
756,47,train,"Give me the native of the administration, that is a country, of the leader of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/leader> ?v0 . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v2 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. },"```sparql
SELECT ?nativeCountry WHERE {
    # Find Gerhard Schröder as a German Chancellor
    ?person dbo:positionHeld dbr:Chancellor_of_Germany .
    ?person foaf:name ""Gerhard Schröder""@en .

    # Find Thomas Doll as the manager of VfL Bochum in 2007-08
    ?manager foaf:name ""Thomas Doll""@en .
    ?team dbo:coach ?manager ;
          dbo:sport dbr:Soccer ;
          dbo:seasonStartYear ?startYear ;
          dbo:seasonEndYear ?endYear .
    FILTER (?startYear <= 2007 && ?endYear >= 2008)
    FILTER (STRSTARTS(STR(?team), ""http://dbpedia.org/resource/VfL_Bochum""))

    # Get the native country of Germany
    ?country dbo:officialName ""Germany""@en .
    ?person dbo:nationality ?country .

    BIND(?country AS ?nativeCountry)
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
103,33,train,"Give me the professional in the profession of the actor, that is a politician, of Ab Kya Hoga and actor of Dispatches from Elsewhere.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor ?actorName WHERE {
  # Find actors in ""Ab Kya Hoga""
  ?cast1 dbo:starring dbr:Ab_Kya_Hoga .
  
  # Find the same actor in ""Dispatches from Elsewhere""
  ?cast2 dbo:starring dbr:Dispatches_from_Elsewhere .
  
  # Ensure it's the same person
  FILTER (?cast1 = ?cast2)
  
  # Check if this actor is also a politician
  ?actor dbo:profession dbr:Politician .
  
  # Link the actor to the cast roles
  ?actor rdfs:label ?actorName .

  # Ensure it's the same person in both roles
  FILTER (?actor = ?cast1)
}
ORDER BY ?actorName
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
419,0,train,Give me the entity in Andhra Pradesh.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Andhra_Pradesh> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?entity ?name WHERE {
  ?entity dbo:country dbr:India .
  ?entity dbp:state ""Andhra Pradesh""@en .
  OPTIONAL { ?entity rdfs:label ?name . FILTER (lang(?name) = 'en') }
}
```",1,1,2,1,1,2,2,9,4,8,162,0.3333333333333333,0.024096385542168676,0.0449438202247191
158,7,train,Give me the person decedent at Switzerland and native of Russian Empire.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:deathPlace dbr:Switzerland .
  ?person dbo:nationality dbr:Russian_Empire .
  OPTIONAL { ?person foaf:name ?name . }
}
```",2,2,3,1,2,2,3,28,0,2,36,0.0,0.0,0
375,24,train,Give me the war of the person born as Koichirō and war of the child of Toyotomi Hideyoshi.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ""Koichirō""@en . <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
SELECT ?event ?description WHERE {
  ?person dbo:childOf dbr:Toyotomi_Hideyoshi .
  ?person dbo:event ?event .
  ?event rdfs:label ?description .
  FILTER(CONTAINS(LCASE(?description), ""siege of osaka""))
}
```",4,4,5,2,2,2,3,28,0,0,2,0,0.0,0
628,53,train,"Give me the native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and person born as Ackquille Jean Pollard.","SELECT ?result WHERE { <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. }","```sparql
# Step 1: Find French Montana's association with GS9
SELECT ?gs9 WHERE {
  wd:Q209975 memberOfGroup:gs9 .
}

# Step 2: Identify the musical artist associated with Coro de la Pontificia Universidad Católica de Puerto Rico
SELECT ?coroArtist WHERE {
  ?coro dbp:musicalArtist ?coroArtist .
  FILTER (CONTAINS(LCASE(?coro), ""coro de la pontificia universidad catolica de puerto rico""))
}

# Step 3: Find the award related to this choir
SELECT ?award WHERE {
  ?coro dbp:associatedAward ?award .
}

# Step 4: Identify the native region of this award, which is also an American state and settlement
SELECT DISTINCT ?nativeRegion WHERE {
  ?award dbo:nativeCountry wd:Q30 ; # Assuming Q30 is the DBpedia item for Puerto Rico
    dbo:nativePlace ?nativeRegion .
  FILTER (wdt:P31/psv:P31 ?nativeRegion wd:Q12140) . # Filter to ensure it's a settlement
  FILTER EXISTS { ?nativeRegion wdt:P17 wd:Q30 } . # Ensure it's an American state
}
```",6,13,7,3,3,3,3,71,0,0,1,0,0.0,0
347,34,train,"Give me the child of Ferdinand II, Holy Roman Emperor and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v2 <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?event ?tvShow WHERE {
  # Identify a child of Ferdinand II who was a commander
  ?child dbo:parent dbr:Ferdinand_II,_Holy_Roman_Emperor .
  ?child dbo:militaryCommanderOf ?command .

  # Find societal events and television shows associated with this child or their legacy
  OPTIONAL { ?event dbo:relatedTo ?child . }
  OPTIONAL { ?tvShow dbo:subject ?child . }

  # Link to the Algerian War's military force
  ?algerianWar dbo:militaryForce dbr:Algerian_War .
  ?command dbo:partOf ?algerianWar .

  FILTER(?event != """" && ?tvShow != """")
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
628,15,train,"Give me the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v1 . },"```sparql
SELECT ?member ?associatedArtist WHERE {
  ?gs9 dbo:member ?member .
  FILTER EXISTS { ?member rdf:type dbo:MusicalArtist . }
  FILTER EXISTS { ?member dbo:genre ?genre . } # Ensures they are recognized as artists in a musical context
  ?member dbo:associatedMusicalArtist ?associatedArtist .
  FILTER NOT EXISTS { ?associatedArtist rdf:type dbo:Group . } # Ensure it's an individual artist, not a group
}
```",2,5,3,2,1,3,3,71,0,0,4,0,0.0,0
103,37,train,"Give me the professional in  and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actorName ?actingProfession ?politicalRole
WHERE {
  # Find Amitabh Bachchan as an actor and politician
  ?person a dbo:Actor ;
          foaf:name ?actorName ;
          dbo:profession ?actingProfession ;
          dbo:occupation dbr:Member_of_the_Lok_Sabha .

  # Ensure the person acted in ""Ab Kya Hoga""
  ?film dbo:title ""Ab Kya Hoga""@en .
  ?film dbo:starring ?person .

  # Find political role
  OPTIONAL {
    ?person dbo:occupation dbr:Member_of_the_Lok_Sabha ;
            rdfs:label ?politicalRole .
  }
}
```",4,5,5,3,2,3,3,71,0,0,39640,0,0.0,0
943,27,train,"Give me the father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT DISTINCT ?grandfather WHERE {
  # Step 1: Identify Baeda Maryam I
  ?baeda_maryam1 dbo:spouse ?parent . 
  ?parent foaf:name ""Baeda Maryam I""@en .

  # Step 2: Determine the child of Baeda Maryam I
  ?child dbo:parent ?parent .
  
  # Step 3: Find the father of this child
  ?father dbo:spouse ?mother .
  ?mother dbo:parent ?child .
  
  # Step 4: Identify the grandfather who is a royalty and an office holder
  ?grandfather dbo:spouse ?greatMother .
  ?greatMother dbo:parent ?father .
  ?grandfather rdf:type ?type .
  FILTER (
    (?type = dbpedia:Monarch || 
     ?type = dbpedia:GovernmentOfficial ||
     ?type = dbpedia:Ruler) &&
    EXISTS { ?grandfather dbo:officeHolder ?office . }
  )
}
```",3,5,4,3,1,3,3,71,0,0,1,0,0.0,0
23,9,train,Give me the entity in Colombia and party of Gustavo Petro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nationalityLabel ?partyAffiliationLabel
WHERE {
  dbr:Gustavo_Petro dbo:nationality ?nationality .
  ?nationality rdfs:label ?nationalityLabel .
  FILTER (lang(?nationalityLabel) = 'en')
  
  OPTIONAL { 
    dbr:Gustavo_Petro dbo:partyAffiliation ?partyAffiliation .
    ?partyAffiliation rdfs:label ?partyAffiliationLabel .
    FILTER (lang(?partyAffiliationLabel) = 'en')
  }
}
```",2,2,3,1,2,2,3,28,0,0,2,0,0.0,0
353,45,train,"Give me the child of Roger II of Sicily and father of William II of Sicily and child of the child of the spouse, that is a royalty, of Constance of Burgundy.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?person WHERE {
  ?person wdt:P31 wd:Q5;  # Person
          wdt:P22 wd:Q1116; # Father: Roger II of Sicily
          wdt:P25 wd:Q1120. # Mother: Elvira of Castile

  ?child wdt:P22 ?person; # Child of the person (William I)
         wdt:P31 wd:Q5.

  ?grandChild wdt:P22 ?child; # Grandchild of the person (William II)
              wdt:P31 wd:Q5;
              wdt:P39 wd:Q11696. # Has occupation royalty

  OPTIONAL { ?person rdfs:label ?name FILTER(LANG(?name) = ""en"") }
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
198,3,train,"Give me the show, that is an award, of United States Congress.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show ?award WHERE {
  ?show a dbo:TelevisionShow .
  ?show dbo:awards ?award .
  ?award dbo:fundingAgency dbr:Corporation_for_Public_Broadcasting ;
         rdfs:label ?awardLabel .
  FILTER CONTAINS(LCASE(?awardLabel), ""peabody"")
}
```",1,2,2,1,1,3,3,71,0,0,8,0,0.0,0
723,15,train,"Give me the band member of the producer, that is an organisation and a group, of the reference to Nothing to Gein and band member of Stone Sour.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v0 <http://dbpedia.org/ontology/producer> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Stone_Sour> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Nothing to Gein""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bandMember WHERE {
  # Find the producer of ""Nothing to Gein""
  ?album dbo:producer ?producer .
  ?album rdfs:label ""Nothing to Gein""@en .

  # Ensure the producer is an organization and a group
  ?producer rdf:type dbo:Organization ;
            dbo:member ?bandMember .

  # Check if the band member is also part of Stone Sour
  ?stoneSourBandMember dbo:member ?bandMember .
  ?stoneSourBandMember rdfs:label ""Stone Sour""@en .
}
```",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
531,40,train,"Give me the tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election and office of Miguel Maura and office of Mariano Rajoy.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/residence> ?v1 . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?leader ?residence ?tenant ?miguelMauraOffice ?marianoRajoyOffice WHERE {
  # Find the leader of Madrid City Council in 2003
  ?leader dbo:officeHolderOf dbr:Madrid_City_Council_Election,_2003 .
  ?leader dbo:termStartYear ?startYear .
  FILTER(?startYear <= 2003 && (?endYear >= 2003 || NOT EXISTS { ?leader dbo:termEndYear ?endYear }))

  # Find the residence of the leader
  ?residence dbo:officeHolder ?leader .

  # Find the tenant of the residence
  ?tenant dbo:residence ?residence .

  # Find Miguel Maura's office
  ?miguelMauraOffice dbo:officeHolder dbr:Miguel_Maura .
  
  # Find Mariano Rajoy's office
  ?marianoRajoyOffice dbo:officeHolder dbr:Mariano_Rajoy .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
119,55,train,"Give me the office of the leader of 2009 Galician regional election and tenant of the residence, that is a country, of Álvaro Quirós and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v5 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v3 <http://dbpedia.org/property/office> ?result . ?v2 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v5 . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v3 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?residenceCountry ?psoeLeader
WHERE {
  # Find Álvaro Quirós and his office related to the 2009 Galician regional election
  dbr:Álvaro_Quirós dbo:politicalParty dbr:Spanish_Socialist_Workers'_Party ;
                   dbo:office ?office .

  # Filter for the relevant time period (2009)
  FILTER EXISTS {
    ?office dbo:electionYear ""2009""^^xsd:gYear .
  }

  # Identify the country associated with his residence
  dbr:Álvaro_Quirós dbo:residenceCountry ?residenceCountry .

  # Find the leader of the PSOE administration in Spain around 2009
  ?psoeLeader dbo:politicalParty dbr:Spanish_Socialist_Workers'_Party ;
              dbo:office dbo:PrimeMinisterOfSpain ;
              dbo:electionYear ?year .
  
  FILTER (?year <= ""2009""^^xsd:gYear && ?year >= ""2004""^^xsd:gYear) # Assuming the leader was in office during this period
}
```",6,8,7,2,3,3,3,71,0,0,1,0,0.0,0
386,19,train,Give me the war of Karl Gustav von Baggovut and war of Alexander Lvovich Davydov and entity in the birth place of Elena Žalinkevičaitė-Petrauskienė.,SELECT ?result WHERE { <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
# Query for wars involving Karl Gustav von Baggovut
SELECT ?war WHERE {
  ?baggovut dbo:wikiPageID ""Karl_Gustav_von_Baggovut"" .
  ?baggovot dbo:participatedIn ?war .
}

UNION

# Query for wars involving Alexander Lvovich Davydov
SELECT ?war WHERE {
  ?davydov dbo:wikiPageID ""Alexander_Lvovich_Davydov"" .
  ?davydov dbo:participatedIn ?war .
}

UNION

# Query for the birthplace of Elena Žalinkevičaitė-Petrauskienė and its notable entity
SELECT ?birthPlaceEntity WHERE {
  ?elena dbo:wikiPageID ""Elena_Žalinkevičaitė-Petrauskienė"" .
  ?elena dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:location ?birthPlaceEntity .
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
213,6,train,Give me the country of Cat Country (novel) and birth place of Winston Chang.,SELECT ?result WHERE { <http://dbpedia.org/resource/Winston_Chang> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Cat_Country_(novel)> <http://dbpedia.org/ontology/country> ?result . },"```sparql
# Query to find the country related to ""Cat Country"" (novel)
SELECT ?country WHERE {
  ?work dcterms:title ""Cat Country""@en .
  ?work dbo:genre dbc:Novels_by_Lao_She .
  ?work dbo:setInLocation ?location .
  ?location geo:hasCountryCode ?country .
}

# Query to find the birthplace of Winston Chang
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Winston Chang""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
68,19,train,"Give me the child of Maximilian I, Holy Roman Emperor and father of the parent of Dorothea of Denmark, Electress Palatine and father of Catherine of Austria, Queen of Portugal.","SELECT ?result WHERE { <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v3 . ?v3 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?child WHERE {
  # Step 1: Identify Maximilian I's children
  ?maximilian dbo:spouse ?spouse .
  ?maximilian foaf:name ""Maximilian I, Holy Roman Emperor""@en .

  # Step 2: Find Dorothea of Denmark's parent
  ?dorothea dbo:parent ?dorotheasParent .
  ?dorothea foaf:name ""Dorothea of Denmark, Electress Palatine""@en .

  # Step 3: Determine the father of that parent
  ?dorotheasParent dbo:father ?commonFather .

  # Step 4: Identify Catherine of Austria's parent
  ?catherine dbo:parent ?catherinesParent .
  ?catherine foaf:name ""Catherine of Austria, Queen of Portugal""@en .

  # Step 5: Find the common child
  ?commonFather foaf:name ?name .
  ?catherinesParent foaf:name ?name .

  # Step 6: Cross-reference with Maximilian I's children
  ?maximilian dbo:child ?child .
  FILTER(?commonFather = ?child)
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
198,39,train,"Give me the force of Quincy Adams Gillmore and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v0 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/place> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/ontology/birthPlace> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthPlace ?force WHERE {
  ?person a dbo:MilitaryPerson ;
          foaf:name ""Quincy Adams Gillmore""@en ;
          dbo:dateOfBirth ?dob ;
          dbo:deathDate ?dd .
  
  FILTER (YEAR(?dd) = 1850 && MONTH(?dd) = 8 && DAY(?dd) = 5)
  
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:Settlement ;
              dbp:country ""United States""@en .

  OPTIONAL { ?person dbo:militaryService ?service . 
             ?service dbo:force ?force }
}
```",4,6,5,3,2,3,3,71,0,0,2,0,0.0,0
468,6,train,Give me the reference to Peter IV and child of Alfonso IV of Aragon.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . ?result <http://xmlns.com/foaf/0.1/name> ""Peter IV""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  dbr:Alfonso_IV_of_Aragon dbo:child ?child .
  FILTER(CONTAINS(LCASE(STR(?child)), ""peter iv""))
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
39,39,train,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in .","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthName ?band WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Bob Thompson (musician)""@en .
  
  OPTIONAL { ?person dbo:birthName ?birthName . }
  OPTIONAL { ?person dbo:associatedBand ?band . }

  FILTER EXISTS { ?person dbo:birthName ?birthName } # Ensure he has a birth name entry
}
```",4,5,5,3,2,3,3,71,0,0,4,0,0.0,0
782,32,train,Give me the band of the band member of Eric Clapton and reference to the real name of The Fabulous Thunderbirds.,SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v1 . ?result <http://dbpedia.org/ontology/bandMember> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v1 . },"```sparql
# Query to find bands Eric Clapton is a member of
SELECT ?band WHERE {
  ?clapton dbo:birthName ""Eric Patrick Clapton""@en .
  ?clapton dbo:memberOfBand ?band .
}

UNION

# Query to find the real name of members of The Fabulous Thunderbirds
SELECT ?realName WHERE {
  ?thunderbird rdfs:label ""The Fabulous Thunderbirds""@en .
  ?thunderbird dbo:member ?member .
  ?member foaf:name ?stageName .
  FILTER(?stageName = ""The Fabulous Thunderbirds"")
  ?member foaf:name ?realName .
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
943,50,train,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and father of the father, that is a royalty and an office holder, of Na'od.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . }","```sparql
SELECT ?grandfather WHERE {
  # Identify The Shadow as Lamont Cranston's alter ego
  ?shadow dbo:alterEgo dbr:Lamont_Cranston .
  
  # Find Na'od, the King of Aksum
  ?naod dbo:spouse ?parent ;
        a dbo:Monarch ;
        rdfs:label ""Na'od""@en .

  # Identify Na'od's parent (father)
  ?parent dbo:child ?naod .
  
  # Find Na'od's grandfather
  ?grandfather dbo:child ?parent .
  
  # Ensure the grandfather is a royalty and office holder
  ?grandfather a dbo:Monarch ;
              rdfs:label ?name .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
263,21,train,"Give me the parent of Mary Elphinstone, Lady Elphinstone and native of Middlesex and parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . ?v0 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . }","```sparql
# Query to get the parents of Mary Elphinstone, Lady Elphinstone
SELECT ?parent WHERE {
  wd:Q123456 wdt:P22 ?parent. # Replace Q123456 with the DBpedia ID for Mary Elphinstone
}

# Query to check if any parent is native to Middlesex
SELECT ?parent WHERE {
  ?parent wdt:P19 wd:Q11111. # Q11111 is the DBpedia ID for Middlesex
  ?parent wdt:P22 wd:Q123456. # Replace Q123456 with the DBpedia ID for Mary Elphinstone
}

# Query to get the children of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne
SELECT ?child WHERE {
  wd:Q654321 wdt:P40 ?child. # Replace Q654321 with the DBpedia ID for Claude Bowes-Lyon
}

# Query to find parents of each child of Claude Bowes-Lyon
SELECT ?parent WHERE {
  ?child wdt:P22 ?parent.
  VALUES ?child { wd:Q11111 wd:Q22222 } # Replace with actual child IDs from previous query
}
```",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
119,10,train,Give me the office of Alberto Núñez Feijóo and tenant of Santiago de Compostela.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?office WHERE {
  ?person foaf:name ""Alberto Núñez Feijóo""@en .
  ?person dbo:office ?office .
  OPTIONAL { ?office dbp:location ?location . }
  FILTER(CONTAINS(LCASE(?location), ""santiago de compostela""))
}
```",2,2,3,1,2,3,3,71,0,0,2,0,0.0,0
531,17,train,"Give me the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . ?v1 <http://dbpedia.org/property/leader> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?leader WHERE {
  ?miguelMaura rdfs:label ""Miguel Maura""@en .
  ?miguelMaura dbp:party ?politicalParty .
  
  OPTIONAL { 
    ?politicalParty dbp:leader ?leader .
    FILTER EXISTS { ?leader a dbpedia-owl:Politician }
  }

  # Ensure we are getting the correct Miguel Maura
  MINUS { ?miguelMaura rdfs:label ""Miguel Maura"" } 

}
```",2,4,3,2,1,3,3,71,1,0,0,1.0,1.0,1.0
140,17,train,"Give me the commander in Pickett's Charge and party member of the ruling party, that is a political party and an organisation, in the death place, that is a settlement, of John McDermott (American artist).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/John_McDermott_(American_artist)> <http://dbpedia.org/ontology/deathPlace> ?v0 . <http://dbpedia.org/resource/Pickett's_Charge> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://dbpedia.org/property/leaderParty> ?v3 . ?result <http://dbpedia.org/ontology/party> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. },"```sparql
# Step 1: Find John McDermott's death place
SELECT ?deathPlace WHERE {
    dbpedia:John_McDermott_(artist) dbo:placeOfBirth ?birthPlace .
    dbpedia:John_McDermott_(artist) dbo:deathPlace ?deathPlace .
}

# Step 2: Identify the commander of Pickett's Charge and his political affiliation
SELECT ?commander ?party WHERE {
    dbpedia:Picketts_Charge dbo:commandedBy ?commander .
    ?commander dbo:memberOfPoliticalParty ?party .
}

# Step 3: Check if the party is an organization
SELECT DISTINCT ?party WHERE {
    ?party rdf:type dbo:PoliticalParty ;
           dbo:isOrganisation true .
}

# Step 4: Verify presence of the party in John McDermott's death place
SELECT ?member WHERE {
    ?deathPlace dbpedia:locatedInCountry ?country .
    ?party dbo:hasMember ?member .
    FILTER(?party = ?partyFromStep2)
}
```",4,7,5,3,2,3,2,20,0,0,1,0,0.0,0
737,36,train,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of Carl, Duke of Württemberg.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v0 . }","```sparql
SELECT ?childOfChild WHERE {
  # Step 1: Find Archduchess Margarete Sophie's parent
  dbpedia:Margarete_Sophie_Archduchess_of_Austria dbo:parent ?parent .

  # Step 2: Find the children of this parent
  ?sibling dbo:parent ?parent .
  
  # Step 3: Filter for royalty among these siblings
  ?sibling rdf:type dbpedia:RoyalPerson .

  # Step 4: Identify Carl, Duke of Württemberg's predecessor
  dbpedia:Carl_Duke_of_W%C3%BCrttemberg dbo:predecessor ?royaltyPredecessor .
  
  # Ensure the royalty is the same as the sibling found in step 3
  FILTER(?sibling = ?royaltyPredecessor)

  # Step 5: Find the child of this royal figure
  ?childOfChild dbo:parent ?sibling .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
353,40,train,"Give me the child of Elvira of Castile, Queen of Sicily and father of William II of Sicily and child of the parent of the child, that is a royalty, of Roger II of Sicily.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?elvira dbo:spouse dbr:Roger_II_of_Sicily .
  ?elvira a dbo:Person ;
          foaf:name ""Elvira of Castile""@en .

  ?roger a dbo:Person ;
         foaf:name ""Roger II of Sicily""@en ;
         dbo:spouse ?elvira .

  ?child dbo:parent ?elvira .
  ?child dbo:parent ?roger .
  
  ?william2 dbo:parent ?child .
  ?william2 a dbo:Person ;
            foaf:name ""William II of Sicily""@en .

  ?child a dbo:Monarch .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
353,28,train,"Give me the father of William II of Sicily and child of the parent of Roger III, Duke of Apulia and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?fatherOfWilliamII WHERE {
  ?william2 dcterms:isPartOf <http://dbpedia.org/resource/William_II_of_Sicily> .
  ?william2 dbo:parent ?fatherOfWilliamII .
}

UNION

SELECT ?childOfRogerIIIAndElvira WHERE {
  ?roger3 dcterms:isPartOf <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> .
  ?roger3 dbo:parent ?fatherOfRogerIII .
  
  ?elvira dcterms:isPartOf <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> .
  ?childOfRogerIIIAndElvira dbo:parent ?fatherOfRogerIII ;
                           dbo:parent ?elvira .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
361,16,train,"Give me the actor of the album, that is a film and a work, of Lasso the Moon and professional in Actor.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?album rdfs:label ""Lasso the Moon""@en .
  ?album rdf:type dbo:Film ;
         rdf:type dbo:Work .
  
  ?album dbo:performer ?actor .
  ?actor rdf:type dbo:Actor .
}
```",3,5,4,2,2,2,3,28,0,0,4,0,0.0,0
89,8,train,Give me the child of Saw Shwe Khet.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?sawShweKhet a dbo:Person ;
               foaf:name ""Saw Shwe Khet""@en .
  
  ?sawShweKhet dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
905,2,train,Give me the child of Stephen V of Hungary.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child ?childLabel WHERE {
  ?person dbo:givenName ""Stephen"" .
  ?person dbo:familyName ""V of Hungary"" .
  ?person dbo:child ?child .
  ?child rdfs:label ?childLabel .
  FILTER(LANG(?childLabel) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,5,0,0.0,0
258,5,train,"Who is the person born, that is a politician, as Eleonora Menicucci de Oliveira?","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Eleonora Menicucci de Oliveira""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person WHERE {
  ?person foaf:name ""Eleonora Menicucci de Oliveira"" .
  ?person dbo:occupation ?occupation .
  FILTER (CONTAINS(LCASE(str(?occupation)), ""politician""))
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
668,51,train,"Give me the person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in the profession of Rod Argent.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v4 . }","```sparql
SELECT ?person WHERE {
  # Find an artist from Central Region, Ghana
  ?artist dbo:birthPlace dbr:Central_Region_(Ghana) .
  ?artist a dbo:Artist .

  # Get the birth name of Rod Argent
  ?argent foaf:name ""Rodney Terence Alan Argent""@en .
  ?argent a dbo:Musician .

  # Match the birth names
  ?artist foaf:name ?name .
  FILTER (?name = ""Rodney Terence Alan Argent""@en)
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
39,13,train,Give me the professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
SELECT ?person WHERE {
  ?character dbo:alterEgoOf ?person .
  ?character rdfs:label ""The Shadow""@en .
}
```",2,2,3,2,1,3,3,71,0,0,39640,0,0.0,0
557,3,train,"Give me the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
SELECT ?fictionalCharacter WHERE {
  ?entity rdfs:label ""Kent Allard""@en .
  OPTIONAL { ?entity dbo:wikiPageRedirects ?redirect . }
  OPTIONAL { ?redirect dbo:character ?fictionalCharacter . }
  FILTER NOT EXISTS { ?fictionalCharacter a dbo:FictionalBook . } # Ensure it's not a book
  FILTER (lang(?fictionalCharacter) = ""en"")
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
557,44,train,"Give me the professional in  and producer of the claim to fame, that is a work, of Cora Sue Collins and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/occupation> """"@en . ?v2 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v2 . <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. }","```sparql
# Query to find Cora Sue Collins' notable work and its producer
SELECT ?work (str(?producer) AS ?producerName)
WHERE {
  ?collins dbo:profession dbr:Film_producer .
  ?collins foaf:name ""Cora Sue Collins"" .
  ?collins dbo:notableWork ?work .
  OPTIONAL { ?work dbo:producer ?producer . }
}

UNION

# Query to find Janet Gaynor's notable movie and its producer
SELECT ?movie (str(?producer) AS ?producerName)
WHERE {
  ?gaynor dbo:profession dbr:Actress .
  ?gaynor foaf:name ""Janet Gaynor"" .
  ?gaynor dbo:notableWork ?movie .
  FILTER EXISTS { ?movie a dbo:Film } .
  OPTIONAL { ?movie dbo:producer ?producer . }
}
```",5,8,6,2,3,3,3,71,0,0,1,0,0.0,0
119,7,train,Give me the reference to Spanish Socialist Workers' Party.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party ?officialWebsite ?relatedLink WHERE {
  ?party a dbo:PoliticalParty ;
         rdfs:label ""Partido Socialista Obrero Español""@en .
  
  OPTIONAL { ?party dbo:officialWebsite ?officialWebsite . }
  OPTIONAL { ?party rdfs:seeAlso ?relatedLink . }

  FILTER (lang(?partyLabel) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
198,61,train,"Give me the force of the awardee of the award of Quincy Adams Gillmore and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/place> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/commander> ?v5 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://dbpedia.org/ontology/birthPlace> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?force WHERE {
  # Identify Quincy Adams Gillmore and his death date
  ?gillmore a dbo:MilitaryPerson ;
           foaf:name ""Quincy Adams Gillmore"" ;
           dbo:dateOfDeath ?deathDate .

  FILTER (STR(?deathDate) = ""1850-08-05"") .

  # Find the award associated with Quincy Adams Gillmore
  ?award dbo:recipient ?gillmore ;
         dbo:awardeeForce ?force .

  # Determine the birthplace of Quincy Adams Gillmore
  ?gillmore dbo:birthPlace ?birthPlace .
  
  # Ensure the birthplace is a settlement in America
  ?birthPlace a dbo:Settlement ;
              dbo:country dbr:United_States_of_America .
}
```",6,8,7,3,2,3,3,71,0,0,2,0,0.0,0
756,50,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and native of the administration, that is a country, of the leader of West Germany.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . },"```sparql
SELECT ?manager ?team ?country WHERE {
  # Find the team managed by Thomas Letsch in a soccer club season
  ?management dbo:agent dbr:Thomas_Letsch ;
              dbo:position ""Manager"" ;
              dbo:team ?team .
  
  # Ensure it's a sports team season (specifically soccer)
  ?team rdf:type dbo:SoccerClub .

  # Find the country associated with the leader of West Germany
  ?leader foaf:nationality dbr:Germany ;
          dbo:position ""Chancellor"" ;
          dbo:country dbr:West_Germany .
  
  # Get the native administrative region or country of this leader
  ?leader dbo:nativePlace ?nativePlace .
  ?nativePlace dbo:country ?country .

  # Ensure the team's country matches the leader's country
  ?team dbo:location ?location .
  ?location dbo:country ?country .
}
```",5,9,6,3,2,3,3,71,0,0,3,0,0.0,0
119,31,train,"Give me the tenant of Spain and office of the leader of the administration, that is an event, of Anxo Quintana.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/office> ?result . ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v1 <http://dbpedia.org/property/leader> ?v0 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?partyLabel ?officeLabel ?eventLabel WHERE {
  VALUES ?person { dbr:Anxo_Quintana }
  
  # Find the political party of Anxo Quintana
  ?person dbo:party ?party .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }

  # Find the office held by Anxo Quintana
  ?person dbo:office ?office .
  
  # Find events related to his office (e.g., terms in office)
  OPTIONAL {
    ?office dbo:term ?event .
  }
  
  BIND(STR(?party) AS ?partyLabel)
  BIND(STR(?office) AS ?officeLabel)
  BIND(STR(?event) AS ?eventLabel)
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
119,3,train,"Give me the administration, that is an event, of Anxo Quintana.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event WHERE {
  ?person rdfs:label ""Anxo Quintana""@en .
  ?person a dbo:Person .
  ?event dbo:agent ?person ;
         a dbo:AdministrationEvent .
}
```",1,2,2,1,1,3,3,71,0,0,3,0,0.0,0
905,34,train,"Give me the child of Stephen V of Hungary and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> ?v1 . ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . }","```sparql
SELECT ?child WHERE {
  # Step 1: Identify Philip, Despot of Romania
  ?philip dbo:birthName ""Philip, Despot of Romania""@en .
  
  # Step 2: Find the parent of Philip
  ?parent dbo:child ?philip .

  # Step 3: Determine the father of Philip's parent (grandfather)
  ?grandfather dbo:spouse ?parentSpouse .
  ?parent dbo:father ?grandfather .

  # Step 4: Identify the spouse of this grandfather
  ?spouse dbp:husbandOrWife ?grandfather .

  # Step 5: Find a child of Stephen V of Hungary and this spouse who is royalty
  ?stephenV dbp:name ""Stephen V of Hungary""@en .
  ?child dbo:parent ?stephenV ;
         dbo:parent ?spouse ;
         rdf:type dbo:Monarch .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
742,9,train,Give me the alumnus of the reference to Пловдивски университет „Паисий Хилендарски“.,"SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""Пловдивски университет „Паисий Хилендарски“""@en . ?result <http://dbpedia.org/ontology/almaMater> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?alumnus WHERE {
  ?alumnus dbo:alumniOf dbp:Plovdiv_University_of_Saint_Paisius_the_Hilandarian .
}
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
19,8,train,Give me the spouse of the person born as Caroline Louise Bevan Symonds and professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . ?v2 <http://dbpedia.org/property/birthName> ""Caroline Louise Bevan Symonds""@en . ?result <http://dbpedia.org/ontology/spouse> ?v2 . }","```sparql
SELECT ?spouse WHERE {
  ?person foaf:name ""Caroline Louise Bevan Symonds""@en .
  ?person dbo:birthName ""Caroline Louise Bevan Symonds""@en .
  ?person dbo:spouse ?spouse .
}
```",3,3,4,2,2,2,2,9,0,0,1,0,0.0,0
89,58,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and spouse of the father, that is a royalty, of Myat Hpone Pyo and child of Saw Min Hla.",SELECT ?result WHERE { <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v5 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?result <http://dbpedia.org/ontology/spouse> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v2 <http://dbpedia.org/property/father> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?predecessor WHERE {
    # Step 1: Identify Saw Min Phyu's spouse
    ?spouse a dbo:Spouse ;
           dbo:spouse dbr:Saw_Min_Phyu .

    # Step 2: Find the child of Saw Min Phyu's spouse that is a royalty
    ?child dbo:parent ?spouse ;
           a dbo:RoyalFamilyMember .

    # Step 3: Identify Myat Hpone Pyo's father that is a royalty
    ?royalFather dbo:child dbr:Myat_Hpone_Pyo ;
                 a dbo:RoyalFamilyMember .

    # Step 4: Find the spouse of Myat Hpone Pyo's royal father
    ?spouse2 dbo:spouse ?royalFather .

    # Step 5: Identify Saw Min Hla's child
    ?childOfSawMinHla dbo:parent dbr:Saw_Min_Hla ;
                     a dbo:Person .

    # Step 6: Determine the predecessor of the royalty child from step 2
    ?predecessor dbo:successor ?child .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
731,13,train,Give me the force of the awardee of the award of Edmund Hakewill-Smith.,SELECT ?result WHERE { <http://dbpedia.org/resource/Edmund_Hakewill-Smith> <http://dbpedia.org/property/awards> ?v0 . ?v1 <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/commander> ?v1 . },"```sparql
SELECT ?awardee ?force WHERE {
  ?award dbo:name ""Edmund Hakewill-Smith Award""@en .
  ?award dbo:recipient ?awardee .
  OPTIONAL { 
    ?awardee dbo:militaryUnit ?unit .
    ?unit rdfs:label ?force .
    FILTER(LANG(?force) = 'en')
  }
}
```",3,3,4,3,1,3,2,20,0,0,734,0,0.0,0
89,2,train,Give me the predecessor of Myat Hpone Pyo.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . },"```sparql
SELECT ?predecessor WHERE {
  ?person foaf:name ""Myat Hpone Pyo""@en .
  OPTIONAL { ?person dbo:position ?role . }
  OPTIONAL { ?role dbo:predecessor ?predecessorRole . }
  OPTIONAL { ?predecessorRole dbo:agent ?predecessor . }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
103,17,train,"Give me the alter ego of the series, that is a comics character, of The Shadow (video game).",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . ?v1 <http://dbpedia.org/property/alterEgo> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. },"```sparql
SELECT ?alterEgo WHERE {
  dbpedia:Shadow (dbp:alterEgo) ?alterEgo .
}
```",2,3,3,2,1,3,3,71,0,0,3,0,0.0,0
557,38,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v3 . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v2 . ?v3 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?producerCollins ?producerGaynor WHERE {
  # Cora Sue Collins' work ""The Wizard of Oz""
  dbr:The_Wizard_of_Oz dbo:director dbr:Mervyn_LeRoy .
  dbr:The_Wizard_of_Oz dbo:producer ?producerCollins .

  # Janet Gaynor's notable works
  OPTIONAL { 
    dbr:7th_Heaven dbo:producer ?producerGaynor .
    UNION
    dbr:Street_Angel dbo:producer ?producerGaynor .
  }
}
```",4,7,5,2,2,3,3,71,0,0,1,0,0.0,0
263,1,train,"Give me the parent of Mary Elphinstone, Lady Elphinstone.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  ?person a dbo:Person ;
          foaf:name ""Mary Elphinstone"" .
  OPTIONAL { ?person dbo:spouse ?spouse . }
  OPTIONAL { ?person dbo:parent ?parent . }
}
```",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
80,23,train,Give me the actor of the movie with the author of Smartbomb (book).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v2 . ?v0 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Step 1: Find the author of the book ""Smartbomb""
SELECT ?author WHERE {
  ?book dct:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Step 2: Identify a movie written by this author (assuming we get an author URI from step 1)
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie WHERE {
  ?author dbo:film ?movie .
}

# Step 3: Retrieve the actor(s) from that movie (assuming we get a movie URI from step 2)
SELECT DISTINCT ?actor WHERE {
  ?movie dbo:starring ?actor .
}
```",3,3,4,3,1,3,3,71,0,0,55786,0,0.0,0
103,15,train,"Give me the movie, that is a television show, with the person born as Richard Grant Esterhuysen.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/property/starring> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?movie WHERE {
  ?person foaf:name ""Grant Bowler""@en .
  ?person dbo:birthday ?birthday .
  ?film dbo:starring ?person ;
        a ?type .
  FILTER(?type IN (dbr:Television_show, dbr:Film))
  OPTIONAL { ?film dbo:wikiPageRedirects ?redirect }
  BIND(IF(BOUND(?redirect), ?redirect, ?film) AS ?movie)
}
```",2,3,3,2,1,3,3,71,0,0,10,0,0.0,0
39,37,train,"Give me the band of Bob Thompson (musician) and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/property/alterEgo> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band ?profession 
WHERE {
  # Find the band associated with Bob Thompson (musician)
  ?person a dbo:MusicArtist ;
          foaf:name ""Bob Thompson"" ;
          dbo:memberOf ?band .
  
  # Find The Shadow's profession
  ?shadowCharacter dbo:creator dbr:Walter_B._Gibson ;
                  dbo:profession ?profession .

  FILTER regex(?shadowCharacter, ""The Shadow"", ""i"")
}
```",4,6,5,3,2,3,3,71,0,0,4,0,0.0,0
513,7,train,Give me the entity in the award of George H. Cameron.,SELECT ?result WHERE { <http://dbpedia.org/resource/George_H._Cameron> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/country> ?v1 . },"```sparql
SELECT ?award WHERE {
  wd:Q1234567 dbo:recipient wd:Q7890123 .
  wd:Q1234567 rdfs:label ?awardLabel .
  FILTER (lang(?awardLabel) = 'en' && regex(str(?awardLabel), ""National Medal of Technology"", ""i""))
}
```

Note: In the above query, `wd:Q1234567` should be replaced with the DBpedia identifier for George H. Cameron, and `wd:Q7890123` is a placeholder for his DBpedia resource ID.",2,2,3,2,1,3,2,20,0,0,87241,0,0.0,0
159,6,train,Give me the writer of Always the Love Songs.,SELECT ?result WHERE { <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?result . },"```sparql
SELECT ?song ?writer WHERE {
  ?song dbo:title ""Always the Love Songs"" .
  OPTIONAL { ?song dbo:lyricist ?writer . }
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
492,6,train,Give me the death place of Reed Howes and death place of Carolyn Jones.,SELECT ?result WHERE { <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?deathPlace WHERE {
  VALUES ?person { 
    dbr:Reed_Howes 
    dbr:Carolyn_Jones_(actress)
  }
  
  ?person dbo:deathPlace ?deathPlace .
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
468,5,train,"Give me the father, that is a royalty, of Peter IV of Aragon.",SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://dbpedia.org/property/father> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father ?fatherLabel WHERE {
  ?person dbo:father ?father .
  ?person rdfs:label ""Peter IV of Aragon""@en .
  OPTIONAL { ?father dbo:occupation ?occupation . FILTER(CONTAINS(LCASE(?occupation), 'king') || CONTAINS(LCASE(?occupation), 'queen')) }
  SERVICE <http://dbpedia.org/sparql> {
    ?father rdfs:label ?fatherLabel .
    FILTER (LANG(?fatherLabel) = ""en"")
  }
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
78,14,train,"Give me the associated musical artist of Stuart Tosh and associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack).",SELECT ?result WHERE { <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Query for associated musical artist of Stuart Tosh
SELECT ?artist WHERE {
  ?stuartTosh dbo:birthName ""Stuart Tosh"" .
  ?stuartTosh dbo:associatedBandOrMusicalArtist ?artist .
}

UNION

# Query for writer who is also a musical artist and an artist involved in Wizards of Waverly Place soundtrack
SELECT DISTINCT ?writer WHERE {
  ?soundtrack dbo:title ""Wizards of Waverly Place (soundtrack)"" ;
              dbo:composer ?writer .
  ?writer rdf:type dbo:MusicalArtist .
  ?writer rdf:type dbo:Artist .
}
```",3,5,4,2,2,2,3,28,0,0,3,0,0.0,0
531,20,train,"Give me the tenant of Madrid and office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?office ?connectionToMadrid
WHERE {
  ?person a dbo:Politician ;
          dbo:officeHolderOf ?office ;
          dbo:spouseOrPartner ?partner .
  
  FILTER EXISTS { 
    ?event dbo:location dbr:Central_African_Republic_Civil_War ;
           dbo:participant ?person .
  }
  
  OPTIONAL {
    ?connectionToMadrid dbo:place dbr:Madrid ;
                        dbo:tenant ?person .
  }

  FILTER (?office != """" && ?connectionToMadrid != """")
}
```",3,5,4,2,2,3,3,71,0,0,2,0,0.0,0
159,32,train,"Give me the reference to the writer of Always the Love Songs and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/successor> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v3 . },"```sparql
SELECT ?person WHERE {
  ?book dcterms:title ""Always the Love Songs""@en .
  ?book dbo:author ?author .
  ?author foaf:name ""David Yaffe""@en .

  ?war dbp:conflictName ""Russo-Polish War (1654–1667)""@en ;
       dbo:participant ?successor .

  ?successor rdf:type dbo:Politician ;
             dbo:officeHolder ?office ;
             foaf:name ?name .
  
  FILTER(?name = ""Jan III Sobieski""@en)
}
```",4,6,5,2,2,3,3,71,0,0,1,0,0.0,0
531,53,train,"Give me the office of Mariano Rajoy and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/residence> ?v2 . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office2003 ?partyLeaderOffice
WHERE {
  # Find Mariano Rajoy's office in the 2003 Madrid City Council election
  OPTIONAL {
    ?rajoy dbo:office ?office2003 .
    ?office2003 dbo:election dbr:Madrid_City_Council_election,_2003 .
  }

  # Find Mariano Rajoy's position as leader of the Conservative Republican Party (Spain)
  OPTIONAL {
    ?rajoy dbo:position ?partyLeaderOffice .
    ?partyLeaderOffice dbo:organization dbr:Conservative_Republican_Party_(Spain) .
  }
  
  # Bind Mariano Rajoy to his DBpedia resource
  VALUES ?rajoy { dbr:Mariano_Rajoy }
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
311,8,train,Give me the band member of the writer of No Alternative.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . <http://dbpedia.org/resource/No_Alternative> <http://dbpedia.org/property/writer> ?v0 . },"```sparql
SELECT ?memberName WHERE {
  wd:Q1340 dbo:bandMember ?person .
  ?person foaf:name ?memberName .
}
```",2,2,3,2,1,3,2,20,0,0,123,0,0.0,0
941,17,train,"Give me the spouse of the spouse of the child, that is a royalty, of Princess Antoinette of Brunswick-Wolfenbüttel and child of Ferdinand Albert II, Duke of Brunswick-Wolfenbüttel.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Wolfenbüttel> . <http://dbpedia.org/resource/Princess_Antoinette_of_Brunswick-Wolfenbüttel> <http://dbpedia.org/ontology/child> ?v0 . ?v3 <http://dbpedia.org/ontology/spouse> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?grandchild ?grandchildSpouse ?grandchildSpouseSpouse WHERE {
  # Step 1: Find Princess Antoinette's children
  ?princess a dbo:Person ;
           foaf:name ""Antoinette of Brunswick-Wolfenbüttel""@en .
  
  ?princess dbo:child ?child .

  # Step 2: Ensure the child is also a child of Ferdinand Albert II and is royalty
  ?child dbo:parent ?father .
  ?father foaf:name ""Ferdinand Albert II, Duke of Brunswick-Wolfenbüttel""@en .
  
  ?child dbo:royaltyStatus ?status .
  FILTER(?status = dbp:Royal)

  # Step 3: Find the spouse of this royal child
  ?child dbo:spouse ?grandchildSpouse .

  # Step 4: Find the spouse of that spouse
  ?grandchildSpouse dbo:spouse ?grandchildSpouseSpouse .
}
```",4,5,5,3,2,3,2,20,0,0,3,0,0.0,0
609,47,train,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the awardee of List of awards and nominations received by Vince Gilligan.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/governor> ?v4 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. },"```sparql
# Step 1: Find Paulus Powell's Birth Place
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
  FILTER (wdt:P31/psv:P31 ?birthPlace ""AdministrativeRegion""^^xsd:string)
}

# Step 2: Find the Governor of that Region
SELECT ?governorBirthPlace WHERE {
  ?region wdt:P36 ?country .
  ?governor wdt:P69 ?region ;
            wdt:P19 ?governorBirthPlace .
  FILTER (?region = <birthPlaceFromStep1>)
}

# Step 3: Find Vince Gilligan's Award
SELECT DISTINCT ?award WHERE {
  wd:Q789012 wdt:P166 ?award .
}

# Step 4: Find an Awardee of that Award
SELECT DISTINCT ?awardeeBirthPlace WHERE {
  ?otherPerson wdt:P166 ?award ;
               wdt:P19 ?awardeeBirthPlace .
  FILTER (?award = <awardFromStep3>)
  FILTER (wdt:P31/psv:P31 ?awardeeBirthPlace ""AdministrativeRegion""^^xsd:string)
}

# Step 5: Find the Governor of that Awardee's Birth Place
SELECT ?finalGovernorBirthPlace WHERE {
  ?region wdt:P36 ?country .
  ?governor wdt:P69 ?region ;
            wdt:P19 ?finalGovernorBirthPlace .
  FILTER (?region = <awardeeBirthPlaceFromStep4>)
}
```

Note: Replace `<birthPlaceFromStep1>`, `<awardFromStep3>`, and `<awardeeBirthPlaceFromStep4>` with the actual URIs or values obtained from previous queries.",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
293,18,train,Give me the person born as Harriette Arlene Lake and spouse of Roger Pryor (actor) and party member of Republican Party (United States).,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?spouse ?party WHERE {
  ?person dbo:birthName ""Harriette Arlene Lake""@en .
  ?person dbo:spouse dbr:Roger_Pryor_(actor) .
  OPTIONAL { ?person dbo:memberOfParty dbr:Republican_Party_(United_States) . }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
419,6,train,"Give me the alma mater of the awardee, that is australian and a scientist, of Australian Laureate Fellowship.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/almaMater> ?result . ?v0 <http://dbpedia.org/property/awards> ""Australian Laureate Fellowship""@en . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Australia>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?scientist ?almaMater WHERE {
  ?scientist dbo:nationality dbr:Australia .
  ?scientist dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""scientist"") || CONTAINS(LCASE(?occupation), ""researcher""))
  ?scientist dbp:awardReceived dbr:Australian_Laureate_Fellowship .
  OPTIONAL { ?scientist dbo:almaMater ?almaMater . }
}
```",2,4,3,2,1,2,2,9,0,0,8,0,0.0,0
412,9,train,Give me the entity in Athens and war of Konstantinos Ventiris.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  # Find the wars associated with Konstantinos Ventiris
  ?ventiris dbo:wikiPageDisambiguates dbr:Konstantinos_Ventiris .
  ?ventiris dbo:participatedInWar ?war .

  # Check if any of these wars are connected to Athens
  OPTIONAL {
    ?war dbo:location dbr:Athens ;
         rdf:type dbo:MilitaryConflict .
  }
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
225,16,train,"Give me the entity in the region of Japan Standard Time and birthplace of the awardee, that is Japanese, of Anita Borg Institute Women of Vision Awards.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?v2 <http://dbpedia.org/property/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Anita_Borg_Institute_Women_of_Vision_Awards> . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?result <http://dbpedia.org/ontology/country> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?awardee ?birthPlace WHERE {
  ?award dbo:recipient ?person .
  ?person dbo:nationality dbr:Japan .
  ?person dbo:award ?award .
  FILTER regex(str(?award), ""Anita Borg Institute Women of Vision Awards"", ""i"") .
  ?person dbp:birthPlace ?birthPlace .
  
  # Assuming we have a list or pattern to identify regions under Japan Standard Time
  VALUES ?jstRegion {
    dbr:Japan
    dbr:Taiwan
    dbr:South_Korea
    dbr:China_Shanghai_Time_Zone
    # Add more regions as needed
  }
  
  OPTIONAL { ?birthPlace dbo:country ?country . FILTER(?country IN (?jstRegion)) }
}
```",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
37,0,train,Give me the birthplace of Bob Crewe.,SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Crewe> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person rdfs:label ""Bob Crewe""@en .
  ?person dbo:birthPlace ?birthPlace .
  FILTER(LANG(?person) = 'en')
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
39,46,train,Give me the professional in the profession of the producer of Coke Studio Philippines and professional in the alter ego of The Shadow.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v2 . },"```sparql
# Query for the producer of Coke Studio Philippines and their professions
SELECT ?producer ?profession WHERE {
  ?show dcterms:subject dbc:Coke_Studio_Philippines .
  ?show dbo:creator ?producer .
  ?producer dbo:occupation ?profession .
}

UNION

# Query for Lamont Cranston (The Shadow's alter ego) and his professions
SELECT ?alterEgo ?profession WHERE {
  ?character rdfs:label ""The Shadow""@en .
  ?character dbo:alterEgo ?alterEgo .
  ?alterEgo rdfs:label ""Lamont Cranston""@en .
  ?alterEgo dbo:occupation ?profession .
}
```",5,5,6,3,2,3,3,71,0,0,39640,0,0.0,0
723,3,train,"Give me the producer, that is an organisation and a group, of Nothing to Gein.",SELECT ?result WHERE { <http://dbpedia.org/resource/Nothing_to_Gein> <http://dbpedia.org/ontology/producer> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?producer WHERE {
  ?film dbo:title ""Nothing to Gein""@en .
  ?film dbo:filmProducer ?producer .
  ?producer rdf:type dbo:Organization ;
            rdf:type foaf:Group .
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
756,60,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v1 <http://dbpedia.org/ontology/manager> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v3 <http://dbpedia.org/ontology/team> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v3 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://dbpedia.org/ontology/manager> ?result . }","```sparql
# Step 1: Find the sports manager born on 1968-08-26
SELECT ?manager WHERE {
  ?manager a dbo:SportsManager ;
           dbo:birthDate ""1968-08-26""^^xsd:date .
}

# Assuming we have identified the manager, let's say it is <http://dbpedia.org/resource/Name_of_Manager>

# Step 2: Find the soccer club managed by this person
SELECT ?team WHERE {
  <http://dbpedia.org/resource/Name_of_Manager> dbo:managerOf ?team .
  ?team a dbo:SoccerClub ;
        a dbo:SportsOrganization ;
        a dbo:Organisation .
}

# Assuming we have identified the team, let's say it is <http://dbpedia.org/resource/Soccer_Club_Name>

# Step 3: Identify the successor of the 2006–07 VfL Bochum season
SELECT ?successor WHERE {
  <http://dbpedia.org/resource/2006%E2%80%9307_VfL_Bochum_season> dbo:succeeds ?successor .
  ?successor a dbo:FootballLeagueSeason ;
             a dbo:SportsTeamSeason ;
             a dbo:SportsSeason .
}

# Assuming we have identified the successor, let's say it is <http://dbpedia.org/resource/Successor_Season>

# Step 4: Find the manager of this team in the identified successor season
SELECT ?manager WHERE {
  ?team dbo:season ?successor ;
        dbo:manager ?manager .
}
```",6,16,7,3,2,3,3,71,0,0,1,0,0.0,0
472,20,train,"Give me the administration of Olaf I of Denmark and territory administered from Copenhagen and administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . ?v3 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?result <http://dbpedia.org/property/leader> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administrationOlaf1 WHERE {
  dbr:Olaf_I_of_Denmark dbo:ruledTerritory ?administrationOlaf1 .
}

UNION

SELECT ?administrationChristian WHERE {
  dbr:Prince_Christian_of_Schleswig-Holstein-Sonderburg-Beck dbo:ruledTerritory ?administrationChristian ;
                                                             a dbo:RoyalPerson .
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
557,42,train,"Give me the producer of the claim to fame, that is a movie and a work, of Janet Gaynor and professional in the alter ego of The Shadow and producer of The Adventures of Tom Sawyer (1938 film).",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  # Janet Gaynor's claim to fame movie
  VALUES (?gaynorMovie) { 
    dbr:7th_Heaven_(film)
    dbr:Street_Angel_(film)
    dbr:Sunrise:_A_Story_of_One_Day
  }
  
  ?gaynorMovie dbo:producer ?producer .
  
  # The Shadow's alter ego, Lamont Cranston
  OPTIONAL {
    dbr:The_Shadow (dbo:alterEgo) ?lamontCranston .
    ?lamontCranston dbo:film ?shadowFilm .
    ?shadowFilm dbo:producer ?producer .
  }
  
  # Producer of ""The Adventures of Tom Sawyer"" (1938 film)
  OPTIONAL {
    dbr:The_Adventures_of_Tom_Sawyer_(1938_film) dbo:producer ?producer .
  }
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
119,45,train,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and office of Alberto Núñez Feijóo and tenant of Spain.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?psoeLeader ?presidentOfSpain WHERE {
  # Find the leader of the Spanish Socialist Workers' Party (PSOE)
  ?party a dbo:PoliticalParty ;
         rdfs:label ""Spanish Socialist Workers' Party""@en .
  
  ?leader dbo:positionHeld ?party ;
          dbo:officeHolder ?person ;
          rdfs:label ?psoeLeaderLabel .

  FILTER(LANG(?psoeLeaderLabel) = 'en')

  # Find the current President of Spain
  ?country a dbo:CivicOrganisation ;
           rdfs:label ""Spain""@en .
  
  ?presidentOfSpain dbo:headOfState ?country ;
                    rdfs:label ?presidentLabel .

  FILTER(LANG(?presidentLabel) = 'en')
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
756,56,train,"Give me the native of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v0 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://dbpedia.org/ontology/manager> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager ?team WHERE {
  ?person a dbo:SoccerManager ;
          dbo:birthDate ""1968-08-26""^^xsd:date ;
          foaf:name ?manager .
  
  ?person dbo:managedTeam ?team .

  FILTER EXISTS { 
    ?team dbo:sport dbr:Soccer .
  }

  FILTER EXISTS {
    ?team a dbo:SportsClub ;
          a dbo:Organization ;
          a dbo:SoccerClub .
  }
  
  ?season dbo:club ?team ;
          dbo:season ""2007–08"" .

}
```",6,13,7,3,3,3,3,71,0,0,1,0,0.0,0
225,9,train,Give me the region of the time zone in Kiyosu.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/timeZone> ?v0 . <http://dbpedia.org/resource/Kiyosu> <http://dbpedia.org/ontology/timeZone> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?region WHERE {
  ?kiyosu a dbo:PopulatedPlace ;
          rdfs:label ""Kiyosu""@en .
  
  OPTIONAL { 
    ?kiyosu dbo:timeZone ?timezone .
    ?timezone dbo:country ?country .
    ?country dbo:officialName ?region .
  }
}
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
119,11,train,Give me the entity in Poland and war of the commander in French Revolutionary Wars.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Poland> . ?v2 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/French_Revolutionary_Wars> <http://dbpedia.org/ontology/commander> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity ?war WHERE {
  ?entity a dbo:MilitaryPerson ;
          dbo:nationality dbr:Poland ;
          dbo:occupation dbr:Military_officer .
  
  OPTIONAL { ?entity dbo:participatedInWar ?war . }
  
  FILTER(CONTAINS(LCASE(STR(?war)), ""french revolutionary wars""))
  
  # To specifically target Tadeusz Kościuszko
  VALUES ?entity {
    dbr:Tadeusz_Kościuszko
  }
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
731,6,train,Give me the war of Tom Phillips (Royal Navy officer) and force of William Tennant (Royal Navy officer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Tom_Phillips_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/William_Tennant_(Royal_Navy_officer)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?force 
WHERE {
  # Query for Tom Phillips' war involvement
  OPTIONAL { 
    dbr:Tom_Phillips_(Royal_Navy_officer) dbo:militaryConflict ?war .
  }
  
  # Query for William Tennant's command force
  OPTIONAL { 
    dbr:William_Tennant_(Royal_Navy_officer) dbo:commanded ?force .
  }
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
595,15,train,"Give me the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://dbpedia.org/property/author> ?result . ?v1 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?work dbo:author dbr:Hillary_Clinton .
  ?work rdf:type dbo:Book .
  FILTER EXISTS { ?work dbo:genre dbr:Written_work } .
  
  OPTIONAL {
    ?person dbr:Hillary_Clinton ;
            a dbo:Politician ;
            dbo:officeHolder ?office .
  }
}
```",2,6,3,2,1,3,3,71,0,0,1,0,0.0,0
295,17,train,Give me the native of the birth place of the producer of Storm in a Teacup (film) and writer of Boom Shack-A-Lak.,SELECT ?result WHERE { <http://dbpedia.org/resource/Boom_Shack-A-Lak> <http://dbpedia.org/property/writer> ?result . ?v0 <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . <http://dbpedia.org/resource/Storm_in_a_Teacup_(film)> <http://dbpedia.org/ontology/producer> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?native WHERE {
  # Find the producer of ""Storm in a Teacup"" (film)
  ?producer dbo:productionCompany ?film .
  ?film rdfs:label ""Storm in a Teacup""@en .

  # Find the writer of ""Boom Shack-A-Lak""
  ?writer dbo:lyrics ?song .
  ?song rdfs:label ""Boom Shack-A-Lak""@en .

  # Ensure it's the same person
  FILTER (?producer = ?writer)

  # Get the birthplace of this producer/writer
  ?producer dbo:birthPlace ?birthPlace .

  # Find the native status associated with that birthplace
  ?birthPlace dbo:nativeName ?native .
}
```",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
769,5,train,"Give me the manager, that is a sports manager and a soccer manager, of Hong Kong C Team.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. <http://dbpedia.org/resource/Hong_Kong_C_Team> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?manager WHERE {
  ?team dbo:coach ?manager .
  ?team rdfs:label ""Hong Kong C Team""@en .
  FILTER NOT EXISTS { ?manager dbo:sport <http://dbpedia.org/resource/Soccer> }
  OPTIONAL { ?manager dbo:sport <http://dbpedia.org/resource/Soccer> . }
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
871,7,train,Who is the alumnus of Eton College?,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?name WHERE {
  ?person dbo:alumnus dbpedia:Eton_College .
  OPTIONAL { ?person rdfs:label ?name FILTER (lang(?name) = 'en') }
}
```",1,1,2,1,1,3,3,71,0,0,211,0,0.0,0
58,5,train,Give me the movie with .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> """"@en . }","```sparql
# No specific query can be generated due to lack of details.
```",1,1,2,1,1,3,2,20,0,0,39790,0,0.0,0
628,24,train,Give me the person born as the birth name of Bobby Shmurda and native of Florida.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Bobby Shmurda""@en .
  ?person dbo:birthPlace dbr:Florida .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
905,43,train,"Give me the spouse of Charles II of Naples and parent of the father, that is a royalty, of the spouse of Maria of Bytom and child of Stephen V of Hungary.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v3 . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Find Charles II of Naples' spouse
SELECT ?spouse WHERE {
  wd:Q123456 wdt:P26 ?spouse .
}

# Step 2: Find the parent of the father of that spouse (grandfather)
SELECT DISTINCT ?grandfather WHERE {
  ?spouse wdt:P22 ?father .
  ?father wdt:P22 ?grandfather .
}

# Step 3: Check if this person is royalty
SELECT DISTINCT ?royalGrandfather WHERE {
  ?grandfather wdt:P31 wd:Q5 . # Q5 represents human, but we need a more specific class for royalty
  FILTER EXISTS { ?grandfather wdt:P39 ?title } # P39 is title of office held
}

# Step 4: Find Maria of Bytom's spouse
SELECT ?spouse2 WHERE {
  wd:Q654321 wdt:P26 ?spouse2 .
}

# Step 5: Find the parent of the father of that spouse (grandfather)
SELECT DISTINCT ?grandfather2 WHERE {
  ?spouse2 wdt:P22 ?father2 .
  ?father2 wdt:P22 ?grandfather2 .
}

# Step 6: Check if this person is a child of Stephen V of Hungary
SELECT DISTINCT ?childOfStephenV WHERE {
  ?grandfather2 wdt:P40 wd:Q12345 . # Q12345 represents Stephen V of Hungary
}

# Final step: Find the commonality between royal grandfather and child of Stephen V
SELECT DISTINCT ?commonPerson WHERE {
  VALUES ?person { ?royalGrandfather ?childOfStephenV }
  ?person wdt:P31 wd:Q5 .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
347,49,train,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v0 <http://dbpedia.org/property/father> ?v1 . ?v2 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v2 . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
# Step 1: Find Maria Anna of Bavaria's royal children
SELECT ?child WHERE {
  ?mariaAnna dbp:birthDate ""1574""^^xsd:gYear .
  ?mariaAnna dbo:spouse ?husband .
  ?husband dbo:child ?child .
  ?child rdf:type dbo:Monarch .
}

# Step 2: Find the father of the identified royal child
SELECT DISTINCT ?father WHERE {
  VALUES ?child { <URI_of_identified_child> } # Replace with actual URI from step 1
  ?child dbo:parent ?father .
}

# Step 3: Find another child of this father
SELECT DISTINCT ?anotherChild WHERE {
  VALUES ?father { <URI_of_father> } # Replace with actual URI from step 2
  ?father dbo:child ?anotherChild .
}

# Step 4: Check if the identified child was a commander in the specified context
SELECT DISTINCT ?commander WHERE {
  VALUES ?anotherChild { <URI_of_another_child> } # Replace with actual URI from step 3
  ?anotherChild rdf:type dbo:MilitaryPerson .
  ?anotherChild dbo:occupation ?commanderRole .
  ?commanderRole rdfs:label ""Commander""@en .
  
  OPTIONAL {
    ?warEvent dbo:participatedIn ?commander .
    ?warEvent rdf:type dbo:SocietalEvent ;
              rdf:type dbo:Event ;
              dbo:depiction ?tvShow .
    ?tvShow rdf:type dbo:TelevisionShow .
    
    # Assuming the war event is related to 2nd Dragoon Regiment (France)
    ?warEvent dbo:participatingUnit <URI_of_2nd_Dragoon_Regiment> . # Replace with actual URI
  }
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
399,1,train,Give me the professional in Singer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Singer""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?profession WHERE {
  ?person a dbo:Singer .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(str(?name)), ""singer""))
  OPTIONAL { ?person dbo:occupation ?profession }
}
```",1,1,2,1,1,2,2,9,0,0,10364,0,0.0,0
87,24,train,"Give me the actor of the movie, that is a work and a film, with Audrey Hepburn and spouse of the awardee of List of awards and nominations received by Janusz Kamiński.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . }","```sparql
SELECT ?spouse WHERE {
  dbpedia:Janusz_Kamiński dbo:spouse ?spouse .
}
```

Next, we need to find the movies featuring Audrey Hepburn. We will use another SPARQL query for this:

```sparql
SELECT DISTINCT ?movie WHERE {
  ?actor foaf:name ""Audrey Hepburn""@en ;
         dbo:film ?movie .
}
```

Once we have the list of movies, we can identify the specific movie that fits the criteria (a work and a film) by checking if it has both `dbo:work` and `dbo:film` properties.

```sparql
SELECT DISTINCT ?movie WHERE {
  ?actor foaf:name ""Audrey Hepburn""@en ;
         dbo:film ?movie .
  ?movie rdf:type dbo:Film .
}
```

Finally, we need to find the actor who co-starred with Audrey Hepburn in that movie:

```sparql
SELECT DISTINCT ?coActor WHERE {
  ?movie dbo:starring ?actor .
  ?actor foaf:name ""Audrey Hepburn""@en .
  ?movie dbo:starring ?coActor .
  FILTER(?coActor != ?actor)
}
```

Combining these steps, we can determine the actor who co-starred with Audrey Hepburn in a movie that is both a work and a film, where her co-star's spouse is Janusz Kamiński.",4,6,5,2,2,2,3,28,0,0,1,0,0.0,0
595,13,train,"Give me the author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v1 <http://dbpedia.org/property/author> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?work dbo:author dbr:Bill_Clinton .
  FILTER EXISTS { ?work a dbo:Book . }
}
```",2,5,3,2,1,3,3,71,0,7,2,0.0,0.0,0
737,12,train,"Give me the child of Albrecht, Duke of Württemberg and child of Archduchess Margarete Sophie of Austria.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?child WHERE {
  ?albrecht dbo:spouse ?margarete .
  ?albrecht foaf:name ""Albrecht, Duke of Württemberg""@en .
  ?margarete foaf:name ""Margarete Sophie of Austria""@en .

  ?albrecht dbo:child ?child .
  ?margarete dbo:child ?child .
}
```",2,2,3,1,2,3,3,71,0,0,2,0,0.0,0
198,17,train,"Give me the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?birthPlace WHERE {
  ?person dbo:deathDate ""1850-08-05""^^xsd:date .
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:Settlement ;
              dbo:country dbr:United_States .
}
```",2,4,3,2,1,3,3,71,1,1,0,0.5,1.0,0.6666666666666666
119,32,train,"Give me the office of the leader of 2009 Galician regional election and tenant of the residence, that is a country, of Álvaro Quirós.",SELECT ?result WHERE { <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v3 . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . },"```sparql
SELECT ?office ?location WHERE {
  ?person foaf:name ""Álvaro Quirós""@en .
  ?person dbo:occupation ?role .
  ?role dbo:wikiPageRedirects ?redirect .
  FILTER(CONTAINS(LCASE(STR(?redirect)), ""2009 galician regional election"")) .

  ?office dbo:positionHeldBy ?person ;
          dbo:location ?location .

  ?location a dbo:Country .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
80,43,train,"Give me the actor of the album of the work, that is a song and a musical work, of T.I. and actor of Shelby Oaks and professional in .","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/album> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?result <http://dbpedia.org/property/occupation> """"@en . ?v4 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . }","```sparql
# Step 1: Find T.I.'s songs that are also musical works.
SELECT ?song WHERE {
    ?song dbo:artist dbr:T.I. ;
          a dbo:Songs .
}

# Step 2: Determine which album contains the identified song.
SELECT DISTINCT ?album WHERE {
    ?song dbo:release dbr:?[Album] .
    ?song ?p ?o . # Placeholder for step 1 result
}

# Step 3: Find actors in ""Shelby Oaks.""
SELECT DISTINCT ?actor WHERE {
    ?movie dbo:starring ?actor ;
           rdfs:label ""Shelby Oaks""@en .
}

# Step 4: Check if any actor from ""Shelby Oaks"" is associated with the album.
SELECT DISTINCT ?commonActor WHERE {
    ?album dbo:artist ?commonActor .
    ?movie dbo:starring ?commonActor .
    ?song dbo:release ?album .
    ?song dbo:artist dbr:T.I. ;
          a dbo:Songs .
    ?movie rdfs:label ""Shelby Oaks""@en .
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
668,44,train,Give me the person born as the birth name of Joey B and professional in the profession of Rod Argent and associated musical artist of $pacely.,SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Joey B's birth name
  VALUES (?joeyBBirthName) { ""Joseph Benson"" } # Assuming Joseph Benson is Joey B's real name

  # Rod Argent's profession
  VALUES (?rodArgentProfession) { dbr:Musician dbr:Keyboardist }

  # $pacely's associated musical artist
  ?pacelyArtist dbo:associatedMusicalArtist dbr:$pacely .
  
  # Person with Joey B's birth name
  ?person dbo:birthName ?joeyBBirthName .

  # Person in the same profession as Rod Argent
  ?person dbo:occupation ?rodArgentProfession .

  # Person associated with the same musical artist as $pacely
  ?person dbo:associatedMusicalArtist ?pacelyArtist .
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
311,10,train,"Who is the writer of the album, that is a musical work and a work and an album, of Sappy?",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://dbpedia.org/property/writer> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>. <http://dbpedia.org/resource/Sappy> <http://dbpedia.org/ontology/album> ?v0 . },"```sparql
SELECT ?writer WHERE {
  ?album a dbo:Album ;
         rdfs:label ""Sappy""@en .
  OPTIONAL { ?album dbo:composer ?writer . }
  OPTIONAL { ?album dbo:lyricist ?writer . }
}
```",2,5,3,2,1,3,2,20,0,0,26,0,0.0,0
871,48,train,"Give me the parent of the awardee of the award of Rodney Lees and father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/awards> ?v1 . }","```sparql
# Step 1: Find Rodney Lees' award
SELECT ?award WHERE {
    ?person dbo:name ""Rodney Lees""@en .
    ?person dbo:awardsReceived ?award .
}

# Step 2: Find the awardee's parent
SELECT DISTINCT ?parent WHERE {
    ?award dbo:recipient ?recipient .
    ?recipient dbo:parent ?parent .
}

# Step 3: Identify Frederick Stanley, 16th Earl of Derby's child who is a politician
SELECT DISTINCT ?child WHERE {
    ?person dbo:name ""Frederick Stanley, 16th Earl of Derby""@en ;
            dbo:child ?child .
    ?child rdf:type dbo:Politician .
}

# Step 4: Determine the politician's father
SELECT DISTINCT ?father WHERE {
    ?child dbo:parent ?father .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
375,11,train,"Give me the author of the movie, that is a work and a television show, with Vera Lynn and parent of Kate Dimbleby.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/ontology/author> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Kate_Dimbleby> . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Vera_Lynn> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?movie dbo:basedOn dbr:Vera_Drake_(play) .
  ?movie dbo:starring dbr:Vera_Lynn .
  OPTIONAL { ?movie dbo:productionCompany ?company . 
             ?company dbo:employee dbr:Joyce_Dimbleby } .
  ?movie dbo:author ?author .
}
```",3,5,4,2,2,3,2,20,0,0,1,0,0.0,0
557,11,train,Give me the professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
SELECT ?person WHERE {
  ?character dbo:alterEgoOf ?person .
  ?character rdfs:label ""The Shadow""@en .
}
```",2,2,3,2,1,3,3,71,0,0,39640,0,0.0,0
58,7,train,Give me the spouse of the person born as Linda Sue Cobb.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v1 . ?v1 <http://dbpedia.org/property/birthName> ""Linda Sue Cobb""@en . }","```sparql
SELECT ?spouse WHERE {
  ?person foaf:name ""Linda Sue Cobb""@en .
  ?person dbo:birthName ""Linda Sue Cobb"" .
  ?person dbo:spouse ?spouse .
}
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
384,0,train,Give me the party of Guillaume Peltier.,SELECT ?result WHERE { <http://dbpedia.org/resource/Guillaume_Peltier> <http://dbpedia.org/ontology/party> ?result . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?party WHERE {
  ?person dbo:name ""Guillaume Peltier""@en .
  ?person dbp:politicalParty ?party .
}
```",1,1,2,1,1,2,2,9,0,0,6,0,0.0,0
213,15,train,"Give me the birth place of the child, that is a politician, of the person decedent at Taipei and country of Cat Country (novel).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Taipei> . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Cat_Country_(novel)> <http://dbpedia.org/ontology/country> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?childBirthPlace WHERE {
  ?person dbo:deathPlace dbr:Taipei .
  ?person dbo:child ?child .
  ?child dbo:occupation dbr:Politician .
  ?child dbo:birthPlace ?childBirthPlace .
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
78,8,train,"Give me the associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?associatedArtist WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Stuart Mcbeath Tosh""@en .
  
  OPTIONAL { 
    ?association dbo:artist ?person .
    ?association dbo:artist ?associatedArtist .
    FILTER(?associatedArtist != ?person)
  }
}
```",2,3,3,2,1,2,3,28,0,0,4,0,0.0,0
557,2,train,Give me the producer of A Star Is Born (1937 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  ?film a dbo:Film ;
        rdfs:label ""A Star Is Born""@en ;
        dbo:releaseDate ?date .
  FILTER (YEAR(?date) = 1937)
  ?film dbo:producer ?producer .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
756,30,train,"Give me the native of West Germany and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of VfL Bochum.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?nativeCountry ?managerPeriod WHERE {
  # Find Thomas Letsch's native country
  OPTIONAL { 
    dbr:Thomas_Letsch dbo:nationality ?nativeCountry .
  }
  
  # Check if he was a manager for VfL Bochum and the period of management
  OPTIONAL {
    ?management dbo:agent dbr:Thomas_Letsch ;
                dbo:team dbr:VfL_Bochum ;
                dbo:endTime ?managerEndTime ;
                dbo:startTime ?managerStartTime .
  }
  
  # Filter for West Germany as a native country or managerial period
  FILTER (
    EXISTS { ?nativeCountry rdfs:label ""West Germany""@en } ||
    (BOUND(?managerStartTime) && BOUND(?managerEndTime) &&
     ?managerStartTime < ""1990-10-03T00:00:00Z""^^xsd:dateTime &&
     ?managerEndTime > ""1949-05-23T00:00:00Z""^^xsd:dateTime)
  )
}
```",4,7,5,2,3,3,3,71,0,0,1,0,0.0,0
737,15,train,"Give me the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v1 . },"```sparql
SELECT DISTINCT ?child WHERE {
  # Step 1: Identify Archduchess Helena of Austria
  wd:Q123456 dbo:spouse ?spouse .  # Replace Q123456 with the actual DBpedia ID for Archduchess Helena

  # Step 2: Find children of her spouse
  ?spouse dbo:child ?child .

  # Step 3: Filter by royalty
  ?child rdf:type ?type .
  FILTER (
    ?type IN (dbo:Monarch, dbo:RoyalFamilyMember) 
  )
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for Archduchess Helena of Austria. You may need to look up this identifier in DBpedia or use a query to find it if you don't have it.",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
609,51,train,"Give me the birth place of the governor, that is a politician, of Virginia and birth place of the author of the reference, that is American, to El Deafo.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/author> ?v2 . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v4 . ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
# Query to find the birth place of the current Governor of Virginia
SELECT ?birthPlace WHERE {
  ?governor dbo:officeHolderOf dbr:Governor_of_Virginia .
  ?governor dbo:positionTitle ""Governor""@en .
  ?governor dbo:birthPlace ?birthPlace .
  FILTER EXISTS { ?governor dbo:termStart ?start . }
  FILTER NOT EXISTS { ?governor dbo:termEnd ?end . }
}

UNION

# Query to find the birth place of Cece Bell, author of El Deafo
SELECT ?birthPlace WHERE {
  ?author foaf:name ""Cece Bell""@en .
  ?author dbo:birthPlace ?birthPlace .
  ?book dbo:author ?author ;
        rdfs:label ""El Deafo""@en .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
943,58,train,"Give me the father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and child of Dawit I and reference to the alter ego of The Shadow.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v5 . ?v0 <http://dbpedia.org/property/father> ?result . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://xmlns.com/foaf/0.1/name> ?v5 . },"```sparql
SELECT ?person WHERE {
  ?baedaMaryam1 dbo:spouse ?dawitI .
  ?zaraYaqob dbo:parent ?baedaMaryam1 ;
             dbo:parent ?dawitI .
  ?yeshaqI dbo:child ?zaraYaqob .
  ?amdaseyonI dbo:child ?yeshaqI .
  ?amdaseyonI a dbo:Monarch .
  FILTER (STR(?amdaseyonI) = ""Amda Seyon I"") 
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
103,24,train,Give me the professional in the profession of Shatrughan Sinha and professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v2 . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?profession ?otherPerson WHERE {
  # Get the profession of Shatrughan Sinha
  dbr:Shatrughan_Sinha dbo:occupation ?profession .
  
  # Find another person with the same profession
  ?otherPerson a dbo:Person ;
              dbo:occupation ?profession .
  
  FILTER(?otherPerson != dbr:Shatrughan_Sinha)
}
```",3,3,4,2,2,3,3,71,0,0,39640,0,0.0,0
353,27,train,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> ?v1 . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . },"```sparql
SELECT DISTINCT ?grandchild WHERE {
  ?constance dbo:spouse ?spouse .
  FILTER (str(?constance) = ""Constance_of_Burgundy"") .

  ?spouse dbo:child ?child .
  
  ?child dbo:child ?grandchild .
  
  OPTIONAL { ?grandchild dbo:royalTitle ?title . }
  FILTER EXISTS { ?grandchild dbo:royalTitle ?title }
}
```",3,4,4,3,1,3,3,71,0,0,8,0,0.0,0
58,2,train,Give me the birth name of Linda Bruckheimer.,SELECT ?result WHERE { <http://dbpedia.org/resource/Linda_Bruckheimer> <http://dbpedia.org/property/birthName> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?birthName WHERE {
  ?person a dbo:Person ;
          foaf:name ""Linda Bruckheimer""@en .
  OPTIONAL { ?person dbo:birthName ?birthName . }
}
```",1,1,2,1,1,3,2,20,1,0,0,1.0,1.0,1.0
609,6,train,"Who is the governor, that is a politician, of Virginia?",SELECT ?result WHERE { <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?governor ?name WHERE {
  ?office a dbo:GovernmentalFunction ;
          dbo:officeHolder ?governor .
  ?governor foaf:name ?name .
  FILTER(CONTAINS(LCASE(STR(?office)), ""virginia governor""))
}
ORDER BY DESC(?governor)
LIMIT 1
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
293,34,train,Give me the party member of the ruling party in the landmark at elevation of 20.116800000000001347 and person born as Harriette Arlene Lake.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v1 . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . ?v2 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . }","```sparql
# Step 1: Find the landmark at the given elevation
SELECT ?landmark WHERE {
  ?landmark dbp:elevation ""20.1168""^^xsd:float .
}

# Step 2: Find Harriette Arlene Lake's DBpedia entry
SELECT ?person WHERE {
  ?person foaf:name ""Harriette Arlene Lake""@en ;
          dbo:birthName ""Harriette Arlene Lake""@en .
}

# Step 3: Determine the political party associated with Harriette Arlene Lake
SELECT ?party WHERE {
  ?person dbo:politicalParty ?party .
  FILTER EXISTS { 
    ?landmark dbp:elevation ""20.1168""^^xsd:float .
    ?person foaf:name ""Harriette Arlene Lake""@en ;
            dbo:birthName ""Harriette Arlene Lake""@en .
  }
}

# Step 4: Identify a member of the ruling party
SELECT DISTINCT ?member WHERE {
  ?party dbo:member ?member .
  FILTER EXISTS { 
    ?landmark dbp:elevation ""20.1168""^^xsd:float .
    ?person foaf:name ""Harriette Arlene Lake""@en ;
            dbo:birthName ""Harriette Arlene Lake""@en .
    ?person dbo:politicalParty ?party .
  }
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
668,21,train,Give me the associated musical artist of the person born as Elorm Kabu Amenyah and person born as Darryl Paa Kwesi Bannerman-Martin.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . }","```sparql
SELECT ?artist WHERE {
  VALUES ?person { 
    dbr:Shatta_Wale 
    dbr:Fuse_ODG 
  }
  
  ?person dbo:birthName ?name .
  FILTER(?name IN (""Elorm Kabu Amenyah"", ""Darryl Paa Kwesi Bannerman-Martin""))
  
  OPTIONAL {
    ?person dbo:musicArtist ?artist .
  }

  UNION

  OPTIONAL {
    ?person foaf:based_near ?location .
    ?location dbo:wikiPageRedirects ?musicEntity .
    ?musicEntity rdf:type dbo:MusicalArtist .
    BIND(?musicEntity AS ?artist)
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
905,37,train,"Give me the child of Stephen V of Hungary and parent of the father, that is a royalty, of the spouse of Maria of Bytom.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
SELECT DISTINCT ?child WHERE {
  # Stephen V of Hungary
  ?stephenV dbr:Stephen_V_of_Hungary .
  
  # Find children of Stephen V
  ?stephenV dbo:spouse ?parent1 .
  ?parent1 dbo:child ?child .

  # Maria of Bytom and her spouse
  ?maria dbr:Maria_of_Bytom .
  ?maria dbo:spouse ?spouse .

  # Father of the spouse
  ?spouse dbo:father ?fatherOfSpouse .

  # Parent (likely mother) of this father
  ?parent2 dbo:child ?fatherOfSpouse .

  # Ensure all are royalty
  ?stephenV rdf:type dbr:Royal_person .
  ?child rdf:type dbr:Royal_person .
  ?spouse rdf:type dbr:Royal_person .
  ?fatherOfSpouse rdf:type dbr:Royal_person .
  ?parent2 rdf:type dbr:Royal_person .

  # Ensure the child is also the parent of the father
  FILTER(?child = ?parent2)
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
353,50,train,"Give me the child of the child of Alfonso VI of León and Castile and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?grandchild ?father WHERE {
  # Alfonso VI of León and Castile's children
  ?alfonsoVI dbo:spouse ?spouse .
  ?alfonsoVI dbo:child ?child .

  # One of these children (father) has a child (grandchild)
  ?child dbo:child ?grandchild .

  # Ensure the father is royalty and an office holder
  ?child rdf:type dbo:Monarch ;
         dbo:officeHolder ?office .

  # Find William I who is royalty and an office holder
  ?williamI rdf:type dbo:Monarch ;
            dbo:officeHolder ?office2 .
  
  FILTER(?williamI = dbr:William_I_of_Aquitaine) # Assuming we are referring to William I of Aquitaine

  # Ensure the grandchild is royalty and an office holder
  ?grandchild rdf:type dbo:Monarch ;
              dbo:officeHolder ?office3 .

  # The father of the grandchild should be one of Alfonso VI's children
  BIND(?child AS ?father)
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
816,52,train,"Give me the parent of the professional in Photographer and parent of Doon Arbus and actor of the movie, that is a work, with the person decedent at Los Angeles.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/occupation> ""Photographer""@en . ?result <http://dbpedia.org/ontology/child> ?v5 . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/starring> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find Doon Arbus's parent (Diane Arbus)
  dbr:Doon_Arbus dbo:parent dbr:Diane_Arbus .
  
  # Check Diane Arbus's death location
  dbr:Diane_Arbus dbo:deathPlace dbr:Los_Angeles .

  # Find a movie (work) associated with an actor connected to Diane Arbus
  ?movie dbo:starring ?actor .
  
  # Ensure the movie is a work
  ?movie rdf:type dbo:Film .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
80,50,train,"Give me the professional in the alter ego of The Shadow and actor of the album of the work, that is a song and a musical work, of T.I..",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v4 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v0 <http://dbpedia.org/ontology/album> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . },"```sparql
SELECT ?person WHERE {
  # Find the actor associated with The Shadow
  ?shadowCharacter rdfs:label ""The Shadow""@en .
  ?actor foaf:name ?name ;
          dbo:actedIn ?shadowAdaptation .
  ?shadowAdaptation dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""the shadow"")) .

  # Find the actor who collaborated with T.I. on a song from an album
  ?album dbo:artist ?tiArtist ;
         dbo:title ?albumTitle .
  FILTER(STRSTARTS(LCASE(?albumTitle), ""paper trail"")) .
  
  ?song dbo:lyricist ?collaborator ;
        dbo:partOfAlbum ?album .
  ?tiArtist foaf:name ""T.I.""@en .

  # Ensure the collaborator is also an actor
  ?collaborator foaf:name ?name ;
                dbo:actedIn ?anyRole .
  
  FILTER(?actor = ?collaborator)
}
```",5,7,6,3,2,3,3,71,0,0,4,0,0.0,0
151,2,train,Give me the birthplace of Burhan Belge.,SELECT ?result WHERE { <http://dbpedia.org/resource/Burhan_Belge> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  dbr:Burhan_Belge dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,2,2,9,2,0,0,1.0,1.0,1.0
361,2,train,Give me the actor of Rustlers' Rhapsody.,SELECT ?result WHERE { <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film a dbo:Film ;
        foaf:name ""Rustlers' Rhapsody""@en .
  ?film dbo:starring ?actor .
}
```",1,1,2,1,1,2,3,28,5,0,0,1.0,1.0,1.0
472,0,train,Give me the territory administered from Copenhagen.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?territory WHERE {
  ?territory a dbo:AdministrativeRegion .
  ?territory dbo:administrativeUnit dbr:Copenhagen .
}
```",1,1,2,1,1,2,3,28,0,0,4,0,0.0,0
119,19,train,Give me the office of the leader of 2009 Galician regional election and tenant of Spain.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?officeTitle ?presidentName WHERE {
  # Find the office title for the leader of the Galician regional election in 2009
  ?galiciaLeader dbo:positionHeld ?office .
  ?office rdfs:label ?officeTitle .
  FILTER(CONTAINS(LCASE(?officeTitle), ""president of the xunta de galicia""))
  
  # Find the President of Spain in 2009
  ?spainPresident dbo:office ?officeSpain .
  ?officeSpain rdfs:label ?officeLabelSpain .
  FILTER(CONTAINS(LCASE(?officeLabelSpain), ""president of spain""))
  ?spainPresident foaf:name ?presidentName .
  
  # Ensure the time frame is correct
  ?galiciaLeader dbo:electionDate ?electionDate .
  FILTER(YEAR(?electionDate) = 2009)
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
311,11,train,"Give me the band member of Mark Eitzel and associated musical artist of the associated musical artist, that is an artist, of R.E.M..",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/R.E.M.> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mark_Eitzel> . },"```sparql
# Step 1: Find Mark Eitzel's band (American Music Club)
SELECT ?band WHERE {
  wd:Q123456 a dbo:Band ;
             dbo:member wd:Q789012 . # Assuming Q789012 is the DBpedia ID for Mark Eitzel
}

# Step 2: Find an associated musical artist with American Music Club
SELECT DISTINCT ?associatedArtist WHERE {
  ?band dbo:member ?artist .
  FILTER(?band = wd:Q123456) # Replace with actual ID of American Music Club
  OPTIONAL { ?artist dbo:collaboratedWith ?associatedArtist . }
}

# Step 3: Find an associated musical artist of R.E.M.
SELECT DISTINCT ?remAssociatedArtist WHERE {
  wd:Q987654 a dbo:Band ; # Assuming Q987654 is the DBpedia ID for R.E.M.
             dbo:member ?artist .
  OPTIONAL { ?artist dbo:collaboratedWith ?remAssociatedArtist . }
}

# Step 4: Identify an artist from this associated musical artist of R.E.M.
SELECT DISTINCT ?finalArtist WHERE {
  ?associatedArtist dbo:member ?finalArtist .
  FILTER(?associatedArtist IN (SELECT ?remAssociatedArtist WHERE {
    wd:Q987654 a dbo:Band ;
               dbo:member ?artist .
    OPTIONAL { ?artist dbo:collaboratedWith ?remAssociatedArtist . }
  }))
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
37,1,train,Give me the birthplace of Scott LaFaro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Scott_LaFaro> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?subject a dbo:Musician ;
           foaf:name ""Scott LaFaro""@en .
  ?subject dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
859,9,train,"Give me the associated musical artist, that is a band and a group and an organisation, of the reference, that is a group, to Burnt by the Sun.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Burnt by the Sun""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?reference rdfs:label ""Burnt by the Sun""@en .
  ?reference dbo:musicalArtist ?artist .
  ?artist a dbo:Band ;
          a dbo:MusicalGroup ;
          a dbo:Organization .
}
```",2,6,3,2,1,3,2,20,0,0,5,0,0.0,0
347,38,train,"Give me the father of the child of Ferdinand III, Holy Roman Emperor and child of the father of Cecilia Renata of Austria.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v3 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?father WHERE {
  # Ferdinand III's children
  ?child dbo:parent dbr:Ferdinand_III,_Holy_Roman_Emperor .
  
  # Władysław IV Vasa as a parent
  ?sharedChild dbo:parent dbr:Władysław_IV_Vasa .

  # The child of Ferdinand III who is also a child of Władysław IV Vasa
  FILTER(?child = ?sharedChild)

  # Get the father of this shared child
  ?father dbo:spouse ?mother .
  ?child dbo:parent ?father .
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
472,15,train,"Give me the territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen and administration of Olaf I of Denmark.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v1 . ?result <http://dbpedia.org/ontology/capital> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?territory WHERE {
  # Christian Ditlev Ammentorp Hansen's death place
  VALUES ?hansenDeathPlace { dbr:Copenhagen }
  
  # Olaf I of Denmark's administration
  ?olaf dbo:country dbr:Denmark .
  
  # Find territories administered from Copenhagen and by Olaf I
  ?territory dbo:administrativeCapital ?hansenDeathPlace ;
             dbo:country ?olaf .
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
398,7,train,Give me the figure known as the nickname of Russia national football team.,SELECT ?result WHERE { <http://dbpedia.org/resource/Russia_national_football_team> <http://dbpedia.org/property/nickname> ?v1 . ?result <http://dbpedia.org/property/nickname> ?v1 . },"```sparql
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dcterms: <http://purl.org/dc/terms/>

SELECT ?nickname WHERE {
  dbr:Russia_national_football_team dcterms:alternative ?nickname .
}
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
293,9,train,Give me the party member of Republican Party (United States) and spouse of Roger Pryor (actor).,SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . },"```sparql
# Query for a party member of the Republican Party
SELECT ?person WHERE {
  ?person dbo:partyMemberOf dbr:Republican_Party_(United_States) .
}

UNION

# Query for the spouse of Roger Pryor (actor)
SELECT ?spouse WHERE {
  dbp:Roger_Pryor dbo:spouse ?spouse .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
213,8,train,Give me the country of the work of Lao She.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/country> ?result . ?v0 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Lao_She> . },"```sparql
SELECT ?country WHERE {
  ?work dbo:author dbr:Lao_She .
  ?work rdfs:label ""Camel Xiangzi""@en .
  OPTIONAL { ?work dbo:country ?country . }
}
```",2,2,3,2,1,3,2,20,0,0,2,0,0.0,0
119,40,train,"Give me the tenant of Spain and tenant of Santiago de Compostela and office of the leader of the administration, that is an event, of Anxo Quintana.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . ?v1 <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/property/leader> ?v1 . ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?tenantSpain ?tenantSantiagoDeCompostela ?officeEvent
WHERE {
  # Anxo Quintana's offices
  VALUES ?quintana (dbr:Anxo_Quintana)

  # Offices held by Anxo Quintana that are events
  ?office rdf:type dbo:Event ;
          dbo:positionHeldBy ?quintana .

  OPTIONAL {
    # Tenant of Spain during his office
    ?office dbo:headOfStateOrGovernment ?tenantSpain .
    ?tenantSpain rdf:type dbo:Person .
  }

  OPTIONAL {
    # Tenant of Santiago de Compostela (President of the Xunta de Galicia)
    ?office dbo:headOfStateOrGovernment ?tenantSantiagoDeCompostela ;
            rdfs:label ""President of the Xunta de Galicia""@en .
    ?tenantSantiagoDeCompostela rdf:type dbo:Person .
  }

  # Return the office as an event
  BIND(?office AS ?officeEvent)
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
531,34,train,"Give me the office of Miguel Maura and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v2 . ?v2 <http://dbpedia.org/property/residence> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?residence WHERE {
  # Find Miguel Maura's office
  dbr:Miguel_Maura dbo:positionHeld ?miguelOffice .
  
  # Find the Mayor of Madrid in 2003
  ?mayor dbo:officeHolderOf dbr:Madrid_City_Council ;
         dbo:termStart ?startYear ;
         dbo:termEnd ?endYear .

  FILTER (?startYear <= ""2003-01-01""^^xsd:date && 
          (?endYear >= ""2003-12-31""^^xsd:date || ?endYear = """")).

  # Find the residence of this mayor
  ?mayor dbo:residence ?residence .
  
  # Check if the residence is also an office holder's place
  ?residence a dbo:OfficeHolder .

  # Return Miguel Maura's office and the relevant residence
  BIND(?miguelOffice AS ?office)
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
668,56,train,"Give me the associated musical artist of the person born as Elorm Kabu Amenyah and person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in Musician.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . }","```sparql
# Query for Elorm Kabu Amenyah (Stonebwoy)
SELECT ?artist WHERE {
  wd:Q1055152 wdt:P106 wd:Q48183. # Stonebwoy is a musician
  wd:Q1055152 wdt:P19 wd:Q1340.    # Stonebwoy's birthplace is Ghana
  wd:Q1055152 wdt:P735 ?artist.   # Associated musical artists of Stonebwoy
}

UNION

# Query for a musician from Central Region, Ghana
SELECT ?birthName WHERE {
  ?person wdt:P106 wd:Q48183.       # Person is a musician
  ?person wdt:P19 wd:Q1340.         # Person's birthplace is Ghana
  ?person wdt:P131 wd:Q1055.        # Central Region of Ghana
  ?person rdfs:label ?birthName FILTER (lang(?birthName) = ""en"").
}

# Assuming we find the birth name, query for associated musical artists
SELECT ?artist WHERE {
  ?person wdt:P735 ?artist.
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
816,8,train,Give me the child of Allan Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?child dbo:parent dbr:Allan_Arbus .
}
```",1,1,2,1,1,3,3,71,2,0,0,1.0,1.0,1.0
513,5,train,Give me the leader of Ulster Unionist Party.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ulster_Unionist_Party> <http://dbpedia.org/ontology/leader> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX db: <http://dbpedia.org/resource/>

SELECT ?leader WHERE {
  db:Ulster_Unionist_Party dbo:leader ?leader .
}
```",1,1,2,1,1,3,2,20,1,0,0,1.0,1.0,1.0
353,43,train,"Give me the father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of Roger II of Sicily and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v4 <http://dbpedia.org/property/father> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?father WHERE {
  ?person rdf:type dbo:Monarch .
  ?person foaf:surname ""Hauteville"" .
  ?child dbo:parent ?person ;
         dbo:spouse ?royalSpouse .
  ?royalSpouse rdf:type dbo:Monarch .
  ?royalSpouse dbo:officeHolder true .
  ?child rdfs:label ""William I of Sicily""@en .
}
```",5,8,6,3,3,3,3,71,0,0,1,0,0.0,0
723,11,train,"Give me the band member of the producer, that is an organisation and a group, of Nothing to Gein and band member of Stone Sour.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. <http://dbpedia.org/resource/Nothing_to_Gein> <http://dbpedia.org/ontology/producer> ?v2 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Stone_Sour> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find the producer of ""Nothing to Gein""
  ?album dbo:producer ?producer .
  ?producer foaf:name ?name .
  
  FILTER regex(?name, ""Corey Taylor"", ""i"") .

  # Check if this person is a member of Stone Sour
  ?bandMember dbo:memberOf dbr:Stone_Sour .
  ?bandMember foaf:name ?name .

  FILTER regex(?name, ""Corey Taylor"", ""i"") .

  # Ensure the person is associated with an organization or group
  ?person dbo:memberOf ?organization .
  ?person foaf:name ?name .

  FILTER regex(?name, ""Corey Taylor"", ""i"")
}
```",3,5,4,2,2,3,2,20,0,0,1,0,0.0,0
816,0,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg.,SELECT ?result WHERE { <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film a dbo:Film ;
        rdfs:label ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
  
  ?film dbo:starring ?actor .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
557,59,train,"Give me the professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v3 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v5 <http://dbpedia.org/ontology/producer> ?result . ?v0 <http://dbpedia.org/ontology/knownFor> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
# Step 1: Find Richard S. Prather and his character Kent Allard
SELECT ?character WHERE {
  ?author foaf:name ""Richard S. Prather"" .
  ?author dbo:creatorOf ?character .
  ?character rdfs:label ""Kent Allard""@en .
}

# Step 2: Identify the professional role of Kent Allard
SELECT ?role WHERE {
  ?character dbo:profession ?role .
  FILTER(CONTAINS(LCASE(?role), ""private investigator""))
}

# Step 3: Find James Cagney and his famous work
SELECT ?work WHERE {
  ?actor foaf:name ""James Cagney"" .
  ?actor dbo:actedIn ?film .
  ?film dbo:title ""Angels with Dirty Faces""@en .
  
  # Find the work that made him famous
  ?actor dbo:famousFor ?work .
  FILTER(CONTAINS(LCASE(?work), ""the public enemy""))
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
80,59,train,"Give me the actor of the album of the work, that is a song and a musical work, of T.I. and actor of the movie with the author of Smartbomb (book).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://dbpedia.org/ontology/album> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v3 . },"```sparql
# Step 1: Find a song by T.I. that is also a musical work
SELECT ?song WHERE {
    ?song dbo:artist dbr:T.I.
    ?song rdf:type dbo:Songs .
}

# Step 2: Determine the album of the identified song
SELECT ?album WHERE {
    ?album dbo:song ?song .
}

# Step 3: Identify any notable artists or performers associated with that album
SELECT DISTINCT ?performer WHERE {
    ?album dbo:artist ?performer .
}

# Step 4: Find the author of ""Smartbomb""
SELECT ?author WHERE {
    ?book dbr:Smartbomb ;
          dbo:author ?author .
}

# Step 5: Look for movies featuring both the identified artist/performer and the author
SELECT DISTINCT ?movie WHERE {
    ?movie dbo:starring ?performer .
    ?movie dbo:starring ?author .
}
```",6,8,7,3,2,3,3,71,0,0,10,0,0.0,0
384,2,train,"Give me the successor, that is a politician and French, of Patrice Martin-Lalande.",SELECT ?result WHERE { <http://dbpedia.org/resource/Patrice_Martin-Lalande> <http://dbpedia.org/ontology/successor> ?result . ?result <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/France>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?successor ?successorName WHERE {
  ?person a dbo:MemberOfParliament ;
          dbo:nationality dbr:Francois ; # Assuming 'Francois' is the resource for French nationality
          dbo:officeHolder dbr:European_Parliament_Member .
  
  ?person dbp:name ""Patrice Martin-Lalande""@en .

  OPTIONAL { ?person dbo:successor ?successor . }
  
  ?successor a dbo:MemberOfParliament ;
             dbo:nationality dbr:Francois ;
             dbo:officeHolder dbr:European_Parliament_Member .
             
  ?successor dbp:name ?successorName .
}
```",1,3,2,1,1,2,2,9,0,0,1,0,0.0,0
472,21,train,Give me the administration of Christian IX of Denmark and administration of the mayor of Duchy of Schleswig and territory administered from Copenhagen.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administrator ?role ?startYear ?endYear WHERE {
  # Administrators during Christian IX's reign
  {
    SELECT DISTINCT ?administrator ?role ?startYear ?endYear WHERE {
      ?administrator dbo:monarch dbr:Christian_IX_of_Denmark .
      OPTIONAL { ?administrator dbo:office ?role . }
      OPTIONAL { ?administrator dbo:termStart ?startYear . }
      OPTIONAL { ?administrator dbo:termEnd ?endYear . }
    }
  }

  UNION

  # Administration related to Duchy of Schleswig
  {
    SELECT DISTINCT ?mayor ?role WHERE {
      ?mayor dbo:office dbr:Duchy_of_Schleswig .
      OPTIONAL { ?mayor dbo:officeLocation dbr:Copenhagen . }
      OPTIONAL { ?mayor dbo:positionTitle ?role . }
    }
  }
}
```",4,4,5,2,3,2,3,28,0,9,1,0.0,0.0,0
633,1,train,"Give me the parent of Francis I, Duke of Lorraine.","SELECT ?result WHERE { <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?father WHERE {
  ?person dbo:parent dbc:François_Ier_de_Lorraine.
  ?person foaf:name ""Francis I, Duke of Lorraine""@en.
  ?person dbo:father ?father.
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
293,36,train,Give me the party member of Republican Party (United States) and person born as the birth name of the parent of Tisha Sterling.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v0 <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
# Query to find a party member of the Republican Party (United States)
SELECT ?person WHERE {
  ?person dbo:partyAffiliation dbr:Republican_Party_(United_States) .
}

UNION

# Query to find Tisha Sterling's parent and their birth name
SELECT DISTINCT ?parentBirthName WHERE {
  # Find Tisha Sterling's parents
  ?tisha foaf:name ""Tisha Sterling""@en.
  ?tisha dbo:childOf ?parent.

  # Get the birth name of one of her parents
  ?parent foaf:name ?birthName.
}
```",4,4,5,3,2,3,3,71,0,0,2,0,0.0,0
595,24,train,"Give me the commander in Third Taiwan Strait Crisis and author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://dbpedia.org/property/author> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . },"```sparql
# Query to find the commander during the Third Taiwan Strait Crisis
SELECT ?commander WHERE {
  ?event dbo:wikiPageRedirects db:Q1234567; # Assuming Q1234567 is the DBpedia ID for the Third Taiwan Strait Crisis
    dbo:agent ?person.
  ?person dbo:positionHeld dbr:President_of_the_United_States;
    dbo:officeHolder ?commander.
}

# Query to find a book authored by Bill Clinton
SELECT ?book WHERE {
  dbr:Bill_Clinton dbo:authorOf ?book.
  ?book rdf:type dbo:Book.
}
```",3,6,4,2,2,3,3,71,0,0,1,0,0.0,0
68,9,train,"Give me the child of Maximilian I, Holy Roman Emperor and father of Catherine of Austria, Queen of Portugal.","SELECT ?result WHERE { <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?child WHERE {
  wd:Q1198 wdt:P40 ?child .
  ?child wdt:P22 wd:Q1189 . # Philip I of Castile (father of Catherine of Austria)
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
39,31,train,Give me the professional in  and professional in the profession of the producer of Coke Studio Philippines.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v1 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . }","```sparql
# Step 1: Find the producer of Coke Studio Philippines
SELECT ?producer WHERE {
  ?show dbr:Coke_Studio_Philippines dbo:producer ?producer .
}

# Step 2: Determine the profession of this producer (assuming we found a specific individual, e.g., ""John Doe"")
SELECT ?profession WHERE {
  dbp:John_Doe dbo:occupation ?profession .
}

# Step 3: Find another professional in the same field
SELECT DISTINCT ?professional WHERE {
  ?professional a ?profession .
  FILTER(?professional != dbp:John_Doe) # Exclude the original producer
}
```",4,4,5,3,2,3,3,71,0,0,39640,0,0.0,0
258,13,train,"Give me the establishment of the founding date of the alma mater, that is a university and an organisation and an educational institution, of Luiza Erundina.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/foundingDate> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. <http://dbpedia.org/resource/Luiza_Erundina> <http://dbpedia.org/ontology/almaMater> ?v0 . ?result <http://dbpedia.org/ontology/foundingDate> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
SELECT ?establishmentDate WHERE {
  dbpedia:Universidade_de_São_Paulo dbo:foundingDate ?establishmentDate .
}
```",3,6,4,3,1,3,2,20,0,0,1,0,0.0,0
816,59,train,"Give me the parent of the professional in the profession of Eugène Cattin and actor of the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v5 <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/ontology/child> ?v5 . ?v2 <http://dbpedia.org/property/starring> ?v3 . },"```sparql
# Step 1: Find Eugène Cattin's profession
SELECT ?profession WHERE {
  wd:Eug%C3%A8ne_Cattin wdt:P106 ?occupation .
  ?occupation rdfs:label ?profession .
  FILTER(LANG(?profession) = ""en"")
}

# Step 2: Find a movie he acted in
SELECT DISTINCT ?movie WHERE {
  wd:Eug%C3%A8ne_Cattin wdt:P162 ?film .
  ?film rdfs:label ?movie .
  FILTER(LANG(?movie) = ""en"")
}

# Step 3: Identify a person associated with the movie who died in Los Angeles
SELECT DISTINCT ?person WHERE {
  ?film wdt:P161 ?actor .
  ?actor wdt:P20 wd:Q12140 . # Los Angeles
  ?actor wdt:P570 ?deathDate .
  FILTER(?deathDate != """" && EXISTS { ?actor wdt:P31/wdt:P279* wd:Q5 }) # Ensure it's a person
}

# Step 4: Determine the profession of this decedent
SELECT DISTINCT ?decedentProfession WHERE {
  ?person wdt:P106 ?occupation .
  ?occupation rdfs:label ?decedentProfession .
  FILTER(LANG(?decedentProfession) = ""en"")
}

# Step 5: Find the parent category of this profession
SELECT DISTINCT ?parentProfession WHERE {
  ?occupation wdt:P279+ ?parentOccupation .
  ?parentOccupation rdfs:label ?parentProfession .
  FILTER(LANG(?parentProfession) = ""en"")
}
```",6,7,7,3,2,3,3,71,0,0,3,0,0.0,0
871,52,train,"Give me the parent of the child of Frederick Stanley, 16th Earl of Derby and parent of the awardee of the award of Rodney Lees and father of Arthur Stanley (politician).","SELECT ?result WHERE { <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v4 . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v0 . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commonParent WHERE {
  # Step 1: Identify Frederick Stanley, 16th Earl of Derby's child
  ?child dbo:parent dbr:Frederick_Stanley,_16th_Earl_of_Derby .
  
  # Step 2: Find the parent of that child
  ?grandChild dbo:parent ?child .

  # Step 3: Identify Rodney Lees' award and its awardee
  ?award dbo:recipient dbr:Rodney_Lees .
  ?otherAwardee dbo:recipient ?award .

  # Step 4: Find the parent of the other awardee
  ?parentOfOtherAwardee dbo:child ?otherAwardee .

  # Step 5: Identify Arthur Stanley (politician) and his father
  dbr:Arthur_Stanley_(politician) dbo:father ?arthurFather .

  # Step 6: Determine the common parent
  FILTER (?grandChild = ?parentOfOtherAwardee || ?grandChild = ?arthurFather)
  
  # Find the common parent
  ?commonParent dbo:child ?grandChild .
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
258,9,train,"Give me the founding date of the alma mater, that is a university and an organisation and an educational institution, of Luiza Erundina.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Luiza_Erundina> <http://dbpedia.org/ontology/almaMater> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>. ?v0 <http://dbpedia.org/ontology/foundingDate> ?result . },"```sparql
SELECT ?foundingDate WHERE {
  dbpedia:Universidade_de_São_Paulo dbo:founded ?foundingDate .
}
```",2,5,3,2,1,3,2,20,0,0,1,0,0.0,0
492,19,train,Give me the death place of the actor of The Sky Ranger (1928 film) and death place of Sal Mineo and death place of Carolyn Jones.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v1 . <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for the main actor of ""The Sky Ranger"" (1928)
SELECT ?actor ?deathPlace WHERE {
  ?film dbo:title ""The Sky Ranger""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1928) .
  ?film dbo:starring ?actor .
  ?actor dbo:deathPlace ?deathPlace .
}

UNION

# Query for Sal Mineo's death place
SELECT ?person ?deathPlace WHERE {
  ?person foaf:name ""Sal Mineo""@en .
  ?person dbo:deathPlace ?deathPlace .
}

UNION

# Query for Carolyn Jones' death place
SELECT ?person ?deathPlace WHERE {
  ?person foaf:name ""Carolyn Jones""@en .
  ?person dbo:deathPlace ?deathPlace .
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
737,46,train,"Give me the child of the child of Duke Philipp of Württemberg and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v2 . ?v1 <http://dbpedia.org/property/father> ?v2 . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> ?v4 . ?result <http://dbpedia.org/ontology/successor> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?predecessor WHERE {
  # Step 1: Find Duke Philipp's child
  ?philippChild dbo:childOf dbr:Duke_Philipp_of_Württemberg .
  
  # Step 2: Find the grandchild of Duke Philipp
  ?grandchild dbo:childOf ?philippChild .

  # Step 3: Find the predecessor of this grandchild
  ?predecessor dbo:successor ?grandchild .
  
  # Step 4: Find Archduchess Helena's spouse and their child
  ?spouse dbo:spouse dbr:Archduchess_Helena_of_Austria .
  ?helenaChild dbo:childOf ?spouse .

  # Step 5: Ensure the predecessor is royalty
  ?predecessor a dbo:Monarch ;
               dbo:successor ?grandchild .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
353,15,train,"Who is the parent of the child, that is a royalty, of Roger II of Sicily?",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?parent WHERE {
  ?roger2 a dbo:Monarch ;
          foaf:name ""Roger II of Sicily""@en .
  
  ?child dbo:childOf ?roger2 ;
         a dbo:Person .

  OPTIONAL { 
    ?child rdfs:label ?title .
    FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen""))
  }

  ?child dbo:parent ?parent .
}
```",2,3,3,2,1,3,3,71,0,0,3,0,0.0,0
905,18,train,Give me the parent of Charles Martel of Anjou and spouse of Charles II of Naples and child of Stephen V of Hungary.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
SELECT ?person WHERE {
  # Parent of Charles Martel of Anjou
  ?parent dbo:child ?charlesMartel .
  ?charlesMartel rdfs:label ""Charles Martel, Count of Anjou""@en .

  # Spouse of Charles II of Naples
  ?spouse dbo:spouse ?charlesII .
  ?charlesII rdfs:label ""Charles II of Naples""@en .

  # Child of Stephen V of Hungary
  ?child dbo:parent ?stephenV .
  ?stephenV rdfs:label ""Stephen V of Hungary""@en .

  FILTER (?person = ?parent && ?person = ?spouse && ?person = ?child)
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
158,13,train,"Give me the person decedent at the birthplace, that is a country, of Sandro Bertaggia and native of Grand Duchy of Finland.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/deathPlace> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?decedent WHERE {
  # Find Sandro Bertaggia's birthplace that is a country
  dbr:Sandro_Bertaggia dbo:birthPlace ?birthPlace .
  FILTER (isLiteral(?birthPlace) && datatype(?birthPlace) = xsd:string)
  
  # Ensure the birthplace is a recognized country
  ?country rdfs:label ?birthPlaceLabel .
  FILTER (langMatches(lang(?birthPlaceLabel), ""EN"") && contains(lcase(str(?birthPlaceLabel)), ""country""))
  
  # Find decedents born in that place
  ?decedent dbo:birthPlace ?birthPlace ;
            dbo:parent dbr:Sandro_Bertaggia .
  
  # Filter by native country being the Grand Duchy of Finland
  ?decedent dbo:nationality dbr:Grand_Duchy_of_Finland .
}
```",3,4,4,2,2,2,3,28,0,0,2,0,0.0,0
297,1,train,Give me the institution in Georgia (U.S. state).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Georgia_(U.S._state)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?institution WHERE {
  ?institution a dbo:EducationalInstitution .
  ?institution dbo:location dbr:Georgia_(U.S._state) .
}
```",1,1,2,1,1,2,2,9,0,0,941,0,0.0,0
293,49,train,"Give me the party member of the ruling party in Central, Louisiana and person born as the birth name of the parent of Tisha Sterling.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/ontology/party> ?v2 . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . }","```sparql
# Query 1: Find the ruling party member in Central, Louisiana
SELECT ?person ?party WHERE {
  ?place a dbo:PopulatedPlace ;
        rdfs:label ""Central, Louisiana""@en .
  OPTIONAL { ?place dbo:government ?gov . }
  OPTIONAL { ?gov dbo:member ?person . }
  OPTIONAL { ?person dbo:politicalParty ?party . }
  FILTER (lang(?place->rdfs:label) = 'en')
}

# Query 2: Find the birth name of Tisha Sterling's parent
SELECT ?parentBirthName WHERE {
  ?tisha a dbo:Person ;
         rdfs:label ""Tisha Sterling""@en .
  OPTIONAL { ?tisha foaf:surname ""Sterling"" . }
  OPTIONAL { ?tisha dbo:child ?child . }
  FILTER (?child = ?tisha)
  OPTIONAL { ?parent dbo:child ?tisha . }
  OPTIONAL { ?parent foaf:name ?parentBirthName . }
  FILTER (lang(?tisha->rdfs:label) = 'en')
}
```",5,5,6,3,2,3,3,71,0,0,2,0,0.0,0
531,27,train,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v2 <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . ?v1 <http://dbpedia.org/property/leader> ?v2 . },"```sparql
SELECT ?office WHERE {
  ?miguelMaura dbo:birthName ""Miguel Maura"" .
  ?miguelMaura dbp:party ?politicalParty .
  ?politicalParty dbo:leader ?leader .
  ?leader dbo:office ?office .
}
```",3,5,4,3,1,3,3,71,0,0,1,0,0.0,0
585,6,train,Give me the native of New York (state) and child of Linda Miller (actress).,SELECT ?result WHERE { <http://dbpedia.org/resource/Linda_Miller_(actress)> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_(state)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?lindaMiller a dbo:Person ;
               foaf:name ""Linda Miller""@en .
  
  ?lindaMiller dbo:child ?child .

  ?child dbo:birthPlace dbr:New_York_(state) .
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
353,3,train,"Who is the child, that is a royalty, of Roger II of Sicily?",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?child WHERE {
  ?s dbo:child ?child .
  FILTER (str(?s) = ""Roger II of Sicily"") .
  ?child rdf:type/rdfs:subClassOf* dbo:Monarch ;
         OPTIONAL { ?child rdf:type/rdfs:subClassOf* dbo:Noble } .
}
```",1,2,2,1,1,3,3,71,0,0,3,0,0.0,0
375,17,train,"Give me the author of A Picture of Britain and parent of the native, that is an artist and a musical artist, of the location, that is English and a settlement, for ,.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/postalCode> "","" . ?result <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/A_Picture_of_Britain> <http://dbpedia.org/ontology/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v3 <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?parent WHERE {
  # Find the author of ""A Picture of Britain""
  ?work dbo:title ""A Picture of Britain""@en .
  ?work dbo:author ?author .

  # Identify a person who is both an artist and a musical artist
  ?person dbo:occupation dbr:Artist ;
          dbo:occupation dbr:Musical_artist .

  # Link this person to a location that is English and a settlement
  ?person dbo:nationality dbr:England .
  ?location dbo:type dbr:Settlement ;
            dbo:country dbr:England .
  ?person dbo:birthPlace ?location .

  # Retrieve the parent of this person
  ?parent dbo:child ?person .

  # Ensure the author is connected to the person through the location
  ?author dbo:nationality dbr:England .
}
```",4,8,5,3,2,3,2,20,0,0,1,0,0.0,0
39,48,train,"Give me the professional in the profession of the producer of Coke Studio Philippines and band of the person born, that is a musical artist, as Robert Lamar Thompson.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v3 . ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . }","```sparql
# Step 1: Find Robert Lamar Thompson's profession as a musical artist
SELECT ?profession WHERE {
    ?person foaf:name ""Robert Lamar Thompson""@en .
    ?person dbo:occupation ?profession .
    FILTER(CONTAINS(LCASE(STR(?profession)), ""musical artist""))
}

# Step 2: Find the producer of Coke Studio Philippines
SELECT ?producer WHERE {
    dbpedia:Coke_Studio_Philippines dbo:producer ?producer .
}

# Step 3: Identify the band associated with this producer
SELECT ?band WHERE {
    ?producer dbo:member ?band .
}

# Step 4: Identify a professional in that band
SELECT DISTINCT ?professional WHERE {
    ?band dbo:member ?professional .
}
```",5,6,6,3,2,3,3,71,0,0,4,0,0.0,0
871,42,train,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of the awardee of Commander of the Royal Victorian Order and parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?v2 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?politician WHERE {
    # Frederick Stanley, 16th Earl of Derby
    ?frederick a dbo:Person ;
              foaf:name ""Frederick Stanley"" ;
              dbo:title ""16th Earl of Derby""@en .

    # His children
    ?child dbo:parent ?frederick ;
           a dbo:Person .

    # Politician child who is also parent to Edward Stanley, 17th Earl of Derby and another awardee
    ?politician dbo:parent ?frederick ;
               a dbo:Politician ;
               dbo:spouse ?spouse .
    
    ?edward a dbo:Person ;
            foaf:name ""Edward Stanley"" ;
            dbo:title ""17th Earl of Derby""@en ;
            dbo:parent ?politician .

    OPTIONAL {
        ?awardee dbo:parent ?politician ;
                 dbo:honor ""Commander of the Royal Victorian Order""@en .
    }
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
246,5,train,"Give me the child, that is a royalty, of Prince Faisal bin Hussein.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?title WHERE {
  ?person a dbo:Person ;
          foaf:name ""Faisal bin Hussein""@en .
  ?person dbo:child ?child .
  OPTIONAL { ?child dbo:title ?title . FILTER(CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess"")) }
}
```",1,2,2,1,1,3,2,20,0,0,4,0,0.0,0
737,58,train,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of Carl, Duke of Württemberg and child of the child of Duke Philipp of Württemberg.","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . ?v2 <http://dbpedia.org/property/father> ?v1 . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?v2 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v5 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?individual WHERE {
  # Step 1: Parent of Archduchess Margarete Sophie of Austria
  ?parent a dbo:Person ;
          dbo:child dbr:Archduchess_Margarete_Sophie_of_Austria .

  # Step 2 & 3: Child of the parent who is royalty
  ?royalChild a dbo:Person ;
              dbo:child ?parent ;
              (dbo:king | dbo:queen | dbo:prince | dbo:duke | dbo:duchess) .

  # Step 4: Predecessor of Carl, Duke of Württemberg
  ?predecessor a dbo:Person ;
               dbo:successor dbr:C._Duke_of_W%C3%BCrttemberg ;
               ?royalChild .

  # Step 5: Parent of Duke Philipp of Württemberg
  ?parent2 a dbo:Person ;
           dbo:child dbr:Duke_Philipp_of_W%C3%BCrttemberg .

  # Step 6: Child of the child (grandchild) of this parent
  ?grandChild a dbo:Person ;
              dbo:child ?childOfParent2 ;
              ?parent2 .
  
  ?childOfParent2 a dbo:Person ;
                  dbo:child ?parent2 .

  # Final condition: The individual must be both the royal predecessor and the grandchild
  FILTER (?royalChild = ?grandChild)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
531,57,train,"Give me the tenant of Madrid and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> ?v5 . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v3 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v5 <http://dbpedia.org/property/office> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenantOfMadrid ?officeOfCommander ?militaryConflict ?leaderOfCRP
WHERE {
  # Manuel Pinto da Costa's involvement in military conflicts
  ?conflict dbo:participant dbr:Manuel_Pinto_da_Costa .
  
  # Find the office of commander related to the conflict
  ?conflict dbo:commander ?officeOfCommander .

  # Find the tenant of Madrid related to the conflict
  ?conflict dbo:tenantOfMadrid ?tenantOfMadrid .

  # Identify leaders of the Conservative Republican Party (Spain)
  ?leaderOfCRP dbo:party dbr:Conservative_Republican_Party_(Spain) .
  
  # Link the military conflict with the leader's time period or involvement
  OPTIONAL { ?conflict dbo:relatedLeader ?leaderOfCRP }
}
```",6,11,7,3,3,3,3,71,0,0,1,0,0.0,0
756,5,train,Give me the leader of West Germany.,SELECT ?result WHERE { <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?chancellor ?name WHERE {
  ?chancellor a dbo:Chancellor ;
              dbo:country dbr:West_Germany .
  OPTIONAL { ?chancellor foaf:name ?name . }
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
347,12,train,"Give me the father of Eleonore of Austria, Queen of Poland and child of Ferdinand II, Holy Roman Emperor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  wd:Q123456 wdt:P22 ?father .
  ?father rdfs:label ""Ferdinand II, Holy Roman Emperor""@en .
  FILTER(CONTAINS(LANG(?fatherLabel), ""en""))
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for Eleonore of Austria. You can find this by searching for her in DBpedia or using a SPARQL query to identify her unique identifier.",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
258,6,train,Give me the establishment of 1955-12-02 and alma mater of Eleonora Menicucci.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/foundingDate> ""1955-12-02""^^<http://www.w3.org/2001/XMLSchema#date> . <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/ontology/almaMater> ?result . }","```sparql
# Query to find the establishment that occurred on December 2, 1955
SELECT ?establishment WHERE {
  ?event dbo:date ""1955-12-02""^^xsd:dateTime ;
         rdf:type dbo:Event .
  ?event dbo:subject ?establishment .
}

UNION

# Query to find Eleonora Menicucci's alma mater
SELECT ?almaMater WHERE {
  dbpedia:Eleonora_Menicucci dbo:almaMater ?almaMater .
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
943,48,train,"Give me the child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and father of the father, that is a royalty and an office holder, of Na'od.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/parent> ?v1 . ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Find the commander in the Siege of Mukha who is royalty
SELECT ?commander WHERE {
  ?siege dbo:event ""Siege of Mukha""@en .
  ?siege dbo:agent ?commander .
  ?commander rdf:type dbo:RoyalPerson .
}

# Step 2: Find the child of this royal commander
SELECT ?child WHERE {
  ?commander dbo:child ?child .
}

# Step 3: Identify Na'od's father who is royalty and an office holder
SELECT ?naodsFather WHERE {
  wd:Q1234567 dbo:father ?naodsFather . # Replace Q1234567 with the DBpedia ID for Na'od
  ?naodsFather rdf:type dbo:RoyalPerson .
  ?naodsFather dbo:officeHolder true .
}

# Step 4: Find the father of this royal office holder
SELECT ?grandfather WHERE {
  ?naodsFather dbo:father ?grandfather .
}

# Final step: Ensure the child from step 2 is the same as the grandfather from step 4
SELECT DISTINCT ?child WHERE {
  { 
    # Query for commander's child
    ?commander dbo:child ?child .
    ?siege dbo:event ""Siege of Mukha""@en .
    ?siege dbo:agent ?commander .
    ?commander rdf:type dbo:RoyalPerson .
  }
  UNION
  {
    # Query for Na'od's grandfather
    wd:Q1234567 dbo:father ?naodsFather .
    ?naodsFather dbo:father ?grandfather .
    ?grandfather rdf:type dbo:RoyalPerson .
    ?grandfather dbo:officeHolder true .
  }
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
38,4,train,"Give me the commander, that is an office holder, in Korean conflict.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Korean_conflict> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  VALUES ?war { dbr:Korean_War }
  
  ?person dbo:officeHolder ?office .
  ?office dbo:relatedEvent ?war .
  
  OPTIONAL { ?person rdfs:label ?name FILTER (lang(?name) = 'en') . }
}
```",1,2,2,1,1,3,2,20,0,0,42,0,0.0,0
103,22,train,Give me the actor of Dispatches from Elsewhere and professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . },"```sparql
# Query 1: Find actors in ""Dispatches from Elsewhere""
SELECT ?actor WHERE {
  ?show dcterms:title ""Dispatches from Elsewhere""@en .
  ?show dbo:starring ?actor .
}

# Query 2: Find the actor who played Lamont Cranston, aka The Shadow
SELECT ?actor WHERE {
  ?character rdfs:label ""The Shadow (fictional character)""@en ;
             foaf:name ""Lamont Cranston""@en .
  ?adaptation dbo:starring ?actor ;
              dbo:basedOn ?character .
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
39,9,train,Give me the professional in Singer and professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?additionalProfession WHERE {
  ?person a dbo:Singer .
  ?person dbo:profession ?singerRole .
  FILTER (str(?singerRole) = ""Singer"") .
  
  OPTIONAL { 
    ?person dbo:profession ?additionalProfession .
    FILTER (?additionalProfession != ?singerRole)
  }
}
LIMIT 10
```",2,2,3,1,2,3,3,71,0,0,5422,0,0.0,0
386,21,train,Give me the war of the awardee of Golden Sword for Bravery and entity in Russian Empire and war of Karl Gustav von Baggovut.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . },"```sparql
# Query to find wars involving Alexander Suvorov
SELECT ?war WHERE {
  ?svo dbo:award ""Golden_Sword_for_Bravery""@en .
  ?svo foaf:name ""Alexander_Suvorov""@en .
  ?svo dbo:militaryConflict ?war .
}

UNION

# Query to find wars involving Karl Gustav von Baggovut
SELECT ?war WHERE {
  ?bagg foaf:name ""Karl_Gustav_von_Baggovut""@en .
  ?bagg dbo:militaryConflict ?war .
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
361,17,train,Give me the actor of Rustlers' Rhapsody and professional in the alter ego of The Shadow.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . },"```sparql
# Query to get the actor(s) from Rustlers' Rhapsody
SELECT ?actor WHERE {
  ?film dcterms:title ""Rustlers' Rhapsody""@en .
  ?film dbo:starring ?actor .
}

UNION

# Query to find the actor associated with The Shadow
SELECT ?actor WHERE {
  ?actor foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""the shadow""))
}
```",3,3,4,2,2,2,3,28,0,0,3,0,0.0,0
103,10,train,Give me the actor of Dispatches from Elsewhere and professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor ?profession WHERE {
  VALUES ?show { dbr:Dispatches_from_Elsewhere }
  ?castMember dbo:castMemberOf ?show .
  ?castMember foaf:name ""Joshua Jackson"" .
  OPTIONAL { ?castMember dbo:occupation ?profession . FILTER (lang(?profession) = 'en') }
}
```",2,2,3,1,2,3,3,71,0,0,2,0,0.0,0
295,12,train,Give me the native of the birth place of Victor Saville and writer of Boom Shack-A-Lak.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . <http://dbpedia.org/resource/Boom_Shack-A-Lak> <http://dbpedia.org/property/writer> ?result . <http://dbpedia.org/resource/Victor_Saville> <http://dbpedia.org/ontology/birthPlace> ?v0 . },"```sparql
# Query for Victor Saville
SELECT ?birthPlaceLabel (SAMPLE(?native) AS ?victorSavilleNative)
WHERE {
  wd:Q123456 wdt:P19 ?birthPlaceVictorSaville.
  ?birthPlaceVictorSaville wdt:P37 ?native.
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}

# Query for Leroy ""Horsemouth"" Wallace
SELECT ?birthPlaceLabel (SAMPLE(?native) AS ?leroyNative)
WHERE {
  wd:Q654321 wdt:P19 ?birthPlaceLeroy.
  ?birthPlaceLeroy wdt:P37 ?native.
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Victor Saville and `wd:Q654321` with the identifier for Leroy ""Horsemouth"" Wallace.",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
58,9,train,Give me the person born as the birth name of Linda Bruckheimer.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v0 . <http://dbpedia.org/resource/Linda_Bruckheimer> <http://dbpedia.org/property/birthName> ?v0 . },"```sparql
SELECT ?person WHERE {
  wd:Q123456 foaf:name ""Linda Bruckheimer""@en .
  OPTIONAL { ?person schema:birthName ""Linda Ann Bruckheimer""@en . }
}
```

Note: The above SPARQL query assumes that there is a DBpedia entry for Linda Bruckheimer with the identifier `wd:Q123456`. In practice, you would need to verify or find the correct DBpedia resource identifier for her.",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
353,30,train,Give me the father of William II of Sicily and child of Roger II of Sicily and child of the child of Alfonso VI of León and Castile.,SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . },"```sparql
SELECT ?person WHERE {
  # William II of Sicily and his father
  wd:Q123456 wdt:P22 ?father. # Q123456 should be replaced with the DBpedia item for William II of Sicily

  # The father is also a child of Roger II of Sicily
  ?father wdt:P22 wd:Q654321. # Q654321 should be replaced with the DBpedia item for Roger II of Sicily

  # The person must be a descendant (child or grandchild) of Alfonso VI
  ?person wdt:P40* wd:Q987654. # Q987654 should be replaced with the DBpedia item for Alfonso VI of León and Castile
  
  # Ensure the person is the same as the father identified above
  FILTER(?person = ?father)
}
```

Note: The actual DBpedia IDs (e.g., `Q123456`, `Q654321`, `Q987654`) need to be replaced with the correct identifiers for William II of Sicily, Roger II of Sicily, and Alfonso VI of León and Castile respectively.",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
19,0,train,Give me the professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:occupation ?occupation .
  ?occupation rdfs:label ""medicine""@en .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,1,2,1,1,2,2,9,0,0,39640,0,0.0,0
628,34,train,"Give me the band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and native of Florida.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . },"```sparql
SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Identify GS9 members who are both artists and musical artists
  ?gs9Member dbo:memberOf dbr:GS9 ;
             dbo:occupation dbr:Musical_artist ;
             dbo:occupation dbr:Artist .

  # Step 2: Filter for those native of Florida
  ?gs9Member dbo:nativePlace dbr:Florida .

  # Step 3: Find associated musical artist(s) for this member
  ?gs9Member dbo:associatedMusicalArtist ?associatedArtist .

  # Step 4: Identify band members who are also musical artists
  ?bandMember dbo:memberOf ?associatedArtist ;
              a dbo:Musical_artist .
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
347,53,train,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and father of Eleonore of Austria, Queen of Poland and child of the father of Cecilia Renata of Austria.","SELECT ?result WHERE { <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?result <http://dbpedia.org/ontology/parent> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?eleonore dbo:father dbr:Ferdinand_II,_Holy_Roman_Emperor .
  ?ceciliaRenata dbo:father ?parent .
  ?parent dbo:child dbr:Ferdinand_II,_Holy_Roman_Emperor .
  
  ?leopoldV dbo:father ?parent2 .
  ?parent2 dbo:child dbr:Ferdinand_II,_Holy_Roman_Emperor .

  ?commander rdfs:label ""Leopold V, Archduke of Austria""@en .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
103,34,train,"Give me the professional in  and actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/property/starring> ?result . ?v1 <http://dbpedia.org/property/starring> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?profession ?movie ?tvShow WHERE {
  ?person foaf:name ""John Cleese""@en .
  ?person dbo:birthName ""Richard Grant Esterhuysen"" .
  
  ?person dbo:occupation ?profession .
  FILTER(CONTAINS(LCASE(?profession), ""actor"") || CONTAINS(LCASE(?profession), ""comedian""))

  ?film dbo:starring ?person ;
        dbo:title ?movie .

  OPTIONAL {
    ?tvShow dbo:basedOnFilm ?film ;
            dbo:title ?tvTitle .
  }
}
```",4,5,5,3,2,3,3,71,0,0,13,0,0.0,0
263,23,train,"Give me the native of the birthplace, that is a region and a country, of William Gayner and parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. }","```sparql
# Step 1: Find William Gayner's birthplace
SELECT ?birthPlace WHERE {
    dbpedia:William_Gayner dbo:birthPlace ?birthPlace .
}

# Step 2: Identify a child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne
SELECT ?child WHERE {
    dbpedia:Claude_Bowes-Lyon_14th_Earl_of_Strathmore_and_Kinghorne dbo:child ?child .
}

# Step 3: Determine the parent (likely spouse) of that child
SELECT DISTINCT ?parent WHERE {
    ?child dbo:parent ?parent .
    FILTER(?parent != dbpedia:Claude_Bowes-Lyon_14th_Earl_of_Strathmore_and_Kinghorne)
}

# Step 4: Find the native of William Gayner's birthplace
SELECT ?native WHERE {
    ?birthPlace dbo:native ?native .
}
```",4,6,5,2,2,2,3,28,0,0,2,0,0.0,0
39,28,train,Give me the professional in  and professional in the profession of Sam Concepcion and band of Bob Thompson (musician).,"SELECT ?result WHERE { <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?band
WHERE {
  # Sam Concepcion's professions
  OPTIONAL { 
    dbr:Sam_Concepcion dbo:occupation ?profession .
  }
  
  # Bob Thompson's band
  OPTIONAL {
    dbr:Bob_Thompson_Musical_Artist dbo:memberOfBand ?band .
  }
}
```",4,4,5,2,3,3,3,71,0,1,4,0.0,0.0,0
345,2,train,"Give me the name of Mitaka, Tokyo.","SELECT ?result WHERE { <http://dbpedia.org/resource/Mitaka,_Tokyo> <http://xmlns.com/foaf/0.1/name> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?officialName WHERE {
  ?mitaka a dbo:Ward ;
          rdfs:label ""Mitaka""@en ;
          dbo:partOf dbr:Tokyo .
  OPTIONAL { ?mitaka rdfs:label ?officialName . FILTER (lang(?officialName) = 'ja') }
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
687,25,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in Sergio Agüero.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/coach> ?v1 . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?team WHERE {
  ?person a dbo:SoccerPlayer ;
          dbo:birthDate ""1979-11-03""^^xsd:date ;
          dbo:managerOf ?management .
  
  ?player dbr:Sergio_Agüero ;
          dbo:playsFor ?team .

  ?person dbo:playsFor ?team .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
941,16,train,"Give me the spouse of the spouse of Duchess Luise of Brunswick-Wolfenbüttel and child of the parent, that is a royalty, of Duke Anthony Ulrich of Brunswick.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Duchess_Luise_of_Brunswick-Wolfenbüttel> . ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Duke_Anthony_Ulrich_of_Brunswick> . ?result <http://dbpedia.org/ontology/parent> ?v2 . },"```sparql
# Step 1: Find Duchess Luise of Brunswick-Wolfenbüttel's spouse
SELECT ?spouse WHERE {
    wd:Q123456 wdt:P26 ?spouse .
}

# Step 2: Find the spouse of that person (which should be Duchess Luise herself)
SELECT ?secondSpouse WHERE {
    ?spouse wdt:P26 wd:Q123456 .
}

# Step 3: Identify Duke Anthony Ulrich's parent and their royal children
SELECT ?parent ?royalChild WHERE {
    wd:Q654321 wdt:P22 ?parent .
    ?parent wdt:P40 ?child .
    ?child wdt:P31/wdt:P279* wd:Q5 . # Ensure the child is a royalty (instance of human)
}

# Step 4: Determine the spouse of the identified royalty
SELECT ?spouseOfRoyalChild WHERE {
    ?royalChild wdt:P26 ?spouseOfRoyalChild .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Duchess Luise of Brunswick-Wolfenbüttel and `wd:Q654321` with the actual DBpedia ID for Duke Anthony Ulrich of Brunswick. The query assumes that these IDs are known or can be found through a preliminary search.",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
609,4,train,Who is the awardee of List of awards and nominations received by Vince Gilligan?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  VALUES ?person { dbr:Vince_Gilligan }
  ?person dbo:award ?award .
}
```",1,1,2,1,1,3,3,71,0,1,1,0.0,0.0,0
557,27,train,"Give me the producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://dbpedia.org/ontology/knownFor> ?v2 . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . },"```sparql
# Step 1: Find actors in ""High Society Blues""
SELECT ?actor WHERE {
  ?film dcterms:title ""High Society Blues""@en .
  ?film dbo:starring ?actor .
}

# Assuming we identify an actor, e.g., ""ActorName""

# Step 2: Identify a notable work by the actor
SELECT ?work WHERE {
  ?actor foaf:name ""ActorName""@en .
  ?work dbo:starring ?actor .
  FILTER EXISTS { ?work dbo:award ?award } # Assuming awards indicate notability
}

# Assuming we identify a notable work, e.g., ""NotableWorkTitle""

# Step 3: Find the producer of the notable work
SELECT ?producer WHERE {
  ?work dcterms:title ""NotableWorkTitle""@en .
  ?work dbo:productionCompany ?company .
  ?company dbo:president ?producer .
}
```",3,5,4,3,1,3,3,71,0,0,2,0,0.0,0
492,8,train,Give me the death place of the actor of The Sky Ranger (1928 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
SELECT ?actor ?deathPlace WHERE {
  # Find the main actors in ""The Sky Ranger"" (1928)
  dbpedia:Sky_Ranger_(film) dbo:starring ?actor .
  
  # Get the death place of each actor
  OPTIONAL { 
    ?actor dbo:deathPlace ?deathPlace .
  }
}
```",2,2,3,2,1,2,3,28,0,0,3,0,0.0,0
39,34,train,Give me the professional in the profession of the producer of Coke Studio Philippines and band of Bob Thompson (musician).,SELECT ?result WHERE { <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v2 . ?v2 <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
# Step 1: Find the producer of Coke Studio Philippines and their profession
SELECT ?producer ?profession WHERE {
  ?cokeStudio dcterms:creator ?producer .
  FILTER(STRSTARTS(LCASE(?cokeStudio), ""http://dbpedia.org/resource/coke_studio_philippines""))
  OPTIONAL { ?producer dbo:occupation ?profession . }
}

# Step 2: Find the band associated with Bob Thompson (musician)
SELECT ?band WHERE {
  ?bob dcterms:subject ?band .
  FILTER(STRSTARTS(LCASE(?bob), ""http://dbpedia.org/resource/bob_thompson_(musician)""))
}

# Step 3: Find a professional in the same profession as the producer from step 1 who is part of the band from step 2
SELECT DISTINCT ?member WHERE {
  ?band dbo:member ?member .
  FILTER(STRSTARTS(LCASE(?band), ""http://dbpedia.org/resource/"")) # Replace with actual band URI from Step 2
  OPTIONAL { ?member dbo:occupation ?sameProfession . }
  FILTER(EXISTS {
    SELECT ?producer WHERE {
      ?cokeStudio dcterms:creator ?producer .
      FILTER(STRSTARTS(LCASE(?cokeStudio), ""http://dbpedia.org/resource/coke_studio_philippines""))
      OPTIONAL { ?producer dbo:occupation ?sameProfession . }
    }
  })
}
```",4,4,5,3,2,3,3,71,0,0,4,0,0.0,0
386,11,train,Give me the war of the awardee of Golden Sword for Bravery.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . ?v1 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?recipient ?war WHERE {
  ?award a dbo:Award ;
        rdfs:label ""Golden Sword for Bravery""@en .
  
  ?recipient dbo:awardedBy ?award .

  OPTIONAL {
    ?recipient dbo:memberOf ?militaryUnit .
    ?militaryUnit dbo:participatedIn ?conflict .
    ?conflict a dbo:MilitaryConflict ;
              rdfs:label ?warLabel .
    FILTER (lang(?warLabel) = 'en')
    BIND(str(?warLabel) AS ?war)
  }
}
```",2,2,3,2,1,2,3,28,0,0,15,0,0.0,0
668,4,train,Who is the person born as Elorm Kabu Amenyah?,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . }","```sparql
SELECT ?person ?name WHERE {
  ?person foaf:originalName ""Elorm Kabu Amenyah"" .
  ?person foaf:name ?name .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
386,0,train,Give me the entity in Russian Empire.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity WHERE {
  ?entity dbo:country dbr:Russian_Empire .
}
```",1,1,2,1,1,2,3,28,0,776,87,0.0,0.0,0
386,1,train,Give me the war of Karl Gustav von Baggovut.,SELECT ?result WHERE { <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?battle ?date WHERE {
  ?person dbo:nationality dbr:Russian_Federation ;
          rdfs:label ""Karl Gustav von Baggovut""@en .
  
  OPTIONAL { 
    ?person dbo:participatedInBattle ?battle .
    ?battle dbo:date ?date .
  }
}
```",1,1,2,1,1,2,3,28,0,0,13,0,0.0,0
816,35,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of the child of Allan Arbus.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?v1 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
# Step 1: Find Allan Arbus's children
SELECT ?child WHERE {
    dbpedia:Allan_Arbus dbo:child ?child .
}

# Step 2: For each child, find movies they are involved in and check if Herschel Bernardi is part of those works
SELECT DISTINCT ?movie ?actor WHERE {
    # Replace ?child with the actual URI obtained from step 1
    ?child dbo:work ?movie .
    ?movie dbo:starringHerschelBernardi dbpedia:Herschel_Bernardi .

    # Get actors involved in that movie
    ?movie dbo:starring ?actor .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
87,9,train,Give me the actor of Always (1989 film) and spouse of Janusz Kamiński.,SELECT ?result WHERE { <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . },"```sparql
SELECT ?actor ?spouse WHERE {
  # Query for the actor from the film ""Always"" (1989)
  {
    dbpedia:Always_(film) dbo:starring ?actor .
    ?actor rdf:type dbo:Actor .
  }
  
  UNION
  
  # Query for the spouse of Janusz Kamiński
  {
    dbpedia:Janusz_Kami%C5%84ski dbo:spouse ?spouse .
    ?spouse rdf:type dbo:Person .
  }
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
531,30,train,"Give me the office of Mariano Rajoy and tenant of Madrid and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?partyLeaderRole WHERE {
  VALUES ?person { dbr:Mariano_Rajoy }
  
  # Find offices held by Mariano Rajoy
  ?office dbo:holder ?person .
  
  OPTIONAL {
    ?office dbo:location dbr:Madrid .
  }

  # Find his role as a leader in the People's Party (Partido Popular)
  ?partyLeaderRole dbo:leader ?person ;
                   rdf:type dbo:PoliticalParty ;
                   rdfs:label ?partyLabel .

  FILTER(CONTAINS(LCASE(?partyLabel), ""people's party"") || CONTAINS(LCASE(?partyLabel), ""partido popular""))
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
80,33,train,"Give me the actor of the album of the work, that is a song and a musical work, of T.I. and actor of Shelby Oaks.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/album> ?v3 . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v3 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. },"```sparql
# Step 1: Find a song by T.I. that is also considered a musical work
SELECT ?song WHERE {
    ?song dbo:artist dbr:T.I._(rapper) .
    ?song rdf:type dbo:Songs .
}

# Step 2: Determine which album this song belongs to
SELECT DISTINCT ?album WHERE {
    ?song dbo:fromAlbum ?album .
    ?song dbo:artist dbr:T.I._(rapper) .
    FILTER(?song IN (VALUES ?song {<http://dbpedia.org/resource/Your_Song_Here>}))
}

# Step 3: Find the actor associated with ""Shelby Oaks""
SELECT DISTINCT ?actor WHERE {
    ?show dbo:starring ?actor .
    ?show rdfs:label ""Shelby Oaks""@en .
    FILTER(lang(?show) = 'en')
}

# Step 4: Check if there's an overlap between actors of the album and Shelby Oaks
SELECT DISTINCT ?commonActor WHERE {
    # Actors from the album
    ?album dbo:starring ?actorFromAlbum .
    ?song dbo:fromAlbum ?album .
    ?song dbo:artist dbr:T.I._(rapper) .

    # Actors from Shelby Oaks
    ?show dbo:starring ?actorFromShelbyOaks .
    ?show rdfs:label ""Shelby Oaks""@en .
    
    # Check for common actors
    FILTER(?actorFromAlbum = ?actorFromShelbyOaks)
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
609,56,train,"Give me the birth place of Glenn Youngkin and birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of the author of the reference, that is American, to El Deafo.","SELECT ?result WHERE { <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/author> ?v1 . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . }","```sparql
# Query for Glenn Youngkin's birth place
SELECT ?birthPlace WHERE {
  dbpedia:Glenn_Youngkin dbo:birthPlace ?birthPlace .
}

UNION

# Query for an award received by Vince Gilligan and the awardee of that award
SELECT ?awardeeBirthPlace WHERE {
  ?award dbo:recipient dbpedia:Vince_Gilligan .
  ?award dbo:recipient ?awardee .
  ?awardee dbo:birthPlace ?awardeeBirthPlace .
}

UNION

# Query for Cece Bell's birth place
SELECT ?birthPlace WHERE {
  dbpedia:Cecily_Bell dbo:birthPlace ?birthPlace .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
198,15,train,"Give me the awardee of the show, that is an award, of United States Congress.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?result <http://dbpedia.org/property/awards> ?v1 . },"```sparql
SELECT ?awardee WHERE {
  ?award dcterms:isPartOf <http://dbpedia.org/resource/United_States_Congress> .
  ?award dbo:recipient ?person .
  ?person rdfs:label ?awardee .
  FILTER (LANG(?awardee) = 'en') .
  FILTER EXISTS { ?award rdf:type <http://dbpedia.org/ontology/Medal> } .
}
LIMIT 10
```",2,3,3,2,1,3,3,71,0,0,2196,0,0.0,0
158,20,train,"Give me the person decedent at Switzerland and native of the administration of Alexander II, Grand Duke of Finland and native of Russian Empire.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:deathPlace dbr:Switzerland .
  ?person dbo:birthPlace ?finlandAdmin .
  ?person dbo:nationality dbr:Russian_Empire .
  
  # Filter for the administration of Alexander II, Grand Duke of Finland
  ?finlandAdmin dbo:country dbr:Grand_Duchy_of_Finland ;
                dbo:ruledBy dbr:Aleksandr_II_of_Russia .

  # Get the name of the person
  ?person rdfs:label ?name .
  
  FILTER (lang(?name) = 'en')
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
68,7,train,"Give me the father of Catherine of Austria, Queen of Portugal and father of Isabella of Austria.","SELECT ?result WHERE { <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  wd:Q12345 wdt:P22 ?father .
}
```

In this query:
- `wd:Q12345` should be replaced with the actual DBpedia resource identifier for Catherine of Austria, Queen of Portugal. You can find this by searching DBpedia or using a tool to get the correct Q number.
- `wdt:P22` is the property used in DBpedia to denote ""father.""",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
198,26,train,Give me the force of the awardee of the award of Quincy Adams Gillmore.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> ?v1 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/commander> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee ?force WHERE {
  # Find Quincy Adams Gillmore's awards
  dbr:Quincy_A._Gillmore dbo:award dbr:Medal_of_Honor .

  # Identify the awardees of the Medal of Honor by Quincy Adams Gillmore
  ?medalOfHonorAwardedBy dbr:Quincy_A._Gillmore ;
                        dbo:recipient ?awardee .

  # Find the force or military unit associated with the awardee
  OPTIONAL {
    ?awardee dbo:militaryUnit ?force .
  }
}
```",3,3,4,3,1,3,3,71,0,0,5,0,0.0,0
159,55,train,"Give me the reference to the writer of Always the Love Songs and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco.","SELECT ?result WHERE { <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v5 . ?v3 <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v3 . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v2 . }","```sparql
SELECT ?writer ?successor ?commander WHERE {
  # Find the writer of ""Always the Love Songs""
  ?work dcterms:title ""Always the Love Songs"" ;
        dbo:author ?writer .
  
  # Find a successor in the Russo-Polish War who was also a politician and office holder
  ?warEvent dbo:wikiPageWikiLink ?successor ;
            rdf:type dbo:MilitaryConflict ;
            dbo:dateStart ?start ;
            dbo:dateEnd ?end .
  FILTER(?start >= ""1654-01-01""^^xsd:date && ?end <= ""1667-12-31""^^xsd:date)
  
  ?successor dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(str(?occupation)), ""politician"") || CONTAINS(LCASE(str(?occupation)), ""office holder""))
  
  # Find a commander whose name is also a TV show or societal event
  ?commander dbo:wikiPageWikiLink ?tvShow ;
             rdf:type dbo:MilitaryPerson .
  
  OPTIONAL { ?tvShow dbo:wikiPageRedirects ?event }
  FILTER(BOUND(?tvShow) || BOUND(?event))
}
```",6,10,7,2,3,3,3,71,0,0,1,0,0.0,0
213,11,train,"Give me the birth place of the child, that is a politician, of Chiang Ching-kuo and country of Cat Country (novel).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Chiang_Ching-kuo> . <http://dbpedia.org/resource/Cat_Country_(novel)> <http://dbpedia.org/ontology/country> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace ?country
WHERE {
  # Find Chiang Hsiao-wen's birthplace
  OPTIONAL { 
    dbr:Chiang_Hsiao-wen dbo:birthPlace ?birthPlace .
  }
  
  # Confirm ""Cat Country"" is associated with China
  OPTIONAL {
    dbr:Cat_Country dbo:setInCountry ?country .
    FILTER (str(?country) = ""China"")
  }
}
```",3,4,4,2,2,3,2,20,0,1,1,0.0,0.0,0
871,29,train,"Give me the father of Arthur Stanley (politician) and parent of Victor Stanley (Royal Navy officer) and parent of the child of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v3 . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . }","```sparql
SELECT ?person WHERE {
  # Arthur Stanley (politician) and Victor Stanley (Royal Navy officer)
  ?arthur foaf:parent ?person .
  ?victor foaf:parent ?person .

  # Arthur Stanley (politician)
  ?arthur rdfs:label ""Arthur Stanley (politician)""@en .

  # Victor Stanley (Royal Navy officer)
  ?victor rdfs:label ""Victor Stanley (Royal Navy officer)""@en .

  # Frederick Stanley, 16th Earl of Derby's child
  ?frederick rdfs:label ""Frederick Stanley, 16th Earl of Derby""@en .
  ?child foaf:parent ?frederick .
  ?child foaf:parent ?person .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
203,26,train,"Give me the military force of the war, that is a military conflict and an event, of the reference to William Bayne.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?militaryForce WHERE {
  ?bayne dbo:wikiPageRedirects dbr:William_Bayne .
  ?bayne dbo:occupation ?occupation .
  FILTER(?occupation IN (dbo:Military_person, dbo:Soldier)) .

  ?event dbo:wikiPageRedirects ?bayne ;
         a dbo:Military_conflict .

  ?war dbo:partOf ?event .
  
  ?war dbo:militaryForce ?militaryForce .
}
```",3,5,4,3,1,3,3,71,0,0,529,0,0.0,0
293,57,train,"Give me the party member of Republican Party (United States) and spouse of the actor of the product, that is a film, of Nat Levine and person born as the birth name of Ann Sothern.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> ?v5 . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v3 . ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/property/birthName> ?v3 . },"```sparql
# Step 1: Find films associated with Nat Levine
SELECT ?film WHERE {
  ?film dbo:producer dbr:Nat_Levine .
}

# Step 2: Identify actors in those films
SELECT DISTINCT ?actor WHERE {
  ?film dbo:starring ?actor .
  ?film dbo:producer dbr:Nat_Levine .
}

# Step 3: Get Ann Sothern's birth name
SELECT ?birthName WHERE {
  dbr:Ann_Sothern foaf:name ?realName .
  ?realName rdfs:label ?birthName FILTER (lang(?birthName) = 'en') .
}

# Step 4: Find any notable person born with Ann Sothern's birth name
SELECT DISTINCT ?person WHERE {
  ?person foaf:name ?birthName .
  VALUES ?birthName { ""Ann Sothern"" } # Assuming we found the birth name in step 3
}

# Step 5: Determine the spouse of the identified actor
SELECT DISTINCT ?spouse WHERE {
  ?actor dbo:spouse ?spouse .
  ?film dbo:starring ?actor .
  ?film dbo:producer dbr:Nat_Levine .
}

# Step 6: Check if this spouse is a member of the Republican Party
SELECT DISTINCT ?spouse WHERE {
  ?spouse dbo:partyMember dbr:Republican_Party_(United_States) .
  ?actor dbo:spouse ?spouse .
  ?film dbo:starring ?actor .
  ?film dbo:producer dbr:Nat_Levine .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
158,14,train,"Give me the native of the administration of Alexander II, Grand Duke of Finland and person decedent at Switzerland.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?person a dbo:Monarch ;
          foaf:name ""Alexander II, Grand Duke of Finland""@en .
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace dbr:Switzerland .
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
513,10,train,"Give me the leader of the party, that is an organisation and a political party, of George Savage (politician).",SELECT ?result WHERE { <http://dbpedia.org/resource/George_Savage_(politician)> <http://dbpedia.org/ontology/party> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v0 <http://dbpedia.org/ontology/leader> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?partyLeader WHERE {
  ?savage a dbo:Politician ;
          foaf:name ""George Savage"" .
  
  ?savage dbo:memberOf ?party .

  ?party a dbo:PoliticalParty ;
         dbp:leader ?partyLeader .
}
```",2,4,3,2,1,3,2,20,0,0,1,0,0.0,0
668,8,train,Give me the birth name of Joey B.,SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?result . },"```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?givenName ?familyName WHERE {
  ?person a foaf:Person ;
          foaf:name ""Joey B"" .
  OPTIONAL { ?person foaf:givenName ?givenName . }
  OPTIONAL { ?person foaf:familyName ?familyName . }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
628,1,train,Give me the person born as Ackquille Jean Pollard.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?officialName WHERE {
  ?person dbo:birthName ""Ackquille Jean Pollard"" .
  ?person skos:prefLabel ?officialName .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
668,17,train,"Give me the birth name of the native, that is an artist, of Central Region, Ghana.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?birthName WHERE {
  VALUES ?artist { dbr:Amakye_Dede }
  ?artist foaf:name ?fullName .
  OPTIONAL { ?artist dbo:givenName ?birthName . }
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
159,0,train,Give me the successor of Yurii Khmelnytsky.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . },"```sparql
SELECT ?successor WHERE {
  dbpedia:Yurii_Khmelnitskyy dbo:positionHeld dbr:Hetman_of_Ukraine .
  dbpedia:Yurii_Khmelnitskyy dbp:succeededBy ?successor .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
943,57,train,"Give me the father of the father, that is a royalty and an office holder, of Na'od and reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and child of Dawit I.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/alterEgo> ?v4 . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Na'od's father
  ?na'od dbo:father dbr:Amda_Seyon_I .
  
  # Amda Seyon I's father (Na'od's grandfather)
  dbr:Amda_Seyon_I dbo:father ?grandfather .

  # Yekuno Amlak is the person we are looking for
  ?grandfather rdfs:label ""Yekuno Amlak""@en .
  
  # Ensure he is a royalty and office holder
  ?grandfather dbo:officeHolderOf ?office .
  ?grandfather dbo:royalty .

  # Dawit I's parent-child relationship with Yekuno Amlak
  dbr:Dawit_I dbo:childOf ?grandfather .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
731,12,train,Give me the force of William Tennant (Royal Navy officer) and war of the commander in Sinking of Prince of Wales and Repulse.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Sinking_of_Prince_of_Wales_and_Repulse> <http://dbpedia.org/ontology/commander> ?v0 . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/William_Tennant_(Royal_Navy_officer)> . },"```sparql
# Query for William Tennant's rank
SELECT ?rank WHERE {
  ?person dbo:givenName ""William"" .
  ?person dbo:familyName ""Tennant"" .
  ?person dbo:occupation dbp:Royal_Navy_officer .
  ?person dbo:rank ?rank .
}

# Query for commanders during the Sinking of Prince of Wales and Repulse
SELECT ?commander WHERE {
  ?event rdf:type dbo:MilitaryConflict .
  ?event dbo:name ""Sinking of Prince of Wales and Repulse"" .
  ?event dbo:commander ?commander .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
203,19,train,"Give me the commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of Battle of Fort Royal.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
# Query to find the commander of the 30th (Cambridgeshire) Regiment of Foot during a military conflict
SELECT ?conflict ?commander WHERE {
  ?regiment dcterms:subject dbc:Regiments_of_Foot_by_number.
  ?regiment rdfs:label ""30th (Cambridgeshire) Regiment of Foot""@en .
  ?regiment dbo:militaryConflicts ?conflict .
  ?conflict dbo:commander ?commander .
}

UNION

# Query to find the commander involved in the Battle of Fort Royal
SELECT ?battle ?commander WHERE {
  ?battle dcterms:subject dbc:Battles_of_the_French_and_Indian_War.
  ?battle rdfs:label ""Battle of Fort Royal""@en .
  ?battle dbo:commander ?commander .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
628,3,train,"Give me the member, that is an artist and a musical artist, of GS9.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?member WHERE {
  ?group dbp:name ""GS9""@en .
  ?group dbo:member ?member .

  ?member rdf:type dbo:Artist .
  ?member rdf:type dbo:MusicalArtist .
}
```",1,3,2,1,1,3,3,71,0,0,2,0,0.0,0
756,46,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and native of the administration, that is a country, of Theodor Heuss.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://dbpedia.org/ontology/team> ?v1 . <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?manager WHERE {
    # Theodor Heuss's native country is Germany
    dbr:Theodor_Heuss dbo:nativePlace dbr:Germany .

    # VfL Bochum as a sports club, organisation, and soccer club
    dbr:VfL_Bochum a dbo:SportsClub ;
                  a dbo:Organisation ;
                  a dbo:FootballClub .

    # The 2007–08 season is the successor to the 2006–07 VfL Bochum season
    ?season dbo:sport dbr:Association_football ;
            dbo:leagueSeason dbr:2._Bundesliga_2007–08 ;
            dbo:team dbr:VfL_Bochum .

    # Find the manager of VfL Bochum for the 2007–08 season
    ?season dbo:manager ?manager .
}
```",5,12,6,3,2,3,3,71,0,0,1,0,0.0,0
39,21,train,Give me the professional in the profession of Sam Concepcion and band of Bob Thompson (musician).,SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?professional WHERE {
  # Get Sam Concepcion's profession
  dbr:Sam_Concepcion dbo:profession ?samProfession .
  
  # Get Bob Thompson's band
  dbr:Bob_Thompson_(musician) dbo:band ?bobBand .

  # Find professionals with the same profession and band
  ?professional a dbo:MusicArtist ;
                dbo:profession ?samProfession ;
                dbo:band ?bobBand .
}
```",3,3,4,2,2,3,3,71,0,0,4,0,0.0,0
628,19,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and person born as Ackquille Jean Pollard.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember WHERE {
  # Find artists associated with Bobby Shmurda
  ?bobbyShmurdaArtist dbo:associatedBandOrMusicalArtist dbr:Bobby_Shmurda .
  
  # Find artists associated with 21 Savage (Ackquille Jean Pollard)
  ?twentyOneSavageArtist dbo:associatedBandOrMusicalArtist dbr:21_Savage .

  # Find common band member who is also a musical artist
  ?bandMember dbo:associatedBandOrMusicalArtist ?bobbyShmurdaArtist .
  ?bandMember dbo:associatedBandOrMusicalArtist ?twentyOneSavageArtist .
  
  FILTER(?bandMember != dbr:Bobby_Shmurda && ?bandMember != dbr:21_Savage)
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
159,38,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and reference to the writer of Always the Love Songs.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v2 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?tvShow ?writer WHERE {
  # Find Jean Baptist, Comte d'Arco and his role as a commander in a war
  ?person rdfs:label ""Jean Baptist, Comte d'Arco""@en .
  ?person dbo:role ?commanderRole .
  ?commanderRole dbo:war ?war .

  # Check if the war is depicted as both a television show and a societal event
  ?tvShow dbo:subject ?war .
  ?tvShow rdf:type dbo:TelevisionSeries .
  ?societalEvent dbo:subject ?war .
  ?societalEvent rdf:type dbo:SocietalEvent .

  # Find the writer of ""Always the Love Songs""
  ?writer rdfs:label ?writerLabel .
  FILTER(CONTAINS(LCASE(?writerLabel), ""always the love songs"")).
  
  # Check for any connection between the writer and Jean Baptist, Comte d'Arco or the war
  OPTIONAL { ?writer dbo:worksFor ?tvShow }
  OPTIONAL { ?writer dbo:subject ?war }
}
```",4,6,5,2,2,3,3,71,0,0,1,0,0.0,0
23,11,train,Give me the party of the father of Sofía Petro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/party> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?fatherParty WHERE {
  ?sofia a dbo:Person ;
         foaf:name ""Sofía Petro""@en .
  
  ?sofia dbo:parent ?father .

  ?father dbo:partyAffiliation ?fatherParty .
}
```",2,2,3,2,1,2,3,28,0,0,6,0,0.0,0
293,13,train,"Give me the spouse of the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v1 . }","```sparql
SELECT ?spouse WHERE {
  wd:Q11161 dbo:spouse ?spouse .
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
263,18,train,"Give me the parent of Mary Elphinstone, Lady Elphinstone and parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT DISTINCT ?parentMary ?childClaude ?parentChild
WHERE {
  # Find the parent(s) of Mary Elphinstone, Lady Elphinstone
  ?mary a dbo:Person ;
        foaf:name ""Mary Elphinstone"" ;
        dbo:parent ?parentMary .

  # Find a child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne
  ?claude a dbo:Person ;
          foaf:name ""Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne"" ;
          dbo:child ?childClaude .

  # Find the parent(s) of that child
  ?childClaude dbo:parent ?parentChild .
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
756,58,train,"Give me the manager of VfL Bochum and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26 and native of the administration, that is a country, of Theodor Heuss.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://dbpedia.org/ontology/manager> ?v1 . ?v5 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. }","```sparql
# Query 1: Find sports managers born on August 26, 1968, and native of Germany
SELECT ?person WHERE {
  ?person dbo:birthDate ""1968-08-26""^^xsd:date .
  ?person dbo:nationality dbr:Germany .
  ?person rdf:type dbo:SportsManager .
}

# Query 2: Find the soccer club managed by the person identified in Query 1
SELECT ?team WHERE {
  ?manager dbo:manages ?team .
  ?manager ?p ?o .
  FILTER(?p = <http://dbpedia.org/ontology/birthDate> && ?o = ""1968-08-26""^^xsd:date)
  FILTER(?p = <http://dbpedia.org/ontology/nationality> && ?o = dbr:Germany)
}

# Query 3: Find the manager of VfL Bochum
SELECT ?manager WHERE {
  ?team dbo:manages ?manager .
  ?team rdfs:label ""VfL Bochum""@en .
}
```",6,11,7,3,3,3,3,71,0,0,1,0,0.0,0
159,33,train,Give me the reference to the writer of the work of George Ducas and successor of Yurii Khmelnytsky.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> ?v3 . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?writer WHERE {
  ?work dbo:wikiPageWikiLink dbr:Yurii_Khmelnytsky .
  ?work dbo:author ?writer .
  ?writer dbo:wikiPageRedirects* dbr:Samuel_Twardowski .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
39,45,train,"Give me the professional in Singer and professional in  and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician).","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthName ?singerRole ?band WHERE {
  VALUES ?person { dbr:Bob_Thompson_(musician) }
  
  # Get birth name
  OPTIONAL { ?person dbo:birthName ?birthName . }

  # Check if he has a professional role as a singer
  OPTIONAL {
    ?person dbo:profession ?singerRole .
    FILTER(CONTAINS(LCASE(?singerRole), ""singer""))
  }
  
  # Identify any bands associated with him
  OPTIONAL {
    ?band dbo:member ?person .
    ?band dbp:name ?bandName .
  }

  # Ensure he is recognized as a musical artist
  FILTER EXISTS { ?person dbo:occupation dbr:Musical_artist . }
}
```",5,6,6,3,3,3,3,71,0,0,3,0,0.0,0
905,25,train,"Give me the parent of Charles Martel of Anjou and child of the child, that is a royalty, of Béla IV of Hungary.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commonIndividual WHERE {
  # Find Charles Martel of Anjou's parent
  ?charlesMartel a dbr:Charles_Martel_of_Anjou ;
                 dbo:father ?parent .

  # Find Béla IV of Hungary's grandchild who is royalty
  ?belaIV a dbr:Béla_IV_of_Hungary ;
          dbo:child ?child .
  ?child dbo:child ?grandChild .
  ?grandChild a ?royaltyClass .

  FILTER(?royaltyClass IN (dbr:Monarch, dbr:Prince, dbr:Princess))

  # Find the common individual
  VALUES ?commonIndividual { ?parent ?grandChild }
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
119,5,train,"Give me the residence, that is a country, of Dawid Olejniczak.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Dawid_Olejniczak> <http://dbpedia.org/property/residence> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?residence WHERE {
  ?person foaf:name ""Dawid Olejniczak""@en .
  ?person dbo:residence ?residence .
  ?residence a dbo:Country .
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
595,53,train,"Give me the commander in the war, that is a disease and a societal event, of United States Navy and author of Back to Work (book) and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v3 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://dbpedia.org/property/author> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?spouse WHERE {
  ?war dbo:type dbr:Societal_event .
  ?war dbo:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""financial crisis"") || CONTAINS(LCASE(?name), ""2008"")) .

  ?commander dbo:positionTitle ?title .
  FILTER(CONTAINS(LCASE(?title), ""white house press secretary"") && CONTAINS(LCASE(?title), ""obama administration"")) .

  ?book dbo:author ?commander .
  ?book dbo:title ?bookTitle .
  FILTER(STRSTARTS(LCASE(?bookTitle), ""back to work"")) .

  ?spouse dbo:spouse ?commander .
  ?spouse dbo:occupation dbr:Politician .
  
  ?clintonWork dbo:author dbr:Hillary_Clinton .
  ?clintonWork dbo:title ?workTitle .
  FILTER(STRSTARTS(LCASE(?workTitle), ""hard choices"")) .
}
```",6,12,7,3,3,3,3,71,0,0,1,0,0.0,0
263,20,train,"Give me the native of Middlesex and parent of the person born as Hon. Mary Frances Bowes-Lyon and parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . ?result <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?nativeOfMiddlesex WHERE {
  # Find Hon. Mary Frances Bowes-Lyon
  ?mary a dbo:Person ;
        dbo:birthName ""Hon. Mary Frances Bowes-Lyon""@en .
  
  # Identify her parents
  ?parent1 dbo:child ?mary .
  ?parent2 dbo:child ?mary .

  # Check if any parent is native of Middlesex
  OPTIONAL { ?parent1 dbo:placeOfBirth dbr:Middlesex . }
  OPTIONAL { ?parent2 dbo:placeOfBirth dbr:Middlesex . }

  # Find Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne
  ?patrick a dbo:Person ;
           dbo:birthName ""Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne""@en .

  # Ensure the parents are the same for both Mary Frances Bowes-Lyon and Patrick Bowes-Lyon
  FILTER (?parent1 = ?parent2)
  
  BIND(?parent1 AS ?person)
  OPTIONAL { 
    VALUES ?nativeOfMiddlesex {
      dbr:Middlesex
    }
    ?person dbo:placeOfBirth ?nativeOfMiddlesex .
  }
}
```",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
628,36,train,"Give me the native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state) and band member of Uncle Murda.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. },"```sparql
SELECT DISTINCT ?awardNativeRegion WHERE {
  # Find the band from New York (state) with Uncle Murda as a member
  ?band dbo:location dbr:New_York_(state) .
  ?bandMember foaf:name ""Uncle Murda"" .
  ?band dbo:member ?bandMember .

  # Find an award associated with this band
  ?award dbo:recipient ?band .
  
  # Determine the native region of the award
  ?award dbo:nativeRegion ?nativeRegion .
  ?nativeRegion a dbo:State ; 
                a dbo:PopulatedPlace ;
                dbo:country dbr:United_States_of_America .

}
```",4,9,5,3,2,3,3,71,0,0,1,0,0.0,0
119,9,train,"Who is the commander in the force, that is a television show and a military conflict, of Maria I of Portugal?",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Maria_I_of_Portugal> . ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
SELECT ?show ?conflict WHERE {
  ?show dcterms:title ""Band of Brothers""@en .
  ?show dbo:genre dbp:TelevisionSeries .
  
  ?conflict dcterms:title ""Band of Brothers""@en .
  ?conflict dbo:wikiPageRedirects ?redirect .
  FILTER EXISTS { 
    ?redirect rdfs:label ?label .
    FILTER(CONTAINS(LCASE(?label), ""military""))
  }
}
```",2,4,3,2,1,3,2,20,0,0,75,0,0.0,0
158,15,train,"Give me the person decedent at the birthplace, that is a country, of Sandro Bertaggia and native of Russian Empire.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/deathPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?personDecedent WHERE {
  # Find Sandro Bertaggia's birthplace
  dbr:Sandro_Bertaggia dbo:birthPlace ?birthPlace .

  # Ensure the birthplace is a country
  ?birthPlace rdf:type dbo:Country .

  # Find individuals native to the Russian Empire and who died at this birthplace
  ?personDecedent dbo:nationality dbr:Russian_Empire ;
                  dbo:deathPlace ?birthPlace .
}
```",3,4,4,2,2,2,3,28,0,1,36,0.0,0.0,0
119,50,train,"Give me the tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?result <http://dbpedia.org/ontology/headquarter> ?v4 . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v0 <http://dbpedia.org/property/residence> ?v4 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?party dbo:leader ?person .
  ?country dbo:president ?person .
  
  FILTER (
    str(?party) = ""Spanish_Socialist_Workers'_Party"" &&
    str(?country) = ""Spain""
  )
}
```",5,8,6,3,2,3,3,71,0,0,23,0,0.0,0
513,15,train,Give me the residence of Doug Beattie and entity in the award of the reference to George Hamilton Cameron.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Doug_Beattie> <http://dbpedia.org/ontology/residence> ?result . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/country> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""George Hamilton Cameron""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?residence ?award WHERE {
  # Doug Beattie's residence
  OPTIONAL { 
    dbr:Doug_Beattie dbo:residenceLocation ?residence .
  }
  
  # George Hamilton Cameron and his award
  OPTIONAL {
    ?person rdfs:label ""George Hamilton Cameron""@en .
    ?person dbo:honoraryAward ?award .
  }
}
```",4,4,5,3,2,3,2,20,0,0,2,0,0.0,0
39,2,train,Give me the band of Bob Thompson (musician).,SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?band WHERE {
  ?person foaf:name ""Bob Thompson""@en .
  ?person dbo:musicArtist <http://dbpedia.org/resource/Bob_Thompson_(musician)> .
  OPTIONAL { ?person dbp:band ?band . }
}
```",1,1,2,1,1,3,3,71,0,0,5,0,0.0,0
492,20,train,Give me the death place of Sal Mineo and death place of the actor of Color Me Dead and death place of Reed Howes.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v3 . ?v3 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for Sal Mineo's death place
SELECT ?deathPlace WHERE {
  dbpedia:Sal_Mineo dbo:deathPlace ?deathPlace .
}

UNION

# Query for the actor of ""Color Me Dead""
SELECT ?actorDeathPlace WHERE {
  ?film dbo:title ""Color Me Dead""@en .
  ?film dbo:starring ?actor .
  ?actor dbo:deathPlace ?actorDeathPlace .
}

UNION

# Query for Reed Howes' death place
SELECT ?deathPlace WHERE {
  dbpedia:Reed_Howes dbo:deathPlace ?deathPlace .
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
38,6,train,"Give me the author of Promise Me, Dad and author of Promises to Keep (Biden book).","SELECT ?result WHERE { <http://dbpedia.org/resource/Promise_Me,_Dad> <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/Promises_to_Keep_(Biden_book)> <http://dbpedia.org/ontology/author> ?result . }","```sparql
SELECT ?book ?author WHERE {
  VALUES ?title { ""Promise Me, Dad"" ""Promises to Keep (Biden book)"" }
  ?book dcterms:title ?title .
  ?book dbo:author ?author .
  FILTER(CONTAINS(LCASE(?author), ""joe biden""))
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
38,5,train,"Give me the work, that is a written work and a work, of Joe Biden.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?result <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?work WHERE {
  ?biden dbo:wikiPageID ""Joe_Biden"" .
  ?biden dbo:author ?work .
  ?work rdf:type dbo:Book .
}
```",1,3,2,1,1,3,2,20,0,0,2,0,0.0,0
293,28,train,"Give me the party member of the ruling party in Central, Louisiana and person born as Harriette Arlene Lake and spouse of Roger Pryor (actor).","SELECT ?result WHERE { <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v1 . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . ?result <http://dbpedia.org/ontology/party> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?partyMember WHERE {
  # Find Harriette Arlene Lake and her spouse Roger Pryor
  ?harriette a dbo:Person ;
             foaf:name ""Harriette Arlene Lake""@en ;
             dbo:spouse dbr:Roger_Pryor .

  # Identify the ruling party in Central, Louisiana
  ?centralLocation a dbo:Place ;
                   dbp:country ""United States"" ;
                   dbp:state ""Louisiana"" ;
                   dbp:city ""Central"" .
  
  ?rulingParty dbo:location ?centralLocation ;
               dbo:member ?partyMember .

  # Ensure the party member is related to Harriette Arlene Lake
  OPTIONAL { ?partyMember foaf:name ?name . }
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
78,9,train,Give me the band member of The Alan Parsons Project and associated musical artist of Billy Lyall.,SELECT ?result WHERE { <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . },"```sparql
# Query for a band member of The Alan Parsons Project
SELECT ?member WHERE {
  ?project dcterms:isPartOf ?album .
  ?album dbo:musicalArtist ?member .
  FILTER(CONTAINS(LCASE(?project), ""the alan parsons project""))
}

UNION

# Query for an associated musical artist of Billy Lyall
SELECT ?associatedArtist WHERE {
  dbp:Billy_Lyall dbo:associatedMusicalArtist ?associatedArtist .
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
687,20,train,"Give me the player in Juan Carlos Molina (footballer) and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v2 . ?v2 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. },"```sparql
# Query for players associated with Juan Carlos Molina
SELECT ?player WHERE {
  ?molina dbo:position dbr:Soccer_defender ;
          dbo:teamTeam dbr:Club_Atlético_Vélez_Sarsfield .
  ?match dbo:participant ?molina ;
         dbo:participant ?player .
}

UNION

# Query for athletes in ""All or Nothing: Manchester City""
SELECT DISTINCT ?athlete WHERE {
  ?episode dct:subject dbr:Manchester_City_F.C. ;
           dbo:actor ?athlete .
  ?athlete rdf:type dbo:Soccer_player .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
531,38,train,"Give me the office of the commander, that is an office holder and a politician, in Central African Republic Civil War and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v3 . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commanderOffice ?partyLeaderOffice WHERE {
  # Find the commander's office in Central African Republic Civil War who is also a politician
  ?person dbo:occupation ?office .
  ?person dbo:wikiPageWikiLink dbr:Central_African_Republic_Civil_War .
  ?person rdf:type dbo:Commander .
  ?person rdf:type dbo:Politician .
  
  BIND(?office AS ?commanderOffice)

  # Find the leader's office of Conservative Republican Party (Spain) who is a politician
  ?leader dbo:partyLeader dbr:Conservative_Republican_Party_(Spain) .
  ?leader rdf:type dbo:Politician .
  ?leader dbo:occupation ?office .

  BIND(?office AS ?partyLeaderOffice)
}
```",4,7,5,2,2,3,3,71,0,0,1,0,0.0,0
68,18,train,"Give me the child of Maximilian I, Holy Roman Emperor and father of the child, that is a royalty, of Philip I of Castile.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?father WHERE {
  # Maximilian I's children
  ?child dbo:parent dbr:Maximilian_I,_Holy_Roman_Emperor .
  
  # Philip I of Castile
  ?philip dbr:Philip_I_of_Castile .

  # Parentage of Philip I of Castile
  ?philip dbo:father ?father .

  # Ensure the child is a royalty and matches Maximilian I
  FILTER(?child = ?philip)
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
687,21,train,"Give me the player in the person born, that is an athlete, on 1955-02-22 and team of Pablo Aimar.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://dbpedia.org/ontology/team> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?player WHERE {
  ?player a dbo:Athlete ;
          dbo:birthDate ""1955-02-22""^^xsd:date ;
          dbo:team ?team .
  
  OPTIONAL { 
    ?team dbr:Pablo_Aimar dbp:member . 
  }
}
```",3,4,4,2,2,3,3,71,0,3,1,0.0,0.0,0
412,2,train,Give me the war of Konstantinos Ventiris.,SELECT ?result WHERE { <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT ?war WHERE {
  ?person a foaf:Person ;
          foaf:name ""Konstantinos Ventiris""@en .
  ?person dbpedia-owl:participatedIn ?war .
}
```",1,1,2,1,1,2,3,28,0,0,10,0,0.0,0
103,54,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant and professional in  and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?v0 <http://dbpedia.org/property/occupation> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/starring> ?result . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find movies or TV shows featuring Richard E. Grant that are also television series
  ?work dbo:starring dbr:Richard_E._Grant .
  ?work a ?type .
  FILTER(?type IN (dbo:Film, dbo:TelevisionSeries))

  # Find actors from ""Ab Kya Hoga"" who are politicians
  ?abKyaHogaWork dbo:starring ?actor .
  ?abKyaHogaWork dbr:Ab_Kya_Hoga .

  ?actor dbo:profession ?profession .
  FILTER(?profession IN (dbo:Actor, dbo:Politician))

  # Find actors from the same work as Richard E. Grant who are also politicians
  ?work dbo:starring ?commonActor .
  ?commonActor = ?actor .
}
```",6,8,7,3,3,3,3,71,0,0,13,0,0.0,0
723,2,train,Give me the reference to Nothing to Gein.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Nothing to Gein""@en . }","```sparql
SELECT ?reference WHERE {
  ?work dbo:title ""Nothing to Gein""@en .
  OPTIONAL { ?work dbo:wikiPageRedirects ?redirect . }
  BIND(COALESCE(?redirect, ?work) AS ?reference)
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
103,27,train,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo WHERE {
  ?character a dbo:FictionalCharacter .
  ?character dbo:name ""The Shadow"" .
  ?character dbo:workExample ?comicSeries .
  ?character dbo:alterEgo ?alterEgo .
  FILTER EXISTS { ?comicSeries dbo:genre dbr:Comic_book }
}
```",3,4,4,3,1,3,3,71,0,0,39640,0,0.0,0
628,48,train,"Give me the band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
SELECT DISTINCT ?bandMember WHERE {
  # Step 1: Identify GS9 members who are artists and musicians
  ?gs9Member dbo:memberOf dbr:GS9 ;
             rdf:type dbo:MusicalArtist, dbo:Artist .

  # Step 2: Find associated musical artists of these members
  ?associatedArtist dbo:associatedWith ?gs9Member ;
                   rdf:type dbo:MusicalArtist .

  # Step 3: Determine if the associated artist is a band member
  ?bandMember dbo:memberOf ?associatedArtistGroup .

  # Step 4: Identify the award region for Coro de la Pontificia Universidad Católica de Puerto Rico
  dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico dbo:award dbr:Award ;
                                                           dbo:nativeRegion ?region .

  # Step 5: Ensure the region is an American state and settlement
  ?region rdf:type dbo:State, dbo:Settlement, dbo:AmericanRegion .

  # Step 6: Filter band members by native region
  ?bandMember dbo:nativePlace ?region .
}
```",5,12,6,3,2,3,3,71,0,0,1,0,0.0,0
213,3,train,"Who is the child, that is a politician, of Chiang Ching-kuo?",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Chiang_Ching-kuo> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?childName WHERE {
  ?person rdfs:label ""Chiang Ching-kuo""@en .
  ?person dbo:child ?child .
  ?child rdfs:label ?childName .
  OPTIONAL { ?child dbo:occupation ?occupation . FILTER(CONTAINS(LCASE(?occupation), ""politician"")) }
  OPTIONAL { ?child dbo:politicalPartyMember ?party . }
  FILTER (LANG(?childName) = 'en')
}
ORDER BY ?childName
```",1,2,2,1,1,3,2,20,1,11,0,0.08333333333333333,1.0,0.15384615384615385
557,41,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins and producer of A Star Is Born (1937 film) and professional in the alter ego of The Shadow.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?v4 <http://dbpedia.org/ontology/producer> ?result . },"```sparql
SELECT ?producer WHERE {
  # Cora Sue Collins' claim to fame: ""I'm Always Chasing Rainbows""
  ?song dcterms:title ""I'm Always Chasing Rainbows"" ;
        dbo:lyricistCorrespondingTo ?collins .
  
  # David O. Selznick produced the song's famous rendition
  ?filmProduction dbo:producer ?producer ;
                  dbo:work ?song .

  # A Star Is Born (1937 film) producer
  ?starIsBornFilm dbp:title ""A Star Is Born"" ;
                  dbp:releaseDate ""1937-11-29""^^xsd:date ;
                  dbo:producer ?producer .
  
  FILTER(?collins = <http://dbpedia.org/resource/Cora_Sue_Collins> &&
         ?producer = <http://dbpedia.org/resource/David_O._Selznick>)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
159,45,train,"Give me the reference to George Ducas and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and successor of Yurii Khmelnytsky.","SELECT ?result WHERE { <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v1 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?georgeDucas ?commanderInWar ?tvShow ?societalEvent ?militaryForce ?successor

WHERE {
  # Find George Ducas
  ?georgeDucas a dbo:Person ;
               foaf:name ""George Ducas""@en .

  OPTIONAL {
    # Find commander in the war (related to Battle of Vienna)
    ?commanderInWar dbo:occupation dbr:Military_commander ;
                    dbo:associatedWith dbr:Battle_of_Vienna .
  }

  OPTIONAL {
    # Find a television show related to George Ducas or the battle
    ?tvShow dbo:genre dbr:Television_show ;
           dbo:subject ?georgeDucas ;
           dbo:subject ?commanderInWar .
  }

  OPTIONAL {
    # Find a societal event related to George Ducas or the battle
    ?societalEvent dbo:type dbr:Societal_event ;
                  dbo:relatedTo ?georgeDucas ;
                  dbo:relatedTo ?commanderInWar .
  }

  OPTIONAL {
    # Find military force involved in Battle of Vienna
    ?militaryForce dbo:associatedWith dbr:Battle_of_Vienna .
  }

  OPTIONAL {
    # Find successor of Yurii Khmelnytsky
    ?successor dbo:succeededBy dbr:Yurii_Khmelnytsky ;
               dbo:occupation dbr:Military_commander .
  }
}
```",5,7,6,3,3,3,3,71,1,1,0,0.5,1.0,0.6666666666666666
595,27,train,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v1 <http://dbpedia.org/ontology/battle> ?v2 . <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
# Step 1: Find the owner of USS Arcadia (ID-1605)
SELECT ?owner WHERE {
  dbpedia:USS_Arcadia_(ID-1605) dbo:ownedBy ?owner .
}

# Step 2: Determine which war the owner was involved in
SELECT DISTINCT ?war WHERE {
  ?owner dbo:participatedIn ?event .
  ?event rdf:type dbo:MilitaryConflict .
  BIND(?event AS ?war)
}

# Step 3: Identify the commander of that war
SELECT DISTINCT ?commander WHERE {
  ?war dbo:commandedBy ?commander .
}

# Step 4: Check if there is a disease or societal event named after this commander
SELECT DISTINCT ?diseaseEvent WHERE {
  ?commander foaf:name ?name .
  ?diseaseEvent rdfs:label ?name ;
                (rdf:type dbo:Disease OR rdf:type dbo:SocietalEvent) .
}
```",3,5,4,3,1,3,3,71,0,0,18,0,0.0,0
737,26,train,Give me the child of the child of the child of Alexander of Württemberg (1804-1881).,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://dbpedia.org/property/father> ?v1 . },"```sparql
SELECT ?greatGrandChild WHERE {
  # Find Alexander of Württemberg's child
  ?child dbo:parent dbr:Alexander_of_W%C3%BCrttemberg;
         rdf:type dbo:Person.
  
  # For each child, find their child (grandchildren of Alexander)
  ?grandchild dbo:parent ?child;
              rdf:type dbo:Person.

  # For each grandchild, find their child (great-grandchildren of Alexander)
  ?greatGrandChild dbo:parent ?grandchild;
                   rdf:type dbo:Person.
}
```",3,3,4,3,1,3,3,71,0,0,2,0,0.0,0
472,16,train,Give me the territory administered from Copenhagen and administration of the mayor of Duchy of Schleswig.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v2 . },"```sparql
# Query for territories administered from Copenhagen
SELECT ?territory WHERE {
  ?territory dbo:administrativeCapital dbr:Copenhagen .
  ?territory a dbo:AdministrativeTerritory .
}

UNION

# Query for information about the Duchy of Schleswig's administration
SELECT ?mayor WHERE {
  ?duchy rdfs:label ""Duchy of Schleswig""@en .
  ?duchy dbo:headOfGovernment ?mayor .
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
468,11,train,Give me the reference to the real name of Peter IV of Aragon and child of Alfonso IV of Aragon.,SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . },"```sparql
SELECT ?realName WHERE {
  ?peterIV dbo:title ""Peter IV of Aragon""@en .
  ?peterIV foaf:parent ?alfonsoIV .
  ?alfonsoIV rdfs:label ""Alfonso IV of Aragon""@en .
  ?peterIV foaf:name ?realName .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
297,2,train,"Give me the birth place, that is a country, of Little Hat Jones.",SELECT ?result WHERE { <http://dbpedia.org/resource/Little_Hat_Jones> <http://dbpedia.org/ontology/birthPlace> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  dbr:Little_Hat_Jones dbo:birthPlace ?birthPlace .
  FILTER (isLiteral(?birthPlace) && datatype(?birthPlace) = xsd:string)
}
```",1,2,2,1,1,2,2,9,0,0,1,0,0.0,0
782,60,train,"Give me the reference to the real name of the band of Kim Wilson and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v0 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v3 <http://xmlns.com/foaf/0.1/name> ?v2 . ?v3 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?kimWilson ?band ?nickCurran ?associatedArtist WHERE {
  # Kim Wilson and The Fabulous Thunderbirds
  OPTIONAL { 
    ?kimWilson a dbo:Musician ;
               foaf:name ""Kim Wilson"" ;
               dbo:memberOfBand dbr:The_Fabulous_Thunderbirds .
    BIND(dbr:The_Fabulous_Thunderbirds AS ?band)
  }

  # Nick Curran details and associated artists
  OPTIONAL {
    ?nickCurran a dbo:Musician ;
                foaf:name ""Nick Curran"" ;
                dbp:birthday ""1980-03-31""^^xsd:date ;
                dbo:placeOfBirth dbr:San_Antonio,_Texas .
    
    # Find any associated musical artists
    OPTIONAL { 
      ?nickCurran dbo:associatedMusicalArtist ?associatedArtist .
    }
  }
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
89,23,train,Give me the child of the parent of the child of Minye Kyawswa.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v0 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v2 . },"```sparql
SELECT ?finalChild WHERE {
  # Step 1: Identify Minye Kyawswa
  ?minye_kyawswa dbo:name ""Minye Kyawswa""@en .
  
  # Step 2: Find a child of Minye Kyawswa
  ?child dbo:parent ?minye_kyawswa .

  # Step 3: Determine the parent of this child
  ?grandparent dbo:child ?child .

  # Step 4: Identify the child of this grandparent
  ?finalChild dbo:parent ?grandparent .
}
```",3,3,4,3,1,3,3,71,0,0,5,0,0.0,0
905,26,train,"Give me the parent of the father, that is a royalty, of the spouse of Maria of Bytom.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v2 . },"```sparql
# Step 1: Find Maria of Bytom's spouse
SELECT ?spouse WHERE {
  dbpedia:María_of_Bytom dbo:spouse ?spouse .
}

# Step 2: Determine the father of that spouse
SELECT ?father WHERE {
  ?spouse dbo:father ?father .
}

# Step 3: Find out who is the parent of that father and ensure they are royalty
SELECT DISTINCT ?royalParent WHERE {
  ?father dbo:parent ?royalParent .
  OPTIONAL { ?royalParent rdf:type dbpedia-owl:Monarch . }
  FILTER EXISTS { ?royalParent rdf:type dbpedia-owl:Monarch . }
}

# Step 4: Extract the name or title of that royal parent
SELECT DISTINCT ?royalParentLabel WHERE {
  ?father dbo:parent ?royalParent .
  OPTIONAL { ?royalParent rdf:type dbpedia-owl:Monarch . }
  FILTER EXISTS { ?royalParent rdf:type dbpedia-owl:Monarch . }
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",3,4,4,3,1,3,3,71,0,0,2,0,0.0,0
375,15,train,"Give me the author of the movie, that is a work and a television show, with the person deceased, that is an artist and a musical artist, on 2020-06-18 and parent of Kate Dimbleby.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Kate_Dimbleby> . ?v0 <http://dbpedia.org/ontology/deathDate> ""2020-06-18""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://dbpedia.org/ontology/author> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/starring> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
SELECT ?author WHERE {
  ?person dbo:occupation dbr:Artist ;
          dbo:occupation dbr:Musical_artist ;
          dbo:dateOfDeath ""2020-06-18""^^xsd:date .
  
  ?person foaf:parentOf dbr:Kate_Dimbleby .

  ?work dbo:type dbr:Film ;
        dbo:type dbr:Television_series ;
        dbo:creator ?person .

  ?work dbo:author ?author .
}
```",4,8,5,3,2,3,2,20,0,0,1,0,0.0,0
816,32,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of the professional in Photographer.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?result <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
SELECT DISTINCT ?actor WHERE {
  # Find movies that Herschel Bernardi acted in
  ?movie dbo:starringHerschelBernardi dbp:Herschel_Bernardi .
  
  # Ensure the movie is a work (instance of dbo:Film)
  ?movie rdf:type dbo:Film .

  # Find other actors in those movies
  ?movie dbo:starring ?actor .

  # Check if any actor has a parent class or category related to Photographer
  OPTIONAL { ?actor rdfs:subClassOf* dbp:Photographer . }
  
  FILTER(?actor != dbp:Herschel_Bernardi) # Exclude Herschel Bernardi himself
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
468,2,train,"Give me the child, that is a royalty, of Alfonso IV of Aragon.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?title WHERE {
  ?alfonsoIV a dbo:Person ;
             foaf:name ""Alfonso IV of Aragon""@en .
  
  ?alfonsoIV dbo:child ?child .

  OPTIONAL { 
    ?child dbp:title ?title .
  }

  FILTER (CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen""))
}
```",1,2,2,1,1,3,2,20,0,0,3,0,0.0,0
353,8,train,Who is the child of Alfonso VI of León and Castile?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  dbr:Alfonso_VI_of_León_and_Castile dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,2,3,1,0.4,0.6666666666666666,0.5
399,7,train,Give me the professional in Singer and band member of the person born as Emilia Yancheva Valeva.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ""Emilia Yancheva Valeva""@en . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?singerRole ?bandMemberRole WHERE {
  ?person dbo:birthName ""Emilia Yancheva Valeva""@en .
  
  OPTIONAL { ?person dbo:occupation ?singerRole . FILTER(CONTAINS(LCASE(?singerRole), ""singer"")) }
  OPTIONAL { ?person dbo:memberOfBand ?bandMemberRole . }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",3,3,4,2,2,2,2,9,0,0,3,0,0.0,0
492,2,train,Give me the death place of Sal Mineo.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?deathPlace WHERE {
  dbr:Sal_Mineo dbo:deathPlace ?deathPlace .
}
```",1,1,2,1,1,2,3,28,1,0,0,1.0,1.0,1.0
198,8,train,"Give me the birthplace, that is a settlement and American, of Henry Clay Lewis.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbc: <http://dbpedia.org/resource/Category:>

SELECT ?birthPlace WHERE {
  dbr:Henry_Clay_Lewis dbo:birthPlace ?birthPlace .
  ?birthPlace a dbc:Populated_places_in_the_United_States .
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
706,5,train,Who is the actor of Akaler Shandhaney?,SELECT ?result WHERE { <http://dbpedia.org/resource/Akaler_Shandhaney> <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film a dbo:Film .
  ?film rdfs:label ""Akaler Shandhaney""@en .
  ?film dbo:starring ?actor .
}
```",1,1,2,1,1,3,2,20,4,0,5,1.0,0.4444444444444444,0.6153846153846153
595,10,train,Give me the spouse of Hillary Clinton and commander in Third Taiwan Strait Crisis.,SELECT ?result WHERE { <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
# Query to find the spouse of Hillary Clinton
SELECT ?spouse WHERE {
  wd:Q42 dbo:spouse ?spouse .
}

UNION

# Query to find a commander during the Third Taiwan Strait Crisis
SELECT ?commander WHERE {
  ?event dbo:wikiPageRedirects dbpedia-en:Third_Taiwan_Strait_Crisis ;
         dbo:agent ?person .
  ?person rdf:type dbo:MilitaryPerson ;
          dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""commander"") || CONTAINS(LCASE(?title), ""leader""))
  BIND(?person AS ?commander)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
295,13,train,"Give me the writer of the work, that is a musical work, of the true self, that is an artist, of Steven Kapur.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/givenName> ""Steven Kapur""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v1 <http://dbpedia.org/property/writer> ?result . ?v1 <http://dbpedia.org/property/writer> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?writer WHERE {
  # Find Steven Kapur's profession or role
  dbr:Steven_Kapur a ?profession .
  
  # Check if he is associated with The True Self
  OPTIONAL { 
    ?artist dbo:alias dbr:The_True_Self .
    ?artist dbo:member dbr:Steven_Kapur .
  }
  
  # Find musical works by The True Self
  ?work dbo:creator ?artist .
  ?work a dbo:MusicalWork .
  
  # Identify the writer of these musical works
  ?work dbo:writer ?writer .
}
```",3,5,4,3,1,3,2,20,0,0,1,0,0.0,0
353,56,train,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and father of William II of Sicily and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . }","```sparql
SELECT ?grandchild WHERE {
  # Constance of Burgundy's spouse
  ?spouse dbo:spouse dbr:Constance_of_Burgundy .
  
  # Their child
  ?child dbo:parent ?spouse ;
         dbo:parent dbr:Constance_of_Burgundy .

  # The grandchild (child of the child)
  ?grandchild dbo:parent ?child .

  # Check if the grandchild is royalty
  ?grandchild rdf:type dbo:Monarch .

  # Ensure the grandchild is a parent of William II of Sicily
  ?grandchild dbo:child dbr:William_II_of_Sicily .

  # Verify the grandchild is also a child of Roger III's parent
  ?rogerParent dbo:parent dbr:Roger_III,_Duke_of_Apulia .
  ?grandchild dbo:parent ?rogerParent .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
816,44,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of the professional in Photographer and parent of the child of Allan Arbus.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v4 <http://dbpedia.org/property/occupation> ""Photographer""@en . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v2 . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/child> ?v4 . }","```sparql
SELECT ?actor ?parent WHERE {
  # Find actor from the movie ""Judgment: The Trial of Julius and Ethel Rosenberg""
  ?movie dcterms:title ""Judgment: The Trial of Julius and Ethel Rosenberg"" .
  ?movie dbo:starring ?actor .

  # Check if this actor has a child who is a professional in Photography
  ?actor dbo:child ?child .
  ?child dbo:occupation ""Photographer""@en .

  # Verify that the same actor is also a parent of Allan Arbus
  ?actor dbo:child dbr:Allan_Arbus .

  # Return the actor and their parent (which should be themselves in this context)
  BIND(?actor AS ?parent)
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
38,7,train,"Give me the author of the work, that is a work and a written work and American and a book, of Joe Biden.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?v1 <http://dbpedia.org/ontology/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?book WHERE {
  ?book a dbo:Book ;
        dbo:author dbr:Joe_Biden ;
        a dbo:WrittenWork ;
        a dbo:Work .
  FILTER EXISTS { 
    ?book dbo:subject dbr:Category:American_books
  }
}
```",2,6,3,2,1,3,2,20,0,0,1,0,0.0,0
731,3,train,Who is the awardee of Commander of the Order of the British Empire?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Commander_of_the_Order_of_the_British_Empire> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?personLabel WHERE {
  ?person dbo:award dbr:Commander_of_the_Order_of_the_British_Empire .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,1,2,1,1,3,2,20,0,0,853,0,0.0,0
159,8,train,"Give me the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco.","SELECT ?result WHERE { <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?person dbo:nationality dbr:France .
  ?person rdfs:label ""Jean Baptist, Comte d'Arco""@en .
  
  ?event dbo:participatedIn ?person ;
         a dbo:Event .

  ?tvShow dbo:basedOn ?event ;
          a dbo:TelevisionSeries .

  FILTER(CONTAINS(LCASE(?tvShow), ""war""))
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
119,13,train,"Give me the tenant of the residence, that is a country, of Álvaro Quirós.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v1 . },"```sparql
SELECT ?country WHERE {
  ?person dbo:name ""Álvaro Quirós""@en .
  ?person dbo:residence ?residence .
  ?residence rdf:type schema:Country .
  BIND(?residence AS ?country)
}
```",2,3,3,2,1,3,3,71,0,0,216,0,0.0,0
311,6,train,Give me the associated musical artist of Filthy Friends and band member of Mark Eitzel.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mark_Eitzel> . <http://dbpedia.org/resource/Filthy_Friends> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
SELECT ?person WHERE {
  ?project dcterms:title ""Filthy Friends""@en .
  ?project dbo:member ?person .
  OPTIONAL { 
    ?eitzelProject dbo:bandMember ?person ;
                   dbo:leadArtist <http://dbpedia.org/resource/Mark_Eitzel> .
  }
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
609,39,train,"Give me the birth place of the author of the reference, that is American, to El Deafo and birth place of Glenn Youngkin.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/author> ?v1 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Query for the birth place of Cece Bell, author of El Deafo
SELECT ?birthPlace WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person foaf:name ""Cece Bell""@en .
  ?person dbo:nationality dbr:United_States .
}

UNION

# Query for the birth place of Glenn Youngkin
SELECT ?birthPlace WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person foaf:name ""Glenn Youngkin""@en .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
246,8,train,"Give me the parent of the child, that is a royalty, of Prince Faisal bin Hussein.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . },"```sparql
SELECT ?royalChild ?parent WHERE {
  # Step 1: Identify Prince Faisal bin Hussein
  ?faisal dbo:child ?child .
  VALUES ?faisal { <http://dbpedia.org/resource/Faisal_bin_Hussein> } .

  # Step 2: Find his children who are royalty
  ?child a dbo:Monarch .

  # Step 3: Retrieve the parent of this royal child
  ?royalChild dbo:parent ?parent .
  FILTER(?royalChild = ?child)
}
```",2,3,3,2,1,3,2,20,0,0,2,0,0.0,0
39,42,train,"Give me the professional in  and professional in the profession of Sam Concepcion and band of the person born, that is a musical artist, as Robert Lamar Thompson.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
# Step 1: Find Sam Concepcion's profession
SELECT ?profession WHERE {
  dbpedia:Sam_Concepcion dbo:occupation ?profession .
}

# Step 2: Find another person with the same profession as Sam Concepcion
SELECT DISTINCT ?person WHERE {
  ?person dbo:occupation ?sameProfession .
  FILTER(?sameProfession = <http://dbpedia.org/resource/Actor> || ?sameProfession = <http://dbpedia.org/resource/Singer>)
  FILTER(?person != dbpedia:Sam_Concepcion)
}

# Step 3: Find Robert Lamar Thompson's band
SELECT ?band WHERE {
  dbpedia:Lil_Rob dbo:memberOfBand ?band .
}
```",5,6,6,2,3,3,3,71,0,0,4,0,0.0,0
213,13,train,"Give me the birth place of the child, that is a politician, of the person decedent at Taipei.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Taipei> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?childBirthPlace WHERE {
  ?person dbo:deathPlace dbr:Taipei .
  ?person dbo:child ?child .
  ?child dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(str(?occupation)), ""politician"")) .
  ?child dbo:birthPlace ?childBirthPlace .
}
```",3,4,4,3,1,3,2,20,0,0,5,0,0.0,0
258,4,train,Give me the birth name of Eleonora Menicucci.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/property/birthName> ?result . },"```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?birthName WHERE {
  ?person a foaf:Person ;
          foaf:name ""Eleonora Menicucci""@en .
  OPTIONAL { ?person foaf:givenName ?birthName }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
59,1,train,Give me the manager of Hartlepool United F.C..,SELECT ?result WHERE { <http://dbpedia.org/resource/Hartlepool_United_F.C.> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?manager WHERE {
  ?team a dbo:FootballClub ;
        rdfs:label ""Hartlepool United F.C.""@en .
  OPTIONAL { ?team dbp:manager ?manager . }
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
375,21,train,Give me the entity in Japan and war of Toyotomi Hidenaga and war of the child of Toyotomi Hideyoshi.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?description WHERE {
  VALUES ?person { 
    dbr:Toyotomi_Hidenaga 
    dbr:Toyotomi_Hideyoshi 
  }
  
  ?person dbo:spouse ?spouse .
  OPTIONAL { ?person dbo:child ?child . }

  ?war dbo:participant ?person ;
       dbo:description ?description .

  FILTER (CONTAINS(LCASE(?description), ""japan"") || CONTAINS(LCASE(?description), ""unification""))
}
```",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
756,18,train,Give me the manager of 2020–21 SBV Vitesse season and native of West Germany and manager of VfL Bochum.,SELECT ?result WHERE { <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager WHERE {
  ?manager a dbo:FootballManager .
  
  # Manager of SBV Vitesse during the 2020-21 season
  ?vitesseSeason dbo:team dbr:SBV_Vitesse ;
                dbo:season ""2020–21""^^xsd:string ;
                dbo:manager ?manager .

  # Native of West Germany
  ?manager dbo:nationality dbr:Germany_West .

  # Manager of VfL Bochum
  ?bochumSeason dbo:team dbr:VfL_Bochum ;
                dbo:manager ?manager .
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
159,53,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and reference to George Ducas.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . ?v3 <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?jeanBaptistRole ?successor ?michałKazimierzPacEvent ?georgeDucasReference
WHERE {
  # Jean Baptist, Comte d'Arco's role in a television show and societal event
  dbr:Jean_Baptiste_Comte_d%27Arco dbo:role ?jeanBaptistRole .
  
  # Successor who is a politician and office holder
  ?successor dbo:successorOf dbr:Jean_Baptiste_Comte_d%27Arco ;
             rdf:type dbo:Politician ;
             dbo:officeHolder ?office .

  # Michał Kazimierz Pac's involvement in an event or military conflict
  dbr:Micha%C5%82_Kazimierz_Pac dbo:participatedIn ?michałKazimierzPacEvent .
  
  # Reference to George Ducas
  OPTIONAL {
    ?georgeDucasReference dbo:relatedTo ?jeanBaptistRole ;
                          dbo:relatedTo ?successor ;
                          dbo:relatedTo ?michałKazimierzPacEvent .
  }
}
```",6,12,7,3,3,3,3,71,0,0,1,0,0.0,0
419,3,train,"Who is the awardee, that is australian and a scientist, of Australian Laureate Fellowship?","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>. ?result <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Australia>. ?result <http://dbpedia.org/property/awards> ""Australian Laureate Fellowship""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:award dbr:Australian_Laureate_Fellowship .
  ?person dbo:occupation dbo:Scientist .
  ?person dbo:nationality dbr:Australia .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,3,2,1,1,2,2,9,0,0,4,0,0.0,0
557,57,train,"Give me the professional in  and producer of the claim to fame, that is a movie and a work, of Janet Gaynor and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/property/occupation> """"@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v3 <http://dbpedia.org/ontology/producer> ?result . ?v0 <http://dbpedia.org/ontology/knownFor> ?v5 . ?v5 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v3 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
# Query for Janet Gaynor's claim to fame and its producer
SELECT ?movie ?producer WHERE {
  wd:Q12345 dbo:filmRole ?role .
  ?role dbo:title ""Seventh Heaven"" .
  ?role dbo:productionCompany ?company .
  ?company foaf:name ?producer .
}

# Query for Johnny Doughboy's actor (James Cagney) and the producer of his famous work
SELECT ?actor ?work ?producer WHERE {
  wd:Q12346 rdfs:label ""Yankee Doodle Dandy""@en .
  ?work dbo:starring ?actor .
  ?actor rdfs:label ""James Cagney""@en .
  ?work dbo:productionCompany ?company .
  ?company foaf:name ?producer .
}
```

Note: `wd:Q12345` and `wd:Q12346` are placeholders for the actual DBpedia resource identifiers for Janet Gaynor and ""Yankee Doodle Dandy,"" respectively. You would need to replace these with the correct QIDs from DBpedia.",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
353,1,train,Give me the father of William II of Sicily.,SELECT ?result WHERE { <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  dbr:William_II_of_Sicily dbo:father ?father .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
87,1,train,Give me the spouse of Janusz Kamiński.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?spouseLabel WHERE {
  ?person dbo:spouse ?spouse .
  ?person rdfs:label ""Janusz Kamiński""@en .
  FILTER NOT EXISTS { ?spouse rdfs:label ?dummy . FILTER (lang(?dummy) != ""en"") }
  SERVICE <http://dbpedia.org/sparql> {
    ?spouse rdfs:label ?spouseLabel .
    FILTER(lang(?spouseLabel) = 'en')
  }
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
756,53,train,"Give me the native of West Germany and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v3 <http://dbpedia.org/ontology/team> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v3 . ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . },"```sparql
# Step 1: Find Thomas Letsch's managerial role in a specific season
SELECT ?club WHERE {
    ?letsch dbo:nationality dbr:Germany_West ;
            foaf:name ""Thomas Letsch"" .
    ?letsch dbo:managerOf ?club .
}

# Step 2: Determine the successor of the 2006-07 VfL Bochum season
SELECT ?successorSeason WHERE {
    ?vflBochum dbr:VfL_Bochum ;
               dbo:sportsTeamSeason ?season .
    ?season dbo:startDate ?startDate .
    FILTER (?startDate < ""2007-08-01""^^xsd:date) .
    ?nextSeason dbo:startDate ?nextStartDate .
    FILTER (?nextStartDate > ?startDate) .
    MINUS { ?nextSeason dbo:startDate ?otherStart . FILTER (?otherStart < ?nextStartDate) }
}

# Step 3: Find the manager of the club in the successor season
SELECT ?manager WHERE {
    ?club dbo:sportsTeamSeason ?successorSeason .
    ?manager dbo:managerOf ?club ;
             dbo:nationality dbr:Germany_West .
}
```",6,15,7,3,3,3,3,71,0,0,1,0,0.0,0
80,34,train,Give me the professional in  and actor of the movie with the author of Smartbomb (book).,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v2 . ?v1 <http://dbpedia.org/property/starring> ?v2 . }","```sparql
# Step 1: Find the author of the book ""Smartbomb""
SELECT ?author WHERE {
  ?book dct:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Assuming we find an author, let's say their name is stored in a variable $authorName

# Step 2: Find movies where this author has acted
SELECT DISTINCT ?movie WHERE {
  ?actor foaf:name ""$authorName"" .
  ?actor dbo:actedIn ?movie .
}

# Step 3: Get the professional role and actor for these movies
SELECT ?movie ?role ?actorName WHERE {
  ?movie dbo:starring ?actor .
  ?actor foaf:name ?actorName .
  ?actor dbo:profession ?role .
}
```",4,4,5,3,2,3,3,71,0,0,7802,0,0.0,0
737,45,train,"Give me the predecessor of Carl, Duke of Württemberg and child of Albrecht, Duke of Württemberg and child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
  # Find Carl, Duke of Württemberg's predecessor
  ?carl a dbo:Duke ;
        foaf:name ""Carl, Duke of Württemberg"" .
  
  ?predecessor dbo:successor ?carl .

  # Find Albrecht, Duke of Württemberg and his descendants
  ?albrecht a dbo:Duke ;
           foaf:name ""Albrecht, Duke of Württemberg"" .
  
  ?descendant dbo:childOf ?albrecht ;
              dbo:childOf ?grandchild .

  # Find the parent of Archduchess Margarete Sophie and their child
  ?margareteSophie a dbo:Archduchess ;
                   foaf:name ""Margarete Sophie of Austria"" .
  
  ?parent dbo:child ?margareteSophie .
  
  ?royaltyChild dbo:childOf ?parent ;
                rdf:type dbo:Royal .

  # Ensure the predecessor is also royalty and fits all criteria
  FILTER (?predecessor = ?descendant && ?predecessor = ?royaltyChild)
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
68,12,train,"Give me the father of Catherine of Austria, Queen of Portugal and father of Isabella of Austria and child of Maximilian I, Holy Roman Emperor.","SELECT ?result WHERE { <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  ?catherine dbo:parent ?father .
  ?isabella dbo:parent ?father .
  
  ?catherine rdfs:label ""Catherine of Austria, Queen of Portugal""@en .
  ?isabella rdfs:label ""Isabella of Austria""@en .

  FILTER(CONTAINS(LCASE(?catherine), ""catherine of austria, queen of portugal""))
  FILTER(CONTAINS(LCASE(?isabella), ""isabella of austria""))

  ?father dbo:child ?maximilian .
  
  ?maximilian rdfs:label ""Maximilian I, Holy Roman Emperor""@en .
  FILTER(CONTAINS(LCASE(?maximilian), ""maximilian i, holy roman emperor""))
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
941,0,train,"Give me the child of Ferdinand Albert II, Duke of Brunswick-Wolfenbüttel.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Wolfenbüttel> . }","```sparql
SELECT ?child WHERE {
  ?person dbo:parent dbr:Ferdinand_Albert_II,_Duke_of_Brunswick-Wolfenbüttel .
  ?person a dbo:Person .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,3,2,20,0,0,5,0,0.0,0
737,33,train,"Give me the predecessor of Carl, Duke of Württemberg and child of the child of the child of Alexander of Württemberg (1804-1881).","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v3 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?predecessor WHERE {
  # Step 1: Identify Alexander of Württemberg
  ?alexander a dbo:Person ;
             dbp:name ""Alexander of Württemberg"" ;
             dbp:birthday ""1804-09-24""^^xsd:date ;
             dbp:deathDate ""1881-03-6""^^xsd:date .

  # Step 2: Find first child
  ?child dbo:parent ?alexander .
  
  # Step 3: Find second generation (child of the first child)
  ?grandchild dbo:parent ?child .

  # Step 4: Find third generation (child of the second generation)
  ?greatGrandchild dbo:parent ?grandchild .

  # Step 5: Identify Carl, Duke of Württemberg
  ?carl a dbo:Person ;
        dbp:name ""Carl, Duke of Württemberg"" ;
        dbo:parent ?greatGrandchild .

  # Step 6: Find predecessor of Carl in the lineage
  ?predecessor dbo:succedBy ?carl .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
941,15,train,"Give me the child of the parent, that is a royalty, of the child of Ferdinand Albert II, Duke of Brunswick-Lüneburg and spouse of Prince Augustus William of Prussia.","SELECT ?result WHERE { <http://dbpedia.org/resource/Prince_Augustus_William_of_Prussia> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://dbpedia.org/ontology/child> ?v0 . }","```sparql
SELECT ?child WHERE {
  # Step 1: Identify Ferdinand Albert II, Duke of Brunswick-Lüneburg
  ?ferdinand a dbo:Duke ;
             foaf:name ""Ferdinand Albert II, Duke of Brunswick-Lüneburg"" .

  # Step 2: Determine his child (or children)
  ?child dbo:parent ?ferdinand .

  # Step 3: Find out who the spouse of Prince Augustus William of Prussia is among those children
  ?spouse foaf:name ""Prince Augustus William of Prussia"" ;
          dbo:spouse ?child .

  # Step 4: Identify the parent of that spouse
  ?parent dbo:child ?spouse .

  # Step 5: Determine if this parent is royalty
  ?parent a dbo:Monarch ; 

  # Step 6: Find a child of this royal parent
  ?royalChild dbo:parent ?parent .
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
737,10,train,"Give me the child of Archduchess Margarete Sophie of Austria and predecessor of Carl, Duke of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Find children of Archduchess Margarete Sophie of Austria
  ?person dbo:parent dbr:Archduchess_Margarete_Sophie_of_Austria .
  
  # Check if the person is a predecessor to Carl, Duke of Württemberg
  OPTIONAL { 
    ?succession dbo:predecessor ?person ;
                dbo:successor dbr:C._Duke_of_W%C3%BCrttemberg .
  }
  
  FILTER EXISTS {
    ?succession dbo:predecessor ?person ;
               dbo:successor dbr:C._Duke_of_W%C3%BCrttemberg .
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
668,34,train,Give me the associated musical artist of the person born as the birth name of $pacely and person born as Darryl Paa Kwesi Bannerman-Martin.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v2 . }","```sparql
SELECT ?tupacArtist ?dangeloArtist WHERE {
  # Find Tupac Shakur's DBpedia resource and associated musical artist
  ?tupac dbo:birthName ""Tupac Amaru Shakur""@en .
  ?tupac dbo:musicalArtist ?tupacArtist .

  # Find D'Angelo's DBpedia resource and associated musical artist
  ?dangelo dbo:birthName ""Darryl Paa Kwesi Bannerman-Martin""@en .
  ?dangelo dbo:musicalArtist ?dangeloArtist .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
756,16,train,"Give me the administration, that is a country, of the leader of West Germany.",SELECT ?result WHERE { <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/property/leader> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
SELECT ?administration ?country WHERE {
  ?person dbo:officeHolder ?position .
  ?position dbo:positionTitle ""Chancellor""@en .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""konrad adenauer"")) .
  ?position dbo:administrativeOffice ?administration .
  ?administration dbo:country ?country .
  FILTER(STRSTARTS(LCASE(?country), ""federal republic of germany""))
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
687,0,train,Give me the player in Juan Carlos Molina (footballer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?teamName WHERE {
  ?player foaf:name ""Juan Carlos Molina""@en .
  ?player dbo:nationality dbr:Argentina .
  ?player dbp:sport dbr:Soccer .
  ?player dbp:team ?team .
  ?team foaf:name ?teamName .
}
```",1,1,2,1,1,3,3,71,0,0,10,0,0.0,0
816,56,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of Amy Arbus and parent of the child of the spouse of Mariclare Costello.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v0 <http://dbpedia.org/ontology/child> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v0 . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?actor WHERE {
  # Step 1: Find Mariclare Costello's spouse
  ?mariclareCostello a dbo:Person ;
                     foaf:name ""Mariclare Costello""@en .
  
  ?spouse a dbo:Person ;
          dbo:spouse ?mariclareCostello .

  # Step 2: Find the child of Mariclare Costello's spouse
  ?child dbo:parent ?spouse ;
         a dbo:Person .

  # Step 3: Determine the parent of this child (should be either Mariclare or her spouse)
  ?parent dbo:child ?child .
  
  # Step 4: Identify Amy Arbus's parent
  ?amyArbus a dbo:Person ;
            foaf:name ""Amy Arbus""@en .

  ?amyParent dbo:child ?amyArbus ;
             a dbo:Person .

  # Step 5: Find a common parent between the two identified parents
  FILTER (?parent = ?amyParent)

  # Step 6: Identify the movie featuring Herschel Bernardi and this common parent
  ?movie a dbo:Film ;
         dbo:starring ?commonParent, _:herberson .

  _:herberson foaf:name ""Herschel Bernardi""@en .
  
  BIND(?commonParent AS ?actor)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
941,6,train,"Give me the child of Ferdinand Albert II, Duke of Brunswick-Wolfenbüttel and spouse of Prince Augustus William of Prussia.","SELECT ?result WHERE { <http://dbpedia.org/resource/Prince_Augustus_William_of_Prussia> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Wolfenbüttel> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child WHERE {
  ?person dbo:spouse ?spouse .
  ?person dbp:name ""Ferdinand Albert II, Duke of Brunswick-Wolfenbüttel""@en .
  
  ?child dbo:parent ?person .
  ?child dbo:spouse ?spouse2 .

  ?spouse2 dbp:name ""Prince Augustus William of Prussia""@en .
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
386,6,train,Give me the war of Karl Gustav von Baggovut and entity in Russian Empire.,SELECT ?result WHERE { <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
    dbr:Karl_Gustav_von_Baggovut dbo:participatedIn ?event .
    ?event a dbo:MilitaryConflict ;
           dbo:location dbr:Russian_Empire ;
           rdfs:label ?warLabel .
    FILTER(CONTAINS(LCASE(?warLabel), ""1812""))
}
```",2,2,3,1,2,2,3,28,0,0,2,0,0.0,0
203,0,train,Give me the commander in French campaign in Egypt and Syria.,SELECT ?result WHERE { <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?campaign ?commander WHERE {
  ?campaign dbo:commander dbr:Napoleon_Bonaparte .
  ?campaign rdfs:label ?campaignLabel .
  FILTER (CONTAINS(LCASE(?campaignLabel), ""egypt"") && CONTAINS(LCASE(?campaignLabel), ""syria""))
}
```",1,1,2,1,1,3,3,71,0,0,48,0,0.0,0
80,42,train,Give me the professional in the alter ego of The Shadow and actor of ATL (film) and actor of the movie with .,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/starring> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find the actor who played Lamont Cranston in The Shadow series
  ?shadowSeries dbo:starring dbr:Alec_Baldwin .
  
  # Check if Alec Baldwin acted in a film titled ""ATL""
  OPTIONAL { 
    ?atlFilm dbo:starring dbr:Alec_Baldwin .
    FILTER (str(?atlFilm) = ""http://dbpedia.org/resource/ATL_(film)"")
  }
  
  # Placeholder for checking another movie
  OPTIONAL {
    ?otherMovie dbo:starring dbr:Alec_Baldwin .
  }

  # Return the actor if all conditions are met
  BIND(dbr:Alec_Baldwin AS ?actor)
}
```",5,5,6,2,3,3,3,71,0,1,4,0.0,0.0,0
609,48,train,Give me the birth place of the awardee of the award of Vince Gilligan and birth place of the author of El Deafo.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v3 . },"```sparql
# Query for the birth place of Bryan Cranston
SELECT ?birthPlace WHERE {
  wd:Q1773 dbo:birthPlace ?birthPlace .
}

# Query for the birth place of Cece Bell
SELECT ?birthPlace WHERE {
  wd:Q1065182 dbo:birthPlace ?birthPlace .
}
```",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
225,2,train,Give me the time zone in Kiyosu.,SELECT ?result WHERE { <http://dbpedia.org/resource/Kiyosu> <http://dbpedia.org/ontology/timeZone> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?timeZone WHERE {
  dbr:Kiyosu dbo:location dbr:Japan .
  dbr:Japan dbo:timeZone ?timeZone .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
80,54,train,"Give me the professional in  and actor of the movie with  and actor of the album of the work, that is a song and a musical work, of T.I..","SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?result <http://dbpedia.org/property/occupation> """"@en . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v3 <http://dbpedia.org/property/starring> """"@en . ?v0 <http://dbpedia.org/ontology/album> ?v5 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?professional WHERE {
  # Step 1: Find T.I.'s songs that are also musical works
  ?song a dbo:Song ;
        dbo:artist dbr:T.I. ;
        rdf:type dbo:MusicalWork .

  # Step 2: Find albums containing these songs
  ?album dbo:song ?song .

  # Step 3: Identify actors associated with these albums
  OPTIONAL { 
    ?album dbp:actor ?actor .
  }

  # Step 4: Locate movies featuring this actor
  ?movie dbo:starring ?actor ;
         rdf:type dbo:Film .

  # Step 5: Extract the professional (actor) from these movies
  ?professional dbo:starring ?movie ;
                rdf:type dbo:Actor .
}
```",6,8,7,3,3,3,3,71,0,0,4,0,0.0,0
557,10,train,Give me the professional in  and producer of A Star Is Born (1937 film).,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?director ?producer WHERE {
  VALUES ?film { dbr:A_Star_Is_Born_(1937_film) }
  
  ?film dbo:director ?director .
  ?film dbo:producer ?producer .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
263,22,train,"Give me the native of the birthplace, that is a region and a country, of William Gayner and parent of the person born as Hon. Mary Frances Bowes-Lyon.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/child> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v3 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . }","```sparql
# Step 1: Find William Gayner's birthplace
SELECT ?birthPlace WHERE {
    dbpedia:William_Gayner dbo:birthPlace ?birthPlace .
}

# Step 2: Identify Hon. Mary Frances Bowes-Lyon and her parent
SELECT ?parent WHERE {
    dbpedia:Hon._Mary_Frances_Bowes-Lyon dbo:parent ?parent .
}

# Step 3: Determine the native of William Gayner's birthplace
SELECT ?native WHERE {
    # Assuming we have identified the birthPlace from step 1 as ?birthPlaceVar
    ?birthPlaceVar dbpedia:region ?region .
    ?birthPlaceVar dbpedia:country ?country .
    
    ?native dbo:nativeOf ?birthPlaceVar .
}
```

Note: The above SPARQL queries are structured to be executed sequentially. You will need to replace `?birthPlaceVar` with the actual URI obtained from Step 1 in Step 3.",4,6,5,2,2,2,3,28,0,0,2,0,0.0,0
203,36,train,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and commander in French campaign in Egypt and Syria.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
  # Identify Napoleon Bonaparte
  ?person a dbo:Person ;
          foaf:name ""Napoleon I""@en ;
          dbo:award ""Knight Commander of the Order of the Bath"" ;
          dbo:militaryCommanderOf dbr:Egyptian_Campaign .

  # Ensure the event is both military and societal
  ?event dbo:commandedBy ?person ;
         a dbo:MilitaryOperation, dbo:SocietalEvent .

  # Identify the military force commanded by Napoleon in this campaign
  ?militaryForce dbo:militaryCommanderOf ?event .
}
```",4,6,5,3,2,3,3,71,0,0,2,0,0.0,0
557,33,train,"Give me the producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and professional in .","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v3 . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  # Identify the actor who played Johnny Doughboy
  ?actor a dbo:Actor ;
         foaf:name ""James Dunn""@en .
  
  # Find a notable work of James Dunn
  ?work dbo:starring ?actor ;
        rdfs:label ?workLabel .

  FILTER(CONTAINS(LCASE(?workLabel), ""the best years of our lives""))

  # Get the producer of that work
  ?work dbo:producer ?producer .
  
  # Return the name of the producer
  ?producer foaf:name ?producerName .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
246,3,train,"Give me the child, that is a royalty, of Prince Faisal bin Hussein.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?title WHERE {
  ?person a dbo:Person ;
          foaf:name ""Faisal bin Hussein""@en .
  ?person dbo:child ?child .
  OPTIONAL { ?child dbo:title ?title . FILTER(CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess"")) }
}
```",1,2,2,1,1,3,2,20,0,0,4,0,0.0,0
609,11,train,Give me the birth place of the awardee of List of awards and nominations received by Vince Gilligan.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  dbr:Vince_Gilligan dbo:birthPlace ?birthPlace .
}
```",2,2,3,2,1,3,3,71,1,0,0,1.0,1.0,1.0
159,11,train,"Give me the successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/successor> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor WHERE {
  # Identify Aleksandr Danilovich Menshikov as a key figure
  dbr:Aleksandr_Danilovič_Menshikov dbo:occupation dbr:Military_person ;
                                      dbo:politicalParty dbr:Russian_Empire .

  # Find his political successor or someone who held significant office after him
  ?successor dbo:predecessor dbr:Aleksandr_Danilovič_Menshikov .
  ?successor dbo:occupation dbr:Politician ;
             dbo:officeHolder dbr:Russian_Empire .
}
```",2,4,3,2,1,3,3,71,0,0,3,0,0.0,0
103,18,train,Give me the professional in Actor and professional in  and actor of Dispatches from Elsewhere.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . }","```sparql
SELECT ?actor ?otherProfession WHERE {
  ?actor dbo:occupation dbr:Actor .
  ?actor dbo:occupation ?otherProfession .
  FILTER(?otherProfession != dbr:Actor)
  OPTIONAL { 
    ?work dbo:starring ?actor .
    ?work rdfs:label ""Dispatches from Elsewhere""@en
  }
}
```",3,3,4,1,3,3,3,71,0,19406,1,0.0,0.0,0
375,10,train,Give me the war of the person born as Koichirō.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ""Koichirō""@en . ?v0 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
SELECT ?person ?war WHERE {
  ?person foaf:name ""Kōichi Kido""@ja .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:spouse ?person .
  ?person dbo:occupation dbo:Politician .
  ?person dbo:memberOf ?organization .
  ?organization dbo:member ?person .
  ?organization dbo:name ""Imperial Rule Assistance Association""@en .
  ?person dbo:deathPlace ?place .
  ?place rdfs:label ?locationLabel .
  FILTER(CONTAINS(LCASE(?locationLabel), ""tokyo"")).
  
  OPTIONAL {
    ?person dbo:wikiPageDisambiguates ?disambiguation .
    ?disambiguation dbo:wikiPageRedirects ?redirect .
    ?redirect dbo:wikiPageWikiLink ?war .
    ?war rdf:type dbo:MilitaryConflict .
    FILTER(CONTAINS(LCASE(?war), ""world war ii"")).
  }
}
```",2,2,3,2,1,2,3,28,0,0,4,0,0.0,0
782,17,train,"Give me the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person a dbo:Person .
  ?person dbo:birthPlace ?place .
  ?person dbo:occupation dbo:Musician .
  OPTIONAL { ?person foaf:name ""Nick Curran""@en . }
  FILTER EXISTS { 
    ?alias foaf:nick ?name ;
           foaf:primaryTopic ?person .
    ?name rdfs:label ""Nick Curran""@en
  }
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
609,60,train,"Give me the birth place of the awardee of the award of Vince Gilligan and birth place of the author of the reference, that is American, to El Deafo.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://dbpedia.org/property/author> ?v1 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . }","```sparql
# Query for the birthplace of the awardee associated with Vince Gilligan
SELECT ?awardee ?birthPlace WHERE {
  ?award dbo:recipient ?person .
  ?person foaf:name ""Vince Gilligan""@en .
  OPTIONAL { ?person dbp:birthPlace ?birthPlace . }
  FILTER EXISTS { ?person dbo:award ?award . }
}

UNION

# Query for the birthplace of an American author who wrote a reference related to El Deafo
SELECT ?author ?birthPlace WHERE {
  ?reference dbo:subject dbc:""El_Deafo"" .
  ?reference dbo:author ?author .
  ?author foaf:nationality <http://dbpedia.org/resource/Category:American_people> .
  OPTIONAL { ?author dbp:birthPlace ?birthPlace . }
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
293,19,train,"Give me the spouse of Roger Pryor (actor) and party member of the ruling party in Central, Louisiana.","SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v0 . ?result <http://dbpedia.org/ontology/party> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?spouse WHERE {
  ?actor a dbo:Actor ;
         foaf:name ""Roger Pryor"" .
  OPTIONAL { ?actor dbo:spouse ?spouse . }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
628,13,train,Give me the person born as the birth name of Bobby Shmurda.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?person WHERE {
  ?person a foaf:Person .
  ?person foaf:givenName ""Ackquille"" .
  ?person foaf:familyName ""Pollard"" .
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
38,9,train,"Give me the work, that is a work and a written work and American and a book, of the commander, that is an office holder and a politician, in North Carolina Air National Guard.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/North_Carolina_Air_National_Guard> <http://dbpedia.org/ontology/commander> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?person a dbo:OfficeHolder ;
          dbo:commanderOf dbr:North_Carolina_Air_National_Guard .
  
  ?book dbo:author ?person ;
        a dbo:Book ;
        dbo:country dbr:United_States .

  ?work dbo:instanceOf ?book .
}
```",2,8,3,2,1,3,2,20,0,0,1,0,0.0,0
756,20,train,"Give me the native of the administration, that is a country, of Theodor Heuss and manager of VfL Bochum.",SELECT ?result WHERE { <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
# SPARQL query for Theodor Heuss's native place and administration country

SELECT ?birthPlace ?administrationCountry WHERE {
  # Query for Theodor Heuss's birthplace
  wd:Q12345 dbo:nativePlace ?birthPlace .
  
  # Query for the country he administered as president
  wd:Q12345 foaf:currentHomeLocation ?administrationCountry .
}

UNION

# SPARQL query for a notable VfL Bochum manager's native place (e.g., Thomas Doll)

SELECT ?managerBirthPlace WHERE {
  # Assuming Thomas Doll is the manager in question
  wd:Q67890 dbo:nativePlace ?managerBirthPlace .
}
```

Note: Replace `wd:Q12345` with Theodor Heuss's actual DBpedia entity ID and `wd:Q67890` with the manager's entity ID (e.g., Thomas Doll).",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
140,14,train,"Give me the party member of the ruling party, that is a political party and an organisation, in the death place, that is a settlement, of John McDermott (American artist).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/leaderParty> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/party> ?v0 . <http://dbpedia.org/resource/John_McDermott_(American_artist)> <http://dbpedia.org/ontology/deathPlace> ?v2 . },"```sparql
SELECT DISTINCT ?partyMember WHERE {
  # Step 1: Find John McDermott's death place
  ?john dbr:John_McDermott_(artist) dbo:deathPlace ?deathPlace .
  
  # Ensure the death place is a settlement
  ?deathPlace rdf:type dbo:Settlement .

  # Step 2: Identify the ruling party in that settlement
  ?rulingParty dbo:governs ?governedArea .
  ?governedArea rdfs:label ?deathPlaceLabel .
  FILTER (CONTAINS(LCASE(?deathPlaceLabel), LCASE(str(?deathPlace)))) .
  
  # Step 3: Find a member of the ruling party who is both an organization and a political party
  ?partyMember dbo:memberOf ?rulingParty ;
              rdf:type dbo:Organization ;
              rdf:type dbo:PoliticalParty .
}
```",3,6,4,3,1,3,2,20,0,0,21486,0,0.0,0
943,45,train,"Give me the reference to  and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and child of Dawit I.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?v0 . }","```sparql
SELECT ?dawitI WHERE {
  ?zaraYaqob dbo:father <http://dbpedia.org/resource/Zar'a_Ya'eqob> .
  ?yeshaq dbo:childOf ?dawitI ;
          dbo:father ?zaraYaqob .
  ?baedaMaryam1 dbo:childOf ?yeshaq .
  ?dawitI a dbo:Monarch ; 
          dbo:country <http://dbpedia.org/resource/Ethiopia> .
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
687,10,train,Give me the player in Juan Carlos Molina (footballer) and team of Pablo Aimar.,SELECT ?result WHERE { <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . },"```sparql
# Query to get the team of Juan Carlos Molina
SELECT ?team WHERE {
  dbr:Juan_Carlos_Molina_(footballer) dbo:playsFor ?team .
}

UNION

# Query to get players from Pablo Aimar's teams
SELECT DISTINCT ?player WHERE {
  # Get teams associated with Pablo Aimar
  dbr:Pablo_Aimar dbo:playsFor ?team .

  # Find players in those teams
  ?player dbo:playsFor ?team .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
419,2,train,Give me the birthplace of Yandamuri Veerendranath.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yandamuri_Veerendranath> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Yandamuri Veerendranath""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,2,2,9,3,0,0,1.0,1.0,1.0
905,51,train,"Give me the parent of the father, that is a royalty, of Charles I of Hungary and child of the child, that is a royalty, of the predecessor of Stephen V of Hungary.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v3 . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Find Charles I of Hungary's father
SELECT ?father WHERE {
    wd:Q12345 wdt:P22 ?father .
}

# Step 2: Find the parent of that father who is royalty
SELECT ?royalParent WHERE {
    ?father wdt:P25 ?royalParent .
    ?royalParent wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is ""monarch""
}

# Step 3: Find Stephen V of Hungary's predecessor
SELECT ?predecessor WHERE {
    wd:Q12346 wdt:P1365 ?predecessor .
}

# Step 4: Find the royal child of that predecessor
SELECT ?royalChild WHERE {
    ?predecessor wdt:P40 ?royalChild .
    ?royalChild wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is ""monarch""
}

# Step 5: Find the child of that royal child
SELECT ?childOfRoyalChild WHERE {
    ?royalChild wdt:P40 ?childOfRoyalChild .
}

# Step 6: Find common individual between the two lines
SELECT DISTINCT ?commonIndividual WHERE {
    { 
        ?commonIndividual = ?royalParent .
    }
    UNION
    {
        ?commonIndividual = ?childOfRoyalChild .
    }
}
```

Note: Replace `wd:Q12345` with the DBpedia ID for Charles I of Hungary and `wd:Q12346` with the DBpedia ID for Stephen V of Hungary. The query assumes that these IDs are known or can be looked up in DBpedia.",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
297,3,train,Give me the administration of Brian Kemp.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Brian_Kemp> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administration WHERE {
  dbr:Brian_Kemp dbo:positionHeld ?administration .
}
```",1,1,2,1,1,2,2,9,0,0,19,0,0.0,0
68,21,train,"Give me the child of Maximilian I, Holy Roman Emperor and father of Isabella of Austria and father of the child, that is a royalty, of Philip I of Castile.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?maximilian dbo:spouse ?mary .
  ?maximilian rdfs:label ""Maximilian I, Holy Roman Emperor""@en .
  ?mary rdfs:label ""Mary of Burgundy""@en .

  ?child dbo:parent ?maximilian ;
         dbo:parent ?mary ;
         dbo:spouse ?isabella ;
         dbo:spouse ?philipCastile .

  ?isabella rdfs:label ""Isabella of Austria""@en .
  ?philipCastile rdfs:label ""Philip I of Castile""@en .

  FILTER(CONTAINS(LCASE(?child), ""philip the handsome""))
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
39,22,train,"Give me the professional in Singer and band of the person born, that is a musical artist, as Robert Lamar Thompson.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?singerInBand WHERE {
  ?person foaf:name ""Robert Lamar Thompson""@en .
  ?person dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""musical artist"") || CONTAINS(LCASE(?occupation), ""musician""))
  OPTIONAL { ?person dbo:singerInBand ?singerInBand . }
}
```",3,4,4,2,2,3,3,71,0,0,3,0,0.0,0
203,25,train,"Give me the military force of Battle of Fort Royal and military force of the force, that is an event and a societal event, of Robert Calder.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . },"```sparql
# Query for Battle of Fort Royal military forces
SELECT ?force WHERE {
  ?battle dcterms:subject dbc:Battles_of_the_French_Revolutionary_Wars .
  ?battle rdfs:label ""Battle of Fort Royal""@en .
  ?battle dbo:militaryConflicts ?conflict .
  ?conflict dbo:participatingMilitaryForce ?force .
}

# Query for Robert Calder's societal events and military forces
SELECT DISTINCT ?event ?force WHERE {
  ?calder foaf:name ""Robert Calder"" .
  ?calder dbo:wikiPageRedirects ?redirect .
  ?redirect dbo:wikiPageID ?pageId .
  ?page dbo:wikiPageID ?pageId .
  ?page rdfs:label ?eventName .
  FILTER(CONTAINS(LCASE(?eventName), ""event"") && CONTAINS(LCASE(?eventName), ""societal""))
  
  OPTIONAL {
    ?event dbo:militaryConflicts ?conflict .
    ?conflict dbo:participatingMilitaryForce ?force .
  }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
737,20,train,"Give me the predecessor of Carl, Duke of Württemberg and child of the child of Duke Philipp of Württemberg.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?predecessor WHERE {
  # Find Carl, Duke of Württemberg
  ?carl a dbo:Duke ;
        foaf:name ""Carl, Duke of Württemberg""@en .
  
  # Identify his predecessor
  ?carl dbo:predecessor ?predecessor .

  # Ensure the predecessor is a child of a child of Duke Philipp of Württemberg
  ?philipp a dbo:Duke ;
           foaf:name ""Philipp, Duke of Württemberg""@en .
  
  ?child1 dbo:childOf ?philipp .
  ?child2 dbo:childOf ?child1 .
  ?predecessor dbo:childOf ?child2 .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
80,12,train,Give me the actor of ATL (film) and professional in .,"SELECT ?result WHERE { <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor ?profession WHERE {
  # Find the film ""ATL""
  dbr:ATL (dbo:starring) ?actor .
  
  # Check if the actor has a profession other than acting
  OPTIONAL { ?actor dbo:occupation ?profession . }
  
  FILTER(?actor = dbr:T.I. || ?profession IN (""Rapper"", ""Musician""))
}
```",2,2,3,1,2,3,3,71,0,0,4,0,0.0,0
595,25,train,"Give me the author of Back to Work (book) and commander in the war, that is a disease and a societal event, of United States Navy.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?commander WHERE {
  # Find the author of ""Back to Work""
  ?book dbo:title ""Back to Work""@en .
  ?book dbo:author ?author .

  # Identify a commander associated with a disease and societal event involving the U.S. Navy
  ?person dbo:nationality dbr:United_States ;
          dbo:occupation dbr:Navy_officer ;
          dbo:commanderOf ?navyEvent .
  
  OPTIONAL { ?disease dbo:relatedTo ?societalEvent . }
  FILTER (CONTAINS(LCASE(?disease), ""flu"") || CONTAINS(LCASE(?societalEvent), ""war"")) .

  # Link the commander to a specific historical figure
  ?person rdfs:label ?commanderLabel .
  FILTER(CONTAINS(LCASE(?commanderLabel), ""william v. pratt""))
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
39,43,train,"Give me the professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and band of Bob Thompson (musician) and professional in Singer.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/alterEgo> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character ?alterEgo WHERE {
  ?character dbo:creator dbr:Walter_B._Gibson .
  ?character a dbo:FictionalCharacter .
  OPTIONAL { ?character dbo:alternateName ?alterEgo . }
  FILTER (CONTAINS(LCASE(?alterEgo), ""singer"") || CONTAINS(LCASE(?alterEgo), ""musician""))
}
```",5,7,6,3,3,3,3,71,0,0,3,0,0.0,0
361,11,train,"Give me the actor of the album, that is a film and a work, of Lasso the Moon.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?album a dbo:Album ;
         rdfs:label ""Lasso the Moon""@en .
  
  OPTIONAL { 
    ?film dbo:title ""Lasso the Moon""@en ;
          dbo:basedOnWork ?album .
  }
  
  OPTIONAL {
    ?work dbo:isBasedOn ?album ;
          rdf:type dbo:Film .
  }

  ?film dbo:starring ?actor .
}
```",2,4,3,2,1,2,3,28,0,0,5,0,0.0,0
347,33,train,Give me the commander in Thirty Years' War and father of the child of the parent of Archduke Charles Joseph of Austria.,SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v3 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT DISTINCT ?commander WHERE {
  # Step 1: Identify Archduke Charles Joseph of Austria
  ?charlesJoseph dbr:Archduke_Charles_Joseph_of_Austria .
  
  # Step 2: Find the parent(s) of Archduke Charles Joseph
  ?parent dbo:child ?charlesJoseph .

  # Step 3: Determine the child(ren) of his parent(s)
  ?sibling dbo:childOf ?parent .

  # Step 4: Identify the commander in the Thirty Years' War who is a father of one of these children
  ?commander dbo:father ?sibling .
  ?commander dbo:occupation dbr:Commander_in_the_Thirty_Years'_War .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
595,16,train,"Give me the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?result <http://dbpedia.org/property/author> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?person dbo:residence dbr:Chappaqua,_New_York ;
          dbo:occupation dbr:Politician ;
          dbo:officeHolder dbr:Office_holder .
  ?work dbo:author ?person ;
        a dbo:Book .
  FILTER (str(?person) = ""Hillary_Clinton"")
}
```",2,7,3,2,1,3,3,71,0,0,10,0,0.0,0
80,58,train,Give me the actor of Shelby Oaks and actor of the album of What You Know (T.I. song) and professional in the alter ego of the series of The Golden Master.,SELECT ?result WHERE { <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v5 . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . },"```sparql
# Query for actor of Shelby Oaks
SELECT ?actor WHERE {
  ?film dcterms:title ""Shelby Oaks""@en .
  ?film dbo:starring ?actor .
}

UNION

# Query for actor associated with the album Urban Legend (What You Know by T.I.)
SELECT DISTINCT ?actor WHERE {
  ?album dcterms:title ""Urban Legend""@en ;
         dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> .
  OPTIONAL { ?album dbo:video ?video . }
  OPTIONAL { ?video dbo:starring ?actor . }
}

UNION

# Query for professional in the alter ego of The Golden Girls
SELECT DISTINCT ?profession WHERE {
  ?series dcterms:title ""The Golden Girls""@en ;
          dbo:character ?character .
  ?character foaf:name ?name .
  OPTIONAL { ?character dbo:alterEgo ?alterEgo . }
  OPTIONAL { ?alterEgo dbo:occupation ?profession . }
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
731,10,train,"Who is the commander in the reference, that is a societal event and a military conflict, to Sinking of Prince of Wales and Repulse?","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://xmlns.com/foaf/0.1/name> ""Sinking of Prince of Wales and Repulse""@en . ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
SELECT ?commander WHERE {
  ?event dcterms:isPartOf <http://dbpedia.org/resource/World_War_II> .
  ?event dbo:location <http://dbpedia.org/resource/Battle_of_Malaya> .
  ?event dbo:agent ?ship .
  ?ship rdfs:label ""HMS Prince of Wales""@en ;
        dbo:commander ?commander1 .
  FILTER(CONTAINS(LCASE(?commander1), ""admiral sir tom phillips"")) .
  OPTIONAL {
    ?ship2 rdfs:label ""HMS Repulse""@en ;
           dbo:commander ?commander2 .
    FILTER(CONTAINS(LCASE(?commander2), ""captain leach"")) .
  }
}
```",2,4,3,2,1,3,2,20,0,0,6,0,0.0,0
414,13,train,"Give me the show of the host, that is an educational institution, of the award of Rainer Weiss.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. ?result <http://dbpedia.org/ontology/presenter> ?v1 . ?v0 <http://dbpedia.org/ontology/presenter> ?v1 . <http://dbpedia.org/resource/Rainer_Weiss> <http://dbpedia.org/property/awards> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?host ?institution WHERE {
  # Find the award received by Rainer Weiss
  ?award dbo:recipient dbr:Rainer_Weiss .
  
  # Check if there is a show associated with this award
  OPTIONAL { 
    ?show dbo:host ?host ;
          dbo:subject ?award .
    
    # Ensure the host is affiliated with an educational institution
    ?host dbo:almaMater ?institution .
    FILTER EXISTS { ?institution a dbo:EducationalInstitution }
  }
}
```",3,4,4,3,1,3,2,20,0,0,12,0,0.0,0
89,34,train,Give me the predecessor of Myat Hpone Pyo and child of the parent of the child of Minye Kyawswa.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v2 . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v1 . },"```sparql
# Step 1: Find Myat Hpone Pyo's predecessor
SELECT ?predecessor WHERE {
  ?myatHponePyo dbo:successor ?entity .
  FILTER(?entity = dbpedia:Myat_Hpone_Pyo) .
  ?entity dbo:predecessor ?predecessor .
}

# Step 2: Find the child of Minye Kyawswa
SELECT ?child WHERE {
  ?minyeKyawswa dbo:child ?child .
  FILTER(?minyeKyawswa = dbpedia:Minye_Kyawswa) .
}

# Step 3: Find the parent of that child
SELECT ?parent WHERE {
  ?child dbo:parent ?parent .
  # Use the result from step 2 here
}

# Step 4: Find the child of this parent
SELECT ?finalChild WHERE {
  ?parent dbo:child ?finalChild .
  # Use the result from step 3 here
}

# Combine steps to find the final answer
SELECT ?predecessor AS ?answer WHERE {
  VALUES (?predecessor) { (SELECT ?predecessor WHERE {
    ?myatHponePyo dbo:successor ?entity .
    FILTER(?entity = dbpedia:Myat_Hpone_Pyo) .
    ?entity dbo:predecessor ?predecessor .
  }) }
  
  VALUES (?finalChild) { (SELECT ?finalChild WHERE {
    ?parent dbo:child ?finalChild .
    ?child dbo:parent ?parent .
    ?minyeKyawswa dbo:child ?child .
    FILTER(?minyeKyawswa = dbpedia:Minye_Kyawswa) .
  }) }
  
  FILTER(?predecessor = ?finalChild)
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
293,6,train,"Give me the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?result . }","```sparql
SELECT ?actor WHERE {
  ?film foaf:name ""1,000 Dollars a Minute""@en .
  ?film dbo:starring ?actor .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
143,9,train,"Give me the show, that is a movie, with the reference to Afeez Oyetoro.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://xmlns.com/foaf/0.1/name> ""Afeez Oyetoro""@en . ?result <http://dbpedia.org/ontology/starring> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  ?show a dbo:Film .
  ?show a dbo:TelevisionShow .
  
  OPTIONAL { ?show dbo:starring dbr:Afeez_Oyetoro . }
  OPTIONAL { ?show dbo:director dbr:Afeez_Oyetoro . }
  OPTIONAL { ?show dbo:writer dbr:Afeez_Oyetoro . }

  FILTER (EXISTS { ?show dbo:starring dbr:Afeez_Oyetoro } ||
          EXISTS { ?show dbo:director dbr:Afeez_Oyetoro } ||
          EXISTS { ?show dbo:writer dbr:Afeez_Oyetoro })
}
```",2,3,3,2,1,3,2,20,0,0,4,0,0.0,0
668,32,train,Give me the professional in the profession of Rod Argent and associated musical artist of the person born as Elorm Kabu Amenyah.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v3 . }","```sparql
# Query to get the profession of Rod Argent
SELECT ?profession WHERE {
  dbpedia:Rod_Argent dbo:occupation ?profession .
}

# Query to find associated musical artists with Stonebwoy
SELECT DISTINCT ?associatedArtist WHERE {
  dbpedia:Stonebwoy dbo:collaborationWith ?associatedArtist .
  ?associatedArtist a dbo:MusicalArtist .
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
633,5,train,Give me the father of Dorothea of Lorraine.,SELECT ?result WHERE { <http://dbpedia.org/resource/Dorothea_of_Lorraine> <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  ?dorothea a dbo:Person ;
           rdfs:label ""Dorothea of Lorraine""@en .
  
  ?dorothea dbo:parent ?father .

  OPTIONAL { 
    ?father rdfs:label ?fatherLabel .
  }
}
```",1,1,2,1,1,3,2,20,1,1,0,0.5,1.0,0.6666666666666666
782,6,train,Give me the band member of Eric Clapton.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bandMember WHERE {
  ?bandMember dbo:bandMember dbr:Eric_Clapton .
}
```",1,1,2,1,1,3,3,71,0,0,61,0,0.0,0
668,36,train,"Give me the associated musical artist of $pacely and person born as the birth name of the native, that is an artist, of Central Region, Ghana.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. }","```sparql
# Step 1: Find the musical artist associated with $pacely
SELECT ?artist WHERE {
  ?entity rdfs:label ""$pacely""@en .
  ?entity dbo:genre dbr:Musical_artists .
  ?entity foaf:name ?artist .
}

UNION

# Step 2: Find a person born in Central Region, Ghana who is an artist and get their birth name
SELECT ?birthName WHERE {
  ?person dbo:birthPlace dbr:Central_Region,_Ghana ;
          dbo:occupation dbr:Artist .
  ?person foaf:name ?birthName .
}

# Step 3: Find any association between the two entities found in steps 1 and 2
SELECT ?associatedArtist WHERE {
  VALUES (?entity) { (<artist_uri_from_step_1>) }
  VALUES (?person) { (<person_uri_from_step_2>) }
  
  OPTIONAL { ?association dbo:associatedWith ?associatedArtist . }
}
```

Note: Replace `<artist_uri_from_step_1>` and `<person_uri_from_step_2>` with the actual URIs obtained from steps 1 and 2.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
87,17,train,Give me the actor of Always (1989 film) and spouse of the awardee of List of awards and nominations received by Janusz Kamiński.,SELECT ?result WHERE { <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . },"```sparql
# Query for actor(s) in the 1989 film ""Always""
SELECT ?actor WHERE {
    ?film dbpedia-owl:title ""Always""@en .
    ?film dbpedia-owl:releaseDate ?date .
    FILTER(YEAR(?date) = 1989)
    ?film dbpedia-owl:starring ?actor .
}

UNION

# Query for awards and nominations received by Janusz Kamiński
SELECT ?award WHERE {
    ?kaminski dbo:wikiPageID ""Janusz_Kami%C5%84ski"" .
    ?kaminski dbo:award ?award .
}

UNION

# Assuming we find an award with a specific awardee, query for the spouse of that awardee
SELECT ?spouse WHERE {
    ?award dbo:recipient ?awardee .
    ?awardee foaf:mbox ?email . # or another property to identify the person
    ?awardee dbo:spouse ?spouse .
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
87,14,train,Give me the spouse of the awardee of List of awards and nominations received by Janusz Kamiński and actor of Paradise (2013 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . },"```sparql
SELECT ?spouse WHERE {
  wd:Q1776 wdt:P26 ?spouse .
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
198,41,train,"Give me the entity in Charleston, South Carolina and war of the awardee of Medal of Honor and force of the awardee of Gillmore Medal.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?result <http://dbpedia.org/ontology/commander> ?v4 . ?v2 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?entity ?force WHERE {
  ?entity dbo:birthPlace dbr:Charleston,_South_Carolina ;
          dbo:honor ""Medal of Honor"" ;
          dbo:honor ""Gillmore Medal"" .
  
  OPTIONAL { ?entity dbo:militaryForce ?force . }
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
731,15,train,Give me the force of the awardee of the award of Edmund Hakewill-Smith and war of Tom Phillips (Royal Navy officer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Tom_Phillips_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Edmund_Hakewill-Smith> <http://dbpedia.org/property/awards> ?v0 . },"```sparql
SELECT ?awardee ?force WHERE {
  ?awardee dbo:award dbr:Distinguished_Service_Order .
  ?awardee dbo:militaryConflict dbr:Falklands_War .
  OPTIONAL { ?awardee dbo:militaryBranch ?force . }
}
```",4,4,5,3,2,3,2,20,0,0,2,0,0.0,0
419,1,train,Give me the alma mater of Chennupati Jagadish.,SELECT ?result WHERE { <http://dbpedia.org/resource/Chennupati_Jagadish> <http://dbpedia.org/ontology/almaMater> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?almaMater WHERE {
  dbr:Chennupati_Jagadish dbo:almaMater ?almaMater .
}
```",1,1,2,1,1,2,2,9,4,0,0,1.0,1.0,1.0
375,3,train,Give me the birth place of Yamaza Enjirō.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Yamaza Enjirō""@ja .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
687,4,train,"Give me the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person a dbo:Athlete .
  ?person dbo:birthDate ""1955-02-22""^^xsd:date .
}
```",1,2,2,1,1,3,3,71,10,0,0,1.0,1.0,1.0
58,8,train,Give me the producer of the movie with .,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> """"@en . ?v0 <http://dbpedia.org/ontology/producer> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producerName WHERE {
  ?movie a dbo:Film .
  ?movie rdfs:label ""Movie Title""@en .
  ?movie dbo:producer ?producer .
  ?producer foaf:name ?producerName .
}
```

Replace `""Movie Title""` with the actual title of the movie you are interested in.",2,2,3,2,1,3,2,20,0,0,10672,0,0.0,0
943,9,train,Give me the reference to  and child of Dawit I.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?dawitI a dbo:Monarch ;
          foaf:name ""Dawit I""@en .
  ?dawitI dbo:child ?child .
}
```",2,2,3,1,2,3,3,71,0,0,3,0,0.0,0
769,14,train,"Give me the player in the manager, that is a sports manager and a soccer manager, of the reference, that is an organisation and a sports club and a sports team and a soccer club, to Hong Kong C.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v0 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://xmlns.com/foaf/0.1/name> ""Hong Kong C""@en . ?v2 <http://dbpedia.org/ontology/manager> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?playerInManager WHERE {
  # Find Hong Kong C's reference (organization)
  dbr:Hong_Kong_C dbo:team dbr:Hong_Kong_C_Youth_Squad ;
                  dbo:partOf ?reference .

  FILTER (
    ?reference a dbo:SportsClub ;
               a dbo:SportsTeam ;
               a dbo:SoccerClub ;
               a dbo:Organization
  ) .

  # Find the player in manager who is both a sports manager and soccer manager of this reference
  ?playerInManager dbo:managerOf ?reference ;
                  a dbo:SportsManager ;
                  a dbo:SoccerManager .
}
```",3,9,4,3,1,3,2,20,0,0,4,0,0.0,0
80,15,train,Give me the movie with the author of Smartbomb (book).,SELECT ?result WHERE { <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v1 . ?result <http://dbpedia.org/property/starring> ?v1 . },"```sparql
SELECT ?movie WHERE {
  ?book dbo:title ""Smartbomb""@en .
  ?book dbo:author ?author .
  ?author dbo:film ?movie .
}
```",2,2,3,2,1,3,3,71,0,0,39790,0,0.0,0
468,3,train,Give me the real name of Peter IV of Aragon.,SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://xmlns.com/foaf/0.1/name> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?realName WHERE {
  ?person a dbo:Monarch ;
          foaf:name ""Peter IV of Aragon""@en .
  OPTIONAL { ?person foaf:givenName ?realName . }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
375,7,train,"Give me the author of the movie, that is a work and a television show, with Vera Lynn.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/author> ?result . ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Vera_Lynn> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
SELECT ?movie ?author WHERE {
  ?movie dbo:starring dbp:Vera_Lynn .
  OPTIONAL { 
    ?work dbo:basedOn ?movie .
    ?tvShow dbo:basedOn ?movie .
    ?work dbo:author ?author .
    FILTER EXISTS { ?tvShow }
  }
}
```",2,4,3,2,1,3,2,20,0,0,1,0,0.0,0
737,52,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria and child of Archduchess Margarete Sophie of Austria and child of the child of Duke Philipp of Württemberg.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v5 . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v3 . ?v2 <http://dbpedia.org/property/father> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
  # Step 1: Identify Archduchess Helena of Austria and her spouse
  ?helena a dbo:Person ;
          foaf:name ""Helena, Archduchess of Austria""@en ;
          dbo:spouse ?spouse .

  # Step 2: Find the Spouse's Child who is a Royalty
  ?child dbo:parent ?spouse ;
         dbo:title ?title .
  FILTER(CONTAINS(LCASE(STR(?title)), ""royal"") || CONTAINS(LCASE(STR(?title)), ""prince"") || CONTAINS(LCASE(STR(?title)), ""duke""))

  # Step 3: Identify the Predecessor of this Royal Child
  ?predecessor dbo:succeededBy ?child .

  # Step 4: Trace back to Archduchess Margarete Sophie of Austria and her child
  ?margareteSophie a dbo:Person ;
                   foaf:name ""Margarete Sophie, Archduchess of Austria""@en .
  ?margaretesChild dbo:parent ?margareteSophie .

  # Step 5: Find the Grandchild of Duke Philipp of Württemberg
  ?philipp a dbo:Person ;
           foaf:name ""Philipp, Duke of Württemberg""@en .
  ?grandchild dbo:parent ?margaretesChild ;
              dbo:parent ?someParent .
  ?someParent dbo:parent ?philipp .

  # Ensure the predecessor is connected through these relationships
  FILTER(?predecessor = ?grandchild)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
78,21,train,Give me the associated musical artist of Stuart Tosh and associated musical artist of Billy Lyall and band member of the associated musical artist of David Paton.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Query for the associated musical artist of Stuart Tosh
SELECT ?artist WHERE {
  wd:Q123456 wdt:P106 wd:Q33999; # Assuming Q123456 is the entity ID for Stuart Tosh and P106 represents ""occupation"" with Q33999 being ""musician""
  wdt:P175 ?artist. # P175 represents ""member of musical group""
}

UNION

# Query for the associated musical artist of Billy Lyall
SELECT ?artist WHERE {
  wd:Q654321 wdt:P106 wd:Q33999; # Assuming Q654321 is the entity ID for Billy Lyall
  wdt:P175 ?artist.
}

UNION

# Query for a band member of the associated musical artist of David Paton
SELECT ?member WHERE {
  wd:Q987654 wdt:P175 ?band; # Assuming Q987654 is the entity ID for the band David Paton is known for
  ?band wdt:P127* wd:Q123456. # P127 represents ""part of"" and * allows for transitive closure to find members
}
```

Note: The actual DBpedia IDs (e.g., `wd:Q123456`, `wd:Q654321`, `wd:Q987654`) need to be replaced with the correct ones corresponding to Stuart Tosh, Billy Lyall, and David Paton's band.",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
731,11,train,Give me the force of the awardee of Commander of the Order of the British Empire and war of Tom Phillips (Royal Navy officer).,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Commander_of_the_Order_of_the_British_Empire> . ?result <http://dbpedia.org/ontology/commander> ?v2 . <http://dbpedia.org/resource/Tom_Phillips_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force WHERE {
  # Find the rank of Commander in the Order of the British Empire
  ?order a dbo:OrderOfTheBritishEmpire ;
         dbo:rank ?commanderRank .
  
  FILTER regex(?commanderRank, ""Commander"", ""i"") .

  # Get the force or level associated with this rank
  ?commanderRank dbo:force ?force .

  OPTIONAL {
    # Verify Tom Phillips' association with the Royal Navy and Falklands War
    dbr:Tom_Phillips dbo:nationality dbr:United_Kingdom ;
                     dbo:occupation dbr:Royal_Navy_officer ;
                     dbo:award dbr:Falklands_War .
  }
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
288,2,train,"Give me the figure known, that is a settlement and Pakistani, as The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Pakistan>. ?result <http://dbpedia.org/property/nickname> ""The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?city WHERE {
  ?city a dbo:Settlement ;
        dbo:country dbr:Pakistan ;
        rdfs:label ?label .
  FILTER (
    CONTAINS(LCASE(?label), ""heart of pakistan"") ||
    CONTAINS(LCASE(?label), ""paris of the east"") ||
    CONTAINS(LCASE(?label), ""city of gardens"") ||
    CONTAINS(LCASE(?label), ""city of literature"")
  )
}
```",1,3,2,1,1,2,2,9,0,0,1,0,0.0,0
668,41,train,Give me the person born as Darryl Paa Kwesi Bannerman-Martin and associated musical artist of the person born as Elorm Kabu Amenyah and professional in the profession of Rod Argent.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v4 . ?v2 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Identify Shaggy by his birth name
  VALUES ?shaggy { dbr:Shaggy_(musician) }
  
  # Identify Kojo Antwi by his birth name
  VALUES ?kojoAntwi { dbr:Kojo_Antwi }

  # Find collaborations between Shaggy and Kojo Antwi
  ?collaboration dbo:artist ?shaggy .
  ?collaboration dbo:artist ?kojoAntwi .

  # Retrieve the artist associated with Shaggy who has collaborated with Kojo Antwi
  ?artist dbo:associatedMusicalArtist ?shaggy .
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
468,17,train,"Give me the reference to Peter IV and child of the father, that is a royalty, of the parent of Martin of Aragon.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ""Peter IV""@en . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Martin_of_Aragon> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?martinParent ?royalChild ?peterIV WHERE {
  # Find the parent of Martin of Aragon
  dbpedia:Martin_of_Aragon dbo:father ?martinParent .
  
  # Find a child of that parent who is royalty
  ?martinParent dbo:child ?royalChild .
  ?royalChild rdf:type dbo:Monarch .

  # Find Peter IV and his relationship to this royal child
  ?peterIV dbo:spouse ?royalChild .
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
871,27,train,"Give me the father of the child, that is a politician, of the alumnus of Eton College.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/father> ?v2 . ?v2 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . },"```sparql
SELECT DISTINCT ?father WHERE {
  ?politician dbo:almaMater dbr:Eton_College ;
              rdf:type dbo:Politician .
  ?child dbo:parent ?politician ;
         rdf:type dbo:Person .
  FILTER EXISTS { ?child rdf:type dbo:Politician }
}
```",3,4,4,3,1,3,3,71,0,0,7,0,0.0,0
68,24,train,"Give me the father of the child, that is a royalty, of Philip I of Castile and child of the commander, that is a royalty, in Siege of Padua.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?child ?father WHERE {
  # Find children of Philip I of Castile who are royalty
  ?philip dbo:spouse ?parent1 .
  ?parent1 foaf:name ""Philip I of Castile""@en .
  
  ?child dbo:parent ?parent1 ;
         dbo:parent ?parent2 ;
         rdf:type dbo:RoyalFamilyMember .

  # Find commander in Siege of Padua who is royalty
  ?commander dbo:role ""Commander""@en ;
             dbo:event dbo:Siege_of_Padua ;
             rdf:type dbo:RoyalFamilyMember .
  
  # Check if the child has both parents as identified above
  ?child dbo:parent ?parent2 .
  FILTER (?parent2 = ?commander)

  # Determine the father of this child
  BIND(?parent1 AS ?father)
}
```",4,6,5,2,2,2,3,28,0,0,1,0,0.0,0
119,27,train,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party.","SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administration WHERE {
  # Identify the Spanish Socialist Workers' Party resource
  VALUES ?psoe { dbr:Spanish_Socialist_Workers'_Party }

  # Find administrations where PSOE is a tenant
  ?administration dbo:hasTenant ?psoe .
  
  # Filter for current administration (assuming there's a property indicating this)
  OPTIONAL {
    ?administration dbo:startDate ?start .
    FILTER NOT EXISTS { 
      ?administration2 dbo:startDate ?start2 .
      FILTER (?start2 > ?start) 
    }
  }

  # Ensure we only get the most recent/current administration
  MINUS { ?administration2 dbo:hasTenant ?psoe . ?administration2 dbo:startDate ?start2 . FILTER (?start2 > ?start) }
}
```",3,4,4,3,1,3,3,71,0,0,100,0,0.0,0
347,57,train,Give me the father of the child of the parent of Archduke Charles Joseph of Austria and child of the father of Cecilia Renata of Austria and commander in Thirty Years' War.,SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v3 . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v3 . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?v5 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . },"```sparql
SELECT ?father WHERE {
  # Step 1: Identify Archduke Charles Joseph of Austria's parent
  ?charlesJoseph dbo:parent ?parent1 .
  
  # Step 2: Find a child of that parent (sibling or another child)
  ?childOfParent1 dbo:parent ?parent1 .

  # Step 3: Identify Cecilia Renata of Austria's father
  ?ceciliaRenata dbo:father ?fatherCecilia .

  # Step 4: Find the child of Cecilia Renata's father (could be Cecilia or a sibling)
  ?childOfFatherCecilia dbo:father ?fatherCecilia .

  # Step 5: Determine if this person was a commander in the Thirty Years' War
  ?commanderInWar dbo:occupation ""Commander""@en .
  ?commanderInWar dbo:participatedInEvent dbr:Thirty_Years'_War .

  # Combine these relationships
  FILTER (?childOfParent1 = ?childOfFatherCecilia && ?childOfParent1 = ?commanderInWar)

  # Step 6: Find the father of this person
  ?father dbo:parent ?childOfParent1 .
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
39,5,train,"Give me the creation, that is a fictional character and a comics character, of Walter B. Gibson.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character WHERE {
  ?character rdf:type dbo:FictionalCharacter .
  ?character dbo:creator dbr:Walter_B._Gibson .
  ?comic dbo:character ?character .
  ?comic rdf:type dbo:ComicBookSeries .
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
37,5,train,"Give me the birthplace of the writer, that is an artist, of The Miseducation of Lauryn Hill.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/The_Miseducation_of_Lauryn_Hill> <http://dbpedia.org/property/writer> ?v0 . },"```sparql
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Lauryn Hill"" .
  ?person dbo:album ?album .
  ?album rdfs:label ""The Miseducation of Lauryn Hill""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",2,3,3,2,1,2,2,9,0,0,2,0,0.0,0
756,4,train,"Give me the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  ?player a dbo:SoccerPlayer ;
          dbo:team dbr:VfL_Bochum .
  
  OPTIONAL { ?player dbo:sportTeam dbr:VfL_Bochum . }
  
  FILTER EXISTS { 
    ?entity a (dbo:SportsClub | dbo:Organization | dbo:SoccerClub) .
    ?entity dbo:member ?player .
  }
}
```",1,4,2,1,1,3,3,71,0,0,1,0,0.0,0
78,18,train,Give me the band member of the associated musical artist of David Paton and associated musical artist of Billy Lyall.,SELECT ?result WHERE { <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . },"```sparql
SELECT ?member WHERE {
  wd:Q123456 wdt:P106 wd:Q33999; # Supertramp is a musical artist (wdt:P106)
    wdt:P527 ?member.           # ?member is a member of Supertramp (wdt:P527)
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for ""Supertramp.""",3,3,4,2,2,2,3,28,0,0,3,0,0.0,0
687,47,train,"Give me the player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and player in the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/property/starring> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v4 <http://dbpedia.org/ontology/team> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor WHERE {
  # Step 1: Find films directed by Manuel Huerga
  ?film dbo:director dbr:Manuel_Huerga .
  
  # Step 2: Find actors in those films who are also soccer players and athletes
  ?film dbo:starring ?actor .
  ?actor dbo:occupation dbr:Soccer_player ;
         dbo:occupation dbr:Athlete .

  # Step 3: Identify the person born on 1955-02-22 who is an athlete
  ?person dbp:birthday ""1955-02-22""^^xsd:date ;
          dbo:occupation dbr:Athlete .
  
  # Step 4: Check if there's any actor from step 2 that matches the person from step 3
  FILTER (?actor = ?person)
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
742,1,train,Give me the birthplace of Reneta Kamberova.,SELECT ?result WHERE { <http://dbpedia.org/resource/Reneta_Kamberova> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Reneta Kamberova""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,2,20,2,0,0,1.0,1.0,1.0
39,12,train,Give me the professional in  and band of Bob Thompson (musician).,"SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?occupation ?band 
WHERE {
  VALUES ?bobThompson { dbr:Bob_Thompson_(musician) }
  
  ?bobThompson dbo:occupation ?occupation .
  OPTIONAL { ?bobThompson dbo:bandMember ?band . }
}
```",2,2,3,1,2,3,3,71,0,0,4,0,0.0,0
159,22,train,"Give me the successor of Yurii Khmelnytsky and commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
# Query to find the successor of Yurii Khmelnytsky
SELECT ?successor WHERE {
  ?yuriikhmelnytsky dbo:role ""Cossack leader""@en .
  ?yuriikhmelnytsky foaf:name ""Yurii Khmelnytsky""@en .
  ?yuriikhmelnytsky dbo:succeededBy ?successor .
}

# Query to find the war commanded by Jean Baptist, Comte d'Arco and check if it is a television show and societal event
SELECT DISTINCT ?war WHERE {
  ?jeanbaptist dbo:role ""Commander""@en ;
               foaf:name ""Jean Baptist, Comte d'Arco""@en .
  ?jeanbaptist dbo:commanded ?war .
  
  OPTIONAL { ?war dbo:depiction ?tvShow . }
  OPTIONAL { ?war dbo:societalEvent ?event . }

  FILTER EXISTS { ?tvShow rdf:type dbo:TelevisionSeries . }
  FILTER EXISTS { ?event rdf:type dbo:SocietalEvent . }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
347,60,train,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?commander WHERE {
  # Step 1: Find Maria Anna of Bavaria's child who is royalty
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria""@en ;
             dbo:spouse ?husband .
  
  ?mariaAnna dbo:child ?royalChild .
  ?royalChild rdf:type dbo:Monarch .

  # Step 2: Find the father of this royal child
  ?royalChild dbo:father ?father .

  # Step 3: Find another child of this father who is a commander in the Algerian War
  ?father dbo:child ?commander .
  ?commander rdf:type dbo:MilitaryPerson ;
             dbo:rank ?rank ;
             dbo:participatedInEvent ?event .

  # Step 4: Ensure the event is related to the Algerian War and is a societal event and television show
  ?event dbo:wikiPageRedirects dbr:Algerian_War .
  ?event rdf:type dbo:SocietalEvent ;
         dbo:wikiPageDisambiguates dbr:Television_show .

  # Step 5: Identify the military force involved in the Algerian War
  ?commander dbo:militaryForce ?militaryForce .
  ?militaryForce dbo:participatedInEvent dbr:Algerian_War .
}
```",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
905,36,train,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and spouse of Charles II of Naples.",SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> ?v3 . ?v3 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
# Step 1: Find Stephen V's predecessor
SELECT ?predecessor WHERE {
    wd:Q1234568 dbo:successor ?predecessor .
}

# Step 2: Find Charles II of Naples' spouse
SELECT ?spouse WHERE {
    wd:Q7890123 dbo:spouse ?spouse .
}

# Step 3: Find a common child between the predecessor and the spouse
SELECT DISTINCT ?commonChild WHERE {
    ?predecessor dbo:child ?commonChild .
    ?spouse dbo:child ?commonChild .
}

# Step 4: Identify royalty among the grandchildren of the common child
SELECT DISTINCT ?royalty WHERE {
    ?commonChild dbo:child ?grandchild .
    ?grandchild rdf:type wd:Q11424 ; # Q11424 is a placeholder for ""Monarch"" or similar class in DBpedia
               rdfs:label ?name .
}
```

Note: Replace `wd:Q1234568` with the actual DBpedia ID of Stephen V of Hungary and `wd:Q7890123` with the DBpedia ID of Charles II of Naples. The placeholder `wd:Q11424` should be replaced by the appropriate class for royalty in DBpedia.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
295,10,train,Give me the birth place of the producer of Storm in a Teacup (film).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Storm_in_a_Teacup_(film)> <http://dbpedia.org/ontology/producer> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?producer a dbo:FilmProducer ;
           foaf:name ""Producer Name"" .
  OPTIONAL { ?producer dbo:birthPlace ?birthPlace . }
}
```

Note: Replace `""Producer Name""` with the actual name of the producer once identified.",2,2,3,2,1,3,2,20,0,0,3,0,0.0,0
353,21,train,"Give me the child of the parent of Roger III, Duke of Apulia and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?child WHERE {
  ?rogerIII dbo:parent ?parent .
  FILTER(STR(?rogerIII) = ""Roger III, Duke of Apulia"") .

  ?elvira dbo:child ?commonChild .
  FILTER(STR(?elvira) = ""Elvira of Castile, Queen of Sicily"") .

  ?parent dbo:child ?commonChild .
  
  ?commonChild rdf:type dbo:Person .
}
```",3,3,4,2,2,3,3,71,0,0,4,0,0.0,0
38,2,train,"Give me the commander, that is an office holder and a politician, in North Carolina Air National Guard.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/North_Carolina_Air_National_Guard> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?name WHERE {
  ?commander a dbo:Person .
  ?commander dbo:officeHolderOf dbr:North_Carolina_Air_National_Guard .
  ?commander dbo:positionHeld ?position .
  FILTER(CONTAINS(LCASE(STR(?position)), ""commander"")).
  OPTIONAL { ?commander dbo:politicalParty ?party . }
  OPTIONAL { ?commander dbo:officeHolderOf ?office . }
  ?commander foaf:name ?name .
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
769,8,train,"Give me the player in the manager, that is a sports manager and a soccer manager, of Hong Kong C Team.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. <http://dbpedia.org/resource/Hong_Kong_C_Team> <http://dbpedia.org/ontology/manager> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?playerInManager WHERE {
  ?team a dbo:SoccerTeam ;
        rdfs:label ""Hong Kong C Team""@en .
  
  ?manager dbo:manager ?team ;
           dbo:occupation ?occupation1, ?occupation2 .

  FILTER (
    ?occupation1 = dbr:Sports_manager &&
    ?occupation2 = dbr:Soccer_manager
  )

  ?playerInManager dbo:playerInManager ?manager .
}
```",2,4,3,2,1,3,2,20,0,0,4,0,0.0,0
531,47,train,"Give me the tenant of the residence of Alberto Ruiz-Gallardón and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://dbpedia.org/property/office> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/commander> ?v4 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenant WHERE {
  # Alberto Ruiz-Gallardón's office or residence
  OPTIONAL { 
    ?officeHolder dbr:Alberto_Ruiz-Gallardón ;
                  dbo:officeLocation ?location .
  }
  
  # Manuel Pinto da Costa's political/military role
  OPTIONAL { 
    ?politicalEvent dbr:São_Tomé_and_Príncipe_independence_movement ;
                    dbo:participant ?pintoCosta ;
                    dbo:place ?location .
    ?pintoCosta dbr:Manuel_Pinto_da_Costa .
  }
  
  # Find common tenant or location
  FILTER(?location = ?tenant)
}
```",5,9,6,3,2,3,3,71,0,0,2,0,0.0,0
203,47,train,"Give me the military force of the war, that is a military conflict and an event, of the reference to William Bayne and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v2 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v2 . ?v0 <http://dbpedia.org/ontology/battle> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?war ?militaryForce WHERE {
  # Find wars involving the 30th (Cambridgeshire) Regiment of Foot
  ?regiment a dbo:MilitaryUnit ;
            rdfs:label ""30th (Cambridgeshire) Regiment of Foot""@en .
  
  ?regiment dbo:participatedIn ?war .

  # Get military forces involved in these wars
  ?war dbo:militaryForce ?militaryForce .

  OPTIONAL {
    # Check for William Bayne as a commander in any of these wars
    ?commander rdfs:label ""William Bayne""@en .
    ?commander dbo:commanded ?war .
  }
}
```",5,9,6,3,2,3,3,71,0,0,2,0,0.0,0
119,54,train,"Give me the tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and tenant of Santiago de Compostela and office of the leader of 2009 Galician regional election.",SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v5 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v3 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/property/residence> ?v5 . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v3 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . },"```sparql
SELECT ?person WHERE {
  ?person dbo:nationality dbr:Spanish_people .
  ?person dbo:birthPlace dbr:Spain .
  ?person dbo:office dbr:President_of_the_Xunta_de_Galicia .
  ?person dbo:termStart ?start .
  FILTER (?start <= ""2009-05-21""^^xsd:date && (BOUND(?end) => ?end >= ""2009-05-21""^^xsd:date || !BOUND(?end)))
  ?office dbo:location dbr:Santiago_de_Compostela .
  ?person dbo:residence ?residence .
  ?residence rdf:type dbo:Country .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
246,4,train,"Give me the child, that is a royalty, of Princess Muna al-Hussein.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Muna_al-Hussein> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?title WHERE {
  ?person a dbo:Person ;
          foaf:name ""Muna al-Hussein""@en .
  
  ?person dbo:child ?child .

  OPTIONAL { 
    ?child dbo:title ?title .
    FILTER(CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess""))
  }
}
```",1,2,2,1,1,3,2,20,0,0,4,0,0.0,0
159,10,train,Give me the commander in Great Turkish War and successor of Yurii Khmelnytsky.,SELECT ?result WHERE { <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?role WHERE {
  # Find Yurii Khmelnytsky's successor
  ?yuriikhmelnytsky dbo:succeededBy ?successor .
  
  # Ensure the successor is Ivan Mazepa
  ?successor rdfs:label ""Ivan Mazepa""@en .

  # Check if Ivan Mazepa was a commander in the Great Turkish War
  OPTIONAL {
    ?mazepa dbo:role ?role .
    FILTER(CONTAINS(LCASE(?role), ""commander"") || CONTAINS(LCASE(?role), ""great turkish war""))
  }
  
  # Bind Yurii Khmelnytsky to his resource
  VALUES ?yuriikhmelnytsky { dbr:Yurii_Khmelnytsky }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
531,7,train,"Give me the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party WHERE {
  dbr:Miguel_Maura dbo:party ?party .
}
```",1,2,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
119,1,train,Give me the entity in Poland.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Poland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?entity ?label WHERE {
  ?entity dbo:country dbr:Poland .
  OPTIONAL { ?entity rdfs:label ?label . FILTER (lang(?label) = 'en') }
}
LIMIT 10
```",1,1,2,1,1,3,2,20,0,20,108,0.0,0.0,0
158,12,train,Give me the native of Grand Duchy of Finland and person decedent at Switzerland and native of Russian Empire.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:birthPlace dbr:Grand_Duchy_of_Finland .
  ?person dbo:deathPlace dbr:Switzerland .
  OPTIONAL { ?person dbo:nationality dbr:Russian_Empire . }
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
386,8,train,Give me the entity in the birth place of Elena Žalinkevičaitė-Petrauskienė.,SELECT ?result WHERE { <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/place> ?v1 . },"```sparql
SELECT ?birthPlaceEntity WHERE {
  wd:Q123456 dbo:birthPlace ?birthPlace .
  ?birthPlace rdfs:label ?birthPlaceLabel .
  FILTER (lang(?birthPlaceLabel) = ""en"")
}
```

Note: Replace `wd:Q123456` with the actual DBpedia URI for Elena Žalinkevičaitė-Petrauskienė. You can find this by searching her name in DBpedia or using a SPARQL query to identify her entity.",2,2,3,2,1,2,3,28,0,0,87,0,0.0,0
143,16,train,"Give me the actor of the show, that is a movie, with Afeez Oyetoro and associated musical artist of the person born as Cynthia Ikponmwenosa Morgan.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Afeez_Oyetoro> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v2 <http://dbpedia.org/property/starring> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Cynthia Ikponmwenosa Morgan""@en . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
# Step 1: Find a show that is also a movie
SELECT ?show WHERE {
  ?show dbo:type dbr:Television_series .
  ?show dbo:adaptationOf ?movie .
}

# Step 2: Find Afeez Oyetoro's role in the identified show/movie
SELECT ?role WHERE {
  ?actor foaf:name ""Afeez Oyetoro""@en .
  ?actor dbo:actedIn ?show .
  ?show dbo:character ?role .
}

# Step 3: Identify Tiwa Savage and her associated musical artist
SELECT ?associatedArtist WHERE {
  ?artist foaf:name ""Tiwa Savage""@en ;
          dbo:birthName ""Cynthia Ikponmwenosa Morgan""@en .
  ?artist dbo:collaboratedWith ?associatedArtist .
}

# Combine the results to answer the question
SELECT ?role AS ?actorRole, ?associatedArtist AS ?musicalAssociation WHERE {
  # Find Afeez Oyetoro's role in the show/movie
  ?actor foaf:name ""Afeez Oyetoro""@en .
  ?actor dbo:actedIn ?show .
  ?show dbo:character ?role .

  # Find Tiwa Savage's associated musical artist
  ?artist foaf:name ""Tiwa Savage""@en ;
          dbo:birthName ""Cynthia Ikponmwenosa Morgan""@en .
  ?artist dbo:collaboratedWith ?associatedArtist .
}
```",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
943,6,train,Give me the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo WHERE {
  dbr:The_Shadow dbo:aliasName ?alterEgo .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
392,5,train,Give me the member of the figure known as Der Blau.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/team> ?v1 . ?v1 <http://dbpedia.org/property/nickname> ""Der Blau""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?member ?memberLabel WHERE {
  VALUES ?group { dbr:Der_Blaue_Reiter }
  ?group dbo:member ?member .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,2,3,2,1,2,2,9,0,0,2569,0,0.0,0
347,39,train,"Give me the father of Eleonore of Austria, Queen of Poland and child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574).","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?eleonoresFather ?mariaAnnsChild ?childOfMariaAnnsChild ?fatherOfChild
WHERE {
  # Eleonore of Austria, Queen of Poland
  dbr:Eleonora_of_Austria_(1577–1625) dbo:parent ?eleonoresFather .

  # Maria Anna of Bavaria (born 1574)
  dbr:Maria_Anna_of_Bavaria_(1574-1616) dbo:child ?mariaAnnsChild .
  
  FILTER EXISTS { ?mariaAnnsChild a dbo:Monarch . } # Ensure the child is royalty

  # Child of Maria Anna's royal child
  ?mariaAnnsChild dbo:parent ?childOfMariaAnnsChild .

  # Father of this child
  ?childOfMariaAnnsChild dbo:father ?fatherOfChild .
  
  # Connect fatherOfChild to Eleonore's lineage if possible
  OPTIONAL { ?fatherOfChild dbo:parent ?eleonoresFather }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
38,0,train,Give me the author of Promises to Keep (Biden book).,SELECT ?result WHERE { <http://dbpedia.org/resource/Promises_to_Keep_(Biden_book)> <http://dbpedia.org/ontology/author> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?book a dbo:Book ;
        rdfs:label ""Promises to Keep""@en .
  OPTIONAL { ?book dbo:author ?author . }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
103,57,train,"Give me the professional in the alter ego of The Shadow and professional in the profession of the actor, that is a politician, of Ab Kya Hoga and actor of Dispatches from Elsewhere.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . },"```sparql
# Query for Lamont Cranston's profession
SELECT ?profession WHERE {
  wd:Q1234567 wdt:P106 ?occupation .
  ?occupation rdfs:label ?profession .
  FILTER (lang(?profession) = 'en')
}

UNION

# Query for actor in ""Ab Kya Hoga"" who is also a politician
SELECT DISTINCT ?actorName WHERE {
  ?actor wdt:P31 wd:Q33999 ; # instance of Actor
         wdt:P161 wd:Q1234567 . # involved in Ab Kya Hoga Ladaai?
  ?actor wdt:P106 wd:Q82955 . # politician
  ?actor rdfs:label ?actorName .
  FILTER (lang(?actorName) = 'en')
}

UNION

# Query for actor in ""Dispatches from Elsewhere""
SELECT DISTINCT ?actorName WHERE {
  ?actor wdt:P31 wd:Q33999 ; # instance of Actor
         wdt:P161 wd:Q9876543 . # involved in Dispatches from Elsewhere
  ?actor rdfs:label ?actorName .
  FILTER (lang(?actorName) = 'en')
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia resource ID for Lamont Cranston, and `wd:Q9876543` with the resource ID for ""Dispatches from Elsewhere"" if available. The IDs for specific TV shows or actors might need to be looked up in DBpedia.",6,7,7,3,3,3,3,71,0,0,2,0,0.0,0
756,57,train,"Give me the native of the administration, that is a country, of the leader of West Germany and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of VfL Bochum.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v5 <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v3 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v3 <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativeCountryLabel WHERE {
  # Find Thomas Letsch's managerial roles
  VALUES ?letschRole { 
    dbr:Thomas_Letsch_(footballer) 
  }
  
  ?letschRole dbo:managerOf ?team .
  
  # Check if the team is VfL Bochum or another relevant team
  FILTER (?team = dbr:VfL_Bochum || ?team IN (dbr:Eintracht_Frankfurt, dbr:FC_Schalke_04)) .

  # Find the Chancellor of West Germany during his active years
  ?chancellor dbo:officeHolderOf dbr:Chancellor_of_West_Germany .
  
  # Assume a timeframe for Thomas Letsch's managerial career (e.g., 2010-2023)
  ?chancellor dbo:termStartYear ?startYear ;
              dbo:termEndYear ?endYear .
  FILTER (?startYear <= 2023 && ?endYear >= 2010) .

  # Find the native country of the Chancellor
  ?chancellor dbo:nationality ?nativeCountry .
  
  # Get the label for the native country
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
361,0,train,Give me the professional in Actor.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?professionalCategory WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbo:occupation ?professionalCategory .
}
```",1,1,2,1,1,2,3,28,0,2472,21580,0.0,0.0,0
78,24,train,"Give me the band member of the associated musical artist of David Paton and associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack).",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commonEntity WHERE {
  # David Paton's associated musical artist
  OPTIONAL { 
    dbr:David_Paton dbo:bandMember ?band1 .
    ?band1 dbo:associatedBand ?artist1 .
    ?artist1 rdfs:label ?labelArtist1 .
  }

  # Band member of the associated musical artist
  OPTIONAL {
    ?band1 dbo:bandMember ?commonEntity .
    ?commonEntity rdfs:label ?labelCommonEntity .
  }

  # Writer of Wizards of Waverly Place soundtrack
  dbr:Wizards_of_Waverly_Place_(soundtrack) dbo:composer ?writer .

  # Associated musical artist of the writer
  OPTIONAL {
    ?writer dbo:associatedBand ?artist2 .
    ?artist2 rdfs:label ?labelArtist2 .
  }

  # Commonality between both paths
  FILTER(?commonEntity = ?artist1 || ?commonEntity = ?artist2)
}
```",4,6,5,2,2,2,3,28,0,0,3,0,0.0,0
742,16,train,"Give me the birthplace of the alumnus of Plovdiv University ""Paisii Hilendarski"" and birthplace of the resident of Sofia.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Sofia> . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Plovdiv_University_%22Paisii_Hilendarski%22> . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query to find the birthplace of an alumnus from Plovdiv University ""Paisii Hilendarski""
SELECT ?alumnus ?birthPlaceAlumnus WHERE {
  ?alumnus dbo:almaMater dbr:Plovdiv_University_Paisii_Hilendarski .
  ?alumnus dbo:birthPlace ?birthPlaceAlumnus .
}

UNION

# Query to find the birthplace of a notable resident of Sofia
SELECT ?resident ?birthPlaceResident WHERE {
  ?resident dbo:residence dbr:Sofia .
  ?resident dbo:birthPlace ?birthPlaceResident .
}
```",4,4,5,2,2,3,2,20,0,0,2,0,0.0,0
295,2,train,"Who is the true self, that is an artist, of Steven Kapur?","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://xmlns.com/foaf/0.1/givenName> ""Steven Kapur""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artistOccupation WHERE {
  VALUES ?stevenKapur { dbr:Steven_Kapur }
  ?stevenKapur dbo:occupation ?artistOccupation .
  FILTER(CONTAINS(LCASE(STR(?artistOccupation)), ""artist""))
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
203,41,train,"Give me the military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and military force of Battle of Cape Finisterre (1805) and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bayneWar ?bayneForce ?capeFinisterreForces ?cambridgeshireWar ?commander WHERE {
  # Military force of the war involving William Bayne
  OPTIONAL {
    ?bayneWar dbo:agent dbr:William_Bayne_(Royal_Navy_officer) .
    ?bayneWar dbo:military_force ?bayneForce .
  }

  # Military forces involved in the Battle of Cape Finisterre (1805)
  ?capeFinisterreEvent a dbo:MilitaryConflict ;
                      rdfs:label ""Battle of Cape Finisterre (1805)""@en .
  ?capeFinisterreEvent dbo:military_force ?capeFinisterreForces .

  # Commander in the war involving 30th (Cambridgeshire) Regiment of Foot
  OPTIONAL {
    ?cambridgeshireWar dbo:agent dbr:30th_(Cambridgeshire)_Regiment_of_Foot ;
                       dbo:commander ?commander .
  }
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
89,7,train,"Give me the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?spouse WHERE {
  ?person rdfs:label ""Saw Min Phyu""@en .
  ?person dbo:spouse ?spouse .
  OPTIONAL { ?spouse dbo:title ?title . FILTER(CONTAINS(LCASE(?title), ""royal"")) }
}
```",1,2,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
871,16,train,"Who is the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby?","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
SELECT ?child WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  wd:Q1234567 dbo:child ?parent .  # Replace Q1234567 with the actual DBpedia ID for Edward Stanley

  # Step 2: Determine his parent(s)
  
  # Step 3: Find out which parent is a politician and an office holder
  ?parent dbo:occupation ?occupation .
  FILTER (
    EXISTS { ?occupation rdfs:label ?label . FILTER(CONTAINS(LCASE(?label), ""politician"") || CONTAINS(LCASE(?label), ""office holder"")) }
  )

  # Step 4: Identify the child of that particular parent
  ?parent dbo:child ?child .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia resource identifier for Edward Stanley, 17th Earl of Derby. The query assumes that the occupation labels contain keywords like ""politician"" or ""office holder"".",2,4,3,2,1,3,3,71,0,0,5,0,0.0,0
756,13,train,"Give me the native of the administration, that is a country, of Theodor Heuss.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . },"```sparql
SELECT ?nativePlace WHERE {
  wd:Q1234 dbo:nativePlace ?nativePlace .
}
```

In the above query:
- `wd:Q1234` should be replaced with Theodor Heuss's DBpedia resource identifier. You can find this by searching for ""Theodor Heuss"" in DBpedia or using a service like Wikidata to get his QID.",2,3,3,2,1,3,3,71,0,0,5170,0,0.0,0
782,10,train,Give me the reference to The Fabulous Thunderbirds and associated musical artist of Nick Curran.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
# Query to get the DBpedia reference for The Fabulous Thunderbirds
SELECT ?resource WHERE {
  ?resource rdfs:label ""The Fabulous Thunderbirds""@en .
  FILTER (lang(?resource) = 'en')
}

# Query to find associated musical artists of Nick Curran
SELECT DISTINCT ?artist WHERE {
  ?curran dbo:associatedBand ?artist ;
          foaf:name ""Nick Curran""@en .
  OPTIONAL { ?artist rdfs:label ?label . }
  FILTER (lang(?curran) = 'en' && lang(?label) = 'en')
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
213,14,train,"Give me the country of the work of the spouse, that is a writer, of Hu Jieqing.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Hu_Jieqing> . ?v0 <http://dbpedia.org/property/author> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>. ?v0 <http://dbpedia.org/ontology/country> ?result . },"```sparql
SELECT DISTINCT ?country WHERE {
  ?huJieqing dbo:spouse ?spouse .
  FILTER (str(?huJieqing) = ""Hu_Jieqing"") .

  ?spouse dbo:occupation dbc:Writer .
  
  ?work dbo:author ?spouse ;
        dbo:country ?country .
}
```",3,4,4,3,1,3,2,20,0,0,2,0,0.0,0
668,20,train,Give me the professional in the profession of Rod Argent and associated musical artist of $pacely.,SELECT ?result WHERE { <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?profession ?associatedArtist WHERE {
  # Find Rod Argent's profession
  ?rodArgent a dbo:Person ;
             foaf:name ""Rod Argent"" ;
             dbo:occupation ?profession .

  # Find an artist associated with Paul McCartney (The Beatles)
  ?paulMcCartney a dbo:Person ;
                 foaf:name ""Paul McCartney"" ;
                 dbp:musicalArtist ?associatedBand .
  
  ?associatedBand dbo:member ?associatedArtist .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
158,6,train,Give me the person decedent at Switzerland and native of Grand Duchy of Finland.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:deathPlace dbr:Switzerland .
  ?person dbo:birthPlace dbr:Grand_Duchy_of_Finland .
  OPTIONAL { ?person foaf:name ?name . }
}
```",2,2,3,1,2,2,3,28,2,2,0,0.5,1.0,0.6666666666666666
687,30,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in Juan Carlos Molina (footballer) and player in Sergio Agüero.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://dbpedia.org/ontology/coach> ?v1 . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?team WHERE {
  ?person dbo:birthDate ""1979-11-03""^^xsd:date .
  ?person dbo:occupation ?occupation .
  FILTER (CONTAINS(LCASE(str(?occupation)), ""soccer player"") && CONTAINS(LCASE(str(?occupation)), ""soccer manager""))
  
  ?player1 dbp:playedFor ?team .
  ?player2 dbp:playedFor ?team .
  ?player3 dbp:playedFor ?team .

  ?player1 rdfs:label ""Juan Carlos Molina""@en .
  ?player2 rdfs:label ""Sergio Agüero""@en .
  ?player3 rdfs:label ?personLabel .

  FILTER (LANG(?personLabel) = 'en')
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
246,6,train,Give me the parent of Princess Sara bint Faisal and parent of Prince Omar bin Faisal.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Prince_Omar_bin_Faisal> . <http://dbpedia.org/resource/Princess_Sara_bint_Faisal> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
# Query for Princess Sara bint Faisal's parent
SELECT ?parent WHERE {
  wd:Q123456 dbo:parent ?parent .
}

UNION

# Query for Prince Omar bin Faisal's parent
SELECT ?parent WHERE {
  wd:Q789012 dbo:parent ?parent .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for Princess Sara bint Faisal and `wd:Q789012` with that of Prince Omar bin Faisal. These identifiers can be found by searching their names in DBpedia.",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
905,20,train,"Give me the parent of the father, that is a royalty, of Charles I of Hungary and spouse of Charles II of Naples.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent ?spouse WHERE {
  # Step 1: Identify Charles I of Hungary and his father
  dbr:Charles_I_of_Hungary dbo:father ?father .
  
  # Step 2: Find the parent who is royalty
  ?father dbo:motherOrFather ?parent .
  ?parent a dbo:Monarch .

  # Step 3: Identify spouse of Charles II of Naples
  dbr:Charles_II_of_Naples dbo:spouse ?spouse .

  # Step 4: Match the royal parent with the spouse of Charles II of Naples
  FILTER (?parent = ?spouse)
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
531,8,train,"Give me the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?leader WHERE {
  ?party rdfs:label ""Partido Conservador Popular""@en .
  ?party dbo:leader ?leader .
  ?leader a dbo:Politician .
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
140,1,train,Give me the party member of Republican Party (United States).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?personLabel WHERE {
  ?party rdfs:label ""Republican Party (United States)""@en .
  ?party dbo:member ?person .
  FILTER NOT EXISTS { ?person a dbo:PoliticalParty } # Exclude the party itself
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
LIMIT 1
```",1,1,2,1,1,3,2,20,0,0,21486,0,0.0,0
905,35,train,"Give me the spouse of the father of Philip I, Prince of Taranto and child of the child, that is a royalty, of Béla IV of Hungary.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v1 . ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v1 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?spouse WHERE {
  # Step 1: Identify Philip I, Prince of Taranto
  ?philip dbo:father ?father .
  FILTER(STR(?philip) = ""Philip_I,_Prince_of_Taranto"")

  # Step 2: Find the Father of Philip I, Prince of Taranto
  ?father a dbo:Person .

  # Step 3: Determine the Spouse of Philip I's Father
  ?father dbo:spouse ?mother .
  
  # Step 4: Identify Béla IV of Hungary and His Child
  ?belaIV dbo:child ?royalChild .
  FILTER(STR(?belaIV) = ""B%C3%A9la_IV_of_Hungary"")
  ?royalChild a dbo:RoyalFamily .

  # Step 5: Find the Spouse of the Identified Royalty
  ?royalChild dbo:spouse ?spouse .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
905,19,train,"Give me the spouse of the father of Philip I, Prince of Taranto and parent of Charles Martel of Anjou.","SELECT ?result WHERE { <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?spouse WHERE {
  ?philip dbo:father ?father .
  ?philip rdfs:label ""Philip I, Prince of Taranto""@en .
  
  OPTIONAL { ?philip dbo:child ?charles . }
  FILTER(CONTAINS(LCASE(?charles), ""charles martel of anjou""))

  ?father dbo:spouse ?spouse .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
782,19,train,Give me the band of Kim Wilson and reference to the real name of The Fabulous Thunderbirds.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v0 . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v0 . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . },"```sparql
SELECT ?band ?realName WHERE {
  # Find the band associated with Kim Wilson
  ?person dbo:name ""Kim Wilson""@en .
  ?person dbo:bandMember ?band .

  # Find the real name of The Fabulous Thunderbirds
  ?entity rdfs:label ""The Fabulous Thunderbirds""@en .
  OPTIONAL { ?entity foaf:name ?realName }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
816,9,train,Give me the parent of Amy Arbus and actor of Judgment: The Trial of Julius and Ethel Rosenberg.,SELECT ?result WHERE { <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . },"```sparql
# Query to find the parent of Amy Arbus
SELECT ?parent WHERE {
  dbpedia:amy_arbus dbo:parent ?parent .
}

# Query to find actors from the film ""Judgment: The Trial of Julius and Ethel Rosenberg""
SELECT ?actor WHERE {
  dbpedia:judgment_the_trial_of_julius_and_ethel_rosenberg dbo:starring ?actor .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
687,23,train,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthDate> ?v2 . ?v0 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. },"```sparql
# Query to get Marty Pollio's birthday
SELECT ?birthday WHERE {
  dbpedia:Martin_Polio dbo:birthday ?birthday .
}

# Assuming the result of the first query gives us a specific date (e.g., ""1955-09-12""),
# we use that in the second query. Replace 'YYYY-MM-DD' with the actual date obtained.

SELECT ?athlete WHERE {
  ?athlete rdf:type dbo:Athlete ;
           dbo:birthday ?birthday .
  FILTER (?birthday = ""YYYY-MM-DD""^^xsd:date)
}
```",3,4,4,3,1,3,3,71,0,0,18,0,0.0,0
737,57,train,"Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and predecessor of Carl, Duke of Württemberg and child of the child, that is a royalty, of Archduke Charles Louis of Austria.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v5 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?individual WHERE {
  # Step 1: Find Alexander of Württemberg's great-great-grandchild who is a predecessor to Carl, Duke of Württemberg
  ?alexander dbo:spouse ?spouse .
  FILTER (str(?alexander) = ""Alexander_of_W%C3%BCrttemberg_(1804-1881)"")

  ?child1 dbo:childOf ?alexander .
  ?grandchild1 dbo:childOf ?child1 .
  ?greatGrandchild1 dbo:childOf ?grandchild1 .
  ?greatGreatGrandchild dbo:childOf ?greatGrandchild1 .

  # Carl, Duke of Württemberg's predecessor
  ?carl dbr:Carl,_Duke_of_W%C3%BCrttemberg .
  ?predecessor dbo:successor ?carl .

  FILTER (?greatGreatGrandchild = ?predecessor)

  # Step 2: Find Archduke Charles Louis of Austria's royal descendant
  ?archduke dbr:Charles_Louis,_Archduke_of_Austria .
  ?child2 dbo:childOf ?archduke .
  ?grandchild2 dbo:childOf ?child2 .
  ?royalDescendant dbo:childOf ?grandchild2 .

  FILTER (?greatGreatGrandchild = ?royalDescendant)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
89,15,train,Give me the parent of the child of Minye Kyawswa.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v1 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?minyeKyawswa a dbo:Person ;
                 foaf:name ""Minye Kyawswa""@en .
  
  ?child dbo:childOf ?minyeKyawswa .

  OPTIONAL { ?child dbo:father ?parent . }
  OPTIONAL { ?child dbo:mother ?parent . }
  OPTIONAL { ?child dbo:spouse ?parent . }

  FILTER(?parent != ?minyeKyawswa)
}
```",2,2,3,2,1,3,3,71,0,0,2,0,0.0,0
203,55,train,"Give me the military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of the force, that is an event and a societal event, of Robert Calder.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v5 . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v3 . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?militaryForce
WHERE {
  # Find the war involving William Bayne
  ?bayneEvent a dbo:MilitaryConflict ;
              dbo:agent dbr:William_Bayne_(Royal_Navy_officer) .

  # Find the commander of the 30th (Cambridgeshire) Regiment of Foot in that war
  ?regimentEvent a dbo:MilitaryConflict ;
                 dbo:commander ?commander ;
                 dbo:participatingUnit dbr:30th_(Cambridgeshire)_Regiment_of_Foot .

  # Ensure the same conflict for both Bayne and the regiment
  FILTER(?bayneEvent = ?regimentEvent)

  # Find Robert Calder's event and its military force
  ?calderEvent a dbo:MilitaryConflict ;
               dbo:agent dbr:Robert_Calder ;
               dbo:militaryForce ?militaryForce .

  # Ensure the same conflict for all three entities
  FILTER(?bayneEvent = ?regimentEvent && ?bayneEvent = ?calderEvent)
}
```",6,12,7,2,3,3,3,71,0,0,1,0,0.0,0
225,7,train,Give me the entity in the region of Japan Standard Time.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . ?result <http://dbpedia.org/ontology/country> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity WHERE {
  ?entity dbo:timeZone dbr:Japan_Standard_Time .
}
```",2,2,3,2,1,3,2,20,2080,175,6836,0.9223946784922394,0.23328847016599372,0.37239280279294606
140,4,train,"Give me the death place, that is a settlement, of John McDermott (American artist).",SELECT ?result WHERE { <http://dbpedia.org/resource/John_McDermott_(American_artist)> <http://dbpedia.org/ontology/deathPlace> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?deathPlaceLabel WHERE {
  ?artist dbo:name ""John McDermott (American artist)""@en .
  ?artist dbo:deathPlace ?deathPlace .
  ?deathPlace a dbo:Settlement .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
941,12,train,"Give me the child of Ferdinand Albert II, Duke of Brunswick-Wolfenbüttel and spouse of the spouse of Duchess Luise of Brunswick-Wolfenbüttel.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Wolfenbüttel> . ?v0 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Duchess_Luise_of_Brunswick-Wolfenbüttel> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Find a child of Ferdinand Albert II, Duke of Brunswick-Wolfenbüttel
  dbr:Ferdinand_Albert_II,_Duke_of_Brunswick-Wolfenbüttle dbo:child ?child .

  # Find the spouse of Duchess Luise of Brunswick-Wolfenbüttel
  dbr:Duchess_Luise_of_Brunswick-Wolfenbüttle dbo:spouse ?luisesSpouse .

  # The child from Ferdinand Albert II should be the same as luisesSpouse's spouse
  ?child dbo:spouse ?luisesSpouse .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
23,1,train,Give me the entity in Colombia.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?entity ?name WHERE {
  ?entity dbo:country dbr:Colombia .
  OPTIONAL { ?entity rdfs:label ?name . FILTER (lang(?name) = 'en') }
}
LIMIT 10
```",1,1,2,1,1,2,3,28,10,10,2131,0.5,0.004670714619336758,0.00925497454881999
386,22,train,Give me the war of the awardee of 25 and entity in the birth place of Elena Žalinkevičaitė-Petrauskienė.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v2 . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?war ?entityInBirthPlace WHERE {
  # Find the awardee of 25
  ?person dbo:ageAtAward ""25"" ;
          dbo:award ?award .

  # Get wars associated with this person
  OPTIONAL { ?person dbo:participatedInWar ?war . }

  # Identify Elena Žalinkevičaitė-Petrauskienė and her birthplace
  dbr:Elena_Žalinkevičaitė-Petrauskienė dbo:birthPlace ?birthPlace .

  # Find entities in the birthplace of Elena Žalinkevičaitė-Petrauskienė
  ?entityInBirthPlace a dbo:Place ;
                     dbo:location ?birthPlace .
}
```",4,4,5,2,2,2,3,28,0,0,2,0,0.0,0
633,7,train,"Give me the spouse of the parent, that is a royalty and a noble, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. }","```sparql
SELECT ?spouse WHERE {
  ?francis1 dbr:François_Ier,_Duke_of_Lorraine .
  ?francis1 dbo:parent ?parent .

  ?parent dbo:spouse ?spouse .

  OPTIONAL { ?spouse rdfs:label ?label . FILTER (lang(?label) = 'en') }
  
  # Ensure the spouse is a royalty and noble
  ?spouse dbo:title ?title .
  FILTER (
    CONTAINS(LCASE(str(?title)), ""duke"") ||
    CONTAINS(LCASE(str(?title)), ""prince"") ||
    CONTAINS(LCASE(str(?title)), ""king"") ||
    CONTAINS(LCASE(str(?title)), ""queen"")
  )
}
```",2,4,3,2,1,3,2,20,0,0,1,0,0.0,0
87,18,train,"Give me the actor of the movie, that is a work and a film, with Audrey Hepburn and spouse of Janusz Kamiński.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
SELECT ?actor WHERE {
  ?movie dcterms:isPartOf dbc:Category_Films_starring_Audrey_Hepburn ;
         dbo:starringAudience ?audience .
  ?audience foaf:name ""Zoe Saldana""@en .
  ?movie dbo:starring ?person .
  ?person foaf:name ""Audrey Hepburn""@en .
  ?person dbo:spouse ?spouse .
  ?spouse foaf:name ""Janusz Kamiński""@en .
}
```",3,5,4,2,2,2,3,28,0,0,1,0,0.0,0
23,5,train,Who is the father of Sofía Petro?,SELECT ?result WHERE { <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?s dbr:Sof%C3%ADa_Petro dbo:father ?father .
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
347,14,train,Give me the child of the father of Cecilia Renata of Austria.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . },"```sparql
SELECT ?child WHERE {
  ?cecilia dbo:parent ?father .
  ?father rdfs:label ""Cecilie Renata von Habsburg""@en .
  
  OPTIONAL { ?father dbo:child ?child . }
}
```",2,2,3,2,1,3,3,71,0,0,3,0,0.0,0
159,31,train,"Give me the reference to George Ducas and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/commander> ?v0 . ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v0 <http://dbpedia.org/ontology/successor> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor WHERE {
  # Find George Ducas
  ?georgeDucas a dbo:Person ;
               foaf:name ""George Ducas""@en .

  # Find Michał Kazimierz Pac and his military conflict
  ?michalPac a dbo:Person ;
             foaf:name ""Michał Kazimierz Pac""@pl ;
             dbo:militaryConflict ?conflict .

  # Identify the successor who is both a politician and office holder
  ?successor a dbo:Politician, dbo:OfficeHolder ;
             dbo:predecessorOrSuccessorOf ?georgeDucas ;
             dbo:officeHolderIn ?michalPac .

}
```",4,8,5,3,2,3,3,71,0,0,1,0,0.0,0
19,4,train,Give me the professional in  and spouse of Carrie Johnson.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Carrie_Johnson> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?spouse WHERE {
  VALUES ?person { dbr:Carrie_Johnson }
  
  # Query for profession
  OPTIONAL { 
    ?person dbo:occupation ?profession .
  }

  # Query for spouse
  OPTIONAL {
    ?person dbo:spouse ?spouse .
  }
}
```",2,2,3,1,2,2,2,9,1,2,0,0.3333333333333333,1.0,0.5
347,56,train,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and father of Eleonore of Austria, Queen of Poland and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).","SELECT ?result WHERE { <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/father> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v2 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?regimentEvent WHERE {
  # Eleonore of Austria's father
  dbr:Eleonora_of_Austria_queen_of_Poland dbo:father dbr:Stephen_Báthory ;
                                         dbo:royalty ""true""^^xsd:boolean .

  # Stephen Báthory's children
  dbr:Stephen_Báthory dbo:child ?child .

  # Check if any child is related to the 2nd Dragoon Regiment as a societal event, event, and television show
  OPTIONAL {
    ?regimentEvent dbo:wikiPageRedirects ?relatedEntity .
    ?relatedEntity rdfs:label ""2nd Dragoon Regiment (France)""@en ;
                  dbo:socialEvent ?child ;
                  dbo:event ?child ;
                  dbo:televisionShow ?child .
  }
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
585,4,train,Give me the profession of Shirley Stoler.,SELECT ?result WHERE { <http://dbpedia.org/resource/Shirley_Stoler> <http://dbpedia.org/property/occupation> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?profession WHERE {
  ?person a dbo:Person ;
          foaf:name ""Shirley Stoler""@en .
  ?person dbo:occupation ?profession .
}
```",1,1,2,1,1,3,2,20,0,1,1,0.0,0.0,0
943,0,train,Give me the child of Dawit I.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . },"```sparql
SELECT ?child WHERE {
  ?dawitI dbo:wikiPageID ""Dawit_I"" .
  ?dawitI dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,0,0,4,0,0.0,0
375,1,train,Give me the war of Toyotomi Hidenaga.,SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?battle ?battleLabel WHERE {
  ?person a dbo:Person ;
          foaf:name ""Toyotomi Hidenaga""@en .
  
  OPTIONAL { 
    ?person dbo:spouse ?spouse . 
    ?spouse dbo:spouse ?person2 .
    ?person2 foaf:name ""Hideyoshi Toyotomi""@en .
  }
  
  ?battle dbo:participant ?person ;
          a dbo:Battle .

  SERVICE <http://dbpedia.org/sparql> {
    ?battle rdfs:label ?battleLabel .
    FILTER (LANG(?battleLabel) = 'en')
  }
}
```",1,1,2,1,1,2,3,28,0,0,4,0,0.0,0
249,5,train,"Give me the native of the work, that is Indian, of Jamsetji Tata.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Jamsetji_Tata> . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?workLabel WHERE {
  ?person dbo:nationality dbr:India .
  ?person foaf:name ""Jamsetji Tata""@en .
  ?person dbo:almaMater ?institution .
  ?work dbo:foundingPerson ?person ;
        dbo:country dbr:India .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,3,3,2,1,2,2,9,0,0,68,0,0.0,0
609,44,train,"Give me the birth place of the author of El Deafo and birth place of the governor, that is a politician, of Virginia and birth place of Vince Gilligan.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v4 . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v2 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query to find the birth place of Cece Bell, author of ""El Deafo""
SELECT ?birthPlace WHERE {
  ?author foaf:name ""Cece Bell""@en .
  ?author dbo:wikiPageRedirects db:QXXXXX . # Replace QXXXXX with the DBpedia ID for Cece Bell
  ?author dbo:birthPlace ?birthPlace .
}

UNION

# Query to find the birth place of Glenn Youngkin, governor of Virginia
SELECT ?birthPlace WHERE {
  ?governor foaf:name ""Glenn Youngkin""@en .
  ?governor dbo:officeHolderOf db:QXXXXX . # Replace QXXXXX with the DBpedia ID for Governor of Virginia
  ?governor dbo:birthPlace ?birthPlace .
}

UNION

# Query to find the birth place of Vince Gilligan
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Vince Gilligan""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
782,15,train,Give me the real name of the band of Kim Wilson.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v1 <http://xmlns.com/foaf/0.1/name> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?bandLabel WHERE {
  ?person a dbo:Musician ;
          foaf:name ""Kim Wilson""@en .
  ?person dbo:band ?band .
  ?band rdfs:label ?bandLabel .
}
```",2,2,3,2,1,3,3,71,0,0,2,0,0.0,0
468,14,train,"Give me the child of the father, that is a royalty, of the parent of Martin of Aragon.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Martin_of_Aragon> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v0 . },"```sparql
SELECT ?child WHERE {
  wd:Q11188 wdt:P22 ?father .
  ?father rdfs:label ""Frederick III of Sicily""@en .
  ?father wdt:P40 ?child .
  ?child wdt:P39 ?royaltyTitle .
  FILTER(CONTAINS(LANG(?royaltyTitle), ""en""))
}
```",3,4,4,3,1,3,2,20,0,0,7,0,0.0,0
737,48,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria and child of the child, that is a royalty, of Archduke Charles Louis of Austria.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v3 . ?result <http://dbpedia.org/ontology/successor> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?predecessor ?grandchild WHERE {
  # Step 1: Find Archduchess Helena of Austria's spouse
  ?helena a dbo:Person ;
          foaf:name ""Helena, Princess of Waldeck and Pyrmont""@en ;
          dbo:spouse ?spouse .

  # Step 2: Identify the spouse's child who is royalty
  ?child dbo:parent ?spouse ;
         dbo:royaltyStatus dbr:Royal_Titles ;
         rdfs:label ?childLabel .
  
  # Step 3: Find predecessor of this royal child
  ?predecessor dbo:successor ?child .

  # Step 4: Identify Archduke Charles Louis of Austria's children who are royalty
  ?charles a dbo:Person ;
           foaf:name ""Charles Louis, Archduke of Austria""@en ;
           dbo:child ?royalChild .
  
  ?royalChild dbo:royaltyStatus dbr:Royal_Titles .

  # Step 5: Identify the grandchild (child's child) who is royalty
  ?grandchild dbo:parent ?royalChild ;
              dbo:royaltyStatus dbr:Royal_Titles .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
668,31,train,Give me the professional in Musician and associated musical artist of the person born as the birth name of $pacely.,"SELECT ?result WHERE { <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?associatedArtist WHERE {
  VALUES ?tupac { dbr:Tupac_Shakur }
  
  ?tupac dbo:occupation ?profession .
  FILTER (str(?profession) = ""Musician"" || str(?profession) = ""Rapper"")

  OPTIONAL {
    ?tupac dbo:memberOf ?group .
    ?group rdfs:label ?associatedArtist .
    FILTER (langMatches(lang(?associatedArtist), ""en""))
  }
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
557,40,train,"Give me the producer of A Star Is Born (1937 film) and producer of The Adventures of Tom Sawyer (1938 film) and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/alterEgo> ?v1 . <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
# Query for producer of ""A Star Is Born"" (1937 film)
SELECT ?producer WHERE {
  ?film dcterms:title ""A Star Is Born""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1937) .
  ?film dbo:producer ?producer .
}

UNION

# Query for producer of ""The Adventures of Tom Sawyer"" (1938 film)
SELECT ?producer WHERE {
  ?film dcterms:title ""The Adventures of Tom Sawyer""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1938) .
  ?film dbo:producer ?producer .
}

UNION

# Query for the fictional character associated with Kent Allard and their profession
SELECT ?character ?profession WHERE {
  ?person foaf:name ""Kent Allard""@en .
  ?person dbo:alterEgo ?character .
  ?character rdf:type dbo:FictionalCharacter .
  ?character dbo:occupation ?profession .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
80,37,train,"Give me the actor of the album of the work, that is a song and a musical work, of T.I. and professional in .","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?result <http://dbpedia.org/property/occupation> """"@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v0 <http://dbpedia.org/ontology/album> ?v3 . ?v3 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  # Identify T.I. and his works that are songs and musical works
  dbr:T.I. dbo:song ?song .
  
  # Ensure the song is also a musical work
  ?song rdf:type dbo:Song .

  # Find the album associated with this song
  ?song dbo:album ?album .

  # Retrieve any actor linked to this album
  ?album dbo:actor ?actor .
}
```",4,6,5,3,2,3,3,71,0,0,4,0,0.0,0
668,7,train,"Who is the native, that is an artist, of Central Region, Ghana?","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?artist WHERE {
  ?artist dbo:occupation dbp:Artist .
  ?artist dbo:birthPlace ?place .
  ?place rdfs:label ""Central Region, Ghana""@en .
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
706,15,train,Give me the birthplace of the awardee of the reference to Sangeet Natak Akademi Fellowship and birthplace of Smita Patil.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Sangeet Natak Akademi Fellowship""@en . <http://dbpedia.org/resource/Smita_Patil> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/awards> ?v0 . }","```sparql
# Query to get the birthplace of an awardee of the Sangeet Natak Akademi Fellowship
SELECT ?awardee ?birthPlace WHERE {
  ?awardee dbo:award dbpedia:Sangeet_Natak_Akademi_Fellowship .
  ?awardee dbo:birthPlace ?birthPlace .
}

UNION

# Query to get the birthplace of Smita Patil
SELECT ?person ?birthPlace WHERE {
  ?person rdfs:label ""Smita Patil""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
723,5,train,"Give me the associated musical artist, that is an organisation, of Cavalera Conspiracy.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Cavalera_Conspiracy> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  VALUES ?band { dbr:Cavalera_Conspiracy }
  ?band dbo:musicalArtist ?artist .
  FILTER EXISTS { ?artist a dbo:MusicalArtist . }
}
```",1,2,2,1,1,3,2,20,0,0,7,0,0.0,0
756,0,train,Give me the manager of VfL Bochum.,SELECT ?result WHERE { <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager WHERE {
  ?team a dbo:FootballClub ;
        rdfs:label ""VfL Bochum""@en .
  
  OPTIONAL { 
    ?team dbo:manager ?manager .
  }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
270,3,train,"Give me the birth place, that is a settlement, of Mark Tournier.",SELECT ?result WHERE { <http://dbpedia.org/resource/Mark_Tournier> <http://dbpedia.org/ontology/birthPlace> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?settlement WHERE {
  ?person a dbo:Person ;
          foaf:name ""Mark Tournier""@en .
  ?person dbo:birthPlace ?place .
  ?place a dbo:Settlement .
  BIND(?place AS ?settlement)
}
```",1,2,2,1,1,2,2,9,0,0,1,0,0.0,0
905,45,train,"Give me the parent of Charles Martel of Anjou and child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and spouse of Charles II of Naples.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v3 . ?v3 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/father> ?v0 . },"```sparql
# Step 1: Find the parent of Charles Martel of Anjou
SELECT ?parent WHERE {
  wd:Q123456 wdt:P22 ?parent .
}

# Step 2: Find the predecessor of Stephen V of Hungary
SELECT ?predecessor WHERE {
  wd:Q789012 wdt:P1365 ?predecessor .
}

# Step 3: Find the child of the predecessor of Stephen V of Hungary
SELECT ?child WHERE {
  ?predecessor wdt:P40 ?child .
}

# Step 4: Find a royal grandchild (child of the child) from step 3
SELECT DISTINCT ?grandchild WHERE {
  ?child wdt:P40 ?grandchild .
  ?grandchild wdt:P31 wd:Q5 . # Q5 is the class for human, but we need to filter further for royalty
}

# Step 5: Find the spouse of Charles II of Naples
SELECT ?spouse WHERE {
  wd:Q345678 wdt:P26 ?spouse .
}

# Final step: Match results from steps 1 and 5
SELECT DISTINCT ?parent ?grandchild ?spouse WHERE {
  { 
    wd:Q123456 wdt:P22 ?parent .
  }
  UNION
  {
    ?predecessor wdt:P40 ?child .
    ?child wdt:P40 ?grandchild .
    ?grandchild wdt:P31 wd:Q5 . # Assuming Q5 is a placeholder for royalty, further refinement needed
  }
  UNION
  {
    wd:Q345678 wdt:P26 ?spouse .
  }
  FILTER (?parent = ?spouse)
}
```

Note: The above SPARQL queries use placeholders like `wd:Q123456`, `wd:Q789012`, and `wd:Q345678` for the entities Charles Martel of Anjou, Stephen V of Hungary, and Charles II of Naples respectively. These should be replaced with their actual DBpedia QIDs.",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
943,61,train,"Give me the father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I and reference to the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v0 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/alterEgo> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v3 <http://dbpedia.org/property/father> ?v0 . }","```sparql
SELECT ?grandfather WHERE {
  ?child dbo:parent dbc:Baeda_Maryam_I.
  ?child dbo:parent ?father.
  ?father dbo:parent ?grandfather.
  FILTER EXISTS { ?grandfather a dbo:Monarch . }
  FILTER EXISTS { ?grandfather dbo:officeHolder true . }
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
375,20,train,Give me the war of Hashiba Hidekatsu and entity in Japan and war of the person born as Koichirō.,"SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Koichirō""@en . <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  # Hashiba Hidekatsu's involvement in a war
  OPTIONAL { 
    dbr:Hashiba_Hidekatsu dbo:participatedIn ?war .
  }
  
  # Koichirō (assuming Koichi Tanaka as an example)
  OPTIONAL {
    dbr:Koichi_Tanaka dbo:birthName ""Koichirō"" ;
                      dbo:participatedIn ?war .
  }
}
```",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
23,8,train,"Give me the party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . ?v1 <http://dbpedia.org/ontology/party> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?partyLabel WHERE {
  ?person foaf:name ""Roy Leonardo Barreras Montealegre""@en .
  ?person dbo:party ?party .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,3,3,2,1,2,3,28,0,0,5,0,0.0,0
412,10,train,"Give me the entity in the death place, that is a settlement, of Antonios Varthalitis.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v0 . },"```sparql
SELECT ?deathPlace WHERE {
  dbpedia:Antonios_Varthalitis dbo:placeOfBirth ?birthPlace .
  dbpedia:Antonios_Varthalitis dbo:deathPlace ?deathPlace .
}

SELECT DISTINCT ?settlement WHERE {
  VALUES ?deathPlace { <http://dbpedia.org/resource/PLACE_OF_DEATH> } # Replace PLACE_OF_DEATH with the actual URI obtained from the first query
  ?deathPlace rdf:type dbpedia-owl:Settlement .
}
```",2,3,3,2,1,2,3,28,0,0,12,0,0.0,0
941,1,train,Give me the spouse of Prince Augustus William of Prussia.,SELECT ?result WHERE { <http://dbpedia.org/resource/Prince_Augustus_William_of_Prussia> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?spouse WHERE {
  ?person dbo:givenName ""Augustus"" .
  ?person dbo:familyName ""William"" .
  ?person dbo:country dbr:Prussia .
  ?person dbo:spouse ?spouse .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
668,60,train,"Give me the associated musical artist of the person born as the birth name of $pacely and person born as the birth name of the native, that is an artist, of Central Region, Ghana.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?v2 <http://dbpedia.org/property/birthName> ?v3 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist1 ?artist2 WHERE {
  # Find Pacely's real name and confirm he is a musical artist
  ?person rdfs:label ""Pacely""@en .
  ?person dbo:birthName ?realName .
  ?person dbo:occupation dbr:Musical_artist .

  # Find Stonebwoy's birth name and confirm he is a musical artist from Central Region, Ghana
  ?artist rdfs:label ""Stonebwoy""@en .
  ?artist dbo:birthName ?stonebwoyRealName .
  ?artist dbo:occupation dbr:Musical_artist .
  ?artist dbo:nationality dbr:Ghana .
  ?artist dbo:hometown ?hometown .
  ?hometown rdfs:label ""Central Region, Ghana""@en .

  # Check if there is any association between the two artists
  OPTIONAL {
    ?association dbo:agent1 ?person ;
                 dbo:agent2 ?artist .
  }

  BIND(?realName AS ?artist1)
  BIND(?stonebwoyRealName AS ?artist2)
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
595,37,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and commander in Third Taiwan Strait Crisis.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/author> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://dbpedia.org/property/author> ?result . }","```sparql
SELECT ?author WHERE {
  ?work dcterms:isPartOf ?book .
  ?book a dbo:Book .
  ?work dbo:author ?author .

  ?author foaf:name ""Hillary Rodham Clinton""@en .
  
  ?author dbo:residenceLocation ?location .
  ?location rdfs:label ""Chappaqua, New York""@en .

  ?author dbo:occupation ?occupation .
  ?occupation rdfs:label ?occupationLabel .
  FILTER (CONTAINS(LCASE(?occupationLabel), ""politician"") || CONTAINS(LCASE(?occupationLabel), ""office holder""))

  OPTIONAL {
    ?event dbo:commander ?commander .
    ?event dbo:name ?eventName .
    FILTER (CONTAINS(LCASE(?eventName), ""Third Taiwan Strait Crisis""))
    ?commander foaf:name ""Hillary Rodham Clinton""@en
  }
}
```",4,9,5,3,2,3,3,71,0,0,1,0,0.0,0
756,45,train,"Give me the manager of VfL Bochum and native of West Germany and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v1 <http://dbpedia.org/ontology/manager> ?v0 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?name WHERE {
  ?person a dbo:SoccerManager ;
          dbo:birthDate ""1968-08-26""^^xsd:date ;
          dbo:nationality dbr:West_Germany ;
          dbo:managerOfTeam dbr:VfL_Bochum .
  
  OPTIONAL { ?person foaf:name ?name . }
}
```",5,9,6,3,3,3,3,71,0,0,1,0,0.0,0
628,38,train,"Give me the native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and person born as the birth name of Bobby Shmurda.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v3 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v3 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?region ?person WHERE {
  # Find the award and its native region
  ?award dbo:nativeRegion ?region .
  FILTER (CONTAINS(LCASE(?award), ""coro de la pontificia universidad católica de puerto rico""))

  # Ensure the region is a region, American, state, and settlement
  ?region rdf:type dbo:Region .
  ?region dbo:country dbr/United_States_of_America .
  ?region rdf:type dbo:State .
  ?region rdf:type dbo:Settlement .

  # Find a person with the birth name Ackquille Jean Pollard native to this region
  ?person dbp:birthName ""Ackquille Jean Pollard"" .
  ?person dbo:nativePlace ?region .
}
```",4,8,5,2,2,3,3,71,0,0,1,0,0.0,0
392,7,train,Give me the reference to  and member of the figure known as Der Blau.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/team> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v2 <http://dbpedia.org/property/nickname> ""Der Blau""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?member WHERE {
  ?group a dbo:ArtMovement .
  ?group rdfs:label ""Der Blaue Reiter""@en .
  ?group dbo:member ?member .
}
```",3,3,4,2,2,2,2,9,0,0,6,0,0.0,0
628,47,train,"Give me the person born as the birth name of the native, that is a musical artist, of Florida and band member of the associated musical artist, that is a musical artist, of Bobby Shmurda.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/property/birthName> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/birthName> ?v4 . },"```sparql
SELECT ?person ?birthName WHERE {
  # Find Bobby Shmurda's associated musical artist
  ?bobbyShmurda dbo:memberOf ?gs9 .
  
  # GS9 is a band or group
  ?gs9 rdf:type dbo:Band .

  # Find members of GS9 who are native to Florida and are musicians
  ?person dbo:memberOf ?gs9 ;
          dbo:nationality dbr:United_States ;
          dbo:birthPlace dbr:Florida ;
          dbo:occupation dbr:Musical_artist .
  
  # Get the birth name of this person
  ?person foaf:name ?birthName .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
103,21,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant and professional in .","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/property/starring> ?result . ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?actor WHERE {
  ?show dbo:starring dbr:Richard_E._Grant .
  ?show a dbo:TelevisionShow .
  ?show dbo:starring ?actor .
  FILTER(?actor != dbr:Richard_E._Grant)
}
```",3,4,4,2,2,3,3,71,13,69,0,0.15853658536585366,1.0,0.2736842105263158
943,30,train,"Give me the child of Dawit I and reference to  and father of the father, that is a royalty and an office holder, of Na'od.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?grandfather WHERE {
  # Dawit I's child
  dbr:Dawit_I dbo:child ?child .
  
  # Na'od's father (Amda Seyon I)
  dbr:Na'ad dbo:father ?grandfather .

  # Check if Amda Seyon I was royalty and an office holder
  ?grandfather a dbo:Monarch ;
              dbo:officeHolderOf ?office .
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
80,40,train,Give me the professional in  and actor of the movie with the author of Smartbomb (book) and actor of ATL (film).,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v2 . }","```sparql
# Step 1: Find the author of the book ""Smartbomb""
SELECT ?author WHERE {
  ?book dcterms:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Step 2: Find the actor from the film ""ATL""
SELECT ?actor WHERE {
  ?film dcterms:title ""ATL""@en .
  ?film dbo:starring ?actor .
}

# Assuming we have identified the author and actor, let's say they are ?author1 and ?actor1 respectively

# Step 3: Find a common professional link (assuming it is an acting role)
SELECT DISTINCT ?commonProfession WHERE {
  VALUES (?person) { (<URI_of_author> <URI_of_actor>) }
  ?person dbo:profession ?commonProfession .
}

# Step 4: Find the movie that connects them through an acting role
SELECT ?movie WHERE {
  ?actor1 dbo:starring ?movie .
  ?author1 dbo:starring ?movie .
}
```

Note: Replace `<URI_of_author>` and `<URI_of_actor>` with the actual URIs obtained from steps 1 and 2.",5,5,6,3,3,3,3,71,0,0,4,0,0.0,0
943,59,train,"Give me the child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and reference to the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v3 <http://dbpedia.org/ontology/parent> ?v1 . ?v0 <http://dbpedia.org/property/alterEgo> ?v4 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childRoyalty WHERE {
  # Step 1: Identify the commander in Siege of Mukha
  ?commander dbo:event dbr:Siege_of_Mukha .
  
  # Step 2: Determine if the commander is royalty and find their parent
  ?commander a dbo:RoyalPerson ;
             dbo:parent ?parent .

  # Find the child of this parent who is also royalty
  ?childRoyalty dbo:parent ?parent ;
                a dbo:RoyalPerson .
  
  # Step 3: Identify Lamont Cranston's alter ego
  dbr:Lamont_Cranston dbo:alterEgo ?alterEgo .

  # Step 4: Reference the alter ego in our query (though it may not directly affect the result)
  FILTER(?alterEgo = ""The Shadow"")
}
```",6,8,7,3,2,3,3,71,0,0,3,0,0.0,0
353,55,train,"Give me the child of the child of Alfonso VI of León and Castile and father of the child, that is a royalty, of William I of Sicily and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v5 <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Alfonso VI's grandchild
  ?alfonsoVI dbo:spouse ?spouse .
  ?spouse dbo:child ?child1 .
  ?child1 dbo:child ?grandchild .

  # William I of Sicily's royal child's father
  dbr:William_I_of_Sicily dbo:child ?royalChild .
  ?royalChild a dbo:Monarch .
  ?father dbo:spouse ?mother .
  ?mother dbo:child ?royalChild .

  # Roger III's parent
  dbr:Roger_III,_Duke_of_Apulia dbo:parent ?parentOfRoger3 .

  # Find the person who fits all criteria
  FILTER (?grandchild = ?father && ?father = ?person)
}
```",6,7,7,2,3,3,3,71,0,0,1,0,0.0,0
78,15,train,"Give me the band member of The Alan Parsons Project and associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . }","```sparql
# Step 1: Find a band member of The Alan Parsons Project
SELECT ?member WHERE {
  ?project dcterms:title ""The Alan Parsons Project""@en .
  ?project dbo:musicalArtist ?member .
}

# Step 2: Check for associations with other musical artists
SELECT DISTINCT ?associatedArtist WHERE {
  ?member dbo:associatedMusicalArtist ?associatedArtist .
}

# Step 3: Find if Stuart Mcbeath Tosh is associated with the identified band member or their associated artist
SELECT DISTINCT ?stuartAssociation WHERE {
  ?stuart foaf:name ""Stuart McBeath Tosh""@en ;
          dbo:musicalArtist ?stuartMusic .
  
  OPTIONAL { 
    ?member dbo:associatedMusicalArtist ?stuartMusic .
  }
  
  UNION
  
  OPTIONAL {
    ?associatedArtist dbo:associatedMusicalArtist ?stuartMusic .
  }
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
151,7,train,Give me the entity in the birthplace of Burhan Belge and reference to Order of the Medjidie.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Burhan_Belge> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?result <http://dbpedia.org/ontology/country> ?v0 . ?result <http://xmlns.com/foaf/0.1/name> ""Order of the Medjidie""@en . }","```sparql
# Part 1: Find the birthplace of Burhan Belge
SELECT ?birthPlace WHERE {
    dbpedia:Burhan_Belge dbo:birthPlace ?birthPlace .
}

# Part 2: Find an entity related to the Order of the Medjidie
SELECT ?entity WHERE {
    ?entity dbo:wikiPageRedirects dbpedia-fr:Ordre_de_Médjidié .
}
```",3,3,4,2,2,2,2,9,0,0,1,0,0.0,0
353,42,train,"Give me the father of William II of Sicily and child of the child of Alfonso VI of León and Castile and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # William II of Sicily's father
  ?william2 dbo:father ?father .
  FILTER(STR(?william2) = ""William_II_of_Sicily"")

  # Alfonso VI's child
  ?alfonso6 dbo:child ?alfonsoChild .

  # Roger III's parent (likely father)
  ?roger3 dbo:parent ?rogersParent .

  # The person we are looking for is the father of William II, a child of Alfonso VI's child,
  # and a child of Roger III's parent
  ?person rdf:type dbo:Person .
  ?person rdfs:label ?name .
  
  FILTER(STR(?father) = STR(?person))
  ?alfonsoChild dbo:child ?person .
  ?rogersParent dbo:child ?person .

  # Ensure the person is not a blank node
  FILTER(!isBlank(?person))
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
609,35,train,Give me the birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of the author of El Deafo.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . },"```sparql
# Query for the birthplace of an awardee associated with Vince Gilligan's awards
SELECT ?awardeeBirthPlace WHERE {
  ?award dbo:recipient dbr:Vince_Gilligan .
  ?award dbo:winner ?awardee .
  ?awardee foaf:birthPlace ?awardeeBirthPlace .
}

UNION

# Query for the birthplace of Cece Bell, author of El Deafo
SELECT ?authorBirthPlace WHERE {
  dbr:El_Deafo dbo:author dbr:Cecelia_Bell .
  dbr:Cecelia_Bell foaf:birthPlace ?authorBirthPlace .
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
68,22,train,"Give me the father of the parent of Dorothea of Denmark, Electress Palatine and child of the commander, that is a royalty, in Siege of Padua.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v0 . ?v3 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v3 . ?v0 <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?father WHERE {
  # Step 1: Identify Dorothea of Denmark
  ?dorothea dbo:spouse ?parent .
  ?dorothea rdfs:label ""Dorothea of Denmark, Electress Palatine""@en .

  # Step 2: Find her parent (father)
  ?parent dbo:child ?dorothea ;
          rdf:type dbo:Person ;
          dbo:spouse ?mother .
  
  # Step 3: Identify the commander in Siege of Padua
  ?commander dbo:occupation ""Commander""@en ;
             dbo:event ?siegePadua .
  ?siegePadua rdfs:label ""Siege of Padua""@en .

  # Step 4: Find the child who is royalty
  ?commander dbo:child ?royalChild .
  ?royalChild rdf:type dbo:RoyalFamily ;
              dbo:spouse ?parent .

  # Step 5: Determine the father of this royal child's parent
  ?parent dbo:father ?father .
}
```",4,5,5,2,2,2,3,28,0,0,1,0,0.0,0
782,12,train,Give me the associated musical artist of Nick Curran and band of Kim Wilson.,SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . },"```sparql
SELECT ?nickCurranArtist ?kimWilsonBand WHERE {
  ?curran a dbo:Musician ;
          foaf:name ""Nick Curran""@en .
  OPTIONAL { ?curran dbo:associatedBand ?nickCurranArtist . }
  
  ?wilson a dbo:Musician ;
          foaf:name ""Kim Wilson""@en .
  OPTIONAL { ?wilson dbo:associatedBand ?kimWilsonBand . }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
414,11,train,"Give me the show of the host, that is an educational institution, of Nobel Prize in Physics and award of Max Born.",SELECT ?result WHERE { <http://dbpedia.org/resource/Max_Born> <http://dbpedia.org/property/awards> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. ?result <http://dbpedia.org/ontology/presenter> ?v2 . <http://dbpedia.org/resource/Nobel_Prize_in_Physics> <http://dbpedia.org/ontology/presenter> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  ?host dbo:affiliation dbr:University_of_Manchester .
  ?host dbo:occupation dbr:Science_communicator .
  ?show dbo:host ?host .
  FILTER EXISTS { 
    ?nobelPrize dbo:category dbr:Nobel_Prize_in_Physics ;
                dbo:laureate dbr:Max_Born .
  }
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
263,4,train,Give me the person born as Hon. Mary Frances Bowes-Lyon.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person WHERE {
  ?person rdfs:label ""Hon. Mary Frances Bowes-Lyon""@en .
  OPTIONAL { ?person dbo:birthName ""Hon. Mary Frances Bowes-Lyon"" . }
  UNION
  ?person rdfs:label ""Queen Elizabeth The Queen Mother""@en .
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
871,36,train,"Give me the father of the child, that is a politician, of the alumnus of Eton College and parent of Victor Stanley (Royal Navy officer).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . ?v1 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> ?v3 . ?v3 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
SELECT ?politicianFather WHERE {
  # Step 1: Find an alumnus of Eton College
  ?alumnus dbo:almaMater dbr:Eton_College .
  
  # Step 2: Identify a child who is a politician
  ?child dbo:parent ?alumnus ;
         rdf:type dbo:Politician .
  
  # Step 3: Find Victor Stanley's parent
  ?victorParent dbo:child dbr:Victor_Stanley_(Royal_Navy_officer) .

  # Step 4: Match the politician with Victor Stanley's parent
  FILTER (?child = ?victorParent)
  
  # Step 5: Find the father of this politician
  ?politicianFather dbo:spouse ?politicianMother ;
                   dbo:child ?child .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
782,14,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?associatedArtist WHERE {
  ?person rdfs:label ""Nick Carter""@en .
  ?person dbo:birthName ?birthName .
  FILTER(?birthName = ""Nicholas Michael Curran"") .

  OPTIONAL { 
    ?person dbo:musicBrainzArtistId ?artistId .
    ?musicArtist dbo:musicBrainzArtistId ?artistId .
    ?musicArtist rdfs:label ?associatedArtist .
    FILTER(langMatches(lang(?associatedArtist), ""EN""))
  }
}
```",2,3,3,2,1,3,3,71,0,0,3,0,0.0,0
398,16,train,Give me the figure known as the nickname of Russia national football team and player in the writer of The First Glove.,SELECT ?result WHERE { <http://dbpedia.org/resource/Russia_national_football_team> <http://dbpedia.org/property/nickname> ?v2 . <http://dbpedia.org/resource/The_First_Glove> <http://dbpedia.org/property/writer> ?v3 . ?v3 <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/property/nickname> ?v2 . },"```sparql
# Query to find the nickname of the Russia national football team
SELECT ?nickname WHERE {
  dbpedia:Russia_national_football_team rdfs:label ?teamLabel .
  FILTER (lang(?teamLabel) = 'en')
  OPTIONAL { 
    dbpedia:Russia_national_football_team foaf:nick ?nickname .
    FILTER(lang(?nickname) = 'en') 
  }
}

UNION

# Query to find a player who wrote ""The First Glove""
SELECT DISTINCT ?player WHERE {
  ?book dbo:author ?person .
  ?book rdfs:label ?bookLabel .
  FILTER (lang(?bookLabel) = 'en' && ?bookLabel = ""The First Glove"")
  
  OPTIONAL { 
    ?person rdf:type dbpedia:Footballer .
    ?person foaf:name ?playerName .
    FILTER(lang(?playerName) = 'en')
  }
}
```",4,4,5,2,2,3,2,20,0,0,1,0,0.0,0
203,11,train,"Give me the commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?event ?commander WHERE {
  # Identify the 30th (Cambridgeshire) Regiment of Foot
  VALUES ?regiment { dbr:30th_(Cambridgeshire)_Regiment_of_Foot }

  # Find military conflicts or events associated with this regiment
  ?event dbo:participatingUnit ?regiment .
  
  # Retrieve the commander(s) involved in those conflicts or events
  OPTIONAL {
    ?event dbo:commander ?commander .
  }
}
```",2,4,3,2,1,3,3,71,0,0,113,0,0.0,0
19,5,train,Give me the professional in the birth name of John Boxer.,SELECT ?result WHERE { <http://dbpedia.org/resource/John_Boxer> <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?profession WHERE {
  ?person a dbo:Person ;
          foaf:name ""John Boxer""@en .
  OPTIONAL { ?person dbo:occupation ?profession . }
}
```",2,2,3,2,1,2,2,9,0,3,39640,0.0,0.0,0
769,3,train,"Give me the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on 1981-12-01.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/birthDate> ""1981-12-01""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person a dbo:Person ;
          dbo:birthDate ""1981-12-01""^^xsd:date ;
          dbo:occupation ?occupation .
  
  FILTER (
    EXISTS { ?person dbo:occupation dbr:Athlete . }
    && EXISTS { ?person dbo:occupation dbr:Soccer_player . }
    && EXISTS { ?person dbo:occupation dbr:Sports_manager . }
    && EXISTS { ?person dbo:occupation dbr:Soccer_manager . }
  )
}
```",1,5,2,1,1,3,2,20,0,0,1,0,0.0,0
782,53,train,"Give me the band of Kim Wilson and reference to the real name of the band of Kim Wilson and associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v3 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v3 <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . }","```sparql
# Query for Kim Wilson's Band
SELECT ?band WHERE {
  ?person dbo:name ""Kim Wilson""@en .
  ?person dbo:associatedBand ?band .
}

# Query for Nicholas Michael Curran's Real Name and Associated Musical Artist
SELECT ?realName ?artist WHERE {
  ?person dbo:birthName ""Nicholas Michael Curran""@en ;
          dbo:alias ""Nick Curran""@en ;
          dbo:associatedMusicalArtist ?artist .
  OPTIONAL { ?person rdfs:label ?realName . FILTER(LANG(?realName) = 'en') }
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
585,11,train,"Give me the child of Linda Miller (actress) and native of the award, that is American and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v2 . <http://dbpedia.org/resource/Linda_Miller_(actress)> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?settlement WHERE {
  # Find Linda Miller (actress)
  ?linda a dbo:Actor ;
         foaf:name ""Linda Miller"" .

  # Find her child
  ?linda dbo:child ?child .

  # Check if the child is American and associated with any settlement
  ?child dbo:nationality dbr:United_States ;
         dbo:residence ?settlement .

  # Attempt to find a connection to Coro de la Pontificia Universidad Católica de Puerto Rico
  OPTIONAL {
    ?settlement rdfs:label ?label .
    FILTER(CONTAINS(LCASE(?label), ""coro de la pontificia universidad católica de puerto rico""))
  }
}
```",3,5,4,2,2,3,2,20,0,0,1,0,0.0,0
119,2,train,Give me the tenant of Santiago de Compostela.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . },"```sparql
SELECT ?tenant WHERE {
  wd:Q1206 wdt:P137 ?tenant .
}
```",1,1,2,1,1,3,3,71,0,0,27,0,0.0,0
361,7,train,Give me the actor of Rustlers' Rhapsody and professional in Actor.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . }","```sparql
SELECT ?actor WHERE {
  ?film dcterms:title ""Rustlers' Rhapsody""@en .
  ?film dbo:starring ?actor .
  ?actor dbo:occupation dbp:Actor .
}
```",2,2,3,1,2,2,3,28,0,0,4,0,0.0,0
782,4,train,Give me the real name of The Fabulous Thunderbirds.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?realName WHERE {
  ?band foaf:name ""The Fabulous Thunderbirds""@en .
  OPTIONAL { ?band dbo:officialName ?realName . }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
39,15,train,Give me the profession of the producer of Coke Studio Philippines.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/occupation> ?result . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producerName ?profession WHERE {
  ?show dbo:productionCompany dbr:Coke_Studio_Philippines .
  ?show dbo:producer ?producer .
  ?producer foaf:name ?producerName .
  OPTIONAL { ?producer dbo:occupation ?profession . }
}
```",2,2,3,2,1,3,3,71,0,0,12,0,0.0,0
531,61,train,"Give me the office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/leader> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/commander> ?v5 . ?v5 <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v3 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
# Query for Manuel Pinto da Costa's office in a military conflict or societal event
SELECT ?office WHERE {
  ?person foaf:name ""Manuel Pinto da Costa""@en .
  ?person dbo:positionHeld ?position .
  ?position dbo:office ?office .
  OPTIONAL { ?event dbo:agent ?person . 
             ?event rdf:type ?eventType .
             FILTER ((
               ?eventType = dbpedia:War OR
               ?eventType = dbpedia:SocietalEvent
             )) }
}
```

```sparql
# Query for the leader of the political party associated with Miguel Maura
SELECT ?leader WHERE {
  ?person foaf:name ""Miguel Maura""@en .
  ?person dbo:memberOfParty ?party .
  ?party dbo:leader ?leader .
}
```",6,12,7,3,2,3,3,71,0,0,1,0,0.0,0
816,49,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of the child of the spouse of Mariclare Costello.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?v0 <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
SELECT DISTINCT ?actor WHERE {
  # Step 1: Find Mariclare Costello's spouse
  dbp:MariclareCostello dbo:spouse ?spouse .

  # Step 2: Find the child of Mariclare Costello's spouse
  ?child dbo:parent ?spouse .
  
  # Step 3: Determine the other parent (assuming a typical family structure)
  ?child dbo:parent ?otherParent .

  # Step 4: Identify works involving Herschel Bernardi and this other parent
  ?work dbo:starringHerschelBernardi true ;
        dbo:starring ?otherParent .
  
  # Step 5: Find the actor of such a movie
  ?work dbo:actor ?actor .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
756,42,train,"Give me the native of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v2 . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager ?team ?nativeCountry WHERE {
  # Find VfL Bochum's manager in the 2007-08 season
  ?bochumSeason dbo:sportTeam dbr:VfL_Bochum ;
                dbo:season ""2007–08""^^xsd:string .
  
  ?bochumSeason dbo:manager ?manager .

  # Find teams managed by Thomas Letsch
  ?letschManagerSeason dbo:manager dbr:Thomas_Letsch ;
                       dbo:sportTeam ?team .

  # Check if the manager is native to West Germany
  OPTIONAL { ?manager dbp:nationality dbr:West_Germany . }

  # Ensure entities are sports clubs and organizations
  FILTER EXISTS { ?bochumSeason a dbo:SoccerClubSeason }
  FILTER EXISTS { ?letschManagerSeason a dbo:SoccerClubSeason }
}
```",5,11,6,2,3,3,3,71,0,0,1,0,0.0,0
737,8,train,"Give me the child, that is a royalty, of Archduke Charles Louis of Austria.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child WHERE {
  ?person rdfs:label ""Archduke Charles Louis of Austria""@en .
  ?person dbo:child ?child .

  FILTER EXISTS { 
    ?child a ?royaltyType .
    VALUES ?royaltyType { 
      dbo:Monarch 
      dbo:RoyalFamilyMember
    }
  }

  # Optional: Filter out non-person entities if needed
  OPTIONAL { ?child rdf:type dbo:Person . }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
737,55,train,"Give me the predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of the child of Duke Philipp of Württemberg and child of the child, that is a royalty, of Archduke Charles Louis of Austria.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v5 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?predecessor WHERE {
  # Find Philipp Albrecht's child
  ?philippAlbrechtChild dbo:childOf db:Philipp_Albrecht_Duke_of_Württemberg .
  
  # Find the grandchild of Philipp Albrecht
  ?grandchild1 dbo:childOf ?philippAlbrechtChild .

  # Find Duke Philipp's child
  ?dukePhilippChild dbo:childOf db:Duke_Philipp_of_Württemberg .

  # Find the grandchild of Duke Philipp
  ?grandchild2 dbo:childOf ?dukePhilippChild .

  # Find Archduke Charles Louis's great-grandchild who is a royalty
  ?greatGrandchild dbo:childOf ?grandchild2 .
  ?greatGrandchild dbo:parentOf ?royalty .
  
  # Ensure the great-grandchild is indeed a royalty
  ?royalty rdf:type dbp:Royal .

  # Find the predecessor of this royalty (i.e., their parent)
  ?predecessor dbo:parentOf ?royalty .
}
```",6,7,7,2,3,3,3,71,0,0,1,0,0.0,0
492,3,train,Give me the actor of The Sky Ranger (1928 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film a dbo:Film .
  ?film rdfs:label ""The Sky Ranger""@en .
  FILTER (CONTAINS(LANG(?film), ""en""))
  ?film dbo:starring ?actor .
}
```",1,1,2,1,1,2,3,28,0,0,3,0,0.0,0
361,15,train,Give me the actor of Rustlers' Rhapsody and professional in the profession of Frédéric Bouraly.,SELECT ?result WHERE { <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
SELECT ?actor ?profession WHERE {
  # Find the actor from ""Rustlers' Rhapsody""
  ?film dbp:title ""Rustlers' Rhapsody""@en .
  ?film dbo:starring ?actor .

  # Find Frédéric Bouraly's profession
  ?person foaf:name ""Frédéric Bouraly""@en .
  ?person dbo:occupation ?profession .

  # Check if the actor from the film is the same person as Frédéric Bouraly
  FILTER (?actor = ?person)
}
```",3,3,4,2,2,2,3,28,0,0,4,0,0.0,0
816,13,train,Give me the parent of the professional in Photographer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parentClass WHERE {
  ?photographerClass rdfs:label ""Photographer""@en.
  ?photographerClass rdfs:subClassOf ?parentClass.
}
```",2,2,3,2,1,3,3,71,0,0,30,0,0.0,0
628,5,train,"Give me the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist ?name WHERE {
  ?artist a dbo:MusicalArtist .
  ?artist dbo:birthPlace dbr:Florida .
  OPTIONAL { ?artist foaf:name ?name . }
}
ORDER BY ?name
LIMIT 10
```",1,2,2,1,1,3,3,71,10,10,87,0.5,0.10309278350515463,0.17094017094017094
159,51,train,"Give me the reference to the writer of Always the Love Songs and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v4 . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . },"```sparql
# Query to find the writer of ""Always the Love Songs""
SELECT ?writer WHERE {
  ?tvshow dcterms:title ""Always the Love Songs""@en .
  ?tvshow dbo:creator ?writer .
}

UNION

# Query to find the commander in the Battle of Vienna
SELECT ?commander WHERE {
  ?battle dbp:name ""Battle of Vienna (1683)""@en ;
          dbo:commander ?commander .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
513,8,train,Give me the residence of the leader of Ulster Unionist Party.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/residence> ?result . <http://dbpedia.org/resource/Ulster_Unionist_Party> <http://dbpedia.org/ontology/leader> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?leader ?residence WHERE {
  ?party a dbo:PoliticalParty ;
         rdfs:label ""Ulster Unionist Party""@en .
  
  ?leader dbo:leaderOf ?party ;
          foaf:name ?name .

  OPTIONAL { 
    ?leader dbo:residence ?residence .
  }

  FILTER (lang(?name) = 'en')
}
```",2,2,3,2,1,3,2,20,0,0,2,0,0.0,0
347,59,train,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and father of the child of the parent of Archduke Charles Joseph of Austria.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v5 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?war dbo:participatingMilitaryForce ?militaryForce .
  ?militaryForce dbo:commander ?commander .
  
  FILTER(?war = dbr:Algerian_War)
  
  ?commander dbo:birthName ""Charles de Gaulle""^^xsd:string .
  
  OPTIONAL {
    ?societalEvent dbo:relatedPerson ?commander .
    ?event dbo:relatedPerson ?commander .
    ?tvShow dbo:subject ?commander .
  }
}
```",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
39,36,train,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in Singer.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?band WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Bob Thompson"" ;
          dbo:birthName ?birthName .
  
  FILTER EXISTS { ?person dbo:profession dbr:Singer . }
  
  OPTIONAL { ?person dbo:memberOfBand ?band . }

  FILTER (?birthName != """")
}
```",4,5,5,3,2,3,3,71,0,0,3,0,0.0,0
943,38,train,"Give me the father of the father, that is a royalty and an office holder, of Na'od and reference to the alter ego of The Shadow.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> ?v3 . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?grandfather ?alterEgo WHERE {
  # Find Na'od
  VALUES ?naod { dbr:Na'od_of_Ethiopia }
  
  # Find Dawit II, the father of Na'od
  ?dawit dbo:childOf ?naod .
  ?dawit a dbo:Monarch ;
         rdfs:label ""Dawit II""@en .

  # Find Lebna Dengel, the father of Dawit II
  ?lebna_dengel dbo:childOf ?dawit .
  ?lebna_dengel a dbo:Monarch ;
                rdfs:label ""Lebna Dengel""@en .

  BIND(?lebna_dengel AS ?grandfather)

  # Find Lamont Cranston, the alter ego of The Shadow
  VALUES ?shadow { dbr:The_Shadow_(character) }
  ?shadow dbo:alterEgo ?alterEgo .
  ?alterEgo rdfs:label ""Lamont Cranston""@en .
}
```",4,6,5,2,2,3,3,71,0,0,1,0,0.0,0
203,5,train,Who is the reference to William Bayne?,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name ?birthDate ?deathDate ?occupation WHERE {
  ?person a foaf:Person ;
          foaf:name ?name .
  OPTIONAL { ?person dbo:birthDate ?birthDate . }
  OPTIONAL { ?person dbo:deathDate ?deathDate . }
  OPTIONAL { ?person dbo:occupation ?occupation . }
  FILTER regex(?name, ""William Bayne"", ""i"")
}
LIMIT 10
```",1,1,2,1,1,3,3,71,2,3,0,0.4,1.0,0.5714285714285715
361,23,train,"Give me the professional in the profession of Frédéric Bouraly and actor of the album, that is a film and a work, of Lasso the Moon.",SELECT ?result WHERE { <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v2 . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find Frédéric Bouraly's profession
  dbr:Frédéric_Bouraly dbo:profession dbr:Actor .

  # Find an actor associated with an album that includes ""Lasso the Moon"" as both a film and a work
  ?album dbo:title ""Lasso the Moon""@en .
  ?album dbo:work dbr:Lasso_the_Moon .
  ?album dbo:film dbr:Lasso_the_Moon .
  ?actor dbo:profession dbr:Actor .
  ?actor dbo:album ?album .
}
```",4,6,5,2,2,2,3,28,0,0,4,0,0.0,0
58,4,train,Give me the award of Ian Gregson (poet).,SELECT ?result WHERE { <http://dbpedia.org/resource/Ian_Gregson_(poet)> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?person a dbo:Writer ;
          foaf:name ""Ian Gregson""@en .
  OPTIONAL { ?person dbo:award ?award . }
}
```",1,1,2,1,1,3,2,20,0,1,2,0.0,0.0,0
295,11,train,"Give me the native of Birmingham and writer of the work, that is a musical work, of Apache Indian.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/writer> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Birmingham> . ?v2 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Apache_Indian> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativeCity ?musicalWork WHERE {
  VALUES ?person { dbr:Apache_Indian }
  
  ?person dbo:nativePlace ?nativeCity .
  FILTER (str(?nativeCity) = ""Birmingham"")

  ?person dbo:work ?musicalWork .
  ?musicalWork a dbo:MusicalWork .
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
557,23,train,"Give me the professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v2 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v2 <http://dbpedia.org/property/alterEgo> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo WHERE {
  ?character dbo:alias ""The Question""@en .
  ?character dbo:alterEgo ?alterEgo .
}
```",3,4,4,3,1,3,3,71,0,0,39640,0,0.0,0
103,7,train,"Give me the series, that is a comics character, of The Shadow (video game).",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?comicSeries WHERE {
  dbr:The_Shadow_(video_game) dbo:basedOn ?comicSeries .
  FILTER (strstarts(str(?comicSeries), ""Comic_Series""))
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
468,9,train,"Give me the real name of the child, that is a royalty, of Alfonso IV of Aragon.",SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childName WHERE {
  # Identify Alfonso IV of Aragon
  VALUES ?alfonsoIV { dbr:Alfonso_IV_of_Aragon }

  # Find his children
  ?alfonsoIV dbo:child ?child .

  # Check if the child has a royal title
  OPTIONAL { ?child dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Princess"", ""i"") }

  # Return the name of the child with a royal title
  ?child rdfs:label ?childName .
  
  FILTER (langMatches(lang(?childName), ""en""))
}
```",2,3,3,2,1,3,2,20,0,3,3,0.0,0.0,0
80,46,train,Give me the actor of the album of What You Know (T.I. song) and actor of the movie with the author of Smartbomb (book).,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v4 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v4 . ?v1 <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v2 . },"```sparql
# Step 1: Find the album containing ""What You Know"" by T.I.
SELECT ?album WHERE {
  ?song dcterms:title ""What You Know""@en .
  ?song dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> ;
        dbo:releaseAlbum ?album .
}

# Step 2: Find an actor (featured artist) from that album
SELECT DISTINCT ?actor WHERE {
  ?album dbo:artist ?actor .
  FILTER(?actor != <http://dbpedia.org/resource/T.I._(rapper)>)
}

# Step 3: Find the author of ""Smartbomb""
SELECT ?author WHERE {
  ?book dcterms:title ""Smartbomb""@en ;
        dbo:author ?author .
}

# Step 4: Find a movie in which this author has acted
SELECT DISTINCT ?movie WHERE {
  ?author dbo:actorIn ?movie .
}

# Step 5: Find another actor from that movie
SELECT DISTINCT ?otherActor WHERE {
  ?movie dbo:starring ?otherActor .
  FILTER(?otherActor != ?author)
}
```",5,5,6,3,2,3,3,71,0,0,10,0,0.0,0
353,32,train,"Give me the father of the child, that is a royalty, of William I of Sicily and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v3 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?father WHERE {
  # Step 1: Identify William I of Sicily's children
  ?williamI dbo:child ?child .
  FILTER(?williamI = dbpedia:William_I_of_Sicily) .

  # Step 2: Determine which child is royalty
  ?child dbo:royaltyTitle ?title .
  
  # Step 3: Find Roger III, Duke of Apulia's parent
  ?rogerIII dbo:parent ?parent .
  FILTER(?rogerIII = dbpedia:Roger_III,_Duke_of_Apulia) .

  # Step 4: Identify the common child
  ?parent dbo:child ?commonChild .
  
  # Ensure the common child is also a child of William I and has a royalty title
  VALUES ?commonChild { ?child } .

  # Step 5: Determine the father of this child
  ?commonChild dbo:father ?father .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
941,8,train,Give me the spouse of the spouse of Duchess Luise of Brunswick-Wolfenbüttel.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Duchess_Luise_of_Brunswick-Wolfenbüttel> . },"```sparql
SELECT ?spouseOfSpouse WHERE {
  ?luise dbo:spouse dbr:Duchess_Luise_of_Brunswick-Wolfenbüttel .
  ?luise dbp:spouse dbr:Charles_I,_Duke_of_Brunswick-Wolfenbüttle .

  OPTIONAL { 
    ?charlesI dbo:spouse ?secondSpouse .
    FILTER(?charlesI = dbr:Charles_I,_Duke_of_Brunswick-Wolfenbüttle)
  }

  ?secondSpouse dbp:name ""Princess Friederike of Hesse-Darmstadt""@en .
}
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
103,46,train,"Give me the professional in the profession of Shatrughan Sinha and actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v4 . ?v1 <http://dbpedia.org/property/starring> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/property/starring> ?result . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v4 . ?v2 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?actorName ?tvShow WHERE {
  # Shatrughan Sinha's profession
  dbr:Shatrughan_Sinha dbo:occupation ?profession .
  
  # John Matshikiza (born Richard Grant Esterhuysen)
  dbr:John_Matshikiza dbo:birthName ""Richard Grant Esterhuysen""@en ;
                     dbo:occupation ?actorOccupation .

  FILTER(?actorOccupation = <http://dbpedia.org/resource/Actor>)

  # Find a common television show
  OPTIONAL {
    ?tvShow dbo:starring dbr:Shatrughan_Sinha .
    ?tvShow dbo:starring dbr:John_Matshikiza .
  }
  
  BIND(dbr:Shatrughan_Sinha AS ?actorName)
}
```",5,6,6,3,2,3,3,71,0,0,28,0,0.0,0
39,8,train,"Who is the person born, that is a musical artist, as Robert Lamar Thompson?","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person WHERE {
  ?person foaf:givenName ""Robert"" .
  ?person foaf:familyName ""Thompson"" .
  ?person dbo:birthName ""Robert Lamar Thompson"" .
  ?person a dbo:MusicalArtist .
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
203,9,train,Give me the military force of Battle of Fort Royal and commander in French campaign in Egypt and Syria.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?militaryForce ?commander WHERE {
  # Battle of Fort Royal
  VALUES ?battleEvent { 
    dbr:Battle_of_Fort_Royal_(1746) 
  }
  
  ?battleEvent dbo:militaryConflicts ?conflict .
  ?conflict dbo:participatingMilitaryUnit ?militaryForce ;
            dbo:commander ?commander .

  UNION

  # French Campaign in Egypt and Syria
  VALUES ?campaignEvent { 
    dbr:French_campaign_in_Egypt_and_Syria 
  }
  
  ?campaignEvent dbo:militaryConflicts ?conflict .
  ?conflict dbo:participatingMilitaryUnit ?militaryForce ;
            dbo:commander ?commander .

}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
816,43,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of the professional in the profession of Eugène Cattin and parent of Doon Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/ontology/child> ?v4 . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . ?v4 <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?actor WHERE {
  ?film dbo:title ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
  ?film dbo:starring ?actor .

  OPTIONAL { 
    ?actor dbo:spouse|dbo:child ?eugeneCattin .
    ?eugeneCattin dbp:profession ""Professional skier""@en .
  }

  OPTIONAL {
    ?actor dbo:spouse|dbo:child ?doonArbus .
    FILTER (str(?doonArbus) = str(dbpedia:Doon_Arbus))
  }
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
159,15,train,"Give me the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commander WHERE {
  # Find Michał Kazimierz Pac's military involvement
  dbr:Micha%C5%82_Kazimierz_Pac dbo:militaryConflict ?force .
  
  # Identify commanders in those forces/events
  ?force dbo:commander ?commander .

  # Ensure the commander is a politician and an office holder
  ?commander rdf:type dbo:Politician ;
             dbo:officeHolder ?office .
}
```",2,6,3,2,1,3,3,71,0,0,2,0,0.0,0
905,49,train,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and spouse of the father of Philip I, Prince of Taranto.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v4 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v4 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfChild WHERE {
  # Step 1: Find Béla IV of Hungary (predecessor of Stephen V)
  dbr:Béla_IV_of_Hungary dbo:successor dbr:Stephen_V_of_Hungary .
  
  # Step 2: Find Charles II of Naples and his spouse Maria of Hungary
  dbr:Charles_II_of_Naples dbo:spouse dbr:Maria_of_Hungary .

  # Step 3: Find Mary of Hungary (child of Béla IV) and her child Casimir IV Jagiellon
  ?mary dbo:parent dbr:Béla_IV_of_Hungary .
  ?mary rdfs:label ""Mary of Hungary""@en .
  
  ?casimir dbo:parent ?mary .
  ?casimir rdfs:label ""Casimir IV Jagiellon""@en .

  # Step 4: Ensure Casimir IV is royalty
  ?casimir a dbo:Monarch .
  
  BIND(?casimir AS ?childOfChild)
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
472,7,train,Give me the territory administered from Copenhagen and administration of Olaf I of Denmark.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . },"```sparql
# Query for territory administered from Copenhagen
SELECT DISTINCT ?territory WHERE {
  ?copenhagen dbo:capital ""Copenhagen""@en .
  ?country dbr:Copenhagen ?copenhagen ;
           dbo:administrativeTerritory ?territory .
}

UNION

# Query for administration of Olaf I of Denmark
SELECT DISTINCT ?administeredTerritory WHERE {
  ?olaf rdf:type dbo:Monarch ;
        foaf:name ""Olaf I of Denmark""@en ;
        dbo:ruledCountry ?country .
  ?country dbo:administrativeTerritory ?administeredTerritory .
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
119,12,train,Give me the tenant of Spain and tenant of Santiago de Compostela.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . },"```sparql
# Query for the tenant (monarch) of Spain
SELECT ?person WHERE {
  ?country dcterms:isPartOf dbc:Spain .
  ?country dbo:monarch ?person .
  FILTER EXISTS { ?person dbo:officialName ?name . }
}
```

```sparql
# Query for the mayor of Santiago de Compostela
SELECT ?mayor WHERE {
  ?city rdfs:label ""Santiago de Compostela""@en .
  ?city dbo:mayor ?mayor .
  FILTER EXISTS { ?mayor dbo:officialName ?name . }
}
```",2,2,3,1,2,3,3,71,0,0,4,0,0.0,0
386,10,train,Give me the war of the awardee of 25.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . ?v0 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
SELECT ?awardee ?awardYear ?war WHERE {
  ?award dbr:Nobel_Prize_in_Peace .
  ?award dbo:year ?awardYear .
  ?award dbo:laureate ?person .
  ?person rdfs:label ?awardee .
  FILTER (LANG(?awardee) = ""en"" && ?awardYear = ""1925"") .
  
  OPTIONAL {
    ?person dbo:wikiPageWikiLink ?war .
    ?war rdfs:label ?warLabel .
    FILTER (LANG(?warLabel) = ""en"")
  }
}
```",2,2,3,2,1,2,3,28,0,0,182,0,0.0,0
89,51,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v4 . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v2 <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?predecessor ?spouse 
WHERE {
  # Step 1: Identify Saw Min Phyu's spouse
  ?sawMinPhyu dbo:spouse ?spouseSawMinPhyu .
  
  # Step 2: Find the child of Saw Min Phyu's spouse
  ?child dbp:parent ?spouseSawMinPhyu .
  
  # Step 3: Determine if the child is royalty and find their predecessor
  OPTIONAL {
    ?child dbo:royalTitle ?title .
    ?predecessor dbo:royalSuccession ?child .
  }
  
  # Step 4: Identify Myat Hpone Pyo's father
  ?myatHponePyo dbp:parent ?fatherMyatHponePyo .
  
  # Step 5: Find the spouse of Myat Hpone Pyo's father if they are royalty
  OPTIONAL {
    ?fatherMyatHponePyo dbo:royalTitle ?titleFather .
    ?spouseFather dbp:spouse ?fatherMyatHponePyo .
  }
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
347,40,train,"Give me the father of Eleonore of Austria, Queen of Poland and child of Ferdinand II, Holy Roman Emperor and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  ?eleonore dbo:parent dbr:Ferdinand_II,_Holy_Roman_Emperor .
  ?eleonore rdfs:label ""Eleonore of Austria, Queen of Poland""@en .
  ?father dbo:child ?eleonore .
  FILTER (lang(?eleonore) = 'en')
}
```",5,8,6,3,3,3,3,71,0,0,1,0,0.0,0
668,43,train,"Give me the professional in the profession of the writer, that is a musical artist, of The Live Anthology and associated musical artist of $pacely and person born as Darryl Paa Kwesi Bannerman-Martin.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . ?v0 <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?associatedArtist WHERE {
  # Identify Stormzy by his birth name and alias
  VALUES ?stormzy { 
    dbr:Stormzy 
    dbr:Darryl_Paa_Kwesi_Bannerman-Martin 
    dbr:$pacely 
  }
  
  # Find associated musical artists with Stormzy
  ?stormzy dbo:associatedMusicalArtist ?associatedArtist .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
89,54,train,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and predecessor of Myat Hpone Pyo and child of the parent of Min Hla Htut of Pyakaung.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v5 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v0 <http://dbpedia.org/property/father> ?v5 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  # Step 1: Identify Saw Shwe Khet's royal child
  ?child dbo:parent dbr:Saw_Shwe_Khet .
  ?child a dbo:RoyalFamily .

  # Step 2: Find the predecessor of Myat Hpone Pyo
  ?predecessor dbo:succeededBy dbr:Myat_Hpone_Pyo .
  
  # Step 3: Determine Min Hla Htut's parent
  ?parent dbo:child dbr:Min_Hla_Htut .
  ?parent dbo:birthPlace dbr:Pyakaung .

  # Combine relationships
  ?father dbo:spouse ?spouse .
  ?father a dbo:RoyalFamily .
  ?father dbo:parent ?child .
  ?father dbo:succeededBy ?predecessor .
  ?father dbo:parent ?parent .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
585,0,train,Give me the native of New York (state).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_(state)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:birthPlace dbr:New_York_(state) .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,1,2,1,1,3,2,20,0,0,7189,0,0.0,0
943,29,train,Give me the father of Baeda Maryam I and reference to the alter ego of The Shadow and child of Dawit I.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . },"```sparql
# Query for the father of Baeda Maryam I
SELECT ?father WHERE {
  wd:Q1234567 wdt:P22 ?father .
}

# Query for the child of Dawit I
SELECT ?child WHERE {
  wd:Q2345678 wdt:P40 ?child .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia identifier for Baeda Maryam I and `wd:Q2345678` with the identifier for Dawit I. These identifiers need to be looked up in DBpedia.",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
347,43,train,"Give me the father of the child of the parent of Archduke Charles Joseph of Austria and commander in Thirty Years' War and child of Ferdinand II, Holy Roman Emperor.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v4 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . }","```sparql
SELECT DISTINCT ?father WHERE {
  # Step 1: Find Archduke Charles Joseph of Austria
  ?charlesJoseph dbr:Archduke_Charles_Joseph_of_Austria .
  
  # Step 2: Identify his parent (likely father)
  ?parent dbo:child ?charlesJoseph .
  
  # Step 3: Determine the children of this parent
  ?parentChild dbo:child ?potentialCommander .
  
  # Step 4: Filter for involvement in the Thirty Years' War and being a child of Ferdinand II
  ?potentialCommander dbo:commanderInWar dbr:Thirty_Years'_War ;
                     dbo:childOf dbr:Ferdinand_II,_Holy_Roman_Emperor .
  
  # Step 5: Identify any children of this commander
  ?potentialCommanderChild dbo:child ?childOfCommander .
  
  # Find the father of this child
  ?father dbo:child ?childOfCommander .
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
345,4,train,Give me the reference to Mitaka and region of Japan Standard Time.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . ?result <http://xmlns.com/foaf/0.1/name> ""Mitaka""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?mitakaURL ?region WHERE {
  # Retrieve the URL for Mitaka
  ?mitaka a dbo:City ;
          rdfs:label ""Mitaka""@en .
  
  OPTIONAL { 
    ?mitaka dbo:wikiPageWikiLink ?mitakaURL .
  }
  
  # Find regions associated with Japan Standard Time
  ?region dbp:timeZone ""Japan Standard Time"" ;
          rdfs:label ?regionLabel .
}
```",2,2,3,1,2,2,2,9,0,0,1,0,0.0,0
297,7,train,"Give me the institution in Georgia (U.S. state) and entity in the birth place, that is a country, of Little Hat Jones.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Georgia_(U.S._state)> . <http://dbpedia.org/resource/Little_Hat_Jones> <http://dbpedia.org/ontology/birthPlace> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?institution ?birthPlaceCountry WHERE {
  # Find Little Hat Jones and his associated institution in Georgia
  ?person a dbo:Person ;
          foaf:name ""Little Hat Jones"" ;
          dbo:almaMater ?institution .
  
  FILTER regex(str(?institution), ""Georgia"", ""i"")

  # Get the birthplace of Little Hat Jones
  ?person dbo:birthPlace ?birthPlace .

  # Find the country corresponding to the birthplace
  ?birthPlace dbp:country ?birthPlaceCountry .
}
```",3,4,4,2,2,2,2,9,0,0,346,0,0.0,0
871,18,train,"Give me the father of Arthur Stanley (politician) and parent of Edward Stanley, 17th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . }","```sparql
SELECT ?person WHERE {
  ?person dbo:child ?arthurStanley .
  ?arthurStanley foaf:name ""Arthur Stanley"" .
  ?person dbo:child ?edwardStanley17thEarlOfDerby .
  ?edwardStanley17thEarlOfDerby foaf:name ""Edward Stanley, 17th Earl of Derby"" .
  ?person dbo:child ?victorStanleyRoyalNavy .
  ?victorStanleyRoyalNavy foaf:name ""Victor Stanley (Royal Navy officer)"" .
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
687,1,train,Give me the player in Sergio Agüero.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?team WHERE {
  ?player a dbo:Footballer ;
          foaf:name ""Sergio Agüero""@en .
  OPTIONAL { ?player dbo:currentClub ?team . }
  OPTIONAL { ?player dbp:team ?team . }
}
```",1,1,2,1,1,3,3,71,0,0,7,0,0.0,0
345,1,train,Give me the region of Japan Standard Time.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?region WHERE {
  ?timeZone a dbo:TimeZone ;
            dbo:country dbr:Japan ;
            rdfs:label ""Japan Standard Time""@en .
  
  OPTIONAL { ?region dbo:timezone ?timeZone . }
}
```",1,1,2,1,1,2,2,9,0,0,2255,0,0.0,0
203,12,train,Give me the military force of Battle of Cape Finisterre (1805) and military force of Battle of Fort Royal.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . },"```sparql
# Query for Battle of Cape Finisterre (1805)
SELECT ?battle ?country WHERE {
  ?battle dcterms:subject dbc:Battles_of_the_Napoleonic_Wars ;
          dbp:date ""1805-07-22""^^xsd:date .
  ?battle dbp:combatant1 ?entity1 .
  ?entity1 dbo:country ?country .
  FILTER(?battle = <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)>)
}

UNION

SELECT ?battle ?country WHERE {
  ?battle dcterms:subject dbc:Battles_of_the_Napoleonic_Wars ;
          dbp:date ""1805-07-22""^^xsd:date .
  ?battle dbp:combatant2 ?entity2 .
  ?entity2 dbo:country ?country .
  FILTER(?battle = <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)>)
}

# Query for Battle of Fort Royal
SELECT ?battle ?country WHERE {
  ?battle dcterms:subject dbc:Battles_of_the_American_Revolutionary_War ;
          dbp:date ""1780-04-29""^^xsd:date .
  ?battle dbp:combatant1 ?entity1 .
  ?entity1 dbo:country ?country .
  FILTER(?battle = <http://dbpedia.org/resource/Battle_of_Fort_Royal_(1780)>)
}

UNION

SELECT ?battle ?country WHERE {
  ?battle dcterms:subject dbc:Battles_of_the_American_Revolutionary_War ;
          dbp:date ""1780-04-29""^^xsd:date .
  ?battle dbp:combatant2 ?entity2 .
  ?entity2 dbo:country ?country .
  FILTER(?battle = <http://dbpedia.org/resource/Battle_of_Fort_Royal_(1780)>)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
87,6,train,Give me the actor of Paradise (2013 film) and spouse of Janusz Kamiński.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Query to get the actor of Paradise (2013)
SELECT ?actor WHERE {
  ?film dcterms:title ""Paradise""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 2013) .
  ?film dbo:starring ?actor .
}

# Query to get the spouse of Janusz Kamiński
SELECT ?spouse WHERE {
  dbpedia:Janusz_Kamiński foaf:mbox ?email .
  ?person foaf:mbox ?email ;
          foaf:partner ?spouse .
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
37,6,train,"Give me the birthplace of the work, that is an artist and a musical artist, of Ethan Iverson.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Ethan_Iverson> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?birthPlace WHERE {
  ?person rdfs:label ""Ethan Iverson""@en .
  ?person dbo:works ?work .
  ?work a ?type1, ?type2 .
  FILTER(?type1 = dbo:MusicalArtist || ?type1 = dbo:Artist) .
  FILTER(?type2 = dbo:MusicalArtist || ?type2 = dbo:Artist) .
  OPTIONAL { ?work dbo:birthPlace ?birthPlace . }
}
```",2,4,3,2,1,2,2,9,0,0,1,0,0.0,0
375,8,train,Give me the entity in the birth place of Yamaza Enjirō.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/place> ?v1 . },"```sparql
SELECT ?birthPlaceEntity WHERE {
  ?person foaf:name ""Yamaza Enjirō""@ja .
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace rdfs:label ?birthPlaceEntity .
  FILTER(LANG(?birthPlaceEntity) = 'en')
}
```",2,2,3,2,1,2,3,28,0,0,104,0,0.0,0
89,21,train,Give me the child of the parent of Min Hla Htut of Pyakaung and predecessor of Myat Hpone Pyo.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?result <http://dbpedia.org/ontology/parent> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Find Min Hla Htut and his parent
  ?minHlaHtut a dbo:Person ;
              foaf:name ""Min Hla Htut""@en .
  
  ?parent dbo:child ?minHlaHtut .

  # Find Myat Hpone Pyo and his predecessor
  ?myatHponePyo a dbo:Person ;
                foaf:name ""Myat Hpone Pyo""@en .
  
  ?predecessor dbo:succeededBy ?myatHponePyo .

  # Check for common child between the parent of Min Hla Htut and the predecessor of Myat Hpone Pyo
  ?parent dbo:child ?child .
  ?predecessor dbo:child ?child .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
119,8,train,"Give me the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administration WHERE {
  ?person dbo:nationality dbr:Spain .
  ?person dbo:party dbr:Spanish_Socialist_Workers'_Party .
  ?person dbo:officeTitle dbr:Prime_Minister_of_Spain .
  ?person dbo:positionHeld ?administration .
}
```",1,2,2,1,1,3,3,71,0,0,320,0,0.0,0
633,14,train,"Give me the parent of the father of the child, that is a royalty, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> . ?v0 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/property/father> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT DISTINCT ?parentOfFather WHERE {
  # Step 1: Identify Francis I, Duke of Lorraine
  ?francisI dbr:François_Ier,_Duke_of_Lorraine .

  # Step 2: Find his children who are royalty
  ?child dbo:child ?francisI .
  ?child dbo:title ?title .
  
  FILTER regex(?title, ""Duke|Princess"", ""i"") # Assuming titles like Duke or Princess indicate royalty

  # Step 3: Confirm the father of each royal child is Francis I
  ?child dbo:parent ?father .
  FILTER (?father = ?francisI)

  # Step 4: Find the parent of Francis I
  ?francisI dbo:parent ?parentOfFather .
}
```",3,4,4,3,1,3,2,20,0,0,2,0,0.0,0
756,37,train,"Give me the native of the administration, that is a country, of the leader of West Germany and manager of 2020–21 SBV Vitesse season.",SELECT ?result WHERE { <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://dbpedia.org/property/leader> ?v0 . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
# Step 1: Find the manager of SBV Vitesse for the 2020–21 season.
SELECT ?manager WHERE {
  ?team dcterms:title ""SBV Vitesse""@en .
  ?team dbo:coach ?manager .
  ?season dbo:team ?team ;
          dbo:startDate ?start ;
          dbo:endDate ?end .
  FILTER (?start <= ""2020-07-01""^^xsd:date && ?end >= ""2021-06-30""^^xsd:date)
}

# Step 2: Check if this manager was a leader of West Germany.
SELECT DISTINCT ?person WHERE {
  VALUES ?manager { <http://dbpedia.org/resource/Name_of_the_manager> } # Replace with actual URI from step 1
  OPTIONAL { 
    ?person dbo:office ""Chancellor""@en ;
            dbo:country ""Federal Republic of Germany"" .
  }
}

# Step 3: Find the native country of this person.
SELECT DISTINCT ?nativeCountry WHERE {
  VALUES ?person { <http://dbpedia.org/resource/Name_of_the_person> } # Replace with actual URI from step 2
  OPTIONAL { 
    ?person dbo:nationality ?nationality .
    ?nationality dbo:country ?nativeCountry .
  }
}
```

Note: The placeholders `<http://dbpedia.org/resource/Name_of_the_manager>` and `<http://dbpedia.org/resource/Name_of_the_person>` need to be replaced with the actual URIs obtained from executing the queries.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
595,33,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of Hillary Clinton.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?author WHERE {
  ?person dbo:residence dbr:Chappaqua,_New_York ;
          a dbo:Politician ;
          dbo:officeHolder true .
  ?person foaf:mbox <mailto:hillaryclinton@whitehouse.gov> ; # Assuming Hillary Clinton's email is linked
          foaf:spouse ?spouse .
  ?spouse foaf:name ""Hillary Rodham Clinton""@en .
  ?author dbo:author ?book ;
          a dbo:Book .
  FILTER(?person = ?author)
}
```",4,9,5,3,2,3,3,71,0,0,1,0,0.0,0
628,51,train,"Give me the native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state) and person born as the birth name of Bobby Shmurda.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?result <http://dbpedia.org/property/birthName> ?v4 . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v4 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?awardNativeRegion WHERE {
  # Step 1: Find Bobby Shmurda's birth name
  VALUES (?bobbyShmurda) { dbr:Bobby_Shmurda }
  ?bobbyShmurda dbo:birthName ?birthName .
  
  # Step 2: Identify a band from New York with an awardee named Ackquille Jean Pollard
  ?band dbo:member ?member .
  ?member foaf:name ""Ackquille Jean Pollard""@en .
  ?band dbo:awardReceived ?award .
  ?band dbo:country dbr:United_States .
  ?band dbo:stateOrProvince dbr:New_York_(state) .

  # Step 3: Determine the award and its native region
  ?award dbo:nativeOf ?nativeRegion .
  
  FILTER (?birthName = ""Ackquille Jean Pollard""@en)
}
```",5,10,6,3,2,3,3,71,0,0,1,0,0.0,0
737,35,train,"Give me the predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of the child, that is a royalty, of Archduke Charles Louis of Austria.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
    # Step 1: Find a child of Philipp Albrecht, Duke of Württemberg
    ?child dbo:parent dbr:Philipp_Albrecht,_Duke_of_W%C3%BCrttemberg .
    
    # Step 2: Find the grandchild (child of the child)
    ?grandchild dbo:parent ?child .

    # Step 3: Find a royal child of Archduke Charles Louis of Austria
    ?royalChild dbo:parent dbr:Archduke_Charles_Louis_of_Austria .
    FILTER EXISTS { ?royalChild dbo:title ?title . FILTER regex(?title, ""King|Queen|Duke|Duchess|Prince|Princess"", ""i"") }

    # Step 4: Find the grandchild of this royal child
    ?royalGrandchild dbo:parent ?royalChild .

    # Step 5: Determine the predecessor (parent) of the grandchild from step 2
    ?predecessor dbo:parent dbr:Philipp_Albrecht,_Duke_of_W%C3%BCrttemberg .
    FILTER (?grandchild = ?royalGrandchild)
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
103,53,train,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in the alter ego of The Shadow and professional in Actor.","SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?v2 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/property/occupation> ?v1 . ?v3 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find the person known as Richard Grant Esterhuysen, professionally The Shadow
  ?person a dbo:Person ;
          foaf:name ""Richard Grant Esterhuysen"" ;
          dbo:aliasName ""The Shadow"" .
  
  # Identify television shows related to The Shadow
  ?tvShow dbo:starring ?actor ;
          dbo:basedOn dbr:The_Shadow .

  # Ensure the actor is a professional actor
  ?actor a dbo:Actor .
}
```",6,7,7,3,3,3,3,71,0,0,9,0,0.0,0
386,20,train,Give me the war of Alexander Lvovich Davydov and war of the awardee of 25 and entity in Russian Empire.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?war1 ?war2 ?entity WHERE {
  # War involving Alexander Lvovich Davydov
  ?davydov dbo:birthName ""Alexander Lvovich Davydov""@en .
  ?davydov dbo:militaryConflict ?war1 .

  # Awardee of Order of St. George number 25
  ?awardee dbo:award ""Order of Saint George"" ;
           dbo:number ""25""^^xsd:string .
  ?awardee dbo:militaryConflict ?war2 .

  # Entity in Russian Empire
  ?entity dbo:country dbr:Russian_Empire .

  FILTER(?war1 != ?war2)
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
58,0,train,Give me the spouse of Linda Bruckheimer.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Linda_Bruckheimer> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?spouse WHERE {
  ?person foaf:name ""Linda Bruckheimer""@en .
  ?person dbo:spouse ?spouse .
}
```",1,1,2,1,1,3,2,20,1,0,0,1.0,1.0,1.0
258,12,train,"Give me the establishment of 1955-12-02 and alma mater of the person born, that is a politician, as Eleonora Menicucci de Oliveira.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ""Eleonora Menicucci de Oliveira""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/foundingDate> ""1955-12-02""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://dbpedia.org/ontology/almaMater> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthDate ?almaMater WHERE {
  ?person a dbo:Politician ;
          foaf:name ""Eleonora Menicucci de Oliveira""@en ;
          dbo:birthDate ?birthDate .
  OPTIONAL { ?person dbo:almaMater ?almaMater . }
  FILTER (YEAR(?birthDate) = 1955 && MONTH(?birthDate) = 12 && DAY(?birthDate) = 2)
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
531,26,train,"Give me the office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://dbpedia.org/property/office> ?result . ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?force WHERE {
  ?person rdfs:label ""Manuel Pinto da Costa""@en .
  ?person dbo:officeHolder ?office .
  ?office dbo:positionHeld ?commanderRole .
  ?commanderRole rdfs:label ""Commander""@en .
  ?office dbo:participatedIn ?force .
  ?force a dbo:MilitaryConflict ;
         a dbo:SocietalEvent .
}
```",3,7,4,3,1,3,3,71,0,0,485,0,0.0,0
347,5,train,Give me the parent of Archduke Charles Joseph of Austria.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?person dbo:givenName ""Charles Joseph"" .
  ?person dbo:familyName ""of Austria"" .
  ?person dbo:parent ?parent .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
609,58,train,"Give me the birth place of the author of the reference, that is American, to El Deafo and birth place of the governor, that is a politician, of Virginia and birth place of Vince Gilligan.","SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v5 . ?v1 <http://dbpedia.org/property/author> ?v2 . }","```sparql
# Query for Cece Bell (author of ""El Deafo"")
SELECT ?birthPlace WHERE {
  ?person dbo:wikiPageID ""Q1065182"" .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for Glenn Youngkin (Governor of Virginia)
SELECT ?birthPlace WHERE {
  ?person dbo:wikiPageID ""Q1074823"" .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for Vince Gilligan
SELECT ?birthPlace WHERE {
  ?person dbo:wikiPageID ""Q1055956"" .
  ?person dbo:birthPlace ?birthPlace .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
80,16,train,"Give me the album of the work, that is a song and a musical work, of T.I..",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v1 <http://dbpedia.org/ontology/album> ?result . ?v1 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?song ?album WHERE {
  ?artist rdfs:label ""T.I.""@en .
  ?artist dbo:song ?song .
  ?song dbo:album ?album .
}
```",2,4,3,2,1,3,3,71,0,0,29,0,0.0,0
58,14,train,Give me the producer of the movie with the award of Ian Gregson (poet).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/producer> ?result . ?v0 <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/Ian_Gregson_(poet)> <http://dbpedia.org/property/awards> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?movie ?producer WHERE {
  # Find movies associated with Ian Gregson (poet)
  ?person a dbo:Person ;
          foaf:name ""Ian Gregson"" ;
          dbo:occupation dbr:Poetry .
  
  # Check if the person is related to any award-winning movie
  ?award dbo:recipient ?person ;
         dbo:subject ?movie .

  # Find producers of that movie
  ?movie dbo:producer ?producer .
}
```",3,3,4,3,1,3,2,20,0,0,10672,0,0.0,0
782,25,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and band of Kim Wilson.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
SELECT ?person ?band WHERE {
  VALUES (?name) { (""Nick Gilder"" ""Kim Wilson"") }
  
  ?person foaf:name ?name .
  OPTIONAL {
    ?person dbo:associatedBand ?band .
  }
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
668,39,train,"Give me the professional in Musician and person born as the birth name of the native, that is an artist, of Central Region, Ghana.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthName ?professionalName WHERE {
  ?person a dbo:Person ;
          dbo:nationality dbr:Ghana ;
          dbo:birthPlace ?place .
  
  FILTER(CONTAINS(LCASE(str(?place)), ""central region""))

  OPTIONAL { ?person dbp:birthName ?birthName . }
  OPTIONAL { ?person dbo:profession ?profession . }

  VALUES ?profession {
    dbr:Musician
    dbr:Artist
  }

  OPTIONAL { ?person rdfs:label ?professionalName FILTER(LANG(?professionalName) = ""en"") }
  
  FILTER(BOUND(?birthName))
  FILTER(BOUND(?professionalName))
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
769,11,train,"Give me the player in Lai Sun Cheung and player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on 1981-12-01.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. <http://dbpedia.org/resource/Lai_Sun_Cheung> <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v2 <http://dbpedia.org/ontology/birthDate> ""1981-12-01""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?player WHERE {
  ?player dbo:birthDate ?birth .
  FILTER (YEAR(?birth) = 1981 && MONTH(?birth) = 12 && DAY(?birth) = 1)
  
  ?player dbo:occupation ?occupation .
  VALUES ?occupation { 
    dbr:Athlete 
    dbr:Soccer_player 
    dbr:Sports_manager 
    dbr:Soccer_manager
  }
  
  ?player dbo:team ?team .
  FILTER (?team = dbr:Lai_Sun_Cheung)
}
```",3,7,4,2,2,3,2,20,0,0,2,0,0.0,0
353,57,train,"Give me the child of Roger II of Sicily and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of the child of Alfonso VI of León and Castile.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v5 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?father WHERE {
  # Step 1: Find a child of Roger II who is royalty
  ?child dbo:parent dbr:Roger_II_of_Sicily ;
         a dbo:Monarch .

  # Step 2: Identify the father of that child (should be Roger II)
  ?father dbo:spouse ?mother ;
          dbo:child ?child .
  
  FILTER(?father = dbr:Roger_II_of_Sicily)

  # Step 3: Find a royalty and office holder related to William I
  ?officeHolder dbo:positionTitle ?title ;
               dbo:monarch dbr:William_I_of_Sicily ;
               a dbo:Monarch .

  # Step 4: Identify Alfonso VI's child
  ?alfonsoChild dbo:parent dbr:Alfonso_VI_of_León_and_Castile ;
                a dbo:Monarch .

  # Step 5: Find the child of the office holder who is also a child of Alfonso VI's child
  ?finalChild dbo:parent ?officeHolder ;
              dbo:parent ?alfonsoChild .

  # Step 6: Determine the father of this final child
  ?fatherOfFinalChild dbo:child ?finalChild .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
353,13,train,"Give me the father of the child, that is a royalty, of William I of Sicily.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . },"```sparql
SELECT ?child ?father WHERE {
  # Find William I of Sicily
  wd:Q123456 dbo:child ?child .
  
  # Ensure the child has a royal title
  ?child dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") || 
         CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess""))

  # Find the father of this royal child
  ?child dbo:parent ?father .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for William I of Sicily.",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
375,2,train,"Give me the person deceased, that is an artist and a musical artist, on 2020-06-18.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/deathDate> ""2020-06-18""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person a dbo:Artist .
  ?person a dbo:MusicalArtist .
  ?person dbo:deathDate ""2020-06-18""^^xsd:date .
}
```",1,3,2,1,1,3,2,20,3,0,0,1.0,1.0,1.0
143,0,train,Give me the actor of The Campus Queen.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Campus_Queen> <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film a dbo:Film ;
        foaf:name ""The Campus Queen""@en .
  ?film dbo:starring ?actor .
}
```",1,1,2,1,1,3,2,20,6,0,1,1.0,0.8571428571428571,0.923076923076923
943,20,train,Give me the child of Dawit I and reference to the alter ego of The Shadow.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . },"```sparql
# Query to find the child of Dawit I
SELECT ?child WHERE {
  wd:Q123456 # Replace with the actual DBpedia resource ID for Dawit I
  dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
}

UNION

# Query to find the alter ego of The Shadow
SELECT ?alterEgo WHERE {
  wd:Q654321 # Replace with the actual DBpedia resource ID for The Shadow
  dbo:aliasName ?alterEgo .
}
```

Note: You will need to replace `wd:Q123456` and `wd:Q654321` with the correct DBpedia resource IDs for Dawit I and The Shadow, respectively. These can be found by searching DBpedia or using a SPARQL endpoint to look up these entities.",3,3,4,2,2,3,3,71,0,0,3,0,0.0,0
249,0,train,Give me the native of Jamshedpur.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Jamshedpur> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person ;
          dbo:birthPlace dbr:Jamshedpur .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,1,2,1,1,2,2,9,68,71,0,0.4892086330935252,1.0,0.6570048309178744
595,7,train,Give me the owner of USS Arcadia (ID-1605).,SELECT ?result WHERE { <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?result . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?owner WHERE {
  ?ship a dbo:Ship ;
        rdfs:label ""USS Arcadia (ID-1605)""@en .
  OPTIONAL { ?ship dbp:owner ?owner . }
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
347,9,train,"Give me the father of Eleonore of Austria, Queen of Poland and commander in Thirty Years' War.","SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . }","```sparql
SELECT ?father WHERE {
  dbpedia:Eleonore_of_Austria_(1598-1655) dbo:father ?father .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
203,28,train,"Give me the commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of Battle of Fort Royal and military force of Battle of Cape Finisterre (1805).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commander WHERE {
  # Find the commander of the Battle of Cape Finisterre (1805)
  ?battle1 dbo:commander ?commander .
  FILTER(STRSTARTS(STR(?battle1), ""http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)"")) .

  # Find the commander of the Battle of Fort Royal
  ?battle2 dbo:commander ?commander .
  FILTER(STRSTARTS(STR(?battle2), ""http://dbpedia.org/resource/Battle_of_Fort_Royal"")) .

  # Find a military conflict involving the 30th Regiment of Foot and the same commander
  ?conflict dbo:participatingMilitaryUnit dbr:30th_(Cambridgeshire)_Regiment_of_Foot .
  ?conflict dbo:commander ?commander .
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
398,12,train,Give me the player in the writer of The First Glove and figure known as Наши парни / Nashi parni.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/The_First_Glove> <http://dbpedia.org/property/writer> ?v0 . ?result <http://dbpedia.org/property/nickname> ""Наши парни / Nashi parni""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?player WHERE {
  # Find the writer of ""The First Glove""
  ?work dbo:title ""The First Glove""@en .
  ?work dbo:author ?writer .

  # Find the figure known as Наши парни / Nashi parni
  ?figure rdfs:label ""Наши парни""@ru ;
          rdfs:label ""Nashi parni""@en .

  # Identify common individuals linked to both resources
  ?writer foaf:name ?playerName .
  ?figure dbo:member ?player .
  ?player foaf:name ?playerName .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
89,9,train,Give me the child of Saw Min Hla and spouse of Saw Shwe Khet.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person WHERE {
  # Find the child of Saw Min Hla
  ?child dbo:parent dbr:Saw_Min_Hla .
  
  # Find the spouse of Saw Shwe Khet
  ?spouse dbo:spouse dbr:Saw_Shwe_Khet .

  # Ensure the person is both a child of Saw Min Hla and a spouse of Saw Shwe Khet
  FILTER (?child = ?spouse)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
353,38,train,"Give me the child of the child of Alfonso VI of León and Castile and father of the child, that is a royalty, of William I of Sicily.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v2 <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commonIndividual WHERE {
  # Step 1: Alfonso VI's children
  ?alfonsoVIChild dbo:parent dbr:Alfonso_VI_of_León_and_Castile .
  
  # Step 2: Alfonso VI's grandchildren
  ?alfonsoVIIGrandchild dbo:parent ?alfonsoVIChild .

  # Step 3: William I of Sicily's child and their royal father
  ?williamISicilyChild dbo:parent dbr:William_I_of_Sicily .
  ?royalFather dbo:parent ?williamISicilyChild .
  
  # Ensure the father is royalty
  ?royalFather a dbo:Monarch .

  # Step 4: Find common individual
  FILTER (?alfonsoVIIGrandchild = ?commonIndividual && ?commonIndividual = ?royalFather)
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
609,59,train,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the awardee of the award of Vince Gilligan.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/governor> ?v5 . ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . },"```sparql
# Step 1: Find Paulus Powell's birth place
SELECT ?birthPlace WHERE {
    dbpedia:Paulus_Powell dbo:birthPlace ?birthPlace .
}

# Step 2: Find the governor of the region identified in step 1
SELECT ?governorBirthPlace WHERE {
    ?region rdfs:label ?regionLabel .
    FILTER(CONTAINS(LCASE(?regionLabel), ""the birth place label from step 1""))
    ?region dbo:governmentHead ?governor .
    ?governor rdf:type dbo:Politician .
    ?governor dbo:birthPlace ?governorBirthPlace .
}

# Step 3: Find Vince Gilligan's award
SELECT ?award WHERE {
    dbpedia:Vince_Gilligan dbo:awardReceived ?award .
}

# Step 4: Find the birth place of the awardee of the award identified in step 3
SELECT ?awardeeBirthPlace WHERE {
    ?award dbo:recipient ?awardee .
    ?awardee dbo:birthPlace ?awardeeBirthPlace .
}
```",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
158,21,train,"Give me the person decedent at Switzerland and native of Grand Duchy of Finland and native of the administration, that is a country, of Nicholas II of Russia.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:deathPlace dbr:Switzerland .
  ?person dbo:nationality dbr:Grand_Duchy_of_Finland ;
          dbo:nationality dbr:Russia .
  ?person dbo:father dbr:Nicholas_II_of_Russia .
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
78,11,train,Give me the band member of the associated musical artist of David Paton.,SELECT ?result WHERE { <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember WHERE {
  # Find David Paton's association with a musical artist (Simple Minds)
  dbr:David_Paton dbo:musicalArtist dbr:Simple_Minds .
  
  # Get all members of Simple Minds
  dbr:Simple_Minds dbo:member ?bandMember .
}
```",2,2,3,2,1,2,3,28,0,0,114,0,0.0,0
723,13,train,"Give me the band member of the producer, that is an organisation and a group, of the reference to Nothing to Gein.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Nothing to Gein""@en . ?v0 <http://dbpedia.org/ontology/producer> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. }","```sparql
SELECT ?bandMember WHERE {
  # Step 1: Identify ""Nothing to Gein""
  ?album rdfs:label ""Nothing to Gein""@en .
  
  # Step 2: Find the producer of the album
  OPTIONAL { ?album dbo:producer ?producer . }
  
  # Ensure the producer is an organization or group
  FILTER EXISTS { ?producer a dbo:Band ; dbo:bandMember ?bandMember . }
}
```",3,5,4,3,1,3,2,20,0,0,5,0,0.0,0
103,6,train,Give me the profession of Shatrughan Sinha.,SELECT ?result WHERE { <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?profession 
WHERE {
  ?person a dbo:Person ;
          foaf:name ""Shatrughan Sinha""@en .
  ?person dbo:occupation ?profession .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
140,8,train,"Give me the party member of the ruling party, that is a political party and an organisation, in Westport, Connecticut.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v0 . <http://dbpedia.org/resource/Westport,_Connecticut> <http://dbpedia.org/property/leaderParty> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?partyMember ?position WHERE {
  # Find the location of Westport, Connecticut
  ?location a dbo:PopulatedPlace ;
            rdfs:label ""Westport, Connecticut""@en .
  
  # Attempt to find political parties associated with this location
  OPTIONAL { 
    ?party dbo:country dbr/United_States ;
           dbo:member ?person .
    
    # Find positions held by these party members in Westport
    ?position a dbo:PoliticalPartyMember ;
              dbo:officeHolder ?person ;
              dbo:location ?location .
              
    # Get the name of the person holding the position
    ?person rdfs:label ?partyMember .
  }
  
  FILTER (lang(?partyMember) = 'en')
}
LIMIT 10
```",2,4,3,2,1,3,2,20,0,0,21486,0,0.0,0
293,40,train,Give me the person born as Harriette Arlene Lake and party member of the ruling party in the landmark at elevation of 20.116800000000001347 and spouse of Roger Pryor (actor).,"SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . ?v2 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?result <http://dbpedia.org/ontology/party> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  # Find Harriette Arlene Lake and her spouse
  ?harriette a dbo:Person ;
             foaf:name ""Harriette Arlene Lake""@en ;
             dbo:spouse ?rogerPryor .
  
  ?rogerPryor a dbo:Person ;
              foaf:name ""Roger Pryor (actor)""@en .

  # Find the landmark with the specified elevation
  ?landmark dbo:elevationAboveSeaLevel ?elevation ;
            dbo:locationCountry ?country .

  FILTER(?elevation >= 20.1167 && ?elevation <= 20.117)

  # Get the ruling party of the country where the landmark is located
  ?party dbo:country ?country ;
         dbo:isRulingParty ""true""^^xsd:boolean .
  
  # Ensure the person is a member of this ruling party
  ?person dbo:spouse ?harriette ;
          dbo:memberOf ?party .
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
203,35,train,"Give me the military force of the force, that is an event and a societal event, of Robert Calder and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v2 . ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
    # Robert Calder's involvement in a military conflict
    ?calderEvent dbo:agent dbr:Robert_Calder ;
                 dbo:partOf ?conflict .

    # The 30th (Cambridgeshire) Regiment of Foot's involvement in the same conflict
    ?regimentEvent dbo:agent dbr:30th_(Cambridgeshire)_Regiment_of_Foot ;
                   dbo:partOf ?conflict .

    # Ensure the conflict is a military conflict and an event
    ?conflict rdf:type dbo:MilitaryConflict, dbo:Event .

    # Retrieve the military force associated with Robert Calder
    ?calderEvent dbo:militaryForce ?militaryForce .
}
```",4,8,5,2,2,3,3,71,0,0,1,0,0.0,0
39,33,train,"Give me the professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and professional in Singer.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://dbpedia.org/property/alterEgo> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character ?alterEgo ?profession WHERE {
  ?character dbo:creator dbr:Walter_B._Gibson .
  ?character dbo:wikiPageRedirects ?redirect .
  ?redirect rdfs:label ""The Shadow""@en .
  
  OPTIONAL { 
    ?character dbo:alternateName ?alterEgo .
    ?alterEgo dbo:profession dbr:Singer .
  }
}
```",4,6,5,3,2,3,3,71,0,0,5422,0,0.0,0
731,1,train,Give me the war of Tom Phillips (Royal Navy officer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Tom_Phillips_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  dbr:Tom_Phillips_(Royal_Navy_officer) dbo:militaryConflict ?war .
}
```",1,1,2,1,1,3,2,20,0,0,5,0,0.0,0
595,54,train,"Give me the commander in Third Taiwan Strait Crisis and author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of the author, that is a politician and an office holder, of An Invitation to the White House.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v5 <http://dbpedia.org/property/author> ?result . ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v5 <http://dbpedia.org/property/author> ?v0 . ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v3 . <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?person WHERE {
  # Identify Bill Clinton as the commander in the Third Taiwan Strait Crisis
  ?event dbo:agent dbr:Bill_Clinton ;
         rdf:type dbo:MilitaryConflict .
  
  # Identify Hillary Rodham Clinton as the author of ""An Invitation to the White House""
  ?book dbo:author dbr:Hillary_Rodham_Clinton ;
        rdfs:label ""An Invitation to the White House""@en .

  # Ensure Hillary Rodham Clinton is a resident and politician of Chappaqua, New York
  ?hrc dbo:residenceLocation dbr:Chappaqua,_New_York ;
       rdf:type dbo:Politician .
  
  # Identify Bill Clinton as the spouse of Hillary Rodham Clinton
  ?bill dbo:spouse dbr:Hillary_Rodham_Clinton .

  # Ensure Bill Clinton is a politician and office holder
  ?bill rdf:type dbo:Politician ;
        dbo:officeHolder true .

  # Bind the person variable to Bill Clinton
  BIND(?bill AS ?person)
}
```",6,13,7,3,3,3,3,71,0,0,1,0,0.0,0
119,3,train,Who is the commander in French Revolutionary Wars?,SELECT ?result WHERE { <http://dbpedia.org/resource/French_Revolutionary_Wars> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?name WHERE {
  ?commander dbo:occupation dbr:Military_person .
  ?commander dbo:nationality dbr:Francois_I_of_France ; # This is a placeholder for French nationality
  ?commander dbo:wikiPageWikiLink dbr:French_Revolutionary_Wars .
  OPTIONAL { ?commander rdfs:label ?name FILTER (lang(?name) = 'en') }
}
ORDER BY ?name
```",1,1,2,1,1,3,2,20,0,0,58,0,0.0,0
386,17,train,Give me the war of the awardee of 25 and war of Alexander Lvovich Davydov.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . ?v1 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
SELECT DISTINCT ?war1 ?description1 ?war2 ?description2 WHERE {
  # Part 1: War of the awardee of 25 (assuming Order of St. George)
  ?award dbo:wikiPageRedirects db:Order_of_St._George .
  ?award dbo:awardedFor ?event .
  ?event dbo:wikiPageID ?war1 .
  ?war1 rdfs:label ?description1 .

  # Part 2: War associated with Alexander Lvovich Davydov
  ?person foaf:name ""Alexander Lvovich Davydov""@en .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:wikiPageID ?war2 .
  ?war2 rdfs:label ?description2 .

  FILTER (lang(?description1) = 'en')
  FILTER (lang(?description2) = 'en')
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
706,6,train,Give me the birthplace of Ebrahim Alkazi and birthplace of Smita Patil.,SELECT ?result WHERE { <http://dbpedia.org/resource/Smita_Patil> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Ebrahim_Alkazi> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?name ?birthPlace WHERE {
  VALUES ?person { 
    dbr:Ebrahim_Alkazi 
    dbr:Smita_Patil 
  }
  
  OPTIONAL { ?person dbo:name ?name . FILTER(lang(?name) = 'en') } # To get the name in English
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
```",2,2,3,1,2,3,2,20,1,5,0,0.16666666666666666,1.0,0.2857142857142857
119,28,train,Give me the tenant of Santiago de Compostela and tenant of Spain and office of the leader of 2009 Galician regional election.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?v1 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?santiagoLeader ?spainLeader ?galiciaOffice WHERE {
  # Santiago de Compostela leader in 2009
  ?santiagoLeader dbo:office ""Mayor of Santiago de Compostela""@en .
  ?santiagoLeader dbo:termStartYear ?startYear .
  FILTER (?startYear <= 2009 && (BOUND(?endYear) -> ?endYear >= 2009 || !bound(?endYear))).
  
  # Spain's Prime Minister in 2009
  ?spainLeader dbo:office ""Prime Minister of Spain""@en .
  ?spainLeader dbo:termStartYear ?startYearSpain .
  FILTER (?startYearSpain <= 2009 && (BOUND(?endYearSpain) -> ?endYearSpain >= 2009 || !bound(?endYearSpain))).
  
  # Galician regional election leader in 2009
  ?galiciaOffice dbo:office ""President of the Xunta de Galicia""@en .
  ?galiciaOffice dbo:electionDate ?electionDateGalicia .
  FILTER (?electionDateGalicia <= ""2009-12-31""^^xsd:date && ?electionDateGalicia >= ""2009-01-01""^^xsd:date).
  
  # Get names
  OPTIONAL { ?santiagoLeader rdfs:label ?santiagoLabel . }
  OPTIONAL { ?spainLeader rdfs:label ?spainLabel . }
  OPTIONAL { ?galiciaOffice rdfs:label ?galiciaLabel . }
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
203,34,train,"Give me the military force of Battle of Cape Finisterre (1805) and commander in the war, that is a military conflict and an event, of the figure known as The Triple X's.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force ?commander WHERE {
  # Identify the battle and its participants
  dbr:Battle_of_Cape_Finisterre_(1805) dbo:participatedIn [
    a dbo:MilitaryConflict ;
    dbo:participant ?force .
  ] .

  # Get commanders of these forces
  ?force dbo:commander ?commander .

  # Ensure the force is part of The Triple Alliance (UK, Russia, Austria)
  VALUES ?allianceMember { dbr:United_Kingdom dbr:Russian_Empire dbr:Austria }
  OPTIONAL {
    ?force dbo:country ?allianceMember .
  }

  FILTER EXISTS { ?force dbo:country ?allianceMember }
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
687,53,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the person born, that is an athlete, on the birthday of Marty Pollio and player in Sergio Agüero.","SELECT ?result WHERE { <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v3 . ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://dbpedia.org/ontology/birthDate> ?v3 . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> ?v1 . }","```sparql
# Step 1: Find Marty Pollio's birthday
SELECT ?martyBirthday WHERE {
    dbpedia:Marty_Pollio dbo:birthday ?martyBirthday .
}

# Assuming we found Marty Pollio's birthday to be a specific date, e.g., ""1975-05-15""

# Step 2: Find athletes born on Marty Pollio's birthday
SELECT DISTINCT ?athlete WHERE {
    ?athlete dbo:birthdayLiteral ?birthday .
    FILTER (STR(?birthday) = ""1975-05-15T00:00:00Z"") .
}

# Step 3: Find teams those athletes have played for
SELECT DISTINCT ?team WHERE {
    ?athlete dbo:playsForTeam ?team .
}

# Step 4: Identify soccer players/managers born on November 3, 1979
SELECT DISTINCT ?person WHERE {
    ?person dbo:birthdayLiteral ?birthday .
    FILTER (STR(?birthday) = ""1979-11-03T00:00:00Z"") .
    ?person rdf:type dbpedia:Soccer_player ;
            rdf:type dbpedia:Soccer_manager .
}

# Step 5: Check if these players/managers have played in the same team as any athlete from step 2
SELECT DISTINCT ?team WHERE {
    ?person dbo:playsForTeam ?team .
    ?athlete dbo:playsForTeam ?team .
    FILTER EXISTS { 
        ?athlete dbo:birthdayLiteral ?birthday .
        FILTER (STR(?birthday) = ""1975-05-15T00:00:00Z"") .
    }
    FILTER EXISTS {
        ?person dbo:birthdayLiteral ?birthday2 .
        FILTER (STR(?birthday2) = ""1979-11-03T00:00:00Z"") .
        ?person rdf:type dbpedia:Soccer_player ;
                rdf:type dbpedia:Soccer_manager .
    }
}

# Step 6: Verify if they also played with Sergio Agüero
SELECT DISTINCT ?team WHERE {
    ?person dbo:playsForTeam ?team .
    ?aguero dbo:playsForTeam ?team .
    FILTER EXISTS { 
        ?athlete dbo:birthdayLiteral ?birthday .
        FILTER (STR(?birthday) = ""1975-05-15T00:00:00Z"") .
    }
    FILTER EXISTS {
        ?person dbo:birthdayLiteral ?birthday2 .
        FILTER (STR(?birthday2) = ""1979-11-03T00:00:00Z"") .
        ?person rdf:type dbpedia:Soccer_player ;
                rdf:type dbpedia:Soccer_manager .
    }
    ?aguero rdfs:label ""Sergio Agüero""@en .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
203,45,train,"Give me the military force of Battle of Fort Royal and commander in French campaign in Egypt and Syria and military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> ?v0 . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
# Query for Battle of Fort Royal and its commander during the French campaign in Egypt and Syria
SELECT ?battle ?commander WHERE {
  ?battle dbp:partOf ?campaign .
  ?campaign rdfs:label ""French campaign in Egypt and Syria""@en .
  ?battle dbp:commander ?commander .
  FILTER(CONTAINS(LCASE(?battle), ""fort royal""))
}

# Query for the awardee of Knight Commander of the Order of the Bath
SELECT ?awardee WHERE {
  ?awardee dbo:award ""Knight Commander of the Order of the Bath""@en .
}

# Assuming we find an awardee, query for a societal and military event they were part of
SELECT ?event ?militaryForce WHERE {
  ?awardee dbo:event ?event .
  ?event rdf:type dbo:MilitaryEvent ;
         dbo:societalSignificance true .
  OPTIONAL { ?event dbp:militaryForce ?militaryForce }
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
23,0,train,Give me the party of Roy Barreras.,SELECT ?result WHERE { <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party WHERE {
  dbr:Roy_Barreras dbo:partyAffiliation ?party .
}
```",1,1,2,1,1,2,3,28,0,0,5,0,0.0,0
731,7,train,Give me the force of the awardee of Commander of the Order of the British Empire.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Commander_of_the_Order_of_the_British_Empire> . ?result <http://dbpedia.org/ontology/commander> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name ?force WHERE {
  ?person dbo:honoraryTitle dbr:Commander_of_the_Order_of_the_British_Empire .
  ?person rdfs:label ?name .
  OPTIONAL { 
    ?person dbo:militaryRank ?rank .
    BIND(CONCAT(""Military Rank: "", STR(?rank)) AS ?force)
  }
  OPTIONAL {
    ?person dbo:positionHeld ?position .
    BIND(CONCAT(""Position Held: "", STR(?position)) AS ?force)
  }
  FILTER (LANG(?name) = 'en')
}
ORDER BY ?name
```",2,2,3,2,1,3,2,20,0,0,162,0,0.0,0
687,38,train,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and team of the person born, that is a soccer player and a soccer manager, on 1979-11-03.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> ?v2 . <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v3 . ?v2 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
# Step 1: Find actors in ""All or Nothing: Manchester City"" who are also soccer players
SELECT ?actor WHERE {
    ?series dbo:title ""All or Nothing: Manchester City""@en .
    ?series dbo:starring ?actor .
    ?actor dbo:occupation dbc:Soccer_players .
}

UNION

# Step 2: Find individuals born on 1979-11-03 who are both soccer players and managers
SELECT ?person WHERE {
    ?person dbo:birthDate ""1979-11-03""^^xsd:date .
    ?person dbo:occupation dbc:Soccer_players .
    ?person dbo:occupation dbc:Soccer_managers .
}

# Step 3: Find the team of the person from step 2
SELECT DISTINCT ?team WHERE {
    ?person dbo:birthDate ""1979-11-03""^^xsd:date .
    ?person dbo:occupation dbc:Soccer_players .
    ?person dbo:occupation dbc:Soccer_managers .
    ?person dbo:memberTeam ?team .
}

# Step 4: Combine results to find the common individual
SELECT DISTINCT ?actor ?team WHERE {
    # Actor from ""All or Nothing: Manchester City"" who is a soccer player
    ?series dbo:title ""All or Nothing: Manchester City""@en .
    ?series dbo:starring ?actor .
    ?actor dbo:occupation dbc:Soccer_players .

    # Person born on 1979-11-03 who is both a soccer player and manager
    ?person dbo:birthDate ""1979-11-03""^^xsd:date .
    ?person dbo:occupation dbc:Soccer_players .
    ?person dbo:occupation dbc:Soccer_managers .
    ?person dbo:memberTeam ?team .

    # Ensure the actor is the same person as the one found in step 2
    FILTER (?actor = ?person)
}
```",4,8,5,2,2,3,3,71,0,0,1,0,0.0,0
859,2,train,"Give me the reference, that is a group, to Burnt by the Sun.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://xmlns.com/foaf/0.1/name> ""Burnt by the Sun""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?company WHERE {
  VALUES ?film { dbr:Burnt_by_the_Sun_(2009_film) }
  ?film dbo:productionCompany ?company .
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
687,8,train,"Give me the person born, that is a soccer player and a soccer manager, on 1979-11-03.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?result <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person a dbo:SoccerPlayer .
  ?person dbo:occupation dbr:Soccer_manager .
  ?person dbo:birthDate ""1979-11-03""^^xsd:date .
}
```",1,3,2,1,1,3,3,71,0,0,5,0,0.0,0
39,18,train,Give me the professional in Singer and band of Bob Thompson (musician) and professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?profession WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Bob Thompson (musician)""@en .
  
  OPTIONAL { 
    ?person dbo:professional ?profession .
    FILTER (
      ?profession = dbp:Singer ||
      ?profession = dbp:Band
    )
  }
}
```",3,3,4,1,3,3,3,71,0,0,3,0,0.0,0
628,32,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and person born as the birth name of Bobby Shmurda.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v3 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bandMemberArtist WHERE {
  # Step 1: Find Bobby Shmurda's associated musical artist
  dbr:Bobby_Shmurda dbo:associatedBandOrMusicalArtist ?artist .

  # Step 2: Identify band members of that artist who are also musical artists
  ?member dbo:memberOf ?artist .
  ?member a dbo:MusicalArtist .

  BIND(?member AS ?bandMemberArtist)

  # Step 3: Find Bobby Shmurda's birth name
  dbr:Bobby_Shmurda dbo:birthName ?birthName .

  # Step 4: Find a person born with that name
  ?person dbo:birthName ?birthName .
  FILTER(?member != ?person)
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
595,58,train,"Give me the author of the work, that is a written work and a book and a work, of Bill Clinton and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and spouse of Hillary Clinton.",SELECT ?result WHERE { <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v5 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://dbpedia.org/property/author> ?result . },"```sparql
SELECT ?author WHERE {
  ?work dcterms:creator ?author .
  ?work rdf:type dbo:Book .
  ?work rdfs:label ""Back to Work: Why We Need Smart Government for a Strong Economy""@en .
}
```",6,11,7,3,3,3,3,71,0,0,1,0,0.0,0
412,6,train,Give me the entity in Athens and war of Napoleon Zervas.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
SELECT ?entityAthens ?entityWar WHERE {
  # Find entity related to Athens
  ?entityAthens dbo:location dbr:Athens .
  
  # Find entity related to a war involving Zervas (likely World War II or Greek Resistance)
  ?entityWar dbo:wikiPageWikiLink dbr:Georgios_Zervas .
  FILTER(CONTAINS(LCASE(?entityWar), ""world war ii"") || CONTAINS(LCASE(?entityWar), ""greek resistance""))
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
412,0,train,Give me the war of Napoleon Zervas.,SELECT ?result WHERE { <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?description WHERE {
  ?person a dbo:MilitaryPerson ;
          foaf:name ""Napoleon Zervas""@en .
  
  ?event dbo:participatedInMilitaryConflict ?person ;
         dbo:description ?description .

  FILTER(CONTAINS(LCASE(?description), ""greco-italian war"") ||
         CONTAINS(LCASE(?description), ""world war ii""))
}
```",1,1,2,1,1,2,3,28,0,0,13,0,0.0,0
871,5,train,"Who is the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby?","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?parent WHERE {
  ?person dbo:birthName ""Edward Henry Stanley""@en .
  ?person dbo:title ""17th Earl of Derby""@en .
  ?person dbo:parent ?parent .

  OPTIONAL { 
    ?parent dbo:occupation ?occupation .
    FILTER(CONTAINS(LCASE(?occupation), ""politician""))
  }
  
  OPTIONAL {
    ?parent dbo:officeHolder ?office .
    FILTER(!isBlank(?office))
  }

  FILTER((BOUND(?occupation) && LCASE(?occupation) CONTAINS ""politician"") || BOUND(?office))
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
628,20,train,Give me the band member of Uncle Murda and person born as the birth name of Bobby Shmurda.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v2 . },"```sparql
# Query to find the band associated with Uncle Murda
SELECT ?band WHERE {
  ?uncleMurda dbo:memberOfBand ?band .
  ?uncleMurda foaf:name ""Uncle Murda"" .
}

UNION

# Query to find Bobby Shmurda's birth name
SELECT ?birthName WHERE {
  ?bobbyShmurda foaf:name ""Bobby Shmurda""@en .
  ?bobbyShmurda dbo:birthName ?birthName .
}

UNION

# Query to find any person with the same birth name as Bobby Shmurda
SELECT ?person WHERE {
  ?otherPerson dbo:birthName ?birthName .
  ?bobbyShmurda dbo:birthName ?birthName .
  ?bobbyShmurda foaf:name ""Bobby Shmurda""@en .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
557,45,train,"Give me the professional in  and producer of The Adventures of Tom Sawyer (1938 film) and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v1 . ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v0 . ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
# Step 1: Get producer of ""The Adventures of Tom Sawyer"" (1938 film)
SELECT ?producer WHERE {
  ?film dcterms:title ""The Adventures of Tom Sawyer""@en .
  ?film dbo:productionYear ""1938""^^xsd:gYear .
  ?film dbo:producer ?producer .
}

# Step 2: Get actor known for ""High Society Blues""
SELECT ?actor WHERE {
  ?movie dcterms:title ""High Society Blues""@en .
  ?movie dbo:starring ?actor .
}

# Step 3: Find the claim to fame movie of that actor
SELECT ?fameMovie WHERE {
  ?actor dbo:filmRole ?role .
  ?role dbo:characterName ?character .
  FILTER EXISTS { 
    ?fameMovie dbo:starring ?actor .
    ?fameMovie dbo:title ?title .
    FILTER(?title IN (""Some Famous Movie Title""@en)) # Replace with actual title if known
  }
}

# Step 4: Get producer of the claim to fame movie
SELECT ?producer WHERE {
  ?movie dcterms:title ?title .
  FILTER(?title IN (""Some Famous Movie Title""@en)) # Replace with actual title if known
  ?movie dbo:producer ?producer .
}

# Combine results to find common producers
SELECT DISTINCT ?commonProducer WHERE {
  VALUES (?film1) { (<Film URI for The Adventures of Tom Sawyer>) }
  VALUES (?film2) { (<Film URI for Famous Movie>) }

  OPTIONAL { ?film1 dbo:producer ?commonProducer . }
  OPTIONAL { ?film2 dbo:producer ?commonProducer . }
}
```

Note: Replace `<Film URI for The Adventures of Tom Sawyer>` and `<Film URI for Famous Movie>` with the actual URIs obtained from previous queries.",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
414,16,train,"Give me the show of the host, that is an educational institution, of Nobel Prize in Physics and award of the awardee of Nobel Prize in Physics.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Nobel_Prize_in_Physics> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. <http://dbpedia.org/resource/Nobel_Prize_in_Physics> <http://dbpedia.org/ontology/presenter> ?v2 . ?result <http://dbpedia.org/ontology/presenter> ?v2 . ?v3 <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?host ?institution ?laureate WHERE {
  ?host a dbo:Person ;
        foaf:name ?name ;
        dbo:almaMater ?institution .
  
  ?institution dbo:awardNobelPrizeInPhysics ?prizeAwarded .
  
  ?prizeAwarded dbo:recipient ?laureate .

  FILTER EXISTS { ?laureate dbo:nationality ?nationality . }
}
```",4,5,5,2,2,3,2,20,0,0,2,0,0.0,0
198,37,train,"Give me the force of the awardee of the award of Quincy Adams Gillmore and entity in Charleston, South Carolina.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://dbpedia.org/property/awards> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force ?entity WHERE {
  # Find the award received by Quincy Adams Gillmore
  ?gillmore dbo:awardReceived dbr:Medal_of_Honor ;
           rdfs:label ""Quincy Adams Gillmore""@en .
  
  # Identify the force associated with Quincy Adams Gillmore
  ?gillmore dbo:militaryUnit ?force .

  # Find an entity in Charleston, South Carolina related to the Civil War
  ?entity dbo:location dbr:Charleston,_South_Carolina ;
          dbo:wikiPageRedirects ?fortSumter .
  
  FILTER(CONTAINS(LCASE(?entity), ""fort sumter""))
}
```",4,4,5,3,2,3,3,71,0,0,2,0,0.0,0
159,58,train,"Give me the commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and successor of Yurii Khmelnytsky and reference to the writer of Always the Love Songs.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?tvShow ?societalEvent ?successor ?writer WHERE {
  # Prince Eugene of Savoy as commander in the Battle of Vienna
  dbr:Prince_Eugene_of_Savoy dbo:commanderOf dbr:Battle_of_Vienna .

  # Television show or societal event related to Prince Eugene
  OPTIONAL { 
    ?tvShow dbo:subject dbr:Prince_Eugene_of_Savoy .
    ?societalEvent dbo:subject dbr:Prince_Eugene_of_Savoy .
  }

  # Successor of Yurii Khmelnytsky
  dbr:Ivan_Vyhovsky dbo:succeededBy dbr:Yurii_Khmelnytsky .

  # Writer of ""Always the Love Songs""
  dbr:David_Levithan dbo:author dbr:Always_the_Love_Songs .

  # Linking all components
  ?commander rdfs:label ?name .
  FILTER(CONTAINS(LCASE(?name), ""prince eugene of savoy""))
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
293,55,train,"Give me the person born as the birth name of Ann Sothern and party member of the ruling party in Central, Louisiana and spouse of the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v5 . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v2 . ?v5 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v3 . ?result <http://dbpedia.org/ontology/party> ?v3 . }","```sparql
# Step 1: Get Ann Sothern's birth name
SELECT ?birthName WHERE {
  wd:Q123456 foaf:name ""Ann Sothern""@en .
  wd:Q123456 schema:birthName ?birthName .
}

# Step 2: Identify the ruling party in Central, Louisiana
SELECT ?party WHERE {
  dbpedia:Central,_Louisiana dbo:governmentParty ?party .
}

# Step 3: Find actor of ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
  wd:Q789012 dbo:title ""1,000 Dollars a Minute""@en ;
             dbo:starring ?actor .
}

# Step 4: Find the person matching all criteria
SELECT ?person WHERE {
  ?person schema:birthName ?birthName .
  ?person foaf:memberOfParty ?party .
  ?person schema:spouse ?actor .
}
```

Note: Replace `wd:Q123456` with Ann Sothern's actual DBpedia QID and `wd:Q789012` with the film's QID. The queries assume these identifiers are known or can be found through preliminary searches.",6,6,7,2,3,3,3,71,0,0,1,0,0.0,0
353,4,train,"Who is the parent of Roger III, Duke of Apulia?","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parent ?parentLabel WHERE {
  ?child rdfs:label ""Roger III, Duke of Apulia""@en .
  ?child dbo:child ?parent .
  ?parent rdfs:label ?parentLabel .
  FILTER(LANG(?parentLabel) = 'en')
}
```",1,1,2,1,1,3,3,71,0,2,2,0.0,0.0,0
782,21,train,Give me the associated musical artist of Nick Curran and reference to the real name of The Fabulous Thunderbirds.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ?v1 . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Query to find associated musical artist(s) of Nick Curran
SELECT ?artist WHERE {
  dbpedia:Nick_Curran dbo:associatedBand ?artist .
}

# Query to find the real name of The Fabulous Thunderbirds
SELECT ?realName WHERE {
  dbpedia:The_Fabulous_Thunderbirds dbo:realName ?realName .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
628,59,train,"Give me the person born as the birth name of the native, that is a musical artist, of Florida and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v5 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://dbpedia.org/property/birthName> ?v5 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?person WHERE {
  # Step 1: Identify GS9 member who is both an artist and a musical artist
  ?gs9Member dbo:memberOf dbr:GS9 ;
             a dbo:MusicArtist ;
             foaf:name ?gs9Name .
  
  # Step 2: Find associated musical artist
  ?associatedArtist dbo:collaborator ?gs9Member ;
                   a dbo:MusicalArtist .

  # Step 3: Identify band member of the associated artist
  ?bandMember dbo:memberOf ?associatedArtist ;
              a dbo:MusicArtist .
  
  # Step 4: Find person born as birth name of native from Florida
  ?person foaf:name ?birthName ;
          dbo:nationality dbr:United_States_of_America ;
          dbo:birthPlace dbr:Florida ;
          a dbo:MusicalArtist .

  FILTER (?bandMember = ?person)
}
```",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
782,26,train,"Give me the band of the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/bandMember> ?v2 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . }","```sparql
SELECT DISTINCT ?band WHERE {
  ?person dbo:birthDate ""1945-03-30""^^xsd:date ;
          rdf:type dbo:MusicalArtist .
  
  ?person dbo:memberOfBand ?memberBand .

  ?memberBand dbo:bandMember ?bandMember .
  ?bandMember dbo:memberOfBand ?band .
}
```",3,4,4,3,1,3,3,71,0,0,14,0,0.0,0
398,11,train,Give me the player in Aleksandr Filimonov and figure known as the nickname of Russia national football team.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/nickname> ?v2 . <http://dbpedia.org/resource/Aleksandr_Filimonov> <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Russia_national_football_team> <http://dbpedia.org/property/nickname> ?v2 . },"```sparql
# Query to find Aleksandr Filimonov's sport
SELECT ?sport WHERE {
  dbpedia:Александр_Филимонов dbo:sport ?sport .
}

# Query to get the nickname of the Russia national football team
SELECT ?nickname WHERE {
  dbpedia:Russia_National_Football_Team rdfs:label ?nickname .
  FILTER (lang(?nickname) = 'en')
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
39,7,train,Give me the birth name of Bob Thompson (musician).,SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?result . },"```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?givenName ?familyName WHERE {
  ?person a dbo:Musician ;
          foaf:name ""Bob Thompson"" .
  OPTIONAL { ?person foaf:givenName ?givenName . }
  OPTIONAL { ?person foaf:familyName ?familyName . }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
361,22,train,Give me the professional in the alter ego of The Shadow and professional in the profession of Frédéric Bouraly.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . },"```sparql
# Query to get the alter ego (real name) and profession of The Shadow
SELECT ?alterEgo ?profession WHERE {
  ?shadow dbo:wikiPageRedirects db:Q123456 . # Replace Q123456 with the actual DBpedia ID for ""The Shadow""
  ?shadow foaf:name ?alterEgo .
  OPTIONAL { ?shadow dbo:occupation ?profession }
}

UNION

# Query to get the profession of Frédéric Bouraly
SELECT ?name ?profession WHERE {
  db:Q789012 dbo:givenName ?firstName . # Replace Q789012 with the actual DBpedia ID for ""Frédéric Bouraly""
  db:Q789012 dbo:familyName ?lastName .
  BIND(CONCAT(?firstName, ' ', ?lastName) AS ?name)
  OPTIONAL { db:Q789012 dbo:occupation ?profession }
}
```",4,4,5,2,2,2,3,28,0,0,4210,0,0.0,0
782,23,train,Give me the reference to the real name of the band of Kim Wilson.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v0 . ?v2 <http://xmlns.com/foaf/0.1/name> ?v0 . ?v2 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?bandName WHERE {
  ?person foaf:name ""Kim Wilson""@en .
  ?person dbo:musicGroup ?band .
  ?band foaf:name ?bandName .
}
```",3,3,4,3,1,3,3,71,0,0,10,0,0.0,0
386,4,train,Give me the awardee of 25.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> ""25""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
SELECT ?awardee WHERE {
  ?award dbo:number ""25""^^xsd:int ;
         a dbo:Award .
  ?award dbo:recipient ?awardee .
}
```",1,1,2,1,1,2,3,28,0,0,326,0,0.0,0
633,4,train,"Give me the child, that is a royalty, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?title WHERE {
  # Identify Francis I, Duke of Lorraine
  VALUES ?francis { dbr:François_Ier,_Duke_of_Lorraine }
  
  # Retrieve his children
  ?francis dbo:child ?child .
  
  # Check if the child has a royal title
  OPTIONAL {
    ?child dbo:title ?title .
    FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") ||
           CONTAINS(LCASE(?title), ""duke"") || CONTAINS(LCASE(?title), ""prince"") ||
           CONTAINS(LCASE(?title), ""archduke""))
  }
  
  # Ensure the child has a title
  FILTER EXISTS { ?child dbo:title ?title }
}
```",1,2,2,1,1,3,2,20,0,0,3,0,0.0,0
557,31,train,"Give me the producer of The Adventures of Tom Sawyer (1938 film) and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v0 . ?v1 <http://dbpedia.org/property/alterEgo> ?v0 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer ?fictionalCharacter WHERE {
  # Query for the producer of ""The Adventures of Tom Sawyer"" (1938 film)
  dbr:The_Adventures_of_Tom_Sawyer_(1938_film) dbo:producer ?producer .

  # Query for a fictional character related to Kent Allard
  OPTIONAL {
    dbr:Kent_Allard dbo:alterEgoOf ?fictionalCharacter .
    FILTER(?fictionalCharacter = dbr:Tom_Sawyer)
  }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
816,23,train,"Give me the actor of the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v0 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/starring> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?movie ?actor WHERE {
  ?movie a dbo:Film .
  
  ?actor dbo:film ?movie ;
         dbo:deathPlace dbr:Los_Angeles .

}
```",3,4,4,3,1,3,3,71,0,0,10313,0,0.0,0
159,46,train,"Give me the successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and reference to the writer of Always the Love Songs.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/commander> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?conflict WHERE {
  # Michał Kazimierz Pac's role in a military conflict
  ?pacRole dbo:agent dbr:Michał_Kazimierz_Pac ;
           dbo:role ""commander""@en .
  
  # The event or military conflict
  ?pacRole dbo:participatedIn ?conflict .

  # Successor of Michał Kazimierz Pac in the same role
  ?successorRole dbo:agent ?successor ;
                 dbo:role ""commander""@en ;
                 dbo:succeededBy ?pacRole .
  
  # Ensure the successor is a politician and office holder
  ?successor dbo:occupation dbr:Politician ;
             dbo:officeHolder true .

  # Reference to the writer of ""Always the Love Songs""
  OPTIONAL {
    ?writer dbo:title dbr:Always_the_Love_Songs ;
            dbo:author ?referencePerson .
  }
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
119,12,train,"Give me the entity in the residence, that is a country, of Dawid Olejniczak and war of Alexander Suvorov.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Alexander_Suvorov> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Dawid_Olejniczak> <http://dbpedia.org/property/residence> ?v0 . },"```sparql
SELECT DISTINCT ?country WHERE {
  # Find the country where Dawid Olejniczak resides
  ?olejniczak dbo:birthPlace ?residence .
  ?residence rdf:type dbo:Country .

  # Find a war associated with Alexander Suvorov and its related country
  ?suvorov dbo:nationality ?countrySuvorov .
  ?war dbo:participatedIn ?suvorov .
  ?war dbo:location ?locationWar .
  ?locationWar rdf:type dbo:Country .

  # Ensure the countries match
  FILTER (?residence = ?locationWar)
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
59,4,train,Give me the manager of Hartlepool United F.C. and native of Bristol.,SELECT ?result WHERE { <http://dbpedia.org/resource/Hartlepool_United_F.C.> <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bristol> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager ?birthPlace WHERE {
  ?manager dbo:position ""Manager""@en.
  ?manager dbo:team <http://dbpedia.org/resource/Hartlepool_United_F.C.>.
  OPTIONAL { ?manager dbo:birthPlace ?birthPlaceResource. }
  FILTER (CONTAINS(LCASE(str(?birthPlaceResource)), ""bristol""))
}
```",2,2,3,1,2,2,2,9,0,0,1,0,0.0,0
668,9,train,Give me the associated musical artist of $pacely and professional in Musician.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Musician""@en . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?artist WHERE {
  ?entity rdfs:label ""Pacely""@en .
  ?entity dbo:associatedMusicalArtist ?artist .
  ?artist rdf:type dbo:Musician .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
905,56,train,"Give me the parent of Charles Martel of Anjou and spouse of the father of Philip I, Prince of Taranto and child of the child, that is a royalty, of the predecessor of Stephen V of Hungary.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . ?v4 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v0 <http://dbpedia.org/property/father> ?v4 . }","```sparql
# Step 1: Find Charles Martel of Anjou's parent
SELECT ?parent WHERE {
  wd:Q123456 wdt:P22 ?parent .
}

# Step 2: Find Philip I, Prince of Taranto's father and his spouse
SELECT ?father ?spouse WHERE {
  wd:Q654321 wdt:P22 ?father .
  ?father wdt:P26 ?spouse .
}

# Step 3: Identify Stephen V of Hungary's predecessor
SELECT ?predecessor WHERE {
  wd:Q789012 wdt:P39 ?predecessor .
}

# Step 4: Find a royalty who is a child of the child of the predecessor
SELECT DISTINCT ?royalty WHERE {
  ?child1 wdt:P31 wd:Q5 ; # Person
           wdt:P40 ?predecessor . # Child of predecessor
  ?child2 wdt:P22 ?child1 ; # Child of child1
          wdt:P31 wd:Q5 . # Royalty
  ?royalty wdt:P22 ?child2 .
}

# Step 5: Find the common link
SELECT DISTINCT ?commonLink WHERE {
  ?commonLink wdt:P22 wd:Q123456 . # Parent of Charles Martel of Anjou
  ?commonLink wdt:P26 ?spouse . # Spouse of Philip I's father
  ?commonLink wdt:P31 wd:Q5 . # Royalty
  ?child1 wdt:P40 ?predecessor .
  ?child2 wdt:P22 ?child1 .
  ?royalty wdt:P22 ?child2 .
  FILTER(?commonLink = ?spouse && ?commonLink = ?royalty)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
198,46,train,"Give me the war of the awardee of the show, that is an award, of United States Congress and force of the awardee of Gillmore Medal.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> ?v4 . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. },"```sparql
SELECT DISTINCT ?war WHERE {
  ?medal1 dcterms:isPartOf ?congressAward .
  ?congressAward dbo:awardedBy dbr:United_States_Congress ;
                rdfs:label ""Congressional Gold Medal""@en .
  
  ?medal2 dbo:awardName ""Gillmore Medal"" .
  ?recipient1 dbo:receivedAwards ?medal1 .
  ?recipient2 dbo:receivedAwards ?medal2 .

  ?recipient1 dbo:serviceInWar ?war .
  ?recipient2 dbo:serviceInWar ?war .

  FILTER(CONTAINS(LCASE(?war), ""american civil war""))
}
```",5,6,6,3,2,3,3,71,0,0,3,0,0.0,0
414,3,train,"Give me the host, that is an educational institution, of Nobel Prize in Physics.",SELECT ?result WHERE { <http://dbpedia.org/resource/Nobel_Prize_in_Physics> <http://dbpedia.org/ontology/presenter> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?institution WHERE {
  ?prize a dbo:NobelPrize ;
         dbo:category ""Physics"" .
  ?prize dbo:hostedBy ?institution .
  ?institution rdf:type dbo:EducationalInstitution .
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
941,13,train,"Give me the child of the parent, that is a royalty, of the child of Ferdinand Albert II, Duke of Brunswick-Lüneburg.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg> . ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/child> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?childOfRoyalty WHERE {
  # Step 1: Identify Ferdinand Albert II, Duke of Brunswick-Lüneburg
  ?ferdinand a dbo:Duke ;
             foaf:name ""Ferdinand Albert II, Duke of Brunswick-Lüneburg""@en .

  # Step 2: Determine his children
  ?ferdinand dbo:child ?child .

  # Step 3: For each child, identify their parent(s) and check if any are royalty
  ?child dbo:parent ?parent .
  
  OPTIONAL { 
    ?parent dbo:royalTitle ?title .
  }
  
  FILTER EXISTS {
    ?parent dbo:royalTitle ?title .
  }

  # Step 4: Find the child of that royal parent
  ?parent dbo:child ?childOfRoyalty .
}
```",3,4,4,3,1,3,2,20,0,0,6,0,0.0,0
782,47,train,"Give me the reference to the real name of The Fabulous Thunderbirds and band of the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://xmlns.com/foaf/0.1/name> ?v2 . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v2 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/bandMember> ?v4 . }","```sparql
# Step 1: Find the person born on March 30, 1945, who is a musical artist.
SELECT ?person ?name WHERE {
  ?person dbo:birthDate ""1945-03-30""^^xsd:date .
  ?person dbo:occupation dbr/Musician .
  OPTIONAL { ?person foaf:name ?name . }
}

# Step 2: Check if this person is a member of The Fabulous Thunderbirds.
SELECT ?bandMember WHERE {
  VALUES (?person) {(<result_from_step_1>)} # Replace <result_from_step_1> with the actual URI from step 1
  ?bandMember dbo:member ?person .
  ?band dbr:The_Fabulous_Thunderbirds ;
        dbo:bandMember ?bandMember .
}

# Step 3: Retrieve the real name of The Fabulous Thunderbirds.
SELECT ?realName WHERE {
  ?band dbr:The_Fabulous_Thunderbirds ;
        foaf:name ?realName .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
859,5,train,Give me the associated musical artist of James Plotkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/James_Plotkin> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?artist WHERE {
  ?subject dbo:associatedMusicians ?artist .
  ?subject foaf:name ""James Plotkin""@en .
}
```",1,1,2,1,1,3,2,20,0,0,4,0,0.0,0
412,24,train,"Give me the entity in the death place, that is a settlement, of Antonios Varthalitis and war of the awardee of 30.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . ?result <http://dbpedia.org/ontology/place> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v2 . }","```sparql
# Step 1: Find Antonios Varthalitis' death place
SELECT ?deathPlace WHERE {
  ?varthalitis dbo:birthName ""Antonios Varthalitis""@en .
  ?varthalitis dbo:deathPlace ?deathPlace .
}

# Step 2: Ensure the death place is a settlement
SELECT DISTINCT ?settlement WHERE {
  VALUES ?deathPlace { <http://dbpedia.org/resource/PLACE_URI> } # Replace PLACE_URI with actual URI from step 1
  ?settlement rdf:type dbo:Settlement ;
              rdfs:label ?label .
  FILTER(CONTAINS(LCASE(?label), LCASE(""PLACE_LABEL""))) # Replace PLACE_LABEL with actual label from step 1
}

# Step 3: Find an award related to ""30"" and the associated war
SELECT DISTINCT ?war WHERE {
  ?award dbo:awardee ?person ;
         rdfs:label ?awardLabel .
  FILTER(CONTAINS(LCASE(?awardLabel), LCASE(""30""))) # Assuming ""30"" is part of the award's label
  ?person dbo:militaryConflict ?war .
}

# Step 4: Link the settlement to the war
SELECT DISTINCT ?settlement WHERE {
  VALUES ?deathPlace { <http://dbpedia.org/resource/PLACE_URI> } # Replace PLACE_URI with actual URI from step 1
  VALUES ?war { <http://dbpedia.org/resource/WAR_URI> } # Replace WAR_URI with actual URI from step 3

  ?settlement rdf:type dbo:Settlement ;
              rdfs:label ?label .
  FILTER(CONTAINS(LCASE(?label), LCASE(""PLACE_LABEL""))) # Replace PLACE_LABEL with actual label from step 1

  ?warLocation dbo:location ?settlement .
  FILTER(?war = ?war)
}
```

Note: The placeholders `<http://dbpedia.org/resource/PLACE_URI>`, `PLACE_LABEL`, and `<http://dbpedia.org/resource/WAR_URI>` need to be replaced with actual URIs and labels obtained from the results of previous queries.",4,5,5,2,2,2,3,28,0,0,3,0,0.0,0
293,30,train,Give me the spouse of Roger Pryor (actor) and person born as the birth name of Ann Sothern and party member of Republican Party (United States).,SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?result <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
# Step 1: Find Roger Pryor (actor) and his spouse
SELECT ?spouse WHERE {
  ?actor dbo:birthName ""Roger Pryor""@en .
  ?actor dbo:profession dbr:Actor .
  ?actor dbo:spouse ?spouse .
}

UNION

# Step 2: Find Ann Sothern's birth name
SELECT ?birthName WHERE {
  ?person dbo:birthName ?birthName .
  ?person rdfs:label ""Ann Sothern""@en .
}

UNION

# Step 3: Find a person with the same birth name as Ann Sothern who is also a Republican Party member
SELECT ?person WHERE {
  ?person dbo:birthName ?birthName .
  ?party dbo:member ?person .
  ?party rdfs:label ""Republican Party (United States)""@en .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
609,26,train,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/governor> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
SELECT ?governorBirthPlace WHERE {
  # Step 1: Find Paulus Powell's birth place
  ?paulusPowell dbo:birthPlace ?birthPlace .
  FILTER (str(?paulusPowell) = ""Paulus Powell"") .

  # Step 2: Ensure the birth place is a region and administrative region
  ?birthPlace rdf:type dbo:Region ;
             dbo:administrativeRegion true .

  # Step 3: Find the governor of this birth place
  ?governor dbo:officeHolderOf ?birthPlace ;
           rdf:type dbo:Politician ;
           dbo:governmentRole ""Governor"" .

  # Step 4: Get the birth place of the governor
  ?governor dbo:birthPlace ?governorBirthPlace .
}
```",3,6,4,3,1,3,3,71,0,0,1,0,0.0,0
668,52,train,Give me the professional in the profession of Rod Argent and person born as Darryl Paa Kwesi Bannerman-Martin and associated musical artist of the person born as the birth name of $pacely.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v3 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v5 . }","```sparql
SELECT ?person WHERE {
  # Rod Argent's profession
  ?argent dbo:occupation dbr/Musician .
  
  # Dizzee Rascal's birth name
  ?dizzee foaf:name ""Darryl Paa Kwesi Bannerman-Martin""@en .

  # Snoop Dogg's birth name
  ?snoop foaf:name ""Calvin Cordozar Broadus Jr.""@en .
  
  # Dr. Dre's profession and associations
  ?dr_dre dbo:occupation dbr/Musician ;
          dbo:associatedMusicalArtist ?dizzee ;
          dbo:associatedMusicalArtist ?snoop .

  # Ensure the person is a musician like Rod Argent
  ?person dbo:occupation dbr/Musician .
  
  # Link Dr. Dre to the query
  FILTER(?dr_dre = ?person)
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
706,14,train,"Give me the birthplace of the actor of the movie, that is a movie and Indian, with Dipankar De.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Dipankar_De> . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/starring> ?v0 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor ?birthPlace WHERE {
  # Find movies featuring Dipankar De that are Indian films
  ?movie dbo:starring dbr:Dipankar_De ;
         dbo:country dbr:India .

  # Get actors from these movies
  ?movie dbo:starring ?actor .
  
  # Retrieve the birthplace of these actors
  ?actor dbp:birthPlace ?birthPlace .
}
```",3,5,4,3,1,3,2,20,9,18,4,0.3333333333333333,0.6923076923076923,0.45
737,1,train,"Give me the child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?person a dbo:Duke ;
          foaf:name ""Albrecht, Duke of Württemberg""@en .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
258,7,train,Give me the establishment of the founding date of Federal University of Paraíba.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/foundingDate> ?v1 . <http://dbpedia.org/resource/Federal_University_of_Paraíba> <http://dbpedia.org/ontology/foundingDate> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?foundingDate WHERE {
  dbr:Federal_University_of_Paraíba dbo:established ?foundingDate .
}
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
668,27,train,"Give me the person born as the birth name of the native, that is an artist, of Central Region, Ghana.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?result <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthName WHERE {
  ?person a dbo:Artist .
  ?person dbo:nationality dbr:Ghana .
  OPTIONAL { ?person dbo:placeOfBirth ?location . }
  FILTER(CONTAINS(LCASE(?location), ""central region, ghana""))
  ?person dbp:birthday ?birthday .
  ?person foaf:name ?birthName .
}
ORDER BY ?person
LIMIT 10
```",3,4,4,3,1,3,3,71,0,0,1,0,0.0,0
159,39,train,"Give me the commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and reference to George Ducas.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?event WHERE {
  # Find the commander of the Battle of Vienna
  ?battle dbo:commander dbr:John_III_Sobieski .
  
  # Link to a television show
  ?show dbo:subject ?battle ;
        rdf:type dbo:TelevisionShow .

  # Link to a societal event
  ?event dbo:subject ?battle ;
         rdf:type dbo:SocietalEvent .

  OPTIONAL {
    ?reference dbo:wikiPageRedirects dbr:George_Ducas .
    FILTER EXISTS { ?show dbo:wikiPageRedirects ?reference . }
    FILTER EXISTS { ?event dbo:wikiPageRedirects ?reference . }
  }
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
905,17,train,"Give me the child, that is a royalty, of the predecessor of Stephen V of Hungary.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
SELECT ?child WHERE {
  ?stephen5 dbo:predecessor ?predecessor .
  ?predecessor foaf:name ""Béla IV of Hungary""@en .
  ?predecessor dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  OPTIONAL { ?child dbo:title ?title . FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"")) }
}
```",2,3,3,2,1,3,3,71,0,0,3,0,0.0,0
375,23,train,Give me the war of the child of Toyotomi Hideyoshi and entity in the birth place of Yamaza Enjirō.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?entity WHERE {
  # Find Toyotomi Hideyoshi's child involved in a war
  ?child dbo:parent dbr:Toyotomi_Hideyoshi .
  ?child dbo:spouse ?spouse . # To ensure it's a notable child
  ?event dbo:agent ?child ;
         rdf:type dbo:MilitaryConflict .

  # Find Yamaza Enjirō's birthplace and an entity related to it
  dbr:Yamaza_Enjiro dbo:birthPlace dbr:Kyoto .
  dbr:Kyoto dbo:wikiPageRedirects ?entity .
  
  # Bind the war involving Toyotomi Hideyori
  BIND(?event AS ?war)
}
```",4,4,5,2,2,2,3,28,0,0,3,0,0.0,0
103,61,train,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/property/occupation> ?v3 . ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v5 . ?v0 <http://dbpedia.org/property/occupation> ?v5 . },"```sparql
# Query to find the alter ego of The Shadow from comics
SELECT ?alterEgo WHERE {
  ?character dbo:wikiPageRedirects db:Q123456; # Replace Q123456 with the DBpedia ID for The Shadow
             dbo:alterEgo ?alterEgo.
}

# Query to find actors in ""Ab Kya Hoga"" and their professions
SELECT ?actor ?profession WHERE {
  ?show dbo:title ""Ab Kya Hoga""@en;
        dbo:castMember ?actor.
  OPTIONAL { ?actor dbo:occupation ?profession. }
}
```",6,8,7,3,2,3,3,71,0,0,39640,0,0.0,0
159,21,train,"Give me the successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and commander in Great Turkish War.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor WHERE {
  ?person dbo:officeHolderOf dbr:Kingdom_of_Poland ;
          dbo:commanderInMilitaryConflicts [
            a dbo:MilitaryConflict ;
            dbo:name ""Great Turkish War""^^xsd:string
          ] .
  
  ?person dbo:succeededBy ?successor .

  FILTER EXISTS {
    ?conflict dbo:name ""Russo-Polish War (1654–1667)""^^xsd:string .
    ?person dbo:commanderInMilitaryConflicts ?conflict .
  }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
531,2,train,Give me the office of Miguel Maura.,SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  VALUES ?miguelMaura { dbr:Miguel_Maura }
  ?miguelMaura dbo:office ?office .
}
UNION
SELECT ?positionHeld WHERE {
  VALUES ?miguelMaura { dbr:Miguel_Maura }
  ?miguelMaura dbo:positionHeld ?positionHeld .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
140,3,train,"Give me the war, that is a societal event, of George Pickett.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/George_Pickett> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  dbr:George_Pickett dbo:participatedIn ?battle .
  ?battle dbo:partOf ?war .
  FILTER(CONTAINS(LCASE(STR(?war)), ""american civil war""))
}
```",1,2,2,1,1,3,2,20,0,0,10,0,0.0,0
353,9,train,Give me the child of Roger II of Sicily and father of William II of Sicily.,SELECT ?result WHERE { <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . },"```sparql
SELECT ?child WHERE {
  ?roger2 dbo:child ?child .
  FILTER(?roger2 = dbpedia:Roger_II_of_Sicily)
  
  ?william2 dbo:parent ?child .
  FILTER(?william2 = dbpedia:William_II_of_Sicily)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
943,12,train,Give me the father of Baeda Maryam I and reference to .,"SELECT ?result WHERE { <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?result <http://xmlns.com/foaf/0.1/name> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?father ?fatherLabel WHERE {
  ?person dbo:father ?father .
  ?person rdfs:label ""Baeda Maryam I""@en .
  ?father rdfs:label ?fatherLabel .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
943,18,train,Give me the father of Baeda Maryam I and reference to  and child of Dawit I.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . ?result <http://xmlns.com/foaf/0.1/name> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person1Label ?person2Label WHERE {
  # Find the father of Baeda Maryam I
  ?baedaMaryamI dbo:father ?father .
  ?baedaMaryamI rdfs:label ""Baeda Maryam I""@en .

  # Find a child of Dawit I
  ?dawitI dbo:child ?child .
  ?dawitI rdfs:label ""Dawit I""@en .

  # Bind labels for output
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
  
  BIND(?father AS ?person1)
  BIND(?child AS ?person2)

  OPTIONAL {
    ?person1 rdfs:label ?person1Label .
  }

  OPTIONAL {
    ?person2 rdfs:label ?person2Label .
  }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
89,36,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of Saw Min Hla.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . },"```sparql
# Step 1: Find Saw Min Phyu's spouse who is royalty
SELECT ?spouse WHERE {
    ?sawMinPhyu dbo:spouse ?spouse .
    FILTER EXISTS { ?spouse dbo:title ?title . FILTER regex(?title, ""royalty"", ""i"") }
}

# Assuming we have identified the royal spouse from above query, let's call it ?royalSpouse

# Step 2: Find child of the royal spouse
SELECT ?child WHERE {
    ?royalSpouse dbo:child ?child .
}

# Assuming we have identified the child from above query, let's call it ?childOfRoyalSpouse

# Step 3: Find predecessor of this child
SELECT ?predecessor WHERE {
    ?childOfRoyalSpouse dbo:predecessor ?predecessor .
}
```

Note: The actual SPARQL queries would need to be executed in sequence, and the results from one query would feed into the next. This is a conceptual breakdown as DBpedia might not have direct relationships for all these steps.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
203,3,train,Give me the figure known as The Triple X's.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/nickname> ""The Triple X's""@en . }","```sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?painting ?officialTitle WHERE {
  ?painting rdfs:label ""The Triple X's""@en .
  OPTIONAL { ?painting dbo:title ?officialTitle . }
  FILTER (lang(?officialTitle) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
89,33,train,"Give me the child of Saw Min Hla and spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v3 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?v0 <http://dbpedia.org/property/father> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Identify Saw Shwe Khet's child who is royalty
SELECT ?royalChild WHERE {
  ?royalChild dbo:parent dbr:Saw_Shwe_Khet .
  ?royalChild dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen""))
}

# Step 2: Determine the father of that royal child
SELECT ?father WHERE {
  ?royalChild dbo:parent ?father .
  # Assuming we have identified a specific royal child from step 1, replace `?royalChild` with the actual URI
}

# Step 3: Find the spouse of that father
SELECT ?spouse WHERE {
  ?father dbo:spouse ?spouse .
  # Replace `?father` with the actual URI obtained from step 2
}

# Step 4: Identify the child of Saw Min Hla and the spouse from step 3
SELECT ?finalChild WHERE {
  ?finalChild dbo:parent dbr:Saw_Min_Hla ;
              dbo:spouse ?spouse .
  # Replace `?spouse` with the actual URI obtained from step 3
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
89,25,train,Give me the predecessor of the child of Saw Shwe Khet and spouse of Saw Shwe Khet.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?predecessor ?spouse WHERE {
  ?sawShweKhet a dbo:Person ;
               foaf:name ""Saw Shwe Khet""@en .
  
  ?sawShweKhet dbo:child ?child .
  ?child dbo:predecessor ?predecessor .

  ?sawShweKhet dbo:spouse ?spouse .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
375,16,train,"Give me the parent of the native, that is an artist and a musical artist, of London and author of the movie, that is a work and a television show, with Vera Lynn.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/London> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://dbpedia.org/ontology/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Vera_Lynn> . ?result <http://dbpedia.org/ontology/child> ?v3 . },"```sparql
SELECT ?parent WHERE {
  ?noel dbo:nationality dbr:United_Kingdom ;
        foaf:birthPlace dbr:London ;
        dbo:occupation dbr:Artist ;
        dbo:occupation dbr:Musical_artist .
  
  ?work dbo:author ?noel ;
        rdf:type dbr:Film ;
        dbo:starring dbr:Vera_Lynn .

  ?noel foaf:parent ?parent .
}
```",4,8,5,2,2,3,2,20,0,0,1,0,0.0,0
531,23,train,"Give me the tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/property/residence> ?v0 . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v2 . },"```sparql
SELECT ?mayorName ?residence WHERE {
  ?event dcterms:isPartOf <http://dbpedia.org/resource/2003_Madrid_municipal_election> .
  ?event dbo:positionHeldBy ?person .
  ?person foaf:name ?mayorName .
  FILTER(CONTAINS(LCASE(?person), ""alberto ruiz-gallardon"")) .
  
  ?residence dbo:officialResidenceOf ?person ;
             rdfs:label ?residenceLabel .
  FILTER(CONTAINS(LCASE(?residenceLabel), ""casa de la villa""))
}
```",3,4,4,3,1,3,3,71,0,0,375,0,0.0,0
756,35,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?manager1 ?teamManagedByLetsch WHERE {
  # Find the manager of VfL Bochum during the 2007–08 season
  ?club a dbo:SoccerClub ;
        rdfs:label ""VfL Bochum""@en .
  
  ?season dbo:sport dbr:Soccer ;
          dbo:team ?club ;
          dbo:startDate ?start ;
          dbo:endDate ?end .

  FILTER (?start <= ""2007-07-01""^^xsd:date && ?end >= ""2008-06-30""^^xsd:date)

  ?club dbo:manager ?manager1 .
  
  # Find the team managed by Thomas Letsch
  ?letsch dbr:Thomas_Letsch ;
          dbo:occupation dbo:SoccerManager .

  ?teamManagedByLetsch a dbo:SoccerClub ;
                       dbo:manager ?letsch .
}
```",4,10,5,2,2,3,3,71,0,0,1,0,0.0,0
531,13,train,"Give me the office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?office WHERE {
  ?person dbo:nationality dbr:Central_African_Republic .
  ?person dbo:occupation dbr:Politician .
  ?person dbo:officeHolderOf ?office .
  ?war dbo:participant ?person .
  ?war rdfs:label ""Central African Republic Civil War""@en .
  
  FILTER EXISTS {
    ?office dbo:positionTitle ?title .
    FILTER(CONTAINS(LCASE(?title), ""commander""))
  }
}
```",2,4,3,2,1,3,3,71,0,0,485,0,0.0,0
39,10,train,Give me the band of Bob Thompson (musician) and professional in Singer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Singer""@en . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band ?occupation 
WHERE {
  ?person a dbo:Musician ;
          foaf:name ""Bob Thompson"" ;
          dbo:occupation ?occupation .
  
  OPTIONAL { ?person dbo:band ?band . }
  
  FILTER(CONTAINS(LCASE(?occupation), ""singer""))
}
```",2,2,3,1,2,3,3,71,0,0,3,0,0.0,0
119,21,train,Give me the office of the leader of 2009 Galician regional election and tenant of Santiago de Compostela.,SELECT ?result WHERE { <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v1 . ?v1 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?office WHERE {
  ?election dbo:electionDate ?date .
  FILTER (YEAR(?date) = 2009)
  ?election dbo:resultingOffice ?office .
  ?result dbo:winner ?person .
  ?person dbo:birthPlace dbr:Santiago_de_Compostela .
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
737,32,train,"Give me the child of the child of Duke Philipp of Württemberg and predecessor of the child of Philipp Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v3 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person WHERE {
  # Duke Philipp of Württemberg's child
  ?philippChild dbo:childOf dbp:Duke_Philipp_of_W%C3%BCrttemberg .
  
  # Duke Philipp's grandchild (child of his child)
  ?grandchild dbo:childOf ?philippChild .

  # Predecessor of the grandchild
  ?predecessor dbo:succesor ?grandchild .

  # Philipp Albrecht, Duke of Württemberg's child
  ?albrechtChild dbo:childOf dbp:Philipp_Albrecht,_Duke_of_W%C3%BCrttemberg .
  
  # The person who is both the predecessor and a child of Philipp Albrecht
  FILTER (?predecessor = ?albrechtChild)
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
23,12,train,Give me the entity in Colombia and party of Gustavo Petro and party of Roy Barreras.,SELECT ?result WHERE { <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?party WHERE {
  VALUES ?person { 
    dbr:Gustavo_Petro 
    dbr:Roy_Barreras 
  }
  ?person dbo:country dbr:Colombia .
  ?person dbo:politicalParty ?party .
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
225,6,train,Give me the entity in Japan and birthplace of Chieko Asakawa.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> . <http://dbpedia.org/resource/Chieko_Asakawa> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity WHERE {
  ?person a dbo:Person ;
          foaf:name ""Chieko Asakawa""@en .
  ?person dbo:birthPlace ?entity .
  FILTER (CONTAINS(LCASE(str(?entity)), ""japan""))
}
```",2,2,3,1,2,3,2,20,0,1,1,0.0,0.0,0
68,16,train,"Give me the father of the child, that is a royalty, of Philip I of Castile and father of Isabella of Austria.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . },"```sparql
SELECT ?child ?father WHERE {
  wd:Q1198 wdt:P22 ?father . # Philip I of Castile (Q1198) and his father
  ?child wdt:P25 wd:Q1198 . # Children of Philip I of Castile
  ?child wdt:P31/wdt:P279* wd:Q33999 . # The child is a royalty (instance of or subclass of royalty)
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
412,11,train,Give me the war of the awardee of 30.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
SELECT ?awardee ?awardYear ?war WHERE {
  ?awardee dbo:award dbpedia:Nobel_Prize_in_Peace.
  ?awardee dbo:number ""30""^^xsd:int.
  OPTIONAL { ?awardee dbo:birthPlace ?place. }
  OPTIONAL { ?awardee dbo:deathPlace ?place. }
  OPTIONAL {
    ?awardee dbo:wikiPageDisambiguates ?disambiguation.
    ?disambiguation dbo:wikiPageWikiLink ?war.
    FILTER (CONTAINS(LCASE(?war), ""war""))
  }
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,2,3,2,1,2,3,28,0,0,526,0,0.0,0
468,10,train,"Give me the father, that is a royalty, of the parent of Martin of Aragon.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Martin_of_Aragon> . },"```sparql
SELECT ?grandfather WHERE {
  ?martin dbo:birthPlace dbr:Aragon .
  ?martin rdfs:label ""Martin of Aragon""@en .
  
  OPTIONAL { ?martin dbo:parent ?parent . }
  
  OPTIONAL { ?parent dbo:parent ?grandfather . }

  FILTER EXISTS { 
    ?grandfather dbo:royaltyStatus ?status .
    FILTER (str(?status) = ""Royal"")
  }
}
```",2,3,3,2,1,3,2,20,0,0,2,0,0.0,0
80,19,train,Give me the actor of the movie with  and actor of ATL (film).,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/starring> """"@en . }","```sparql
# Query to find an actor from ""The Godfather""
SELECT ?actor WHERE {
  dbr:The_Godfather dbo:starring ?actor .
}

UNION

# Query to find actors of the film ""ATL""
SELECT ?atlActor WHERE {
  dbr:ATL (dbo:starring) ?atlActor .
}
```",3,3,4,2,2,3,3,71,0,0,10,0,0.0,0
89,35,train,Give me the child of the parent of Min Hla Htut of Pyakaung and predecessor of the child of Saw Shwe Khet.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> ?v1 . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfParent ?predecessor WHERE {
  # Step 1: Identify Min Hla Htut and his parent
  ?minHlaHtut a dbo:Person ;
              foaf:name ""Min Hla Htut""@en .
  
  ?parent dbo:child ?minHlaHtut .

  # Step 2: Find the child of this parent (should be Min Hla Htut)
  ?childOfParent dbo:parent ?parent .

  # Step 3: Identify Saw Shwe Khet and his child
  ?sawShweKhet a dbo:Person ;
               foaf:name ""Saw Shwe Khet""@en .
  
  ?sawChild dbo:parent ?sawShweKhet .

  # Step 4: Find the predecessor of this child
  ?predecessor dbo:succeededBy ?sawChild .

  # Step 5: Match the results to find the common individual
  FILTER (?childOfParent = ?predecessor)
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
756,34,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and manager of 2020–21 SBV Vitesse season.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v2 <http://dbpedia.org/ontology/team> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v2 . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?manager WHERE {
  # Find the successor of the 2006–07 VfL Bochum season
  ?vflBochumSeason a dbo:SoccerLeagueSeason ;
                   dbo:succeeds ?successorVfLBochum .

  # Find the successor of the 2020–21 SBV Vitesse season
  ?sbVVitesseSeason a dbo:SoccerLeagueSeason ;
                    dbo:succeeds ?successorSBVVitesse .

  # Identify players associated with soccer clubs that are also sports clubs and organizations
  ?player dbo:playsFor ?soccerClub .
  ?soccerClub rdf:type dbo:SoccerClub, dbo:SportsTeam, dbo:Organization .

  # Find the manager of these players in the respective successor seasons
  ?successorVfLBochum dbo:manager ?manager .
  ?successorSBVVitesse dbo:manager ?manager .

  FILTER(?vflBochumSeason = dbr:2006–07_VfL_Bochum_season)
  FILTER(?sbVVitesseSeason = dbr:2020–21_SBV_Vitesse_season)
}
```",4,10,5,3,2,3,3,71,0,0,1,0,0.0,0
80,30,train,Give me the actor of ATL (film) and professional in the alter ego of The Shadow and actor of Shelby Oaks.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Query to get the actor of ATL (film)
SELECT ?actor WHERE {
  ?movie dbo:productionName ""ATL""@en .
  ?movie dbo:starring ?actor .
}

UNION

# Query to find Lamont Cranston, the alter ego of The Shadow
SELECT ?person WHERE {
  ?character rdfs:label ""The Shadow""@en .
  ?character dbo:alterEgo ?person .
  ?person rdfs:label ""Lamont Cranston""@en .
}

UNION

# Query to get the actor who played Shelby Oaks
SELECT ?actor WHERE {
  ?role rdfs:label ""Shelby Oaks""@en .
  ?role dbo:portrayedBy ?actor .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
585,13,train,"Give me the native of the award, that is American and a settlement, of the awardee of New York (state).",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?nativePlace WHERE {
  ?award dbo:awardedBy dbr:New_York_(state) .
  ?award dbo:country dbr:United_States .
  ?award dbo:settlement dbr:New_York_City .
  ?award dbo:nativePlace ?nativePlace .
}
```",3,5,4,3,1,3,2,20,0,0,8569,0,0.0,0
263,6,train,"Give me the native of Middlesex and parent of Mary Elphinstone, Lady Elphinstone.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthPlace dbr:Middlesex .
  ?person dbo:child dbr:Mary_Elphinstone,_Lady_Elphinstone .
}
```",2,2,3,1,2,2,3,28,0,0,2,0,0.0,0
628,41,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and person born as the birth name of Bobby Shmurda and native of Florida.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v4 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v4 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?bandMember WHERE {
  # Step 1: Identify Bobby Shmurda's associated musical artist
  dbr:Bobby_Shmurda dbo:associatedMusicalArtist ?artist .

  # Step 2: Find band members of the associated artist who are also musical artists
  ?artist dbo:member ?bandMember .
  ?bandMember a dbo:Band ;
              dbo:musicalArtist ?musicalArtistRole .

  # Step 3: Identify Bobby Shmurda's birth name and native state
  dbr:Bobby_Shmurda dbp:birthName ""Rakim Mayers""@en ;
                    dbp:nativePlace dbr:Florida .

  # Step 4: Filter band members by birth name and native state
  ?bandMember dbp:birthName ""Rakim Mayers""@en .
  ?bandMember dbo:nativePlace dbr:Florida .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
258,15,train,"Give me the establishment of the founding date of the alma mater, that is a university and an organisation and an educational institution, of Luiza Erundina and alma mater of Eleonora Menicucci.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>. ?v0 <http://dbpedia.org/ontology/foundingDate> ?v1 . <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/ontology/almaMater> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. <http://dbpedia.org/resource/Luiza_Erundina> <http://dbpedia.org/ontology/almaMater> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/foundingDate> ?v1 . },"```sparql
SELECT ?establishmentDate WHERE {
  dbpedia:Universidade_de_São_Paulo dbo:foundingDate ?establishmentDate .
}
```",4,7,5,3,2,3,2,20,0,0,1,0,0.0,0
375,14,train,"Give me the parent of the native, that is an artist and a musical artist, of the location, that is English and a settlement, for ,.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://dbpedia.org/ontology/postalCode> "","" . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom>. ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
SELECT DISTINCT ?parent WHERE {
  # Step 1: Find a location that is an English settlement
  ?location dcterms:isPartOf dbc:England ;
            dbo:type dbp:Settlement .
  
  # Step 2: Identify natives of this location who are artists and musical artists
  ?person dbo:nationality dbc:England ;
          dbo:birthPlace ?location ;
          dbo:occupation dbp:Artist ;
          dbo:occupation dbp:MusicalArtist .

  # Step 3: Find the parent of this individual
  OPTIONAL { ?person dbo:parent ?parent . }
}
```",3,7,4,3,1,3,2,20,0,0,21,0,0.0,0
531,3,train,"Give me the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?mayor ?mayorName WHERE {
    ?election dbo:electionDate ?date .
    ?election dbo:officeHolder ?mayor .
    ?mayor rdfs:label ?mayorName .
    
    FILTER(CONTAINS(LCASE(?mayorName), ""alcalde de madrid""))
    FILTER(YEAR(?date) = 2003)
}
```",1,2,2,1,1,3,3,71,0,0,2,0,0.0,0
609,41,train,"Give me the birth place of the governor, that is a politician, of Virginia and birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of Cece Bell.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v4 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query for the birthplace of Glenn Youngkin (Governor of Virginia)
SELECT ?birthPlace WHERE {
  wd:Q1105010 dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birthplace of Vince Gilligan
SELECT ?birthPlace WHERE {
  wd:Q210978 dbo:award ?award .
  ?award dbo:recipient wd:Q210978 .
  wd:Q210978 dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birthplace of Cece Bell
SELECT ?birthPlace WHERE {
  wd:Q5595010 dbo:birthPlace ?birthPlace .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
270,1,train,Give me the person decedent at Melbourne.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Melbourne> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person ;
          dbo:deathPlace dbr:Melbourne .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,1,2,1,1,2,2,9,809,848,0,0.48823174411587206,1.0,0.6561232765612327
756,61,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26 and native of the administration, that is a country, of the leader of West Germany.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://dbpedia.org/ontology/manager> ?v1 . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v5 <http://dbpedia.org/property/leader> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager WHERE {
  # Step 1: Identify the leader of West Germany (Chancellor)
  ?leader a dbo:HeadOfGovernment ;
          dbo:country dbr:West_Germany .

  # Step 2: Determine the country of administration
  ?administration dbo:headLeader ?leader ;
                  a dbo:Civilization .

  # Step 3: Find the sports manager born on 1968-08-26 in that country
  ?person dbo:birthDate ""1968-08-26""^^xsd:date ;
          dbo:nationality ?administration ;
          a dbo:SportsManager .

  # Step 4: Identify the team they managed during a specific season
  ?teamSeason dbo:manager ?person ;
              a dbo:SportsTeamSeason .

  # Step 5: Determine the manager of that team for the same season
  ?teamSeason dbo:manager ?manager .
}
```",6,11,7,3,2,3,3,71,0,0,3,0,0.0,0
557,34,train,"Give me the producer of A Star Is Born (1937 film) and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v2 <http://dbpedia.org/property/alterEgo> ?v1 . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer ?alterEgoProfession
WHERE {
  # Query for the producer of A Star Is Born (1937 film)
  dbr:A_Star_Is_Born_(1937_film) dbo:producer ?producer .

  # Query for Kent Allard's alter ego profession
  OPTIONAL {
    ?kentAllard dbo:alterEgo ?alterEgo .
    ?alterEgo dbo:profession ?alterEgoProfession .
    FILTER (str(?kentAllard) = ""Kent_Allard"")
  }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
609,18,train,Give me the birth place of Vince Gilligan and birth place of Cece Bell and birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?birthPlace WHERE {
  VALUES ?name { ""Vince Gilligan"" ""Cece Bell"" ""Glenn Youngkin"" }
  
  ?person foaf:name ?name .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
119,56,train,"Give me the tenant of Spain and tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and office of the leader of 2009 Galician regional election.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v2 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?roleInPSOE ?primeMinisterRole WHERE {
  # Identify José Luis Rodríguez Zapatero
  VALUES ?person { dbr:José_Luis_Rodríguez_Zapatero }

  # Confirm his role in PSOE around 2009
  OPTIONAL {
    ?person dbo:memberOfParty dbr:Spanish_Socialist_Workers'_Party .
    ?person dbo:officeHolder ?roleInPSOE .
    FILTER (YEAR(?roleInPSOE) <= 2009 && YEAR(?roleInPSOE) >= 2007)
  }

  # Verify his position as Prime Minister of Spain during that period
  OPTIONAL {
    ?person dbo:positionHeld dbr:Prime_Minister_of_Spain .
    ?person dbo:officeHolder ?primeMinisterRole .
    FILTER (YEAR(?primeMinisterRole) <= 2009 && YEAR(?primeMinisterRole) >= 2007)
  }
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
905,6,train,"Give me the father, that is a royalty, of Charles I of Hungary.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father ?title WHERE {
  wd:Q1116 wdt:P22 ?father .
  OPTIONAL { ?father wdt:P39 ?title . }
  FILTER EXISTS { ?title rdfs:label ?label . FILTER (CONTAINS(LCASE(?label), ""royalty"")) }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
159,24,train,Give me the reference to the writer of Always the Love Songs and commander in Great Turkish War.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v2 . <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v2 . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
# Query for the writer of ""Always the Love Songs""
SELECT ?author WHERE {
  ?work dcterms:title ""Always the Love Songs"" .
  ?work dbo:creator ?author .
  ?author a dbo:Writer .
}

UNION

# Query for a commander in the Great Turkish War
SELECT ?commander WHERE {
  ?person dbo:nationality dbr:Habsburg_Monarchy ;
          dbo:occupation dbr:Military_person ;
          dbo:wikiPageDisambiguates ?disambiguation .
  FILTER(CONTAINS(LCASE(?disambiguation), ""prince eugene of savoy"") || CONTAINS(LCASE(?disambiguation), ""great turkish war""))
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
78,23,train,"Give me the band member of the associated musical artist of David Paton and associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . }","```sparql
# Find band members associated with David Paton's musical artist (Simple Minds)
SELECT ?member WHERE {
  ?band dbr:Simple_Minds .
  ?band dbo:bandMember ?person .
  ?person foaf:name ?name .
  FILTER EXISTS { 
    ?person dbo:associatedBand dbr:David_Paton .
  }
  BIND(?name AS ?simpleMindsMember)
}

UNION

# Find band members associated with Stuart Mcbeath Tosh's musical artist (Big Country)
SELECT ?member WHERE {
  ?band dbr:Big_Country .
  ?band dbo:bandMember ?person .
  ?person foaf:name ?name .
  FILTER EXISTS { 
    ?person dbo:associatedBand dbr:Stuart_McBeath_Tosh .
  }
  BIND(?name AS ?bigCountryMember)
}
```",4,5,5,2,2,2,3,28,0,0,2,0,0.0,0
492,13,train,Give me the death place of the actor of The Sky Ranger (1928 film) and death place of Carolyn Jones.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v1 . <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
SELECT ?actorName ?actorDeathPlace ?carolynJonesDeathPlace WHERE {
  # Find Harry Carey's place of death
  ?actor dbo:name ""Harry Carey""@en .
  ?actor dbo:deathPlace ?actorDeathPlace .

  # Find Carolyn Jones's place of death
  ?carolynJones dbo:name ""Carolyn Jones""@en .
  ?carolynJones dbo:deathPlace ?carolynJonesDeathPlace .

  BIND(""Harry Carey"" AS ?actorName)
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
468,13,train,"Give me the reference to the real name of the child, that is a royalty, of Alfonso IV of Aragon.",SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://xmlns.com/foaf/0.1/name> ?v1 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childName WHERE {
  # Identify Alfonso IV of Aragon
  dbr:Alfonso_IV_of_Aragon dbo:child ?child .
  
  # Check if the child has a royal title
  OPTIONAL { ?child dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Princess"", ""i"") }
  
  # Retrieve the real name of the child
  ?child rdfs:label ?childName .
  
  # Filter out non-English labels and ensure it's a person
  FILTER (langMatches(lang(?childName), ""EN""))
  FILTER EXISTS { ?child rdf:type dbo:Person . }
}
```",3,4,4,3,1,3,2,20,0,2,17,0.0,0.0,0
412,5,train,Who is the awardee of 30?,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?category ?winner WHERE {
    ?awardEvent a dbo:Award ;
                dbo:number ""30""^^xsd:int ;
                dbo:recipient ?winner .
    OPTIONAL { ?awardEvent dbo:category ?category . }
}
```",1,1,2,1,1,2,3,28,0,0,951,0,0.0,0
89,55,train,"Give me the spouse of the father, that is a royalty, of Myat Hpone Pyo and child of the parent of Min Hla Htut of Pyakaung and predecessor of the child of Saw Shwe Khet.",SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v5 . ?result <http://dbpedia.org/ontology/parent> ?v3 . ?result <http://dbpedia.org/ontology/spouse> ?v5 . ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Myat Hpone Pyo's father who is a royalty
  ?myatHponePyo dbo:child ?father .
  ?father rdf:type dbo:Monarch .

  # Step 2: Find the spouse of Myat Hpone Pyo's royal father
  ?father dbo:spouse ?spouse .

  # Step 3: Identify Min Hla Htut's parent
  ?minHlaHtut dbo:child ?parent .
  
  # Ensure the spouse is related to Min Hla Htut's parent
  ?parent dbp:hasParent ?spouse .

  # Step 4: Find the predecessor of Saw Shwe Khet's child
  ?sawShweKhet dbo:child ?child .
  ?predecessor dbo:succeededBy ?child .

  # Ensure the spouse is related to the predecessor
  ?predecessor dbp:hasParent ?spouse .
}
```",6,7,7,2,3,3,3,71,0,0,1,0,0.0,0
119,36,train,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and office of Alberto Núñez Feijóo.","SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?primeMinister WHERE {
  ?party a dbo:PoliticalParty ;
         rdfs:label ""Spanish Socialist Workers' Party""@en .
  
  ?governmentPosition a dbo:GovernmentPosition ;
                      rdfs:label ""Prime Minister of Spain""@en ;
                      dbo:officeHolder ?person .

  ?person dbo:memberOf ?party .
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
345,8,train,Give me the reference to Mitaka and region of the time zone of Japan.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Mitaka""@en . <http://dbpedia.org/resource/Japan> <http://dbpedia.org/property/timeZone> ?v1 . ?result <http://dbpedia.org/ontology/timeZone> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?mitakaURL ?region
WHERE {
  # Get the URL for Mitaka
  dbr:Mitaka a dbo:PopulatedPlace ;
             foaf:isPrimaryTopicOf ?mitakaURL .

  # Get the time zone of Japan and its region
  dbr:Japan dbo:timeZone ?timezone .
  ?timezone dbo:region ?region .
}
```",3,3,4,2,2,2,2,9,0,0,1,0,0.0,0
398,15,train,"Give me the figure known as the nickname of the player, that is a soccer club, in Denis Kolodin and player in Aleksandr Filimonov.",SELECT ?result WHERE { <http://dbpedia.org/resource/Denis_Kolodin> <http://dbpedia.org/ontology/team> ?v0 . ?result <http://dbpedia.org/property/nickname> ?v1 . <http://dbpedia.org/resource/Aleksandr_Filimonov> <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/property/nickname> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?nickname ?player WHERE {
  # Find Denis Kolodin's nicknames that are soccer clubs
  ?kolodin a dbo:SoccerPlayer ;
           foaf:name ""Denis Kolodin""@en .
  
  ?kolodin dbo:nickname ?nickname .
  ?club a dbo:FootballClub ;
        foaf:name ?nickname .

  # Find the player associated with Aleksandr Filimonov
  ?filimonov a dbo:SoccerPlayer ;
             foaf:name ""Aleksandr Filimonov""@en .
  
  ?team a dbo:SportsTeam ;
        dbo:member ?filimonov ;
        dbo:member ?player .
}
```",4,5,5,3,2,3,2,20,0,0,2,0,0.0,0
871,6,train,"Who is the child of Frederick Stanley, 16th Earl of Derby?","SELECT ?result WHERE { <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child WHERE {
    ?person dbo:spouse ?spouse .
    OPTIONAL { ?person dbp:children ?child . }
    FILTER(?person = dbpedia:Frederick_Stanley,_16th_Earl_of_Derby)
}
```",1,1,2,1,1,3,3,71,0,0,5,0,0.0,0
531,29,train,"Give me the tenant of Madrid and office of the commander, that is an office holder and a politician, in Central African Republic Civil War and office of Miguel Maura.",SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?v3 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?miguelOffice ?commanderPolitician ?madridOfficeHolder WHERE {
  # Find Miguel Maura's office
  dbr:Miguel_Maura dbo:office ?miguelOffice .

  # Find individuals who were commanders and politicians in the Central African Republic Civil War
  ?commanderPolitician a dbo:Person ;
                      dbo:occupation ?occupation1, ?occupation2 .
  FILTER (?occupation1 = dbo:Commander && ?occupation2 = dbo:Politician) .
  ?commanderPolitician dbo:participatedIn dbr:Central_African_Republic_Civil_War .

  # Find any overlap with someone holding an office in Madrid
  OPTIONAL {
    ?madridOfficeHolder a dbo:Person ;
                       dbo:office ?madridOffice ;
                       dbo:residence dbr:Madrid .
  }

  # Check for connections between these entities
  FILTER (?miguelOffice = ?commanderPolitician || ?commanderPolitician = ?madridOfficeHolder)
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
769,10,train,"Give me the manager, that is a sports manager and a soccer manager, of the reference, that is an organisation and a sports club and a sports team and a soccer club, to Hong Kong C.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v0 <http://dbpedia.org/ontology/manager> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v0 <http://xmlns.com/foaf/0.1/name> ""Hong Kong C""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?manager WHERE {
  ?club a dbo:SoccerClub ;
        dbo:sport dbr:Soccer ;
        dbo:location dbr:Hong_Kong ;
        dbo:teamName ""Hong Kong C""@en .
  
  ?club dbo:manager ?manager .

  ?manager a dbo:SportsManager ;
           dbo:occupation dbr:Soccer_Manager .
}
```",2,8,3,2,1,3,2,20,0,0,1,0,0.0,0
871,30,train,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of Edward Stanley, 17th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . }","```sparql
SELECT ?father WHERE {
    ?person dbo:parent ?father .
    ?person rdfs:label ""Edward Stanley, 17th Earl of Derby""@en .
    FILTER NOT EXISTS { ?person dbo:occupation ?occupation . FILTER regex(?occupation, ""politician"", ""i"") }
}
```",4,5,5,2,3,3,3,71,1,0,0,1.0,1.0,1.0
633,15,train,"Give me the spouse of the parent, that is a royalty and a noble, of the child, that is a royalty, of Antoine, Duke of Lorraine and parent of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Antoine,_Duke_of_Lorraine> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. }","```sparql
SELECT ?spouse WHERE {
  ?antoine dbo:title ""Duke of Lorraine""@en .
  ?antoine foaf:name ""Antoine, Duke of Lorraine"" .
  
  ?francis dbo:parent ?antoine ;
          dbo:title ""Duke of Lorraine""@en .
  ?francis foaf:name ""Francis I, Duke of Lorraine"" .

  ?antoine dbo:spouse ?spouse .
  
  OPTIONAL { ?spouse dbo:title ?title . FILTER(CONTAINS(LCASE(?title), ""royalty"")) }
  OPTIONAL { ?spouse dbo:title ?nobleTitle . FILTER(CONTAINS(LCASE(?nobleTitle), ""noble"")) }
}
```",4,7,5,3,2,3,2,20,0,0,1,0,0.0,0
213,7,train,"Give me the birth place of the child, that is a politician, of Chiang Ching-kuo.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Chiang_Ching-kuo> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person dbo:parent dbc:Chiang_Ching-kuo ;
          foaf:name ""Chiang Hsiao-wen""@zh .
  ?person dbo:birthPlace ?birthPlace .
}
```",2,3,3,2,1,3,2,20,0,0,3,0,0.0,0
595,45,train,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and author of Back to Work (book) and spouse of Hillary Clinton.",SELECT ?result WHERE { <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. },"```sparql
SELECT ?commander WHERE {
  ?person dbo:spouse dbr:Hillary_Clinton .
  ?person dbo:author dbr:Back_to_Work_(book) .
  ?ship dbo:owner ?person .
  ?ship rdfs:label ""USS Arcadia (ID-1605)""@en .
  
  ?war dbo:commander ?commander .
  ?war rdf:type dbo:Military_conflict .
  ?war rdfs:label ?eventLabel .
  FILTER(CONTAINS(LCASE(?eventLabel), ""world war i"") || CONTAINS(LCASE(?eventLabel), ""great war""))
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
595,57,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of Hillary Clinton and commander in the war, that is a disease and a societal event, of United States Navy.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v3 . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://dbpedia.org/property/author> ?v0 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v5 <http://dbpedia.org/property/author> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?person dbo:spouse dbr:Hillary_Clinton .
  ?person dbo:residence dbr:Chappaqua,_New_York .
  ?person a dbo:Politician ;
          a dbo:OfficeHolder .
  ?person dbo:militaryCommander ?commandRole .
  ?commandRole dbo:conflict ?war .
  ?war rdfs:label ?warLabel .
  FILTER(CONTAINS(LCASE(?warLabel), ""gulf war"") || CONTAINS(LCASE(?warLabel), ""societal event"") || CONTAINS(LCASE(?warLabel), ""disease"")) .
  
  ?person dbo:author ?book .
  ?book a dbo:Book ;
        a dbo:WrittenWork .
  
  BIND(STRAFTER(STR(?person), ""http://dbpedia.org/resource/"") AS ?author)
}
```",6,13,7,3,3,3,3,71,0,0,1,0,0.0,0
668,22,train,Give me the associated musical artist of $pacely and person born as the birth name of Joey B.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Find the musical artist associated with ""Pacely"" (Tupac Shakur)
  OPTIONAL { 
    dbr:Tupac_Shakur dbo:musicalArtist ?artist .
  }
  
  # Find the person born as Joseph Aning
  OPTIONAL {
    ?person dbo:birthName dbr:Joseph_Aning ;
            rdfs:label ""Joey B""@en .
    
    # Check if this person is the same as the artist found above
    FILTER (?artist = ?person)
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
595,18,train,Give me the spouse of Hillary Clinton and author of Back to Work (book) and commander in Third Taiwan Strait Crisis.,SELECT ?result WHERE { <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT ?person WHERE {
  ?person dbo:spouse dbr:Hillary_Clinton .
  ?book dbo:author ?person ;
        rdfs:label ""Back to Work (book)""@en .
  ?crisis dbo:commander ?person ;
          rdfs:label ""Third Taiwan Strait Crisis""@en .
}
```",3,3,4,1,3,3,3,71,1,0,0,1.0,1.0,1.0
513,12,train,Give me the residence of the leader of Ulster Unionist Party and entity in United Kingdom.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/residence> ?result . <http://dbpedia.org/resource/Ulster_Unionist_Party> <http://dbpedia.org/ontology/leader> ?v0 . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom> . },"```sparql
SELECT ?leader ?residence WHERE {
  ?party dbo:wikiPageRedirects dbc:Ulster_Unionist_Party .
  ?party dbo:leader ?leader .
  OPTIONAL { ?leader foaf:based_near ?location . }
  OPTIONAL { ?location rdfs:label ?residence FILTER (lang(?residence) = ""en"") }
}
```",3,3,4,2,2,3,2,20,0,0,2,0,0.0,0
905,41,train,"Give me the parent of the father, that is a royalty, of Charles I of Hungary and child of Stephen V of Hungary and spouse of the father of Philip I, Prince of Taranto.","SELECT ?result WHERE { <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v4 . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?parent WHERE {
  # Step 1: Identify Charles I of Hungary's father
  dbpedia:Charles_I_of_Hungary dbo:father ?charlesFather .

  # Step 2: Determine the parent of that father who is royalty
  ?charlesFather dbo:motherOrFather ?royalParent .
  
  # Step 3: Find Stephen V of Hungary's child
  ?royalParent dbp:childOf dbpedia:Stephen_V_of_Hungary .

  # Step 4: Identify Philip I, Prince of Taranto's father
  dbpedia:Philip_I,_Prince_of_Taranto dbo:father ?philipFather .

  # Step 5: Determine the spouse of that father
  ?philipFather dbo:spouse ?parent .
  
  FILTER(?royalParent = ?parent)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
782,56,train,"Give me the reference to the real name of The Fabulous Thunderbirds and band of Kim Wilson and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?thunderbirdsName ?kimWilsonAssociation ?nickCurranName ?associatedArtist
WHERE {
  # Find the real name of The Fabulous Thunderbirds
  dbr:The_Fabulous_Thunderbirds dbo:name ?thunderbirdsName .

  # Check if Kim Wilson is associated with The Fabulous Thunderbirds
  OPTIONAL { 
    dbr:Kim_Wilson dbo:musicalArtist ?band .
    FILTER(?band = dbr:The_Fabulous_Thunderbirds)
    BIND(""Kim Wilson"" AS ?kimWilsonAssociation)
  }

  # Find the real name of Nick Curran
  dbr:Nick_Curran dbo:name ?nickCurranName .

  # Find associated musical artist with Nick Curran
  OPTIONAL {
    dbr:Nick_Curran dbo:associatedMusicalArtist ?artist .
    BIND(?artist AS ?associatedArtist)
  }
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
687,19,train,"Give me the player in the person born, that is an athlete, on 1955-02-22 and player in Sergio Agüero.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?player WHERE {
  ?person a dbo:Athlete ;
          dbo:birthDate ""1955-02-22""^^xsd:date ;
          foaf:name ?name .
  
  ?team dbo:member ?person .
  ?team dbo:member dbr:Sergio_Agüero .

  FILTER NOT EXISTS { ?person = dbr:Sergio_Agüero }
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
158,3,train,"Give me the birthplace, that is a country, of Sandro Bertaggia.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country WHERE {
  ?person a dbo:Person ;
          foaf:name ""Sandro Bertaggia""@en .
  ?person dbo:birthPlace ?place .
  ?place rdf:type dbo:Country ;
         rdfs:label ?country .
}
```",1,2,2,1,1,2,3,28,0,0,1,0,0.0,0
203,53,train,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of Battle of Fort Royal and military force of the force, that is an event and a societal event, of Robert Calder.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?result <http://dbpedia.org/ontology/battle> ?v1 . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  # Find the commander of the Battle of Fort Royal
  ?battle dbo:commander ?commander .
  FILTER(STRSTARTS(STR(?battle), ""http://dbpedia.org/resource/Battle_of_Fort_Royal_(1778)"")) .

  # Ensure this commander is also associated with The Triple X's military conflict
  ?conflict dbo:commander ?commander .
  ?conflict rdfs:label ?label .
  FILTER(CONTAINS(LCASE(?label), ""triple x's"") || CONTAINS(LCASE(?label), ""battle of fort royal"")) .

  # Ensure this commander is involved in an event with Robert Calder
  ?event dbo:agent ?commander ;
         dbo:agent dbr:Robert_Calder .
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
723,10,train,"Give me the associated musical artist, that is an organisation, of the associated musical artist, that is a band and an organisation, of Nate Newton (musician).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Nate_Newton_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
SELECT ?artist WHERE {
  ?nate foaf:name ""Nate Newton"" .
  ?nate dbo:memberOf ?band .
  ?band rdf:type dbo:Band ;
        dbo:genre dbc:Punk_rock ;
        dbo:associatedMusicalArtist ?artist .
  FILTER EXISTS { ?artist rdf:type dbo:Organization }
}
```",2,5,3,2,1,3,2,20,0,0,15,0,0.0,0
742,7,train,"Give me the birthplace of the alumnus of Plovdiv University ""Paisii Hilendarski"".",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Plovdiv_University_%22Paisii_Hilendarski%22> . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alumnus ?birthPlace WHERE {
  ?alumnus dbo:almaMater dbr:Plovdiv_University_Paisii_Hilendarski .
  OPTIONAL { ?alumnus dbo:birthPlace ?birthPlace . }
}
```",2,2,3,2,1,3,2,20,0,0,2,0,0.0,0
246,11,train,"Give me the parent of the child, that is a royalty, of Prince Faisal bin Hussein and parent of Prince Omar bin Faisal.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Prince_Omar_bin_Faisal> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?commonParent WHERE {
  # Step 1: Find the child of Prince Faisal bin Hussein who is royalty
  ?childFaisal a dbo:Person ;
               dbo:parent dbr:Prince_Faisal_bin_Hussein ;
               dbo:royaltyTitle ?title .

  # Step 2: Identify the parent of Prince Omar bin Faisal
  ?parentOmar a dbo:Person ;
              dbo:child dbr:Prince_Omar_bin_Faisal .

  # Step 3: Find the common parent between the royalty child and Prince Omar bin Faisal
  ?commonParent a dbo:Person ;
                dbo:parent ?childFaisal ;
                dbo:parent ?parentOmar .
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
39,61,train,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v0 <http://dbpedia.org/property/alterEgo> ?v5 . },"```sparql
SELECT ?band WHERE {
  # Identify Walter B. Gibson's creation
  dbpedia:Walter_B_Gibson dbo:wikiPageRedirects ?shadow .
  
  # Find Bob Thompson (musician) and his birth name
  dbpedia:Bob_Thompson_(musician) foaf:name ""Bob Thompson"" ;
    foaf:birthName ?bobBirthName .

  # Check if there is a musical artist with that birth name
  ?artist foaf:birthName ?bobBirthName .
  
  # Retrieve the band associated with this musical artist
  ?artist dbo:band ?band .
}
```",6,9,7,3,2,3,3,71,0,0,4,0,0.0,0
159,18,train,Give me the commander in Great Turkish War and reference to George Ducas and successor of Yurii Khmelnytsky.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?role ?referenceToDucas ?successorOfKhmelnytsky WHERE {
  ?commander a dbo:MilitaryPerson ;
             dbo:role ?role .
  
  FILTER(CONTAINS(LCASE(?role), ""great turkish war"") || CONTAINS(LCASE(?role), ""prince eugene of savoy""))

  OPTIONAL { 
    ?commander dbo:wikiPageRedirects dbr:George_Ducas .
    BIND(""Reference to George Ducas"" AS ?referenceToDucas)
  }

  OPTIONAL {
    ?successorOfKhmelnytsky dbo:succeededBy dbr:Yurii_Khmelnytsky ;
                             dbo:wikiPageRedirects ?commander .
    BIND(""Successor of Yurii Khmelnytsky"" AS ?successorOfKhmelnytsky)
  }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
386,23,train,Give me the war of the awardee of Golden Sword for Bravery and entity in the birth place of Elena Žalinkevičaitė-Petrauskienė.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v2 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
# Query to find the awardee of the Golden Sword for Bravery
SELECT ?awardee WHERE {
  ?award dbo:officialName ""Golden Sword for Bravery""@en .
  ?award dbo:recipient ?awardee .
}

UNION

# Query to find notable entities in the birthplace of Elena Žalinkevičaitė-Petrauskienė
SELECT ?entity WHERE {
  dbpedia:Žalinkevičaitė-Petrauskienė-Elena dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:notableOccupant ?entity .
}

# Combine the results to find any connection between the awardee and the entity
SELECT DISTINCT ?awardee ?entity WHERE {
  {
    SELECT ?awardee WHERE {
      ?award dbo:officialName ""Golden Sword for Bravery""@en .
      ?award dbo:recipient ?awardee .
    }
  }
  UNION
  {
    SELECT ?entity WHERE {
      dbpedia:Žalinkevičaitė-Petrauskienė-Elena dbo:birthPlace ?birthPlace .
      ?birthPlace dbo:notableOccupant ?entity .
    }
  }
}
```",4,4,5,2,2,2,3,28,0,0,2,0,0.0,0
595,17,train,"Give me the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v1 <http://dbpedia.org/ontology/battle> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  # Find the owner of USS Arcadia (ID-1605)
  dbr:USS_Arcadia_(ID-1605) dbo:owner ?owner .

  # Find wars associated with this owner
  ?owner dbo:participatedInWar ?war .

  # Ensure the war is described as a societal event and metaphorically as a disease
  ?war dbo:type dbr:Societal_event .
  FILTER(CONTAINS(LCASE(?warLabel), ""disease"") || CONTAINS(LCASE(?warLabel), ""plague""))
  
  SERVICE <http://dbpedia.org/sparql> {
    ?war rdfs:label ?warLabel .
  }
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
871,20,train,"Give me the parent of the child of Frederick Stanley, 16th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?grandParent WHERE {
  # Frederick Stanley, 16th Earl of Derby
  wd:Q1234567 dbo:child ?child . 

  # The child who is also a parent of Victor Stanley (Royal Navy officer)
  ?child dbo:parent wd:Q9876543 .

  # Find the grandparent of Victor Stanley
  ?child dbo:parent ?grandParent .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia identifier for Frederick Stanley, 16th Earl of Derby and `wd:Q9876543` with the identifier for Victor Stanley (Royal Navy officer).",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
59,2,train,Give me the residence of David Luckman.,SELECT ?result WHERE { <http://dbpedia.org/resource/David_Luckman> <http://dbpedia.org/property/residence> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?residence WHERE {
  ?person foaf:name ""David Luckman""@en .
  ?person dbo:residence ?residence .
}
```",1,1,2,1,1,2,2,9,1,0,0,1.0,1.0,1.0
119,47,train,"Give me the tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and office of the leader of 2009 Galician regional election.",SELECT ?result WHERE { <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v2 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/property/residence> ?v4 . },"```sparql
SELECT ?residence WHERE {
  ?person foaf:name ""Alberto Núñez Feijóo""@en .
  ?person dbo:nationality dbr:Spain .
  ?person dbo:officeTitle dbr:President_of_the_Galician_Parliament .
  ?person dbo:electionYear ?year .
  FILTER(?year = 2009) .
  ?person foaf:currentHomeLocation ?residence .
  ?residence a dbo:Country .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
384,7,train,"Give me the party of Bruno Retailleau and party of the successor, that is a politician and French, of Patrice Martin-Lalande.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/party> ?result . ?v2 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/France>. <http://dbpedia.org/resource/Bruno_Retailleau> <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Patrice_Martin-Lalande> <http://dbpedia.org/ontology/successor> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?partyRetailleau ?successorName ?partySuccessor WHERE {
  # Find Bruno Retailleau's political party
  dbr:Bruno_Retailleau dbo:politicalParty ?partyRetailleau .

  # Find Patrice Martin-Lalande and his successor who is a politician and French
  OPTIONAL {
    ?martinLalande dbo:successor ?successor .
    ?successor rdf:type dbo:Politician ;
               dbo:nationality dbr:France .
    ?successor rdfs:label ?successorName .
    FILTER (LANG(?successorName) = 'en')
    
    # Find the political party of the successor
    ?successor dbo:politicalParty ?partySuccessor .
  }
  
  # Ensure Patrice Martin-Lalande is correctly identified
  dbr:Patrice_Martin-Lalande ?martinLalande .
}
```",3,5,4,2,2,2,2,9,0,0,1,0,0.0,0
89,48,train,Give me the predecessor of the child of Saw Shwe Khet and child of the parent of the child of Minye Kyawswa.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

# Step 1: Find Saw Shwe Khet's child
SELECT ?sawChild WHERE {
    ?sawShweKhet dbo:child ?sawChild .
    FILTER(STR(?sawShweKhet) = ""Saw_Shwe_Khet"")
}

# Step 2: Find Minye Kyawswa's grandchild
SELECT ?minyeGrandchild WHERE {
    ?minyeKyawswa dbo:child ?minyeChild .
    ?minyeChild dbo:child ?minyeGrandchild .
    FILTER(STR(?minyeKyawswa) = ""Minye_Kyawswa"")
}

# Step 3 & 4: Already covered in step 2

# Step 5: Find predecessors (assuming a way to infer or find historical succession)
SELECT DISTINCT ?predecessor WHERE {
    # Predecessor of Saw Shwe Khet's child
    ?sawChild dbo:predecessor ?predecessor1 .
    
    # Predecessor of Minye Kyawswa's grandchild
    ?minyeGrandchild dbo:predecessor ?predecessor2 .

    # Step 6: Find common predecessor
    FILTER(?predecessor1 = ?predecessor2)
}
```

Note: The above query assumes the existence of a `dbo:predecessor` property, which might not be directly available in DBpedia. In practice, you may need to infer predecessors through historical context or titles (e.g., kingship succession) and adjust the query accordingly.",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
119,20,train,"Give me the office of Alberto Núñez Feijóo and tenant of the residence, that is a country, of Álvaro Quirós.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v2 . },"```sparql
# Query to find the office of Alberto Núñez Feijóo
SELECT ?office WHERE {
  wd:Q1234568 dbo:positionHeld ?position .
  ?position dbo:title ?office .
}

UNION

# Query to find the country where Álvaro Quirós resides
SELECT ?country WHERE {
  wd:Q6543212 dbo:nationality ?nationality .
  ?nationality rdfs:label ?country .
  FILTER (lang(?country) = 'en')
}
```

Note: Replace `wd:Q1234568` with the actual DBpedia identifier for Alberto Núñez Feijóo and `wd:Q6543212` with the identifier for Álvaro Quirós.",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
871,2,train,Give me the father of Arthur Stanley (politician).,SELECT ?result WHERE { <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?person dbo:givenName ""Arthur"" .
  ?person dbo:familyName ""Stanley"" .
  ?person rdf:type dbo:Politician .
  ?person dbo:father ?father .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
756,27,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?managerName ?teamName ?season
WHERE {
  ?person a dbo:SoccerManager ;
          dbo:birthDate ""1968-08-26""^^xsd:date ;
          rdfs:label ?managerName .
  
  ?person dbo:managesTeam ?team .

  ?team a dbo:SoccerClub ;
        rdfs:label ?teamName ;
        dbp:currentSeason ?season .
}
```",3,7,4,3,1,3,3,71,0,0,5,0,0.0,0
472,14,train,"Give me the territory administered from Copenhagen and administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> ?v1 . ?v1 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?territory ?administeredFromCopenhagen WHERE {
  ?person a dbo:Person ;
          foaf:name ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en .
  
  OPTIONAL { 
    ?person dbo:administrativePost ?post .
    ?post dbo:officeLocation ?territory .
    
    FILTER EXISTS {
      ?territory dbo:country dbr:Denmark .
    }
    
    OPTIONAL {
      ?territory dbo:capital dbr:Copenhagen .
      BIND (TRUE AS ?administeredFromCopenhagen)
    } 
  }
  
  OPTIONAL {
    ?person dbo:birthPlace ?place .
    FILTER EXISTS { ?place dbo:country dbr:Denmark . }
  }
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
399,4,train,Give me the professional in Singer and band member of Emilia (Bulgarian singer).,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Emilia_(Bulgarian_singer)> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  dbr:Emilia_(Bulgarian_singer) dbo:profession ?profession .
  FILTER(CONTAINS(LCASE(STR(?profession)), ""singer""))
  
  OPTIONAL { 
    dbr:Emilia_(Bulgarian_singer) dbo:member ?band .
  }
}
```",2,2,3,1,2,2,2,9,0,0,3,0,0.0,0
89,0,train,Give me the child of Saw Min Hla.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?sawMinHla a dbo:Person ;
             foaf:name ""Saw Min Hla""@en .
  ?sawMinHla dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,5,0,0,1.0,1.0,1.0
585,15,train,"Give me the child of Linda Miller (actress) and native of the award, that is American and a settlement, of the awardee of New York (state).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Linda_Miller_(actress)> <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v0 <http://dbpedia.org/property/awards> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?nativeSettlement WHERE {
  # Find Linda Miller (actress) and her children
  ?lindaMiller a dbo:Actor ;
              foaf:name ""Linda Miller"" ;
              dbo:spouse ?parent .
  
  ?parent dbo:child ?child .

  # Identify awards associated with New York state
  ?award dbo:country dbr:United_States ;
         dbo:stateOrProvince dbr:New_York_(state) .

  # Find the awardees and their native places that are American settlements
  ?awardee dbo:recipientOf ?award ;
          dbo:nationality dbr:American ;
          dbo:birthPlace ?nativeSettlement .
  
  FILTER (isLiteral(?nativeSettlement))

  # Ensure the native place is a settlement
  ?nativeSettlement a dbo:Settlement .

  # Find connection between Linda Miller's child and the awardee's native place
  ?child foaf:name ?awardeeName .
}
```",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
361,21,train,"Give me the professional in  and professional in Actor and actor of the album, that is a film and a work, of Lasso the Moon.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v1 . ?v1 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Query to find the actor of the film or work titled ""Lasso the Moon""
SELECT ?actor WHERE {
  ?filmOrWork rdfs:label ""Lasso the Moon""@en .
  ?filmOrWork dbo:starring ?actor .
  FILTER (lang(?filmOrWork) = 'en')
}

# Query to find another professional who is both an actor and musician
SELECT DISTINCT ?person WHERE {
  ?person a dbo:Actor ;
          dbo:profession ""musician""@en .
}
```",4,6,5,2,3,2,3,28,0,0,2,0,0.0,0
392,6,train,Give me the reference to the designer of Aston Martin AMR1.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v0 . <http://dbpedia.org/resource/Aston_Martin_AMR1> <http://dbpedia.org/property/designer> ?v0 . },"```sparql
SELECT ?designer WHERE {
  ?car dbp:model ""AMR1"" .
  ?car dbp:manufacturer dbr:Aston_Martin .
  OPTIONAL { ?car dbp:designer ?designer . }
}
```",2,2,3,2,1,2,2,9,0,0,98447,0,0.0,0
89,26,train,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v1 <http://dbpedia.org/property/father> ?v2 . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
SELECT ?spouse WHERE {
  # Step 1: Identify Saw Shwe Khet
  ?sawShweKhet dbo:name ""Saw Shwe Khet""@en .
  
  # Step 2: Find a child of Saw Shwe Khet who is royalty
  ?child dbo:parent ?sawShweKhet ;
         dbo:royalty ?isRoyaltyChild .

  FILTER(?isRoyaltyChild = true) .

  # Step 3: Identify the father of this royal child
  ?father dbo:child ?child .
  
  # Ensure the father is royalty
  ?father dbo:royalty ?isRoyalFather .
  FILTER(?isRoyalFather = true) .

  # Step 4: Find the spouse of this royal father
  ?father dbo:spouse ?spouse .
}
```",3,5,4,3,1,3,3,71,0,0,2,0,0.0,0
782,54,train,"Give me the associated musical artist of Nick Curran and reference to the real name of The Fabulous Thunderbirds and band of the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v3 . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/bandMember> ?v5 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . }","```sparql
# Find associated musical artists of Nick Curran
SELECT ?artist WHERE {
  ?person foaf:name ""Nick Curran"" .
  ?person dbo:associatedBandOrMusicalArtist ?artist .
}

UNION

# Get real names of The Fabulous Thunderbirds members and find the one born on 1945-03-30
SELECT ?realName ?bandMember WHERE {
  ?band dcterms:title ""The Fabulous Thunderbirds""@en ;
        dbo:member ?person .
  ?person foaf:name ?bandMember ;
          foaf:name ?realName ;
          dbo:birthday ""1945-03-30""^^xsd:date .
}

UNION

# Find the band or musical artist associated with the person born on 1945-03-30
SELECT ?associatedArtist WHERE {
  ?person dbo:birthday ""1945-03-30""^^xsd:date ;
          dbo:associatedBandOrMusicalArtist ?associatedArtist .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
609,57,train,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the author of El Deafo and birth place of Vince Gilligan.",SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v3 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://dbpedia.org/property/governor> ?v5 . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . },"```sparql
# Step 1: Find Paulus Powell's birth place
SELECT ?birthPlace WHERE {
  dbpedia:Paulus_Powell dbo:birthPlace ?birthPlace .
}

# Step 2: Determine the region and administrative status of Paulus Powell's birth place
SELECT DISTINCT ?region ?adminRegion WHERE {
  ?birthPlace rdf:type dbo:PopulatedPlace ;
              dbo:administrativeTerritory ?region ;
              dbo:country ?adminRegion .
}

# Step 3: Find the governor of that region
SELECT ?governor WHERE {
  ?region dbo:governmentHead ?governor .
  FILTER(?region IN (?birthPlaceRegion))
}

# Step 4: Identify the author of ""El Deafo""
SELECT ?author WHERE {
  dbpedia:El_Deafo dbo:author ?author .
}

# Step 5: Determine the birth place of the author of ""El Deafo""
SELECT ?birthPlaceAuthor WHERE {
  ?author dbo:birthPlace ?birthPlaceAuthor .
}

# Step 6: Identify Vince Gilligan's birth place
SELECT ?birthPlaceVince WHERE {
  dbpedia:Vince_Gilligan dbo:birthPlace ?birthPlaceVince .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
557,37,train,"Give me the producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and producer of A Star Is Born (1937 film).",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
# Step 1: Find actor(s) associated with ""Johnny Doughboy""
SELECT ?actor WHERE {
  ?work dcterms:title ""Johnny Doughboy""@en .
  ?work dbo:starring ?actor .
}

UNION

# Step 2: Find producer(s) of ""A Star Is Born"" (1937)
SELECT ?producer WHERE {
  ?film dcterms:title ""A Star Is Born""@en ;
        dbo:productionYear ""1937""^^xsd:gYear ;
        dbo:producer ?producer .
}

UNION

# Step 3: Find common individual(s) who acted in ""Johnny Doughboy"" and produced ""A Star Is Born""
SELECT DISTINCT ?commonIndividual WHERE {
  # Actor of Johnny Doughboy
  ?work1 dcterms:title ""Johnny Doughboy""@en ;
         dbo:starring ?commonIndividual .
  
  # Producer of A Star Is Born (1937)
  ?film2 dcterms:title ""A Star Is Born""@en ;
         dbo:productionYear ""1937""^^xsd:gYear ;
         dbo:producer ?commonIndividual .
}

# Step 4: Identify the claim to fame of this individual
SELECT DISTINCT ?claimToFame WHERE {
  # Common individual found in step 3
  ?commonIndividual dbo:starring ?workClaimToFame .
  
  # Assuming claim to fame is a work they starred in
  ?workClaimToFame dcterms:title ?claimToFame .
}

# Step 5: Find the producer of this claim to fame
SELECT DISTINCT ?producerOfClaimToFame WHERE {
  # Claim to fame identified in step 4
  ?workClaimToFame dcterms:title ?claimToFame ;
                   dbo:production ?filmClaimToFame .
  
  # Producer of the claim to fame work
  ?filmClaimToFame dbo:producer ?producerOfClaimToFame .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
288,1,train,Give me the theme of Dikhawa.,SELECT ?result WHERE { <http://dbpedia.org/resource/Dikhawa> <http://dbpedia.org/ontology/openingTheme> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?genre WHERE {
  ?film a dbo:Film .
  ?film dbo:title ""Dikhawa""@en .
  OPTIONAL { ?film dbo:genre ?genre . }
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
609,50,train,"Give me the birth place of the author of El Deafo and birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v3 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/governor> ?v4 . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . },"```sparql
# Query to get the birth place of Cece Bell, author of El Deafo
SELECT ?birthPlace WHERE {
  ?author foaf:name ""Cece Bell""@en .
  ?author dbo:wikiPageRedirects dbpedia:El_Deafo .
  ?author dbo:birthPlace ?birthPlace .
}

# Query to get the birth place of Paulus Powell
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Paulus Powell""@en .
  ?person dbo:birthPlace ?birthPlace .
}

# Assuming we have identified the region from the previous query, replace <Region> with actual value
# Query to find the governor of that region (assuming it's a US state for example)
SELECT ?governor WHERE {
  ?region rdfs:label ""<Region>""@en ;
          dbo:governmentOfficial ?governor .
  ?governor rdf:type dbo:Politician ;
            dbo:officeHolderOf ?office .
  ?office dbo:position ""Governor""@en .
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
633,8,train,Give me the parent of the father of Dorothea of Lorraine.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Dorothea_of_Lorraine> <http://dbpedia.org/property/father> ?v0 . },"```sparql
SELECT ?grandparent WHERE {
  ?dorothea dbo:motherOrFather ?father .
  FILTER(CONTAINS(LCASE(STR(?dorothea)), ""dorothea of lorraine""))
  
  ?father dbo:motherOrFather ?grandparent .
}
```",2,2,3,2,1,3,2,20,0,0,2,0,0.0,0
23,14,train,Give me the party of Roy Barreras and entity in the country of Daniel Elahi Galán.,SELECT ?result WHERE { <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v2 . <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . ?result <http://dbpedia.org/ontology/country> ?v2 . },"```sparql
SELECT ?party ?country WHERE {
  # Query to find the political party of Roy Barreras
  ?barreras dbo:wikiPageRedirects dbr:Roy_Barreras .
  ?barreras dbo:politicalParty ?party .

  # Query to find the country associated with Daniel Elahi Galán
  ?galan dbo:wikiPageRedirects dbr:Daniel_Elái_Galán .
  ?galan dbo:nationality ?country .
}
```",3,3,4,2,2,2,3,28,0,0,5,0,0.0,0
731,0,train,Give me the force of William Tennant (Royal Navy officer).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/William_Tennant_(Royal_Navy_officer)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?rank WHERE {
  ?person a dbo:MilitaryPerson ;
          foaf:name ""William Tennant"" .
  OPTIONAL { ?person dbo:rank ?rank . }
  FILTER(CONTAINS(LCASE(STR(?person)), ""william tennant"") && CONTAINS(LCASE(STR(?person)), ""royal navy""))
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
723,4,train,"Give me the associated musical artist, that is a band and an organisation, of Nate Newton (musician).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Nate_Newton_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?band WHERE {
  ?nateNewton a dbo:Musician ;
              foaf:name ""Nate Newton"" .
  
  ?nateNewton dbo:member ?band .

  ?band a dbo:Band ;
        dbo:associatedMusicalArtist ?artist .

  OPTIONAL { 
    ?band a dbo:Organization .
  }
}
```",1,3,2,1,1,3,2,20,0,0,5,0,0.0,0
158,1,train,Give me the native of Grand Duchy of Finland.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  OPTIONAL { ?person dbo:birthPlace dbr:Grand_Duchy_of_Finland . }
  OPTIONAL { ?person dbo:residence dbr:Grand_Duchy_of_Finland . }
  ?person rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
ORDER BY ?name
```",1,1,2,1,1,2,3,28,223,2096929,132,0.00010633468627929688,0.6281690140845071,0.0002126333785775208
89,45,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of Saw Min Hla and spouse of Saw Shwe Khet.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?v1 <http://dbpedia.org/property/father> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
  # Step 1: Identify Saw Min Phyu's spouse
  ?spouse a dbo:Spouse;
          dbo:spouse dbr:Saw_Min_Phuu.

  # Step 2: Find the child of Saw Min Phyu and their spouse who is royalty
  ?child dbo:parent ?spouse;
         dbo:royalty true;
         dbo:parent dbr:Saw_Min_Hla. # Assuming this constraint helps identify the correct child

  # Step 3: Identify the spouse of this royal child
  ?spouseOfChild a dbo:Spouse;
                 dbo:spouse ?child.

  # Step 4: Determine the predecessor of this spouse
  ?spouseOfChild dbo:title ?title.
  
  # Assuming 'predecessor' refers to a previous title or position held by the spouse
  OPTIONAL { ?title dbo:predecessor ?predecessor. }
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
468,1,train,Give me the child of Alfonso IV of Aragon.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . },"```sparql
SELECT ?child WHERE {
  wd:Q123456 dbo:child ?child .
}
LIMIT 1
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for Alfonso IV of Aragon. You can find this by searching DBpedia or using a SPARQL query to identify his unique identifier.",1,1,2,1,1,3,2,20,0,0,3,0,0.0,0
140,7,train,"Give me the commander in the war, that is a societal event, of George Pickett.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/George_Pickett> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?pickett dbo:spouse ?person .
  ?pickett dbo:occupation ""Confederate Army officer""@en .
  ?pickett dbo:birthPlace dbr:Virginia .
  ?pickett dbo:deathPlace dbr:Richmond,_Virginia .

  ?war dbo:participatedIn ?pickett ;
       a dbo:SocietalEvent ;
       rdfs:label ""American Civil War""@en .

  ?commander dbo:commanded ?army .
  ?army dbo:participatedIn ?war .
  FILTER(CONTAINS(LCASE(?commander), ""robert e. lee""))
}
```",2,3,3,2,1,3,2,20,0,0,26,0,0.0,0
723,14,train,"Give me the band member of the associated musical artist, that is an organisation, of the associated musical artist, that is a band and an organisation, of Nate Newton (musician).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . <http://dbpedia.org/resource/Nate_Newton_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
SELECT ?member WHERE {
  # Step 1: Find Nate Newton's associated musical artist
  ?nateNewton dbo:associatedBand ?artist .
  
  # Step 2: Ensure the artist is both a band and an organization
  ?artist rdf:type dbo:MusicalArtist ;
          rdf:type dbo:Band ;
          rdf:type dbo:Organization .

  # Step 3: Find members of this band/organization
  ?member dbo:bandMember ?artist .
}
```",3,6,4,3,1,3,2,20,0,0,112,0,0.0,0
687,43,train,"Give me the player in Juan Carlos Molina (footballer) and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and team of Pablo Aimar.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v0 <http://dbpedia.org/property/starring> ?v4 . ?v4 <http://dbpedia.org/ontology/team> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . },"```sparql
# Step 1: Get Juan Carlos Molina's team
SELECT ?team WHERE {
  ?player foaf:name ""Juan Carlos Molina""@en .
  ?player dbo:playsFor ?team .
}

# Step 2: Find an actor who is also a soccer player and athlete
SELECT DISTINCT ?actor WHERE {
  ?actor rdf:type dbo:SoccerPlayer ;
         dbo:athleteOf ?sport .
  ?actor dbo:profession dbr:Actor .
}

# Step 3: Get films directed by Manuel Huerga featuring this actor
SELECT DISTINCT ?film WHERE {
  ?film dbo:director dbr:Manuel_Huerga ;
        dbo:starring ?actor .
  FILTER(?actor IN {<actor_uri>}) # Replace <actor_uri> with the URI found in Step 2
}

# Step 4: Get Pablo Aimar's team
SELECT ?team WHERE {
  ?player foaf:name ""Pablo Aimar""@en .
  ?player dbo:playsFor ?team .
}

# Step 5: Find common players between Juan Carlos Molina's and Pablo Aimar's teams
SELECT DISTINCT ?commonPlayer WHERE {
  # Replace <juan_team_uri> with the URI found in Step 1
  ?commonPlayer dbo:playsFor <juan_team_uri> ;
                dbo:playsFor ?pabloTeam .
  
  # Replace <pablo_team_uri> with the URI found in Step 4
  FILTER(?pabloTeam = <pablo_team_uri>)
}
```",5,8,6,3,3,3,3,71,0,0,1,0,0.0,0
871,53,train,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of the awardee of the award of Rodney Lees and parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ?v1 . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . }","```sparql
SELECT ?child ?father WHERE {
  # Frederick Stanley, 16th Earl of Derby
  ?frederick dbp:birthName ""Frederick Arthur Stanley"" .
  ?frederick dbo:spouse ?parentOfEdward .
  ?parentOfEdward dbp:child ?edward .
  ?edward rdfs:label ""Edward Stanley, 17th Earl of Derby""@en .

  # Children who are politicians
  ?frederick dbo:child ?child .
  ?child dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""politician""))

  # Check for Rodney Lees award connection
  OPTIONAL {
    ?child dbo:parent ?awardee .
    ?awardee dbo:awardReceived ?rodneyLeesAward .
    ?rodneyLeesAward rdfs:label ""Rodney Lees Award""@en .
  }

  # Ensure the child is also a parent of Edward Stanley
  ?frederick dbo:child ?edward .

  # The father of the identified child
  BIND(?frederick AS ?father)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
119,51,train,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and tenant of the residence, that is a country, of Álvaro Quirós.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?result <http://dbpedia.org/ontology/headquarter> ?v4 . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenant WHERE {
  # Find the administration associated with PSOE
  ?administration dbo:party dbr:Spanish_Socialist_Workers'_Party .
  
  # Find Álvaro Quirós's country of residence
  ?alvaroQuirós dbo:nationality ?countryResidence .
  FILTER (str(?alvaroQuirós) = ""Álvaro_Quirós"") .

  # Identify the tenant of the administration
  ?administration dbo:head ?tenant .
  
  # Ensure the administration is Spanish
  ?administration dbo:country dbr:Spain .
}
```",5,7,6,3,2,3,3,71,0,0,23,0,0.0,0
103,30,train,Give me the actor of Dispatches from Elsewhere and professional in Actor and professional in the alter ego of The Shadow.,"SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor ?roleInElsewhere ?alterEgo
WHERE {
  # Find Jason Segel's DBpedia resource
  ?actor a dbo:Actor ;
         foaf:name ""Jason Segel""@en .

  # Check if he has a role in ""Dispatches from Elsewhere""
  OPTIONAL { 
    ?film dbo:title ""Dispatches from Elsewhere""@en .
    ?film dbo:starring ?actor .
    BIND(""Dispatches from Elsewhere"" AS ?roleInElsewhere)
  }

  # Hypothetical check for alter ego of The Shadow
  OPTIONAL {
    ?character dbo:name ""Lamont Cranston""@en ;
               dbo:alterEgoOf dbr:The_Shadow .
    FILTER(?actor = ?character) 
    BIND(""The Shadow's Alter Ego"" AS ?alterEgo)
  }
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
756,33,train,"Give me the native of the administration, that is a country, of the leader of West Germany and manager of VfL Bochum.",SELECT ?result WHERE { <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://dbpedia.org/property/leader> ?v0 . },"```sparql
SELECT ?native WHERE {
  ?person dbo:position ""Chancellor of Germany""@en .
  ?person dbo:country ""West Germany""^^xsd:string .
  ?person dbo:managerOf <http://dbpedia.org/resource/VfL_Bochum> .
  ?person foaf:nationality ?nationality .
  OPTIONAL { ?person dbp:birthPlace ?native . }
  FILTER NOT EXISTS { ?person dbp:deathDate ?date } # Ensure the person is alive or not deceased
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
159,28,train,"Give me the successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and commander in Great Turkish War and reference to George Ducas.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/successor> ?result . ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor WHERE {
  ?person dbo:officeHolderOf ?office .
  ?person dbo:politicalPartyMemberOf ?party .
  ?person dbo:commanderInWar [
    a dbo:Command ;
    dbo:war dbr:Russo-Polish_War_(1654%E2%80%931667) ;
    dbo:succeededBy ?successor
  ] .
  ?person dbo:commanderInWar [
    a dbo:Command ;
    dbo:war dbr:Great_Turkish_War ;
    dbo:succeededBy ?successor
  ] .
  FILTER EXISTS { ?successor dbo:wikiPageRedirects dbr:John_III_Sobieski }
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
557,39,train,"Give me the producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and producer of The Adventures of Tom Sawyer (1938 film).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v0 . },"```sparql
# Step 1: Find the actor of ""High Society Blues""
SELECT ?actor WHERE {
  ?movie dcterms:title ""High Society Blues""@en .
  ?movie dbo:starring ?actor .
}

# Step 2: Find the producer of ""The Adventures of Tom Sawyer (1938 film)""
SELECT ?producer WHERE {
  ?film dcterms:title ""The Adventures of Tom Sawyer (1938 film)""@en .
  ?film dbo:producer ?producer .
}

# Step 3: Identify common individual
SELECT DISTINCT ?commonIndividual WHERE {
  # Actor from High Society Blues
  ?movie1 dcterms:title ""High Society Blues""@en .
  ?movie1 dbo:starring ?commonIndividual .

  # Producer of The Adventures of Tom Sawyer (1938 film)
  ?film2 dcterms:title ""The Adventures of Tom Sawyer (1938 film)""@en .
  ?film2 dbo:producer ?commonIndividual .
}

# Step 4: Find the claim to fame that is both a movie and a work
SELECT DISTINCT ?claimToFame WHERE {
  # Common individual identified in step 3
  ?individual ?p1 ?commonIndividual .

  # Claim to fame as a movie
  ?claimToFame dbo:starring ?commonIndividual .
  ?claimToFame rdf:type dbo:Film .

  # Claim to fame as a work (e.g., book, play)
  OPTIONAL { ?claimToFame dbo:author ?commonIndividual . }
}

# Step 5: Find the producer of this claim to fame
SELECT DISTINCT ?producer WHERE {
  # Claim to fame identified in step 4
  ?claimToFame ?p1 ?commonIndividual .
  
  # Producer of the claim to fame
  ?claimToFame dbo:producer ?producer .
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
668,47,train,"Give me the associated musical artist of the person born as Elorm Kabu Amenyah and professional in the profession of the writer, that is a musical artist, of The Live Anthology.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/occupation> ?v4 . ?v2 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v4 . }","```sparql
SELECT ?person ?birthName ?profession WHERE {
  # Find the person with the birth name Elorm Kabu Amenyah
  ?person dbo:birthName ""Elorm Kabu Amenyah""@en .
  
  # Get Neil Peart's profession and his association with The Live Anthology
  ?neilPeart foaf:name ""Neil Peart"" ;
             dbo:profession dbr:Musician, dbr:Author ;
             dbo:work dbr:The_Live_Anthology .

  # Ensure the person is a musical artist like Neil Peart
  FILTER(?person = ?neilPeart)
}
```",5,6,6,3,2,3,3,71,0,0,2,0,0.0,0
756,41,train,"Give me the native of the administration, that is a country, of Theodor Heuss and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and manager of 2020–21 SBV Vitesse season.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
# Query to find the manager of VfL Bochum in 2007-08
SELECT ?manager WHERE {
  ?club rdf:type dbo:AssociationFootballClub .
  ?club foaf:name ""VfL Bochum""@en .
  ?season dbo:team ?club ;
          dbo:seasonStartYear ""2007""^^xsd:gYear ;
          dbo:seasonEndYear ""2008""^^xsd:gYear .
  ?manager dbo:managedTeam ?club ;
           dbo:position ""Manager""@en ;
           dbo:birthPlace ?place1 .
}

# Query to find the manager of SBV Vitesse in 2020-21
SELECT ?manager WHERE {
  ?club rdf:type dbo:AssociationFootballClub .
  ?club foaf:name ""SBV Vitesse""@en .
  ?season dbo:team ?club ;
          dbo:seasonStartYear ""2020""^^xsd:gYear ;
          dbo:seasonEndYear ""2021""^^xsd:gYear .
  ?manager dbo:managedTeam ?club ;
           dbo:position ""Manager""@en ;
           dbo:birthPlace ?place2 .
}

# Query to find the native country of Theodor Heuss
SELECT ?country WHERE {
  ?person foaf:name ""Theodor Heuss""@en .
  ?person dbo:nationality ?country .
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
198,18,train,"Give me the war of Amasa Tracy and force of Quincy Adams Gillmore and entity in Charleston, South Carolina.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name ?role ?location WHERE {
  VALUES (?person) { 
    dbr:Amasa_Tracy 
    dbr:Quincy_Adams_Gillmore 
  }
  
  ?person dbo:name ?name .
  OPTIONAL { ?person dbo:occupation ?role . FILTER regex(?role, ""Union Army"", ""i"") }

  {
    SELECT DISTINCT ?location WHERE {
      ?event dbo:place dbr:Charleston,_South_Carolina .
      ?event dbo:agent ?person .
      ?event dbo:location ?location .
    }
  }
  
  OPTIONAL { 
    ?location rdfs:label ?locationLabel FILTER (lang(?locationLabel) = ""en"") 
  }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
595,59,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v5 <http://dbpedia.org/property/author> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v3 <http://dbpedia.org/property/author> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?hillary a dbo:OfficeHolder ;
           foaf:residence dbr:Chappaqua,_New_York ;
           dbo:spouse ?bill .
  
  ?bill a dbo:OfficeHolder .

  ?work dbo:author ?author ;
        rdf:type dbo:Book ;
        dbo:author dbr:Hillary_Clinton .

}
```",6,15,7,3,2,3,3,71,0,0,1,0,0.0,0
742,12,train,Give me the birthplace of Ekaterina Zaharieva and birthplace of the resident of Sofia.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Sofia> . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Ekaterina_Zaharieva> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for Ekaterina Zaharieva's birthplace
SELECT ?birthPlace WHERE {
  wd:QXXXXX dbo:birthPlace ?birthPlace .
}

UNION

# Query for Rumen Radev's (a notable resident of Sofia) birthplace
SELECT ?birthPlace WHERE {
  wd:QYXXXXX dbo:birthPlace ?birthPlace .
}
```

Note: Replace `QXXXXX` with the actual DBpedia QID for Ekaterina Zaharieva and `QYXXXXX` with the QID for Rumen Radev. You can find these IDs by searching their names on DBpedia or using a SPARQL endpoint to search for them.",3,3,4,2,2,3,2,20,0,0,2,0,0.0,0
595,47,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of the author, that is a politician and an office holder, of An Invitation to the White House.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v4 <http://dbpedia.org/property/author> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://dbpedia.org/property/author> ?v0 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?spouse WHERE {
  # Find the author of ""An Invitation to the White House""
  ?book dbo:title ""An Invitation to the White House""@en .
  ?book dbo:author ?author .

  # Ensure the author is a politician
  ?author dbo:occupation dbr:Politician .

  # Find the spouse of the author
  ?spouse dbo:spouse ?author .
  
  # Ensure the spouse is also a politician
  ?spouse dbo:occupation dbr:Politician .
}
```",5,12,6,3,2,3,3,71,0,0,1,0,0.0,0
158,11,train,"Give me the native of the administration, that is a country, of Nicholas II of Russia.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativeCountry WHERE {
  dbr:Nicholas_II_of_Russia dbo:birthPlace ?placeOfBirth .
  ?placeOfBirth dbo:country dbr:Russia .
}
```",2,3,3,2,1,2,3,28,0,0,5723,0,0.0,0
782,59,train,"Give me the band of the band member of the person born, that is a musical artist, on 1945-03-30 and reference to the real name of the band of Kim Wilson.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/bandMember> ?v5 . ?v3 <http://xmlns.com/foaf/0.1/name> ?v2 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v3 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . }","```sparql
# Step 1: Find the person born on 1945-03-30 who is a musical artist
SELECT ?person WHERE {
  ?person dbo:birthDate ""1945-03-30""^^xsd:date .
  ?person rdf:type dbo:MusicalArtist .
}

# Step 2: Find the band of the identified person
SELECT ?band WHERE {
  ?person dbo:member ?band .
  FILTER(?person = <URI_OF_PERSON_FROM_STEP_1>)
}

# Step 3: Find Kim Wilson's band and its real name
SELECT ?band ?realName WHERE {
  ?kimWilson dbo:member ?band ;
             foaf:name ""Kim Wilson"" .
  OPTIONAL { ?band rdfs:label ?realName . }
}
```

Note: Replace `<URI_OF_PERSON_FROM_STEP_1>` with the actual URI obtained from Step 1.",6,7,7,3,2,3,3,71,0,0,2,0,0.0,0
871,43,train,"Give me the parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby and parent of Victor Stanley (Royal Navy officer) and father of Arthur Stanley (politician).","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v1 <http://dbpedia.org/ontology/child> ?v3 . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT DISTINCT ?parentOfChild WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  ?edward a dbo:Person ;
          foaf:name ""Edward Stanley""@en ;
          dbo:title ""Earl of Derby""@en .

  # Step 2: Find his children (Victor and Arthur)
  ?child dbo:parent ?edward .
  FILTER (
    EXISTS { ?child foaf:name ""Victor Stanley""@en . }
    || EXISTS { ?child foaf:name ""Arthur Stanley""@en . }
  )

  # Step 3: Determine the parent of these children
  ?spouse a dbo:Person ;
          dbo:spouse ?edward .
  ?parentOfChild dbo:parent ?spouse .

  # Step 4: Identify the child of this parent who is a politician and office holder
  ?politicianOfficeHolder dbo:parent ?parentOfChild ;
                         a dbo:Politician, dbo:GovernmentOfficial .

  # Step 5: Find the parent of this child
  ?finalParent dbo:child ?politicianOfficeHolder .
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
398,8,train,Give me the player in the writer of The First Glove.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/The_First_Glove> <http://dbpedia.org/property/writer> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  ?book dbo:author dbr:Jim_Bouton .
  ?book rdfs:label ""The First Glove""@en .
  OPTIONAL { ?book dbo:subject ?occupation . }
  FILTER EXISTS { ?person dbo:birthName dbr:James_Michael_Bouton . }
  ?person a dbo:Person ;
          dbo:profession ?player .
}
```",2,2,3,2,1,3,2,20,0,0,17,0,0.0,0
723,12,train,"Give me the band member of the associated musical artist, that is an organisation, of Cavalera Conspiracy and band member of Mudvayne.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Cavalera_Conspiracy> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mudvayne> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?member WHERE {
  # Find members of Cavalera Conspiracy
  ?cavaleraConspiracy dbo:bandMember ?person1 .
  
  # Find members of Mudvayne
  ?mudvayne dbo:bandMember ?person2 .

  # Check if the person is the same in both bands
  FILTER (?person1 = ?person2)

  # Ensure the band member is an organization (Cavalera Conspiracy)
  ?cavaleraConspiracy a dbo:Band .
  
  # Filter for Greg Tribbett
  VALUES ?member { dbr:Greg_Tribbett }
  
  # Check if the person matches
  FILTER (?person1 = ?member || ?person2 = ?member)
}
```",3,4,4,2,2,3,2,20,0,1,1,0.0,0.0,0
782,52,train,Give me the reference to the real name of the band of Kim Wilson and associated musical artist of Nick Curran and band of the band member of Eric Clapton.,SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v3 <http://xmlns.com/foaf/0.1/name> ?v2 . ?v3 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://dbpedia.org/ontology/bandMember> ?v5 . },"```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?artist ?realName WHERE {
  # Kim Wilson's band
  VALUES (?band) { dbpedia:The_Fabulous_Thunderbirds }
  
  # Nick Curran's associated musical artist
  VALUES (?curranBand) { dbpedia:Nick_Curran_and_His_Graveworms }

  # Eric Clapton's bands and members
  VALUES (?claptonBand) { dbpedia:Cream dbpedia:Derek_and_the_Dominos }
  
  # Kim Wilson
  ?artist foaf:name ""Kim Wilson""@en .
  OPTIONAL {
    ?artist dbo:memberOf ?band .
  }

  # Nick Curran
  ?curArtist foaf:name ""Nick Curran""@en .
  OPTIONAL {
    ?curArtist dbo:memberOf ?curranBand .
  }
  
  # Eric Clapton's band members
  ?claptonMember dbo:memberOf ?claptonBand .
  ?claptonMember foaf:name ?realName .

  FILTER(?artist = ?curArtist)
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
353,48,train,"Give me the child of the child of Alfonso VI of León and Castile and child of the parent of the child, that is a royalty, of Roger II of Sicily.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alfonsoVIChild ?alfonsoVIGrandchild ?rogerIIChild ?commonRoyalty WHERE {
  # Step 1: Find a child of Alfonso VI
  ?alfonsoVIChild dbo:parent dbr:Alfonso_VI_of_León_and_Castile .
  
  # Step 2: Find the grandchild of Alfonso VI
  ?alfonsoVIGrandchild dbo:parent ?alfonsoVIChild .

  # Step 3: Find a child of Roger II
  ?rogerIIChild dbo:parent dbr:Roger_II_of_Sicily .
  
  # Step 4 & 5: The parent of Roger's child is Roger himself, so we use the same variable

  # Step 6: Ensure both are royalty
  ?alfonsoVIGrandchild a dbo:Monarch ;
                      rdfs:label ?grandchildLabel .
  ?rogerIIChild a dbo:Monarch ;
                rdfs:label ?childLabel .

  # Step 7: Find commonality as royalty (assuming familial connection)
  FILTER(?alfonsoVIGrandchild = ?rogerIIChild)

  # Optional: To ensure they are recognized as royalty, we can filter by label
  FILTER(langMatches(lang(?grandchildLabel), ""en"") && langMatches(lang(?childLabel), ""en""))
}
```",5,6,6,3,2,3,3,71,0,0,4,0,0.0,0
198,9,train,Give me the war of Amasa Tracy and force of Quincy Adams Gillmore.,SELECT ?result WHERE { <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?command WHERE {
  VALUES ?person { 
    dbr:Amasa_Tracy 
    dbr:Quincy_Adams_Gillmore 
  }
  
  OPTIONAL {
    ?person dbo:spouse ?command .
    FILTER(CONTAINS(LCASE(STR(?command)), ""civil war""))
  }

  OPTIONAL {
    ?person dbo:positionHeld ?command .
    FILTER(CONTAINS(LCASE(STR(?command)), ""civil war""))
  }

  OPTIONAL {
    ?person dbo:memberOf ?command .
    FILTER(CONTAINS(LCASE(STR(?command)), ""civil war""))
  }
}
```",2,2,3,1,2,3,3,71,0,2,1,0.0,0.0,0
249,3,train,"Give me the birthplace, that is a country, of Shobhna Samarth.",SELECT ?result WHERE { <http://dbpedia.org/resource/Shobhna_Samarth> <http://dbpedia.org/ontology/birthPlace> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX schema: <http://schema.org/>

SELECT ?birthPlace WHERE {
  ?person a dbo:FilmActor ;
          foaf:name ""Shobhna Samarth""@en .
  ?person dbo:birthPlace ?birthPlace .
  FILTER (?birthPlace rdf:type schema:Country)
}
```",1,2,2,1,1,2,2,9,0,0,3,0,0.0,0
119,1,train,Give me the tenant of Spain.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?monarchName WHERE {
  ?monarch a dbo:Monarch ;
           dbo:country dbr:Spain ;
           rdfs:label ?monarchLabel .
  FILTER(CONTAINS(LCASE(?monarchLabel), ""king of spain""))
  OPTIONAL { ?monarch foaf:name ?monarchName }
}
ORDER BY DESC(?monarch)
LIMIT 1
```",1,1,2,1,1,3,3,71,0,0,216,0,0.0,0
89,41,train,"Give me the predecessor of Myat Hpone Pyo and spouse of the father, that is a royalty, of Myat Hpone Pyo and child of the parent of Min Hla Htut of Pyakaung.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?result <http://dbpedia.org/ontology/spouse> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?predecessor ?spouse WHERE {
  # Step 1: Find Myat Hpone Pyo's predecessor who is royalty
  ?myathponepyo dbo:successor ?predecessor .
  ?predecessor a dbo:Monarch ;
               rdfs:label ?predecessorLabel .

  # Step 2: Check if this predecessor is also the father of Myat Hpone Pyo
  ?father dbo:child dbr:Myat_Hpone_Pyo ;
          dbo:spouse ?mother .
  
  FILTER (?predecessor = ?father)

  # Step 3: Find spouse (likely mother) of Myat Hpone Pyo's father
  ?mother a dbo:Person .

  # Step 4: Ensure the spouse is royalty
  OPTIONAL { ?mother dbo:title ?title . }
  
  # Step 5: Identify Min Hla Htut's parent from Pyakaung
  ?minhlahhtut dbo:parent ?parent .
  ?parent rdfs:label ""Min Hla Htut""@en .

  # Step 6: Find child of this parent who matches the spouse
  ?child dbo:parent ?parent ;
         rdfs:label ?spouseLabel .
  
  FILTER (?mother = ?child)

  # Ensure all labels are in English for clarity
  FILTER (lang(?predecessorLabel) = ""en"" && lang(?spouseLabel) = ""en"")
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
103,43,train,"Give me the actor of Dispatches from Elsewhere and professional in  and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . }","```sparql
# Query for finding the actor from ""Dispatches from Elsewhere"" who is also a politician.
SELECT ?actor ?actorName WHERE {
  ?movie dcterms:title ""Dispatches from Elsewhere""@en .
  ?movie dbo:starring ?actor .
  ?actor foaf:name ?actorName .
  OPTIONAL { 
    ?actor dbo:occupation dbp:Politician .
  }
  FILTER EXISTS { ?actor dbo:occupation dbp:Politician . }
}

# Query for finding the profession of an actor in ""Ab Kya Hoga.""
SELECT ?actor ?actorName WHERE {
  ?movie dcterms:title ""Ab Kya Hoga""@en .
  ?movie dbo:starring ?actor .
  ?actor foaf:name ?actorName .
}
```",5,6,6,3,3,3,3,71,0,0,2,0,0.0,0
311,2,train,"Give me the producer, that is an organisation and a band and a group, of Lotus (R.E.M. song).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Lotus_(R.E.M._song)> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  ?song dbo:title ""Lotus"" ;
        dbo:artist dbr:R.E.M. ;
        dbo:producer ?producer .
  
  ?producer a ?type .
  FILTER (
    ?type = dbo:MusicalGroup || 
    ?type = dbo:Organization
  )
}
```",1,4,2,1,1,3,2,20,0,0,1,0,0.0,0
468,15,train,"Give me the child of Alfonso IV of Aragon and reference to the real name of the child, that is a royalty, of Alfonso IV of Aragon.",SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alfonso_IV_of_Aragon> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://xmlns.com/foaf/0.1/name> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?realName WHERE {
  # Identify Alfonso IV of Aragon
  dbr:Alfonso_IV_of_Aragon dbo:spouse ?parent .
  
  # Find children who are royalty
  ?parent dbo:child ?child .
  ?child a dbo:Monarch ;
         rdfs:label ?realName .

  FILTER (LANG(?realName) = 'en')
}
```",4,5,5,3,2,3,2,20,0,0,3,0,0.0,0
412,20,train,"Give me the entity in the death place, that is a settlement, of Antonios Varthalitis and war of Napoleon Zervas and war of Konstantinos Ventiris.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v3 . <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v3 . },"```sparql
# Step 1: Get Antonios Varthalitis' death place which is a settlement
SELECT ?deathPlace WHERE {
    dbpedia:Antonios_Varthalitis dbo:placeOfBirth ?birthPlace .
    dbpedia:Antonios_Varthalitis dbo:deathPlace ?deathPlace .
    ?deathPlace rdf:type dbo:Settlement .
}

# Step 2: Get wars involving Napoleon Zervas
SELECT DISTINCT ?war WHERE {
    dbpedia:Napoleon_Zervas dbo:militaryConflict ?war .
}

# Step 3: Get wars involving Konstantinos Ventiris
SELECT DISTINCT ?war WHERE {
    dbpedia:Konstantinos_Ventiris dbo:militaryConflict ?war .
}

# Step 4: Find the intersection of wars from steps 2 and 3
SELECT DISTINCT ?commonWar WHERE {
    { SELECT DISTINCT ?war WHERE {
        dbpedia:Napoleon_Zervas dbo:militaryConflict ?war .
    }}
    UNION
    { SELECT DISTINCT ?war WHERE {
        dbpedia:Konstantinos_Ventiris dbo:militaryConflict ?war .
    }}
}

# Step 5: Ensure the death place is related to both wars
SELECT ?deathPlace WHERE {
    # From step 1
    dbpedia:Antonios_Varthalitis dbo:placeOfBirth ?birthPlace .
    dbpedia:Antonios_Varthalitis dbo:deathPlace ?deathPlace .
    ?deathPlace rdf:type dbo:Settlement .

    # Ensure the settlement is related to both wars from step 4
    ?commonWar dbo:location ?deathPlace .
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
198,2,train,"Give me the entity in Charleston, South Carolina.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?entity WHERE {
  ?entity dbo:location ?place .
  FILTER (str(?place) = ""Charleston, South Carolina"")
}
```",1,1,2,1,1,3,3,71,0,0,12,0,0.0,0
353,16,train,"Who is the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I?","SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?result <http://dbpedia.org/property/father> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?child WHERE {
  ?williamI a dbo:Monarch ;
            foaf:name ""William I""@en .
  
  ?parentChildRelation dbo:child ?child .
  ?parentChildRelation dbo:parent ?williamI .

  ?child rdf:type dbo:Monarch .
}
```",2,5,3,2,1,3,3,71,0,0,1,0,0.0,0
361,19,train,Give me the professional in the profession of Frédéric Bouraly and professional in  and actor of Rustlers' Rhapsody.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v1 . }","```sparql
# Query to find another professional in the same profession as Frédéric Bouraly
SELECT ?person WHERE {
  ?frédéricBouraly dbo:profession ?profession .
  FILTER (str(?frédéricBouraly) = ""Frédéric_Bouraly"")
  
  ?person dbo:profession ?sameProfession .
  FILTER (?sameProfession = ?profession && str(?person) != ""Frédéric_Bouraly"")
}

# Query to find another actor from the movie ""Rustlers' Rhapsody""
SELECT ?actor WHERE {
  ?movie dbo:starring ?actor .
  FILTER (str(?movie) = ""Rustlers'_Rhapsody_(film)"")
  
  ?rustlersRhapsodyActor dbo:starring ?actor .
  FILTER (?rustlersRhapsodyActor != ?movie)
}
```",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
628,9,train,Give me the person born as Ackquille Jean Pollard and band member of Uncle Murda.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?stageName WHERE {
  ?person a dbo:MusicalArtist .
  ?person foaf:name ""Ackquille Jean Pollard"" .
  OPTIONAL { ?person foaf:name ?stageName . }
  ?bandMemberRelation dbo:member ?person .
  ?band dbo:name ""Uncle Murda"" .
  ?bandMemberRelation dbo:group ?band .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
737,0,train,"Give me the predecessor of Carl, Duke of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessorLabel WHERE {
  ?carl a dbo:Duke ;
        foaf:name ""Carl, Duke of Württemberg""@en .
  
  OPTIONAL { 
    ?carl dbo:succession ?predecessor .
    ?predecessor rdfs:label ?predecessorLabel .
    FILTER(LANG(?predecessorLabel) = 'en')
  }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
782,36,train,"Give me the associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran and reference to The Fabulous Thunderbirds.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v0 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?person dbo:birthName ?name .
  ?person dbo:profession dbr:Musical_artist .
  ?person dbo:associatedBand dbr:The_Fabulous_Thunderbirds .
  ?association dbo:subject ?person ;
               dbo:predicate dbr:has_associated_person ;
               dbo:object dbr:Nick_Curran .
  ?artist dbo:birthName ?name .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
943,8,train,"Who is the father, that is a royalty and an office holder, of Na'od?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?na'od dbo:parent ?father .
  ?na'od rdfs:label ""Na'od""@en .
  OPTIONAL { ?father dbo:position ?office . }
  FILTER EXISTS { ?father rdf:type dbo:Monarch } 
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
399,3,train,Give me the profession of Jamie T.,SELECT ?result WHERE { <http://dbpedia.org/resource/Jamie_T> <http://dbpedia.org/property/occupation> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?profession 
WHERE {
  ?person rdfs:label ""Jamie T""@en.
  ?person dbo:occupation ?profession.
}
```",1,1,2,1,1,2,2,9,0,0,5,0,0.0,0
119,60,train,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/office> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v0 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v3 <http://dbpedia.org/property/leader> ?v2 . ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?office WHERE {
  ?person rdfs:label ""Anxo Quintana""@en .
  ?event dbo:leader ?person ;
         dbo:administration ?admin .
  ?admin dbo:country dbr:Spain ;
         dbo:party dbr:Spanish_Socialist_Workers'_Party .
  ?person dbp:nationality dbr:Spain .
  ?event dbo:office ?office .
}
```",6,8,7,3,2,3,3,71,0,0,2,0,0.0,0
871,49,train,"Give me the father of the child, that is a politician, of the alumnus of Eton College and parent of the awardee of Commander of the Royal Victorian Order.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/property/father> ?v4 . ?v2 <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . }","```sparql
SELECT DISTINCT ?father WHERE {
  # Step 1: Find alumni of Eton College
  ?alumnus dbo:almaMater dbr:Eton_College .
  
  # Step 2: Identify children who are politicians
  ?child dbo:parent ?alumnus ;
         a dbo:Politician .

  # Step 3: Check if the politician has a parent awarded Commander of the Royal Victorian Order
  ?awardee dbo:award dbr:Commander_of_the_Royal_Victorian_Order .
  ?politician dbo:parent ?awardee .
  
  FILTER(?child = ?politician)

  # Step 4: Identify the father of this politician
  ?father dbo:spouse ?mother ;
          dbo:child ?politician .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
609,42,train,Give me the birth place of Glenn Youngkin and birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of the author of El Deafo.,SELECT ?result WHERE { <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlaceLabel WHERE {
  # Glenn Youngkin's birthplace
  OPTIONAL { 
    dbpedia:Glenn_Youngkin dbo:birthPlace ?youngkinBirthPlace .
    SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
  }

  # Vince Gilligan's birthplace (assuming we are focusing on him directly)
  OPTIONAL {
    dbpedia:Vince_Gilligan dbo:birthPlace ?gilliganBirthPlace .
    SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
  }

  # Cece Bell, author of ""El Deafo"", birthplace
  OPTIONAL {
    dbpedia:Cecily_Ann_Bell dbo:birthPlace ?bellBirthPlace .
    SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
  }

  BIND(IF(BOUND(?youngkinBirthPlace), STR(?youngkinBirthPlaceLabel), ""Unknown"") AS ?glennYoungkinBirthPlace)
  BIND(IF(BOUND(?gilliganBirthPlace), STR(?gilliganBirthPlaceLabel), ""Unknown"") AS ?vinceGilliganBirthPlace)
  BIND(IF(BOUND(?bellBirthPlace), STR(?bellBirthPlaceLabel), ""Unknown"") AS ?ceceBellBirthPlace)

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
531,37,train,"Give me the office of Miguel Maura and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/office> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?officeMaura ?force
WHERE {
  # Find Miguel Maura's office as a commander and ensure he is an office holder and politician
  ?miguelMaura dbr:Miguel_Maura .
  ?miguelMaura dbo:positionHeld ?commanderOffice .
  ?commanderOffice rdfs:label ""Commander""@en .
  ?miguelMaura dbo:occupation ?officeHolder .
  ?officeHolder rdfs:label ""Office holder""@en .
  ?miguelMaura dbo:occupation ?politician .
  ?politician rdfs:label ""Politician""@en .

  # Find the force involving Manuel Pinto da Costa
  ?manuelPinto dbr:Manuel_Pinto_da_Costa .
  ?force dbo:participant ?manuelPinto .
  ?force a (dbo:MilitaryConflict|dbo:SocietalEvent) .

  # Link Miguel Maura's office to the same force
  ?commanderOffice dbo:relatedTo ?force .
}
```",4,8,5,3,2,3,3,71,0,0,1,0,0.0,0
871,10,train,Give me the father of Arthur Stanley (politician) and parent of Victor Stanley (Royal Navy officer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  # Arthur Stanley (Politician)
  OPTIONAL { 
    dbr:Arthur_Stanley_(politician) dbo:parent ?arthurFather .
  }
  
  # Victor Stanley (Royal Navy Officer)
  OPTIONAL { 
    dbr:Victor_Stanley_(Royal_Navy_officer) dbo:parent ?victorFather .
  }

  # Check if they have the same father
  FILTER (?arthurFather = ?victorFather)
  BIND(?arthurFather AS ?father)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
68,11,train,"Give me the father of the child, that is a royalty, of Philip I of Castile.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . },"```sparql
SELECT DISTINCT ?child ?father WHERE {
  # Find children of Philip I of Castile
  ?person dbo:spouse ?philip1 .
  ?philip1 foaf:name ""Philip I of Castile""@en .
  
  # Ensure the person is a child (has a parent-child relationship)
  ?person dbo:childOf ?parent .
  
  # Check if the child has a royal title
  OPTIONAL { ?person dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Princess"", ""i"") }
  
  # Retrieve the father of each royal child
  ?parent foaf:name ?father .
}
```",2,3,3,2,1,2,3,28,0,0,1,0,0.0,0
89,5,train,"Give me the child, that is a royalty, of Saw Shwe Khet.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?title WHERE {
  ?sawShweKhet dbo:child ?child .
  FILTER(STRSTARTS(STR(?sawShweKhet), ""http://dbpedia.org/resource/Saw_Shwe_Khet""))
  
  OPTIONAL { ?child dbp:title ?title . }
  OPTIONAL { ?child dbo:role ?role . }

  FILTER(
    EXISTS {
      ?child (dbo:title|dbo:role) ?royalty .
      FILTER(CONTAINS(LCASE(STR(?royalty)), ""king"") || 
             CONTAINS(LCASE(STR(?royalty)), ""queen"") ||
             CONTAINS(LCASE(STR(?royalty)), ""prince"") ||
             CONTAINS(LCASE(STR(?royalty)), ""princess""))
    }
  )
}
```",1,2,2,1,1,3,3,71,0,0,2,0,0.0,0
151,4,train,Give me the entity in Ottoman Empire and reference to Order of the Medjidie.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Order of the Medjidie""@en . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Ottoman_Empire> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient WHERE {
  ?recipient dbo:awardReceived dbr:Order_of_the_Medjidie .
  OPTIONAL { ?recipient dbo:nationality dbr:Ottoman_Empire . }
}
```",2,2,3,1,2,2,2,9,0,0,1,0,0.0,0
859,14,train,"Give me the associated musical artist of the associated musical artist of the member, that is a musical artist, of Khlyst (band).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Khlyst_(band)> <http://dbpedia.org/ontology/bandMember> ?v2 . },"```sparql
SELECT DISTINCT ?finalAssociatedArtist WHERE {
  # Step 1: Find members of Khlyst
  ?member dbo:member dbpedia:Khlyst .
  
  # Step 2: Filter members who are also musical artists
  ?member dbo:musicalArtist ?musicalArtist .

  # Step 3: For each musical artist, find their associated musical artists
  ?musicalArtist dbo:associatedMusicalArtist ?firstAssociatedArtist .

  # Step 4: Find another layer of associated musical artists
  ?firstAssociatedArtist dbo:associatedMusicalArtist ?finalAssociatedArtist .
}
```",3,4,4,3,1,3,2,20,0,0,34,0,0.0,0
595,42,train,"Give me the author of Back to Work (book) and commander in the war, that is a disease and a societal event, of United States Navy and spouse of the author, that is a politician and an office holder, of An Invitation to the White House.",SELECT ?result WHERE { <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
SELECT ?author ?spouse WHERE {
  ?book dcterms:title ""Back to Work""@en .
  ?book dbo:author ?author .
  ?author foaf:name ""Michelle Obama"" .
  
  ?person1 foaf:name ""Michelle Obama"" .
  ?person1 schema:spouse ?spouse .
  ?spouse rdf:type dbo:Politician ;
          dbo:officeHeld ?office .

  OPTIONAL {
    ?event dcterms:title ""An Invitation to the White House""@en .
    ?event dbo:organizer ?spouse .
  }
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
557,16,train,"Give me the claim to fame, that is a work, of the actor of Johnny Doughboy.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/knownFor> ?result . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v1 . },"```sparql
# Step 1: Find the actor who played Johnny Doughboy
SELECT ?actor WHERE {
  ?character dbo:portrayedBy ?actor .
  ?character rdfs:label ""Johnny Doughboy""@en .
}

# Assuming we find the actor, let's say it is ActorName (replace with actual name found)
# Step 2: Find a notable work of this actor
SELECT ?work WHERE {
  ?work dbo:starring ?actor .
  FILTER(CONTAINS(LCASE(?work), ""film"") || CONTAINS(LCASE(?work), ""tv show"")) # Assuming we are looking for films or TV shows
}
```",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
595,51,train,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v4 <http://dbpedia.org/property/author> ?result . },"```sparql
# Step 1: Find the owner or associated entity with USS Arcadia (ID-1605)
SELECT ?owner WHERE {
  ?ship dcterms:title ""USS Arcadia (ID-1605)"" .
  ?ship dbo:ownedBy ?owner .
}

# Step 2: Identify a war that is also considered a disease and societal event
SELECT ?war WHERE {
  ?event rdfs:label ""World War I""@en ;
         dbo:relatedDisease ?disease ;
         dbo:societalEvent ?societalEvent .
  FILTER EXISTS { ?disease rdfs:label ""Spanish Flu""@en }
}

# Step 3: Find works by Bill Clinton
SELECT ?work WHERE {
  ?author foaf:name ""Bill Clinton"" .
  ?author dbo:authored ?work .
  ?work rdf:type dbo:Book .
}

# Step 4: Identify the commander of World War I
SELECT ?commander WHERE {
  ?war rdfs:label ""World War I""@en ;
       dbo:commander ?commander .
}
```",5,10,6,3,2,3,3,71,0,0,1,0,0.0,0
595,4,train,"Give me the author, that is a politician and an office holder, of An Invitation to the White House.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
SELECT ?author ?occupation WHERE {
  ?book dcterms:title ""An Invitation to the White House""@en .
  ?book dbo:author ?author .
  OPTIONAL { ?author dbo:occupation ?occupation . }
  FILTER (CONTAINS(LCASE(?occupation), ""politician"") || CONTAINS(LCASE(?occupation), ""office holder""))
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
143,12,train,Give me the actor of The Campus Queen and associated musical artist of the person born as Cynthia Ikponmwenosa Morgan.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ""Cynthia Ikponmwenosa Morgan""@en . <http://dbpedia.org/resource/The_Campus_Queen> <http://dbpedia.org/property/starring> ?result . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
# Query to find the actor of ""The Campus Queen""
SELECT ?actor WHERE {
  ?film dcterms:title ""The Campus Queen""@en .
  ?film dbo:starring ?actor .
}

UNION

# Query to find associated musical artist of Tiwa Savage (Cynthia Ikponmwenosa Morgan)
SELECT ?associatedArtist WHERE {
  ?person foaf:name ""Tiwa Savage""@en ;
          schema:birthName ""Cynthia Ikponmwenosa Morgan""@en .
  
  OPTIONAL { 
    ?collaboration dbo:artist ?person ;
                   dbo:partner ?associatedArtist .
  }
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
943,15,train,"Who is the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha?",SELECT ?result WHERE { <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?parent WHERE {
  ?event dbo:event = db:Mukha_Siege .
  ?person dbo:role = db:Commander ;
          dbo:memberOf ?royaltyClass ;
          dbp:commandedEvent ?event .
  ?royaltyClass rdfs:subClassOf* dbo:Royalty .

  ?person dbo:parent ?parent .
  ?parent dbo:memberOf ?parentRoyaltyClass ;
          rdf:type dbo:Person .
  ?parentRoyaltyClass rdfs:subClassOf* dbo:Royalty .
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
80,7,train,Give me the series of The Golden Master.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?series WHERE {
  ?work rdfs:label ""The Golden Master""@en.
  ?work dbo:partOfSeries ?series.
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
943,51,train,"Give me the reference to the alter ego of The Shadow and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . ?v3 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . },"```sparql
SELECT ?person WHERE {
  ?person dbo:wikiPageRedirects dbpedia:The_Gray_Man .
  ?person dbo:father ?father .
  ?father dbo:child ?grandson .
  ?grandson foaf:name ""Zara Yaqob""@en .
  ?person rdf:type dbo:Monarch .
  ?person dbo:officeHolderOf ?office .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
472,10,train,"Give me the administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?result <http://dbpedia.org/property/leader> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administrationRole WHERE {
  ?person a dbo:Person ;
          foaf:name ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en .
  OPTIONAL { ?person dbo:royalTitle ?title . }
  OPTIONAL { ?person dbo:positionHeld ?administrationRole . }
}
```",2,3,3,2,1,2,3,28,0,0,2,0,0.0,0
375,6,train,Give me the entity in Japan and war of Toyotomi Hidenaga.,SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  dbr:Toyotomi_Hidenaga dbo:nationality dbr:Japan .
  dbr:Toyotomi_Hidenaga dbo:participatedIn ?battle .
  ?battle dbo:location dbr:Japan .
  ?battle dbo:partOf ?war .
}
```",2,2,3,1,2,2,3,28,0,0,3,0,0.0,0
557,13,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?producer WHERE {
  ?person a dbo:Person ;
          foaf:name ""Cora Sue Collins""@en .
  
  ?person dbo:notableWork ?work .

  OPTIONAL { 
    ?work dbo:producer ?producer .
  }
}
```",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
258,14,train,"Give me the alma mater of the person born, that is a politician, as the birth name of Eleonora Menicucci.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/almaMater> ?result . ?v0 <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/property/birthName> ?v2 . },"```sparql
SELECT ?almaMater WHERE {
  ?person foaf:name ""Eleonora Menicucci""@en .
  ?person dbo:birthName ?birthName .
  ?person dbo:occupation dbr:Politician .
  ?person dbo:almaMater ?almaMater .
}
```",3,4,4,3,1,3,2,20,0,0,3,0,0.0,0
375,4,train,Give me the person born as Koichirō.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Koichirō""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?fullName ?alias 
WHERE {
  ?person a dbo:Person .
  ?person dbo:birthName ""Koichirō""@en .
  OPTIONAL { ?person rdfs:label ?fullName FILTER (lang(?fullName) = 'en') }
  OPTIONAL { ?person foaf:name ?alias FILTER (lang(?alias) = 'en') }
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
687,3,train,Give me the birthday of Marty Pollio.,SELECT ?result WHERE { <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?birthday WHERE {
  ?person a foaf:Person ;
          foaf:name ""Marty Pollio"" .
  ?person dbo:birthday ?birthday .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
89,14,train,Give me the predecessor of the child of Saw Shwe Khet.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v1 . },"```sparql
SELECT ?child ?predecessor WHERE {
  # Find Saw Shwe Khet's child
  ?sawShweKhet dbo:child ?child .
  
  FILTER(?sawShweKhet = dbpedia:Saw_She_Tha) # Assuming Saw Shwe Khet is identified as Saw She Tha

  # Find the predecessor of the child
  ?child dbo:predecessor ?predecessor .
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
89,30,train,Give me the spouse of Saw Shwe Khet and child of Saw Min Hla and predecessor of the child of Saw Shwe Khet.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . },"```sparql
# Step 1: Find the spouse of Saw Shwe Khet
SELECT ?spouse WHERE {
    ?sawShweKhet dbo:spouse ?spouse .
    FILTER (str(?sawShweKhet) = ""Saw_Shwe_Khet"")
}

# Step 2: Find the child of Saw Min Hla
SELECT ?child WHERE {
    ?sawMinHla dbo:child ?child .
    FILTER (str(?sawMinHla) = ""Saw_Min_Hla"")
}

# Step 3: Find the predecessor (parent) of the child identified in step 2
SELECT ?predecessor WHERE {
    ?child dbo:parent ?predecessor .
    # Assuming we have stored the result from step 2 as a variable, replace `?child` with that value.
}
```

Note: The actual SPARQL query execution would require running these queries sequentially and using the results of one to inform the next. In practice, you might need to execute these steps programmatically or manually substitute values between queries.",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
198,38,train,"Give me the force of the awardee of Gillmore Medal and entity in the birthplace, that is a settlement and American, of Henry Clay Lewis.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/place> ?v2 . },"```sparql
# Step 1: Find Henry Clay Lewis and his birthplace
SELECT ?henryClayLewis ?birthPlace WHERE {
  ?henryClayLewis dbo:birthPlace ?birthPlace .
  ?henryClayLewis rdfs:label ""Henry Clay Lewis""@en .
  FILTER (CONTAINS(LANG(?henryClayLewis), ""en""))
}

# Step 2: Ensure the birthplace is a settlement in America
SELECT DISTINCT ?settlement WHERE {
  VALUES ?birthPlace { <http://dbpedia.org/resource/PLACE_URI> } # Replace PLACE_URI with actual URI from step 1
  ?settlement dbo:country dbr:United_States .
  ?settlement rdf:type dbo:Settlement .
}

# Step 3: Find Gillmore Medal awardees
SELECT DISTINCT ?awardee WHERE {
  ?awardee dbo:award dbr:Gillmore_Medal .
}

# Step 4: Retrieve force of each awardee (assuming 'force' is a measurable attribute)
SELECT DISTINCT ?awardee ?force WHERE {
  VALUES ?awardee { <http://dbpedia.org/resource/AWARDEE_URI_1> <http://dbpedia.org/resource/AWARDEE_URI_2> } # Replace with actual URIs from step 3
  ?awardee dbo:force ?force .
}

# Step 5: Combine information (assuming 'force' and entity in birthplace are directly combinable)
SELECT DISTINCT ?settlement ?awardee ?force WHERE {
  VALUES ?settlement { <http://dbpedia.org/resource/SETTLEMENT_URI> } # Replace with actual URI from step 2
  VALUES ?awardee { <http://dbpedia.org/resource/AWARDEE_URI_1> <http://dbpedia.org/resource/AWARDEE_URI_2> } # Replace with actual URIs from step 3
  ?awardee dbo:force ?force .
}
```

Note: The placeholders like `PLACE_URI`, `AWARDEE_URI_1`, etc., need to be replaced with the actual URIs obtained from executing each query step.",4,6,5,2,2,3,3,71,0,0,2,0,0.0,0
557,52,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of A Star Is Born (1937 film).","SELECT ?result WHERE { <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://dbpedia.org/property/alterEgo> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v5 <http://dbpedia.org/ontology/producer> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  # Cora Sue Collins' work
  VALUES (?collinsWork) { 
    dbr:Kent_Knowles 
  }
  
  # Kent Allard is a character in the above work
  ?collinsWork dbo:character dbr:Kent_Allard .
  
  # Producer of A Star Is Born (1937 film)
  ?starIsBornFilm dbo:producer ?producer .
  FILTER(?starIsBornFilm = dbr:A_Star_Is_Born_(1937_film))
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
706,3,train,Who is the awardee of Sangeet Natak Akademi Fellowship?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Sangeet_Natak_Akademi_Fellowship> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?personLabel WHERE {
  ?person a dbo:AwardRecipient .
  ?award dbo:name ""Sangeet Natak Akademi Fellowship""@en ;
         dbo:recipient ?person .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
414,5,train,Who is the awardee of Nobel Prize in Physics?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Nobel_Prize_in_Physics> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient WHERE {
  ?award dbo:category dbr:Nobel_Prize_in_Physics .
  ?award dbo:recipient ?recipient .
}
```",1,1,2,1,1,3,2,20,0,0,31,0,0.0,0
293,20,train,"Give me the spouse of the actor of 1,000 Dollars a Minute and party member of Republican Party (United States).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v2 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?actor ?spouse WHERE {
  ?film dcterms:title ""1,000 Dollars a Minute""@en .
  ?film dbo:starring ?actor .
  
  ?actor dbo:politicalAffiliation <http://dbpedia.org/resource/Republican_Party_(United_States)> .

  OPTIONAL { 
    ?actor dbo:spouse ?spouse .
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
737,5,train,Give me the child of Alexander of Württemberg (1804-1881).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?child dbo:parent dbr:Alexander_of_W%C3%BCrttemberg_(1804-1881) .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
249,6,train,"Give me the native of the birthplace, that is a country, of Shobhna Samarth.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . <http://dbpedia.org/resource/Shobhna_Samarth> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
SELECT ?nativeLanguage WHERE {
  wd:Q123456 wdt:P19 wd:Q1234 . # Shobhna Samarth's birthplace (Lahore)
  wd:Q1234 wdt:P31/wdt:P279* wd:Q6256 . # Check if Lahore is a city in Pakistan
  wd:Q6256 wdt:P37 ?nativeLanguage . # Get the official language of Pakistan
}
```

Note: Replace `wd:Q123456` with Shobhna Samarth's DBpedia identifier and `wd:Q1234` with Lahore's DBpedia identifier.",2,3,3,2,1,2,2,9,0,0,11051,0,0.0,0
687,51,train,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v4 <http://dbpedia.org/ontology/team> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?player ?team
WHERE {
  # Step 1: Get Marcelo Sarmiento's birthdate
  VALUES ?sarmientoBirthDate { 
    SELECT ?birthdate WHERE { dbr:Marcelo_Sarmiento dbo:birthday ?birthdate }
  }

  # Step 2: Find soccer players and managers born on that date
  ?person dbo:birthDate ?sarmientoBirthDate .
  ?person a dbo:SoccerPlayer ;
          a dbo:SoccerManager .

  # Step 3: Identify their teams
  ?person dbo:team ?team .

  # Step 4: Find actor from ""All or Nothing: Manchester City"" who is also a soccer player and athlete
  ?actor dbo:role ?role .
  ?role dbp:title dbr:All_or_Nothing:_Manchester_City ;
        dbo:actor ?actor .
  ?actor a dbo:SoccerPlayer ;
         a dbo:Athlete .

  # Step 5: Match teams
  ?actor dbo:team ?matchedTeam .
  FILTER(?team = ?matchedTeam)
  
  BIND(?person AS ?player)
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
103,51,train,"Give me the professional in the profession of Shatrughan Sinha and professional in the alter ego of the series, that is a comics character, of The Shadow (video game).",SELECT ?result WHERE { <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . },"```sparql
# Query to get Shatrughan Sinha's profession
SELECT ?profession WHERE {
  dbpedia:Shatrughan_Sinha dbo:occupation ?profession .
}

UNION

# Query to get The Shadow's alter ego and its profession
SELECT ?alterEgoProfession WHERE {
  dbpedia:The_Shadow dbo:alterEgo ?alterEgo .
  ?alterEgo dbo:occupation ?alterEgoProfession .
}
```",5,6,6,3,2,3,3,71,0,0,39640,0,0.0,0
293,35,train,"Give me the party member of the ruling party in Central, Louisiana and person born as the birth name of Ann Sothern.","SELECT ?result WHERE { <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/ontology/party> ?v2 . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
# Query for the ruling party in Central, Louisiana and a notable member
SELECT ?partyMember WHERE {
  ?city rdfs:label ""Central, Louisiana""@en .
  ?city dbo:government ?government .
  ?government dbo:mayor ?mayor .
  ?mayor foaf:name ?name ;
          dbo:politicalParty ?party .
  OPTIONAL { ?party dbo:wikiPageRedirects ?rulingParty . }
  FILTER (lang(?name) = ""en"")
  BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", REPLACE(LCASE(STR(?name)), "" "", ""_""))) AS ?person)
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}

UNION

# Query for a person born with the birth name of Ann Sothern (Anne Albertson)
SELECT ?person WHERE {
  ?person dbo:birthName ""Anne Albertson""@en .
  FILTER NOT EXISTS { ?person rdfs:label ""Ann Sothern""@en . }
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
513,11,train,Give me the entity in the award of George H. Cameron and residence of Doug Beattie.,SELECT ?result WHERE { <http://dbpedia.org/resource/Doug_Beattie> <http://dbpedia.org/ontology/residence> ?result . <http://dbpedia.org/resource/George_H._Cameron> <http://dbpedia.org/property/awards> ?v2 . ?result <http://dbpedia.org/ontology/country> ?v2 . },"```sparql
SELECT DISTINCT ?entity WHERE {
  {
    # Query for George H. Cameron's award
    ?person dbo:wikiPageID ""George_H._Cameron"" .
    ?person dbo:honorificTitle ?award .
    BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", STR(?award))) AS ?entity)
  }
  UNION
  {
    # Query for Doug Beattie's residence
    ?person dbo:wikiPageID ""Doug_Beattie"" .
    ?person dbo:residence ?residence .
    BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", STR(?residence))) AS ?entity)
  }
}
```",3,3,4,2,2,3,2,20,0,0,2,0,0.0,0
513,6,train,Give me the entity in United Kingdom and residence of Doug Beattie.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom> . <http://dbpedia.org/resource/Doug_Beattie> <http://dbpedia.org/ontology/residence> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?residence WHERE {
  ?person a dbo:Person ;
          foaf:name ""Doug Beattie""@en .
  OPTIONAL { ?person dbo:residence ?residence . }
  FILTER EXISTS { 
    ?residence dbo:country dbr:United_Kingdom .
  }
}
```",2,2,3,1,2,3,2,20,2,0,0,1.0,1.0,1.0
943,16,train,"Give me the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v0 <http://dbpedia.org/property/alterEgo> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alias WHERE {
  dbr:Lamont_Cranston dbo:alsoKnownAs ?alias .
}
```",2,2,3,2,1,3,3,71,0,0,3,0,0.0,0
158,18,train,"Give me the native of Grand Duchy of Finland and native of the administration, that is a country, of Nicholas II of Russia.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . },"```sparql
# Query for a notable person from the Grand Duchy of Finland
SELECT ?person WHERE {
  ?person dbo:nationality dbr:Grand_Duchy_of_Finland .
  FILTER EXISTS { ?person dbo:occupation ?occupation . }
}

UNION

# Query for a notable person native to Russia during Nicholas II's administration
SELECT ?person WHERE {
  ?person dbo:nationality dbr:Russia .
  FILTER EXISTS { ?person dbo:birthPlace ?place . ?place dbp:country dbr:Russia . }
}
```",3,4,4,2,2,2,3,28,0,0,126,0,0.0,0
158,17,train,"Give me the native of the administration of Alexander II, Grand Duke of Finland and native of Russian Empire.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativePlace WHERE {
  ?person rdfs:label ""Alexander II, Grand Duke of Finland""@en .
  ?person dbo:nationality dbr:Russian_Empire .
  ?person dbo:birthPlace ?nativePlace .
}
```",3,3,4,2,2,2,3,28,0,0,126,0,0.0,0
943,10,train,Give me the child of Dawit I and father of Baeda Maryam I.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?person WHERE {
  ?person dbo:spouse ?dawitI .
  ?dawitI rdfs:label ""Dawit I""@en .
  FILTER (LANG(?dawitI) = 'en') .

  ?person dbo:child ?baedaMaryamI .
  ?baedaMaryamI rdfs:label ""Baeda Maryam I""@en .
  FILTER (LANG(?baedaMaryamI) = 'en') .

  ?person rdfs:label ?name .
  FILTER (CONTAINS(LCASE(STR(?name)), ""zara yaqob""))
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
311,17,train,"Give me the band member of the writer of the album, that is a musical work and a work and an album, of Sappy and associated musical artist of Filthy Friends.",SELECT ?result WHERE { <http://dbpedia.org/resource/Filthy_Friends> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Sappy> <http://dbpedia.org/ontology/album> ?v0 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v0 <http://dbpedia.org/property/writer> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>. },"```sparql
# Query to find the writer/artist of ""Sappy""
SELECT ?writer WHERE {
  ?album dcterms:title ""Sappy""@en .
  ?album dbo:creator ?writer .
}

# Assuming we have identified the writer, let's say it is Beck Hansen (for example purposes)
# Query to find band members associated with Beck Hansen
SELECT DISTINCT ?bandMember WHERE {
  ?band dbo:member ?bandMember .
  ?band dbo:member <http://dbpedia.org/resource/Beck_Hansen> .
}

# Query to identify ""Filthy Friends"" and their associated artists
SELECT DISTINCT ?associatedArtist WHERE {
  ?group dcterms:title ""Filthy Friends""@en .
  ?group dbo:associatedMusicalArtist ?associatedArtist .
}
```

Note: The above queries assume that we have identified the correct entities for ""Sappy"" and ""Filthy Friends."" Adjustments may be needed based on actual DBpedia data.",4,7,5,3,2,3,2,20,0,0,1,0,0.0,0
198,5,train,Give me the award of Quincy Adams Gillmore.,SELECT ?result WHERE { <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?person rdfs:label ""Quincy Adams Gillmore""@en .
  ?person dbo:award ?award .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
78,20,train,"Give me the band member of The Alan Parsons Project and associated musical artist of Stuart Tosh and associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v1 . },"```sparql
# Step 1: Find band members of The Alan Parsons Project
SELECT ?bandMember WHERE {
  ?album dct:creator <http://dbpedia.org/resource/The_Alvin_Parsons_Project> .
  ?album dbo:artist ?bandMember .
}

# Step 2: Find associated musical artist of Stuart Tosh
SELECT ?associatedArtist WHERE {
  ?person foaf:name ""Stuart Tosh""@en .
  ?person dbo:musicalArtist ?associatedArtist .
}

# Step 3: Identify writer involved in Wizards of Waverly Place soundtrack who is also a musician and artist
SELECT DISTINCT ?writer WHERE {
  ?soundtrack dct:subject <http://dbpedia.org/resource/Wizards_of_Waverly_Place> ;
              dbo:composer ?writer .
  ?writer rdf:type dbo:MusicalArtist .
  ?writer rdf:type dbo:Artist .
}

# Step 4: Find associated musical artist of the writer from step 3
SELECT ?associatedArtist WHERE {
  ?writer ?p ?album .
  ?album dbo:musicalArtist ?associatedArtist .
}
```",4,6,5,2,3,2,3,28,0,0,1,0,0.0,0
158,4,train,"Give me the administration of Alexander II, Grand Duke of Finland.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administration WHERE {
  ?person a dbo:Person ;
          foaf:name ""Alexander II, Grand Duke of Finland""@en .
  
  OPTIONAL { 
    ?person dbo:positionHeld ?administration .
  }
  
  FILTER (lang(?person) = 'en')
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
39,16,train,"Give me the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v1 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?v1 <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character WHERE {
  ?author foaf:name ""Walter B. Gibson""@en .
  ?work dbo:author ?author ;
        dbo:genre dbr:Pulp_fiction ;
        dbo:subject ?character .
  ?character dbo:wikiPageRedirects ?redirect .
  OPTIONAL { ?character dbo:wikiPageDisambiguates ?disambiguation . }
  FILTER NOT EXISTS {
    ?disambiguation rdf:type dbo:Film .
  }
  FILTER NOT EXISTS {
    ?disambiguation rdf:type dbo:ComicBook .
  }
  FILTER EXISTS {
    ?comic dbo:subject ?character ;
           a dbo:ComicBook .
  }
}
```",2,4,3,2,1,3,3,71,0,0,3,0,0.0,0
628,2,train,Give me the native of Florida.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:birthPlace dbr:Florida .
  OPTIONAL { ?person rdfs:label ?name FILTER (lang(?name) = 'en') }
}
ORDER BY ?name
```",1,1,2,1,1,3,3,71,971,935,0,0.5094438614900315,1.0,0.6750086896072298
756,32,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and native of the administration, that is a country, of Theodor Heuss.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v1 . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager WHERE {
  # Identify VfL Bochum as a sports club, organization, and soccer club
  dbr:VfL_Bochum dbo:type/dbo:SportClub .
  dbr:VfL_Bochum dbo:type/dbp:SoccerClub .

  # Find the manager of VfL Bochum in the 2007-08 season
  ?manager dbp:managedTeam dbr:VfL_Bochum ;
           dbp:managementStartYear ?startYear ;
           dbp:managementEndYear ?endYear .
  
  FILTER (?startYear <= ""2007""^^xsd:gYear && ?endYear >= ""2008""^^xsd:gYear)

  # Ensure the manager is native to Germany
  ?manager dbo:nationality dbr:Germany .
}
```",4,8,5,2,2,3,3,71,0,0,1,0,0.0,0
412,1,train,Give me the entity in Athens.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity ?label WHERE {
  ?entity a dbo:Place .
  ?entity dbo:location dbr:Athens .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
LIMIT 10
```",1,1,2,1,1,2,3,28,0,0,12,0,0.0,0
628,7,train,"Give me the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?band ?award WHERE {
  ?band a dbo:Band .
  ?band dbp:location ?location .
  FILTER(CONTAINS(LCASE(?location), ""new york""))
  OPTIONAL { ?band dbo:award ?award . }
  FILTER EXISTS { ?band dbo:award ?award }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
87,13,train,"Give me the actor of the movie, that is a work and a film, with Iliza Shlesinger and spouse of Janusz Kamiński.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?movie a dbo:Film ;
         dbo:starring dbr:Iliza_Shlesinger ;
         dbo:starring dbr:Meryl_Streep .
  
  ?movie dbo:starring ?actor .
}
```",3,5,4,2,2,2,3,28,0,0,1,0,0.0,0
198,40,train,"Give me the force of Quincy Adams Gillmore and entity in Charleston, South Carolina and war of the awardee of the show, that is an award, of United States Congress.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v2 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v1 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?rank ?entityInCharleston ?war ?award
WHERE {
  # Quincy Adams Gillmore's military rank
  dbr:Quincy_A._Gillmore dbo:militaryRank ?rank .

  # Entity in Charleston, South Carolina related to Gillmore
  ?gillmoreAction dbo:location dbr:Charleston,_South_Carolina ;
                  dbo:agent dbr:Quincy_A._Gillmore .
  ?entityInCharleston a dbo:MilitaryInstallation ;
                     dbo:location dbr:Charleston,_South_Carolina .

  # War during which Gillmore was active
  ?gillmoreAction dbo:partOf ?war .

  # Award by the United States Congress
  ?awardEvent dbo:recipient dbr:Quincy_A._Gillmore ;
              dbo:awardedBy dbr:United_States_Congress ;
              dbo:relatedWorkOrEvent ?war .
  ?award a dbo:Award .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
737,30,train,"Give me the child of Albrecht, Duke of Württemberg and child of the child, that is a royalty, of Archduke Charles Louis of Austria and predecessor of Carl, Duke of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find a child of Albrecht, Duke of Württemberg
  ?child dbo:parent dbr:Albrecht,_Duke_of_W%C3%BCrttemberg .
  
  # Ensure this person is also a grandchild of Archduke Charles Louis of Austria and royalty
  ?grandchild dbo:parent ?child .
  ?grandchild dbo:parent dbr:Archduke_Charles_Louis_of_Austria .
  ?grandchild rdf:type dbo:Monarch .

  # Check if this person is the predecessor of Carl, Duke of Württemberg
  ?person dbo:predecessor dbr:Claudius,_Duke_of_W%C3%BCrttemberg .
  
  # Ensure all conditions are met for the same individual
  FILTER (?child = ?grandchild && ?person = ?grandchild)
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
80,5,train,"Give me the work, that is a song and a musical work, of T.I..",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?result <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?work dbo:musicArtist dbr:T.I. .
  ?work a ?type .
  FILTER (
    ?type = dbo:Song || 
    ?type = dbo:MusicalWork
  )
}
```",1,3,2,1,1,3,3,71,0,0,44,0,0.0,0
159,59,train,"Give me the successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/commander> ?v2 . ?v0 <http://dbpedia.org/property/writer> ?v5 . ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?writer WHERE {
  # Michał Kazimierz Pac's role in a military conflict
  ?pacRole dbo:agent dbr:Michał_Kazimierz_Pac ;
           dbo:position ""Commander""^^xsd:string ;
           dbo:participatedIn ?conflict .
  
  # The successor of Michał Kazimierz Pac
  ?successorRole dbo:agent ?successor ;
                 dbo:position ""Commander""^^xsd:string ;
                 dbo:partOf ?conflict .

  # Ensure the successor is a politician and office holder
  ?successor dbo:occupation dbr:Politician ;
             dbo:officeHolder true .

  # Link to George Ducas' work
  ?ducasWork dbo:author dbr:George_Ducas .
  ?writer dbo:work ?ducasWork .
}
```",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
513,14,train,"Give me the residence of the leader of the party, that is an organisation and a political party, of George Savage (politician).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/leader> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. <http://dbpedia.org/resource/George_Savage_(politician)> <http://dbpedia.org/ontology/party> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://dbpedia.org/ontology/residence> ?result . },"```sparql
SELECT ?party ?leader ?residence WHERE {
  # Find George Savage's associated political party
  ?savage dbo:member ?party .
  FILTER (str(?savage) = ""George_Savage_(politician)"")

  # Identify the leader of that party
  ?party dbo:leader ?leader .

  # Get the residence of the leader
  OPTIONAL { ?leader dbo:residence ?residence . }
}
```",3,5,4,3,1,3,2,20,0,0,2,0,0.0,0
756,31,train,"Give me the native of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://dbpedia.org/ontology/team> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v1 . ?v0 <http://dbpedia.org/ontology/manager> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?manager ?nativeCountry WHERE {
  # Find VfL Bochum's manager for the 2007-08 season
  ?season dbo:team dbr:VfL_Bochum ;
          dbo:participant ?player .
  
  ?player dbo:position ""Manager""^^xsd:string ;
          dbo:nationality ?nativeCountry .

  # Ensure the native country is West Germany
  FILTER (str(?nativeCountry) = ""West Germany"")

  # Link manager to VfL Bochum as a sports club and organization
  ?club dbo:manager ?player .
  ?club rdf:type dbo:SportsClub ;
        dbo:sport dbr:Football .

  # Ensure the season is the successor of 2006-07
  FILTER (str(?season) = ""2007–08 VfL Bochum season"")
}
```",4,10,5,3,2,3,3,71,0,0,1,0,0.0,0
472,23,train,"Give me the territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen and administration of the mayor of Duchy of Schleswig.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/capital> ?v1 . <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v2 . <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v1 . ?result <http://dbpedia.org/property/leader> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?deathPlace ?administeredTerritory ?mayor WHERE {
  # Find Christian Ditlev Ammentorp Hansen's death place
  dbr:Christian_Ditlev_Ammertorp_Hansen dbo:placeOfBirth ?birthPlace .
  dbr:Christian_Ditlev_Ammertorp_Hansen dbo:deathPlace ?deathPlace .

  # Ensure the death place is a settlement
  ?deathPlace rdf:type dbo:Settlement .

  # Find territory administered from this death place
  ?administeredTerritory dbo:administrativeCenter ?deathPlace .

  # Find information about Duchy of Schleswig and its mayor
  dbr:Duchy_of_Schleswig dbo:governingBody ?governingBody .
  ?governingBody dbo:mayor ?mayor .
}
```",4,5,5,2,2,2,3,28,0,0,1,0,0.0,0
816,30,train,Give me the parent of Amy Arbus and parent of the child of Allan Arbus and actor of Judgment: The Trial of Julius and Ethel Rosenberg.,SELECT ?result WHERE { <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v1 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Query to get the parent of Amy Arbus
SELECT ?parent WHERE {
  dbpedia:Amy_Arbus dbo:parent ?parent .
}

UNION

# Query to get the child of Allan Arbus and then their parent
SELECT ?grandParent WHERE {
  dbpedia:Allan_Arbus dbo:child ?child .
  ?child dbo:parent ?grandParent .
}

UNION

# Query to find actors in ""Judgment: The Trial of Julius and Ethel Rosenberg""
SELECT ?actor WHERE {
  ?film dbo:title ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
  ?film dbo:starring ?actor .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
668,26,train,"Give me the professional in the profession of the writer, that is a musical artist, of The Live Anthology.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v1 . ?v1 <http://dbpedia.org/property/occupation> ?v2 . },"```sparql
SELECT ?person ?name WHERE {
  ?work dcterms:title ""The Live Anthology""@en .
  ?work dbo:author ?person .
  ?person foaf:name ?name .
  OPTIONAL { 
    ?person dbo:occupation ?occupation .
    FILTER(CONTAINS(LCASE(?occupation), ""writer"") && CONTAINS(LCASE(?occupation), ""musical artist""))
  }
}
```",3,4,4,3,1,3,3,71,0,0,59565,0,0.0,0
143,2,train,Give me the reference to Afeez Oyetoro.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Afeez Oyetoro""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?person ?name WHERE {
  ?person a foaf:Person .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""afeez oyetoro""))
}
```",1,1,2,1,1,3,2,20,1,1,0,0.5,1.0,0.6666666666666666
347,35,train,"Give me the child of the father of Cecilia Renata of Austria and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?childName WHERE {
  # Find Cecilia Renata of Austria's father
  ?ceciliaRenata a dbo:Person ;
                foaf:name ""Cecilia Renata of Austria"" ;
                dbo:father ?father .

  # Find the children of her father who were commanders in war
  ?father dbo:child ?child .
  ?child a dbo:MilitaryPerson ;
         dbo:rank ?rank .
  
  FILTER EXISTS { ?child dbo:commanderOf ?war }
  
  # Attempt to link to societal events, events, and television shows
  OPTIONAL {
    ?event dbo:relatedTo ?child .
    ?event rdf:type ?eventType .
    FILTER (?eventType IN (dbo:SocietalEvent, dbo:Event, dbo:TelevisionShow))
  }

  # Link to the 2nd Dragoon Regiment (France)
  OPTIONAL {
    ?regiment dbr:2nd_Dragoon_Regiment_(France) ;
              dbo:commander ?child .
  }
  
  BIND(STR(?child) AS ?childName)
}
```",4,7,5,2,2,3,3,71,0,0,1,0,0.0,0
782,31,train,Give me the reference to the real name of the band of Kim Wilson and band of Kim Wilson.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v1 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://xmlns.com/foaf/0.1/name> ?v0 . ?v1 <http://xmlns.com/foaf/0.1/name> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?bandLabel WHERE {
  ?person dbo:member ?membership .
  ?membership dbo:band ?band .
  ?band rdfs:label ?bandLabel .

  FILTER(CONTAINS(LCASE(?bandLabel), ""kim wilson""))
}
```",4,4,5,3,2,3,3,71,0,0,2,0,0.0,0
943,5,train,"Give me the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?radio ?film ?television WHERE {
  VALUES ?character { dbr:The_Shadow }
  
  OPTIONAL {
    ?character dbo:adaptation ?radio .
    FILTER (CONTAINS(LCASE(STR(?radio)), ""radio""))
  }

  OPTIONAL {
    ?character dbo:adaptation ?film .
    FILTER (CONTAINS(LCASE(STR(?film)), ""film"") || CONTAINS(LCASE(STR(?film)), ""movie""))
  }
  
  OPTIONAL {
    ?character dbo:adaptation ?television .
    FILTER (CONTAINS(LCASE(STR(?television)), ""tv series"") || CONTAINS(LCASE(STR(?television)), ""television""))
  }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
119,7,train,Give me the war of the commander in French Revolutionary Wars.,SELECT ?result WHERE { <http://dbpedia.org/resource/French_Revolutionary_Wars> <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?campaign ?description WHERE {
  ?campaign a dbo:MilitaryConflict ;
            dbo:partOf dbr:French_Revolutionary_Wars ;
            dbo:commander dbr:Napoleon_Bonaparte .
  OPTIONAL { ?campaign dbo:description ?description }
}
```",2,2,3,2,1,3,2,20,0,0,121,0,0.0,0
198,22,train,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and war of Amasa Tracy.",SELECT ?result WHERE { <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/place> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?settlement ?war WHERE {
  # Find the birthplace of Henry Clay Lewis that is a settlement in America
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace rdf:type dbo:Settlement ;
              dbo:country dbr:United_States_of_America .

  # Ensure it's Henry Clay Lewis
  VALUES ?person { dbr:Henry_Clay_Lewis }

  # Find the war associated with Amasa Tracy
  ?tracy dbo:servedInMilitaryOrganization ?military .
  ?military dbo:participatedIn ?war .

  # Ensure it's Amasa Tracy
  VALUES ?tracy { dbr:Amasa_Tracy }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
353,39,train,"Give me the father of William II of Sicily and child of the child of the spouse, that is a royalty, of Constance of Burgundy.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . },"```sparql
SELECT ?father WHERE {
  # Step 1: Identify William II of Sicily's father
  dbpedia:William_II_of_Sicily dbo:parent ?williamFather .
  
  # Step 2: Find Constance of Burgundy's spouse
  dbpedia:Constance_of_Burgundy dbo:spouse ?constanceSpouse .

  # Step 3: Determine the child of this spouse
  ?constanceChild a dbo:Person ;
                 dbo:parent ?constanceSpouse .
  
  # Step 4: Identify the father of that child (ensuring royalty)
  ?constanceChild dbo:parent ?father .
  FILTER EXISTS { ?father rdf:type dbo:Monarch } # Ensures the person is royalty

  # Step 5: Connect these relationships
  ?williamFather owl:sameAs ?father .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
668,49,train,"Give me the person born as the birth name of the native, that is an artist, of Central Region, Ghana and associated musical artist of the person born as Elorm Kabu Amenyah.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . }","```sparql
# Step 1: Find Elorm Kabu Amenyah's associated musical artist
SELECT ?associatedArtist WHERE {
  ?elorm a dbo:Person ;
         foaf:name ""Elorm Kabu Amenyah""@en .
  ?elorm dbo:associatedMusicalArtist ?associatedArtist .
}

# Step 2: Use the result from step 1 to find an artist from Central Region, Ghana
SELECT ?person ?birthName WHERE {
  # Replace ?artist with the actual URI of the associated musical artist found in step 1
  ?artist a dbo:Person ;
          dbo:nationality dbr:Ghana ;
          dbo:regionOfOrigin dbr:Central_Region_(Ghana) .
  
  ?person dbo:associatedMusicalArtist ?artist ;
          foaf:name ?name .
  
  OPTIONAL { ?person foaf:givenName ?birthName . }
}
```

Note: The above SPARQL query is structured in two parts. You will need to replace `?artist` with the actual URI of the associated musical artist found from the first query.",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
742,13,train,Give me the birthplace of the alumnus of the reference to Пловдивски университет „Паисий Хилендарски“.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/almaMater> ?v0 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Пловдивски университет „Паисий Хилендарски“""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?alumnus ?birthplaceLabel WHERE {
  ?university rdf:type dbo:University ;
              rdfs:label ""Plovdiv University 'Paisius of Hilendar'""@en .
  
  ?university dbo:alumni ?alumnus .
  ?alumnus foaf:birthPlace ?birthplace .
  SERVICE <http://dbpedia.org/sparql> {
    ?birthplace rdfs:label ?birthplaceLabel .
  }
}
```",3,3,4,3,1,3,2,20,0,0,2,0,0.0,0
859,3,train,"Give me the associated musical artist, that is a band and a group and an organisation, of Burnt by the Sun (band).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/Burnt_by_the_Sun_(band)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  VALUES ?burntByTheSun { dbr:Burnt_by_the_Sun_(band) }
  
  ?burntByTheSun dbo:associatedBand ?artist .
  ?burntByTheSun dbo:member ?artist .
  ?burntByTheSun dbo:organization ?artist .

  FILTER (isLiteral(?artist) = false)
}
```",1,4,2,1,1,3,2,20,0,0,5,0,0.0,0
756,54,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and native of the administration, that is a country, of the leader of West Germany and manager of 2020–21 SBV Vitesse season.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/leader> ?v0 . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v3 . ?v3 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
SELECT ?manager WHERE {
  # Step 1: Identify player in VfL Bochum 2007-08 season
  ?player dbo:memberOfTeam ?team .
  ?team dbo:season ""2007–08"" ;
        dbp:name ""VfL Bochum"" .

  # Step 2: Determine manager of that player
  ?manager dbo:manages ?player .

  # Step 3: Check if this manager is also associated with SBV Vitesse in the 2020-21 season
  ?vitesseTeam dbp:name ""SBV Vitesse"" ;
               dbo:season ""2020–21"" .
  ?manager dbo:manages ?vitessePlayer .
  ?vitessePlayer dbo:memberOfTeam ?vitesseTeam .

  # Step 4 & 5: Identify the native country of the leader of West Germany
  ?leader foaf:nationality ?country ;
          dbp:title ""Chancellor"" ;
          dbp:country ""West Germany"" .
  
  # Step 6: Ensure manager is a sports club, an organization, and a soccer club
  ?manager rdf:type dbo:SoccerClub ;
           rdf:type dbo:SportsOrganization .

  FILTER(?country = <http://dbpedia.org/resource/Germany>)
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
737,60,train,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v0 . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/property/father> ?v3 . ?result <http://dbpedia.org/ontology/successor> ?v2 . <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v3 . },"```sparql
# Step 1: Find the parent of Archduchess Margarete Sophie of Austria
SELECT ?parent WHERE {
  wd:Q123456 wdt:P22 ?parent .
  FILTER (wdt:P31/psv:P31 ?parent ""Royal""^^xsd:string)
}

# Step 2: Find the child of that parent who is a royalty
SELECT ?grandchild WHERE {
  ?parent wdt:P40 ?grandchild .
  FILTER (wdt:P31/psv:P31 ?grandchild ""Royal""^^xsd:string)
}

# Step 3: Identify the spouse of Archduchess Helena of Austria
SELECT ?spouse WHERE {
  wd:Q654321 wdt:P26 ?spouse .
  FILTER (wdt:P31/psv:P31 ?spouse ""Royal""^^xsd:string)
}

# Step 4: Determine the child of this spouse
SELECT ?child WHERE {
  ?spouse wdt:P40 ?child .
}

# Step 5: Find the predecessor of this child
SELECT ?predecessor WHERE {
  ?child wdt:P1366 ?predecessor .
}

# Step 6: Match the grandchild with the predecessor
SELECT DISTINCT ?grandchild WHERE {
  ?parent wdt:P40 ?grandchild .
  FILTER (wdt:P31/psv:P31 ?grandchild ""Royal""^^xsd:string)
  
  ?spouse wdt:P26 wd:Q654321 .
  ?spouse wdt:P40 ?child .
  ?child wdt:P1366 ?predecessor .

  VALUES ?grandchild { ?predecessor }
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Archduchess Margarete Sophie of Austria and `wd:Q654321` with the ID for Archduchess Helena of Austria. The queries assume that the properties used (e.g., P22 for parent, P40 for child) are correct according to DBpedia's schema.",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
198,21,train,"Give me the war of the awardee of Medal of Honor and entity in Charleston, South Carolina.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?v1 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
SELECT ?awardee ?war ?entityInCharleston WHERE {
  # Find Medal of Honor awardees and their associated wars
  ?awardee dbo:medalOfHonor ""Medal of Honor""@en .
  ?service dbo:militaryService ?awardee .
  ?service dbo:conflict ?war .

  # Find entities in Charleston, South Carolina
  ?entityInCharleston dbo:location ?charlestonLocation .
  ?charlestonLocation rdfs:label ""Charleston, South Carolina""@en .

  # Check for any connection between awardees and entities in Charleston
  OPTIONAL { ?awardee dbo:birthPlace ?charlestonLocation }
  OPTIONAL { ?entityInCharleston dbo:relatedTo ?awardee }
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
943,3,train,"Who is the commander, that is a royalty, in Siege of Mukha?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?name WHERE {
  ?event rdfs:label ""Siege of Mukha""@en .
  ?event dbpedia-owl:commander ?person .
  ?person rdfs:label ?name .
  OPTIONAL { ?person dbo:royalty ?isRoyalty . FILTER(?isRoyalty = true) }
}
```",1,2,2,1,1,3,3,71,0,0,2,0,0.0,0
89,6,train,"Give me the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?father WHERE {
  ?person rdfs:label ""Myat Hpone Pyo""@en .
  ?person dbo:father ?father .
  
  OPTIONAL { 
    ?father dbo:title ?title .
    FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""royalty""))
  }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
37,2,train,"Who is the writer, that is an artist, of The Miseducation of Lauryn Hill?",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Miseducation_of_Lauryn_Hill> <http://dbpedia.org/property/writer> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?album dbo:artist dbr:Lauryn_Hill .
  ?album rdfs:label ""The Miseducation of Lauryn Hill""@en .
  ?person dbo:birthName ""Lauryn Noelle Hill"" .
  ?person dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""singer"") || CONTAINS(LCASE(?occupation), ""songwriter""))
}
```",1,2,2,1,1,2,2,9,0,0,3,0,0.0,0
687,12,train,Give me the player in Sergio Agüero and team of Pablo Aimar.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . },"```sparql
SELECT ?player ?team WHERE {
  # Get the team for Sergio Agüero
  ?agüero dbo:affiliation ?team .
  FILTER (str(?agüero) = ""Sergio_Agüero"")

  # Get a player from that team
  ?player dbo:affiliation ?team .

  # Ensure it's not Sergio Agüero himself
  FILTER (?player != ?agüero)

  # Get the team for Pablo Aimar
  ?aimar dbo:affiliation ?anotherTeam .
  FILTER (str(?aimar) = ""Pablo_Aimar"")
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
89,18,train,Give me the child of Saw Min Hla and spouse of Saw Shwe Khet and predecessor of Myat Hpone Pyo.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?child dbo:parent dbp:SawMinHla .
  ?spouse dbo:spouse dbp:SawShweKhet .
  ?predecessor dbo:predecessor dbp:MyatHponePyo .

  FILTER (?child = ?spouse && ?spouse = ?predecessor)
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
557,12,train,Give me the producer of The Adventures of Tom Sawyer (1938 film) and producer of A Star Is Born (1937 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
SELECT ?filmTitle ?producerName WHERE {
  VALUES ?filmTitle { 
    dbr:The_Adventures_of_Tom_Sawyer_(1938_film) 
    dbr:A_Star_Is_Born_(1937_film)
  }
  
  ?film dbo:title ?filmTitle .
  ?film dbo:productionYear ?year .
  FILTER(?year IN (1938, 1937))
  
  ?film dbo:producer ?producer .
  ?producer foaf:name ?producerName .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
375,9,train,Give me the war of Toyotomi Hidenaga and war of Hashiba Hidekatsu.,SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?war ?description WHERE {
  VALUES ?person { 
    dbr:Toyotomi_Hidenaga 
    dbr:Hashiba_Hidekatsu 
  }
  
  ?person dbo:participatedIn ?event .
  ?event a dbo:MilitaryConflict ;
         rdfs:label ?war ;
         dbo:description ?description .

  FILTER (lang(?war) = 'en' && lang(?description) = 'en')
}
ORDER BY ?war
```",2,2,3,1,2,2,3,28,0,0,2,0,0.0,0
816,17,train,Give me the child of the spouse of Mariclare Costello.,SELECT ?result WHERE { <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . ?v1 <http://dbpedia.org/ontology/child> ?result . },"```sparql
SELECT ?childName WHERE {
  ?mariclare dbo:spouse ?spouse .
  FILTER (str(?mariclare) = ""Mariclare_Costello"") .

  ?spouse dbo:child ?child .
  
  ?child rdfs:label ?childName .
  FILTER(LANG(?childName) = 'en')
}
```",2,2,3,2,1,3,3,71,0,0,2,0,0.0,0
941,3,train,"Who is the parent, that is a royalty, of Duke Anthony Ulrich of Brunswick?",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Duke_Anthony_Ulrich_of_Brunswick> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?parent ?title WHERE {
  wd:Q123456 dbo:parent ?parent .
  OPTIONAL { ?parent dbo:royaltyTitle ?title . }
  FILTER EXISTS { ?parent dbo:royaltyTitle ?title . }
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for Duke Anthony Ulrich of Brunswick.",1,2,2,1,1,3,2,20,0,0,2,0,0.0,0
311,0,train,Give me the associated musical artist of Filthy Friends.,SELECT ?result WHERE { <http://dbpedia.org/resource/Filthy_Friends> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
SELECT ?artist WHERE {
  wd:Q1055982 wdt:P31/wdt:P279* wd:Q482994 .
  wd:Q1055982 wdt:P136 ?artist .
}
```

In this query:
- `wd:Q1055982` is the DBpedia identifier for Filthy Friends.
- `wdt:P31/wdt:P279*` is used to find instances of people (musical artists) associated with the band.
- `wdt:P136` is the property that links a person to their occupation as a musical artist.",1,1,2,1,1,3,2,20,0,0,6,0,0.0,0
119,39,train,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and tenant of Spain.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:position dbr:President_of_the_Government_of_Spain .
  ?person dbo:partyAffiliation dbr:Spanish_Socialist_Workers'_Party .
  OPTIONAL { ?person foaf:name ?name . }
}
```",4,5,5,3,2,3,3,71,0,0,23,0,0.0,0
871,37,train,"Give me the father of Arthur Stanley (politician) and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . }","```sparql
# Find Arthur Stanley's father
SELECT ?father WHERE {
  wd:Q1234567 wdt:P22 ?father .
}

# Find Edward Stanley, 17th Earl of Derby's notable politician parent
SELECT ?politicianParent WHERE {
  wd:Q6543210 wdt:P40 ?politicianParent .
  FILTER EXISTS { ?politicianParent wdt:P39 ?office . }
}

# Find the child of that politician parent who is also a politician and office holder
SELECT ?child WHERE {
  ?politicianParent wdt:P40 ?child .
  FILTER EXISTS { ?child wdt:P39 ?office . }
}

# Finally, find the parent of this child
SELECT ?parent WHERE {
  ?child wdt:P22 ?parent .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia ID for Arthur Stanley and `wd:Q6543210` with the ID for Edward Stanley, 17th Earl of Derby. The query assumes that these IDs are known or can be found through a preliminary search.",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
905,28,train,"Give me the child of Stephen V of Hungary and spouse of the father of Philip I, Prince of Taranto and parent of Charles Martel of Anjou.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Stephen V of Hungary's child
  ?child dbo:parent dbr:Stephen_V_of_Hungary .
  
  # Philip I, Prince of Taranto's father and his spouse
  ?father dbo:child dbr:Philip_I,_Prince_of_Taranto ;
          dbo:spouse ?person .

  # Charles Martel of Anjou's parent
  ?parent dbo:child dbr:Charles_Martel_of_Anjou .
  
  # Linking the person to all conditions
  FILTER (?child = ?parent && ?person = ?spouse)
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
347,25,train,"Give me the father of Eleonore of Austria, Queen of Poland and child of the father of Cecilia Renata of Austria.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?eleonoreFather WHERE {
  # Find Eleonore of Austria, Queen of Poland
  ?eleonore dbo:spouse dbr:Casimir_III_of_Poland ;
            rdf:type dbo:Queen ;
            foaf:name ""Eleonore of Austria""@en .
  
  # Get her father
  ?eleonore dbo:parent ?eleonoreFather .

  # Find Cecilia Renata of Austria
  ?ceciliaRenata dbo:spouse dbr:Wladyslaw_IV_Vasa ;
                 rdf:type dbo:Queen ;
                 foaf:name ""Cecilia Renata of Austria""@en .
  
  # Get her parent (father)
  ?ceciliaRenataParent dbo:parent ?eleonoreFather .

  # Ensure the father of Eleonore is also the grandfather of Cecilia Renata
  ?ceciliaRenataParent foaf:name ""Cecilia Renata of Austria""@en .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
89,38,train,"Give me the predecessor of the child of Saw Shwe Khet and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v2 . ?result <http://dbpedia.org/ontology/spouse> ?v3 . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v3 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?predecessor WHERE {
  # Find Saw Shwe Khet's child
  ?sawShweKhetChild dbo:parent dbr:Saw_Shwe_Khet .
  
  # Find Myat Hpone Pyo's father and his spouse (likely mother)
  ?myatHponePyoFather dbo:child dbr:Myat_Hpone_Pyo .
  ?spouse dbp:spouse ?myatHponePyoFather .

  # Ensure the spouse is a royalty
  ?spouse rdf:type dbo:Monarch .

  # Find the predecessor of the spouse
  ?predecessor dbo:successor ?spouse .
  
  # Ensure the predecessor is also a royalty
  ?predecessor rdf:type dbo:Monarch .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
392,8,train,Give me the member of 1. FC Magdeburg and reference to the designer of Aston Martin AMR1.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v0 . <http://dbpedia.org/resource/Aston_Martin_AMR1> <http://dbpedia.org/property/designer> ?v0 . ?result <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/1._FC_Magdeburg> . },"```sparql
# Query for a member of 1. FC Magdeburg
SELECT ?player WHERE {
  ?club rdf:type dbo:FootballClub .
  ?club foaf:name ""1. FC Magdeburg""@en .
  ?club dbo:member ?player .
  ?player rdf:type dbo:Person .
  FILTER EXISTS { ?player dbo:nationality ?nationality } # Ensuring it's a person
}

UNION

# Query for the designer of Aston Martin AMR1
SELECT ?designer WHERE {
  ?car dbo:model ""AMR1""@en ;
       dbo:manufacturer dbpedia:Aston_Martin .
  ?car dbo:designer ?designer .
  ?designer rdf:type dbo:Person .
}
```",3,3,4,2,2,2,2,9,0,0,2,0,0.0,0
103,16,train,"Give me the profession of the actor, that is a politician, of Ab Kya Hoga.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/occupation> ?result . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
SELECT ?actor ?actorName ?profession WHERE {
  ?movie dbo:film dbpedia:Ab_Kya_Hoga .
  ?movie dbo:starring ?actor .
  ?actor foaf:name ?actorName .
  OPTIONAL { 
    ?actor dbo:occupation ?occupation .
    ?occupation rdfs:label ?profession .
    FILTER (CONTAINS(LCASE(?profession), ""politician""))
  }
}
```",2,3,3,2,1,3,3,71,0,0,3,0,0.0,0
742,5,train,Give me the resident of Sofia.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Sofia> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  OPTIONAL { ?person dbo:birthPlace dbr:Sofia . }
  OPTIONAL { ?person dbo:residence dbr:Sofia . }
  ?person foaf:name ?name .
}
ORDER BY ?name
LIMIT 100
```",1,1,2,1,1,3,2,20,0,162,16,0.0,0.0,0
628,4,train,"Give me the associated musical artist, that is a musical artist, of Bobby Shmurda.",SELECT ?result WHERE { <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?bobby a dbo:MusicalArtist ;
         foaf:name ""Bobby Shmurda""@en .
  
  ?association dbo:associatedBandOrMusicalArtist ?bobby ;
               dbo:associatedBandOrMusicalArtist ?artist .
  
  FILTER(?artist != ?bobby)
  FILTER(STRSTARTS(LCASE(?artist), LCASE(""musical artist"")))
}
```",1,2,2,1,1,3,3,71,0,0,3,0,0.0,0
103,44,train,Give me the actor of Dispatches from Elsewhere and professional in the alter ego of The Shadow and professional in the profession of Shatrughan Sinha.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . },"```sparql
# Query to find the actor of ""Dispatches from Elsewhere""
SELECT ?actor WHERE {
  ?series dcterms:title ""Dispatches from Elsewhere""@en .
  ?series dbo:castMember ?actor .
}

UNION

# Query to find the professional in the alter ego of The Shadow (Lamont Cranston)
SELECT ?actor WHERE {
  ?character rdfs:label ""The Shadow""@en ;
             foaf:name ""Lamont Cranston""@en .
  ?character dbo:portrayedBy ?actor .
}

UNION

# Query to find professionals in the profession of Shatrughan Sinha (Actor and Politician)
SELECT DISTINCT ?person WHERE {
  ?person rdf:type dbo:Actor ;
          dbo:occupation ""Politician"" .
}
```",5,5,6,2,3,3,3,71,0,0,2,0,0.0,0
905,46,train,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and parent of the father, that is a royalty, of Charles I of Hungary.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v2 <http://dbpedia.org/property/father> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Philip, Despot of Romania
  ?philip a dbo:Person ;
          foaf:name ""Philip, Despot of Romania""@en .

  # Step 2: Find his parent who is royalty
  ?parentParent dbo:child ?philip .
  ?parentParent dbo:title ?royalTitle .
  
  FILTER EXISTS { ?royalTitle rdfs:label ?titleLabel . FILTER regex(?titleLabel, ""King|Queen|Prince|Princess"", ""i"") }

  # Step 3: Determine the spouse of this royal parent
  ?spouse dbo:spouse ?parentParent .

  # Step 4: Identify Charles I of Hungary
  ?charles a dbo:Person ;
           foaf:name ""Charles I of Hungary""@en .

  # Step 5: Find his father who is royalty
  ?fatherParent dbo:child ?charles .
  ?fatherParent dbo:title ?royalTitle2 .

  FILTER EXISTS { ?royalTitle2 rdfs:label ?titleLabel2 . FILTER regex(?titleLabel2, ""King|Queen|Prince|Princess"", ""i"") }

  # Step 6: Determine the parent of this royal father
  ?parentOfFatherParent dbo:child ?fatherParent .

  # Ensure both identified individuals are related through royalty
  FILTER (?spouse = ?parentOfFatherParent)
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
213,0,train,Give me the birth place of Winston Chang.,SELECT ?result WHERE { <http://dbpedia.org/resource/Winston_Chang> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Winston Chang""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,2,20,0,0,3,0,0.0,0
119,53,train,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and tenant of Spain.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v3 <http://dbpedia.org/property/leader> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?office WHERE {
  ?person a dbo:Politician ;
          foaf:name ""Anxo Quintana""@en ;
          dbo:partyMemberOf dbr:Spanish_Socialist_Workers'_Party .

  ?administration dbo:member ?person ;
                  dbo:country dbr:Spain .

  ?event dbo:officeHolder ?person ;
         dbo:office ?office .

  FILTER EXISTS { ?person dbo:nationality dbr:Spain }
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
258,8,train,"Give me the alma mater of the person born, that is a politician, as Eleonora Menicucci de Oliveira.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/almaMater> ?result . ?v0 <http://dbpedia.org/property/birthName> ""Eleonora Menicucci de Oliveira""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?almaMater WHERE {
  ?person a dbo:Politician ;
          foaf:name ""Eleonora Menicucci de Oliveira""@en .
  OPTIONAL { ?person dbo:almaMater ?almaMater . }
}
```",2,3,3,2,1,3,2,20,0,0,3,0,0.0,0
943,37,train,"Give me the father of Baeda Maryam I and reference to the alter ego of the reference to Lamont Cranston (radio, film and television).","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . }","```sparql
# Query to find the father of Baeda Maryam I
SELECT ?father WHERE {
  ?person dbo:givenName ""Baeda Maryam I""@en .
  ?person dbo:father ?father .
}

# Query to find the alter ego of Lamont Cranston
SELECT ?alterEgo WHERE {
  ?character rdfs:label ""Lamont Cranston""@en .
  ?character dbo:alias ?alterEgo .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
871,51,train,"Give me the parent of the child of Frederick Stanley, 16th Earl of Derby and father of the child, that is a politician, of the alumnus of Eton College.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v3 . ?v1 <http://dbpedia.org/property/father> ?v4 . ?v4 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?grandparent WHERE {
  ?child rdf:type dbo:Person .
  ?child foaf:name ""Edward Henry Stanley"" .
  ?child dbo:spouse ?spouse .
  ?spouse dbo:father ?father .
  ?father foaf:name ""Frederick Arthur Stanley, 16th Earl of Derby""@en .
  ?father dbo:parent ?grandparent .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
311,3,train,"Who is the associated musical artist, that is an artist, of R.E.M.?",SELECT ?result WHERE { <http://dbpedia.org/resource/R.E.M.> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?artist WHERE {
  ?rEm dbo:associatedMusicalArtist ?artist .
  FILTER (strstarts(str(?rEm), ""http://dbpedia.org/resource/R.E.M.""))
}
```",1,2,2,1,1,3,2,20,2,12,0,0.14285714285714285,1.0,0.25
293,59,train,"Give me the spouse of the actor of the product, that is a film, of Nat Levine and party member of the ruling party in the landmark at elevation of 20.116800000000001347.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v2 . ?v0 <http://dbpedia.org/property/starring> ?v5 . ?v3 <http://dbpedia.org/property/leaderParty> ?v2 . ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. }","```sparql
SELECT ?spouse WHERE {
  # Step 1: Identify the landmark at the given elevation
  ?landmark a dbo:Mountain ;
            dbo:elevationAboveSeaLevel ""20.116800000000001347""^^xsd:float .
  
  # Step 2: Determine the country of the landmark and its ruling party
  ?landmark dbo:country ?country .
  ?party dbo:isRulingPartyOf ?country ;
         rdf:type dbo:PoliticalParty .

  # Step 3: Find films produced by Nat Levine
  ?film dbo:producer ?natLevine .
  ?natLevine foaf:name ""Nat Levine"" .

  # Step 4: Identify an actor from the film
  ?film dbo:starring ?actor .

  # Step 5: Determine the spouse of that actor
  ?actor dbo:spouse ?spouse .
}
```",6,7,7,3,2,3,3,71,0,0,2,0,0.0,0
87,0,train,Give me the actor of Paradise (2013 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  dbr:Paradise_(2013_film) dbo:starring ?actor .
}
```",1,1,2,1,1,2,3,28,0,0,7,0,0.0,0
633,16,train,"Give me the parent of the father of Dorothea of Lorraine and spouse of the parent, that is a royalty and a noble, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. <http://dbpedia.org/resource/Dorothea_of_Lorraine> <http://dbpedia.org/property/father> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?v2 . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parentSpouse WHERE {
  # Step 1: Find Dorothea of Lorraine's father
  ?dorothea a dbo:Person ;
           foaf:name ""Dorothea of Lorraine""@en .
  
  ?father dbo:child ?dorothea ;
          foaf:name ?fatherName .

  # Step 2: Find the parent (grandfather) of Dorothea's father
  ?parent dbo:child ?father .

  # Step 3: Identify the spouse of this grandfather
  ?spouse dbo:spouse ?parent .
  
  # Step 4: Ensure the spouse is royalty and noble
  ?spouse a dbo:Monarch ;
          dbo:nobleTitle ?title .

  # Step 5: Check relation to Francis I, Duke of Lorraine
  ?francisI a dbo:Person ;
            foaf:name ""Francis I, Duke of Lorraine""@en .
  
  ?parent dbo:child ?francisI .

  FILTER(?spouse != ?parent) # Ensure spouse is not the same as parent
}
```",4,6,5,2,2,3,2,20,0,0,1,0,0.0,0
905,60,train,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v0 . ?v4 <http://dbpedia.org/property/father> ?v2 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/father> ?v5 . ?v4 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . }","```sparql
# Step 1: Find Stephen V of Hungary's predecessor
SELECT ?predecessor WHERE {
  wd:Q123456 wdt:P39 wd:Q11424 . # Stephen V of Hungary was a monarch of Q11424 (Kingdom of Hungary)
  ?predecessor wdt:P57 wd:Q123456 . # Predecessor of Stephen V
  ?predecessor wdt:P39 wd:Q11424 .   # Predecessor is also a monarch of Kingdom of Hungary
}

# Step 2: Find the child of the predecessor
SELECT ?child WHERE {
  ?predecessor wdt:P40 ?child .     # Child of the predecessor
}

# Step 3: Identify Philip, Despot of Romania and his lineage
SELECT ?philip ?father ?grandfather WHERE {
  wd:Q789012 wdt:P31/wdt:P279* wd:Q1234567 . # Philip, Despot of Romania is a descendant of royalty (Q1234567)
  wd:Q789012 wdt:P22 ?father .               # Father of Philip
  ?father wdt:P22 ?grandfather .             # Grandfather of Philip
}

# Step 4: Find the spouse of the grandfather
SELECT ?spouse WHERE {
  ?grandfather wdt:P26 ?spouse .
}

# Step 5: Find the child of the child that is royalty
SELECT ?royalChild WHERE {
  ?child wdt:P40 ?grandchild . # Child of the child from step 2
  ?grandchild wdt:P31/wdt:P279* wd:Q1234567 . # Grandchild is a descendant of royalty
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
80,32,train,Give me the actor of the movie with  and actor of the album of What You Know (T.I. song).,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v3 . ?v1 <http://dbpedia.org/property/starring> """"@en . ?v3 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Part 1: Find the movie associated with ""What You Know"" by T.I. and its actor
SELECT ?movie ?actor WHERE {
  ?song dcterms:title ""What You Know""@en .
  ?song dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> .
  ?song dbo:lyricsIn ?album .
  ?album dbo:releaseDate ?date .
  ?movie dbo:soundtrack ?album .
  ?movie dbo:actor ?actor .
}

# Part 2: Find the album associated with ""What You Know"" by T.I. and its related actor
SELECT ?album ?relatedActor WHERE {
  ?song dcterms:title ""What You Know""@en .
  ?song dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> .
  ?song dbo:lyricsIn ?album .
  OPTIONAL { 
    ?album dbo:partOfProject ?project .
    ?project dbo:actor ?relatedActor .
  }
}
```",4,4,5,2,2,3,3,71,0,0,10,0,0.0,0
78,2,train,Give me the band member of The Alan Parsons Project.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?member WHERE {
  ?member dbo:bandMember dbr:The_Alan_Parsons_Project .
}
```",1,1,2,1,1,2,3,28,0,0,17,0,0.0,0
609,0,train,Give me the birth place of Vince Gilligan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  dbpedia:Vince_Gilligan dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
905,54,train,"Give me the spouse of the father of Philip I, Prince of Taranto and parent of the father, that is a royalty, of the spouse of Maria of Bytom and child of Stephen V of Hungary.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v2 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/property/father> ?v4 . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?spouse WHERE {
  # Step 1: Find Philip I's father
  ?philip dbo:father ?father .
  FILTER(STR(?philip) = ""Philip_I,_Prince_of_Taranto"")

  # Step 2: Find the spouse of Philip I's father (mother of Philip I)
  ?father dbo:spouse ?mother .

  # Step 3: Find the parent of Philip I's father (grandfather on his father's side)
  ?father dbo:parent ?grandfather .

  # Step 4: Find the spouse of this grandfather (royalty)
  ?grandfather dbo:spouse ?spouse .
  FILTER(STR(?spouse) != STR(?mother)) # Ensure it's not the same as Philip I's mother
  OPTIONAL { ?spouse rdf:type dbpedia-owl:Monarch } # Check if royalty

  # Step 5: Find Maria of Bytom's spouse
  ?maria dbo:spouse ?mariaSpouse .
  FILTER(STR(?maria) = ""Maria_of_Bytom"")

  # Step 6: Find the father of Maria's spouse and his parent (grandparent)
  ?mariaSpouse dbo:father ?grandparent .

  # Step 7: Ensure this grandparent is a child of Stephen V of Hungary
  ?stephenV dbpedia-owl:child ?grandparent .
  FILTER(STR(?stephenV) = ""Stephen_V_of_Hungary"")
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
941,14,train,"Give me the spouse of the spouse of the child, that is a royalty, of Princess Antoinette of Brunswick-Wolfenbüttel.",SELECT ?result WHERE { <http://dbpedia.org/resource/Princess_Antoinette_of_Brunswick-Wolfenbüttel> <http://dbpedia.org/ontology/child> ?v2 . ?v0 <http://dbpedia.org/ontology/spouse> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT DISTINCT ?finalSpouse WHERE {
  # Step 1: Identify Princess Antoinette of Brunswick-Wolfenbüttel
  ?antoinette dbo:title ""Princess Antoinette of Brunswick-Wolfenbüttel""@en .
  
  # Step 2: Find her child who is a royalty
  ?child dbo:parent ?antoinette ;
         dbo:spouse ?royalSpouse .

  FILTER EXISTS { 
    ?child dbo:title ?title .
    FILTER (CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess""))
  }

  # Step 3: Determine the spouse of this royal child
  ?spouseOfChild dbo:spouse ?child .

  # Step 4: Identify the spouse of that spouse
  ?finalSpouse dbo:spouse ?spouseOfChild .
}
```",3,4,4,3,1,3,2,20,0,0,4,0,0.0,0
414,7,train,"Give me the show of the host, that is an educational institution, of Nobel Prize in Physics.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/presenter> ?v1 . <http://dbpedia.org/resource/Nobel_Prize_in_Physics> <http://dbpedia.org/ontology/presenter> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?show WHERE {
  ?host dbo:occupation dbr:Science_communicator .
  ?host dbo:affiliation ?institution .
  ?institution dbo:nobelPrizeWinner ?nobel_winner .
  ?nobel_winner dbo:awardCategory dbr:Nobel_Prize_in_Physics .
  
  ?host dbp:hostedShow ?show .
}
```",2,3,3,2,1,3,2,20,0,0,11,0,0.0,0
80,61,train,"Give me the professional in the alter ego of the series of The Golden Master and actor of the album of the work, that is a song and a musical work, of T.I..",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v0 <http://dbpedia.org/ontology/album> ?v5 . ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v3 . },"```sparql
# Step 1: Identify ""The Golden Master"" series
SELECT ?series WHERE {
  ?series dbo:name ""The Golden Master""@en .
}

# Step 2: Find the alter ego character and their real name
SELECT ?character ?actor WHERE {
  ?character dbo:partOf ?series ;
             dbo:alterEgo ?realName .
  ?realName foaf:name ?actor .
}

# Step 3: Identify T.I.'s album with a song titled ""Work""
SELECT ?album WHERE {
  ?song dbo:title ""Work""@en ;
        dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> ;
        dbo:partOfAlbum ?album .
}

# Step 4: Find the actor of the album's work
SELECT ?contributor WHERE {
  ?album dbo:contributor ?contributor .
}
```",6,8,7,3,2,3,3,71,0,0,4,0,0.0,0
668,13,train,Give me the professional in the profession of Rod Argent.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
SELECT ?person ?personLabel WHERE {
  # Find Rod Argent's URI and his main occupation
  wd:Q12345 dbo:occupation ?occupation .
  
  # Use the occupation to find other people with the same role
  ?person dbo:occupation ?occupation .
  
  # Ensure we exclude Rod Argent from the results
  FILTER (?person != wd:Q12345)
  
  # Get labels for better readability
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```

Note: `wd:Q12345` should be replaced with the actual DBpedia URI of Rod Argent.",2,2,3,2,1,3,3,71,0,0,45620,0,0.0,0
756,3,train,"Give me the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?season WHERE {
    ?team dbo:sportTeamLeagueSeason ?season .
    ?team rdfs:label ""VfL Bochum""@en .
    FILTER regex(str(?season), ""2007-08"", ""i"")
}
```",1,4,2,1,1,3,3,71,0,0,1,0,0.0,0
39,27,train,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician).",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Bob Thompson"" ;
          dbo:birthName ?birthName .
  
  OPTIONAL { ?person dbo:memberOfBand ?band . }
}
```",3,4,4,3,1,3,3,71,0,0,5,0,0.0,0
37,4,train,Give me the birthplace of Scott LaFaro and birthplace of Bob Crewe.,SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Crewe> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Scott_LaFaro> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name ?birthPlace WHERE {
  VALUES (?name) { (""Scott LaFaro"" ""Bob Crewe"") }
  
  ?person foaf:name ?name .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
```",2,2,3,1,2,2,2,9,0,0,1,0,0.0,0
103,19,train,"Give me the professional in Actor and actor of the movie, that is a television show, with Richard E. Grant.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?v0 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  ?actor dbo:birthName ""Richard Ellis Grant""@en .
  ?actor a dbo:Actor .
  ?actor dbo:film ?work .
  ?work dbo:genre dbr:Television_show .
  ?work rdfs:label ?show .
  FILTER (lang(?show) = 'en')
}
```",3,4,4,2,2,3,3,71,0,0,24,0,0.0,0
769,13,train,"Give me the player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on the birthday of Tony Hollings.",SELECT ?result WHERE { <http://dbpedia.org/resource/Tony_Hollings> <http://dbpedia.org/ontology/birthDate> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . ?v1 <http://dbpedia.org/ontology/team> ?result . },"```sparql
# Step 1: Find Tony Hollings' Birthday
SELECT ?birthday WHERE {
    dbpedia:Tony_Hollings dbo:birthday ?birthday .
}

# Step 2: Identify Individuals with Matching Roles on the Same Birthday
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person WHERE {
    # Replace 'YYYY-MM-DD' with Tony Hollings' actual birthday obtained from Step 1
    ?person dbo:birthday ""YYYY-MM-DD""^^xsd:date .
    
    ?person a dbo:Athlete ;
            a dbo:SoccerPlayer ;
            a dbo:SportsManager ;
            a dbo:SoccerManager .
}
```",3,7,4,3,1,3,2,20,0,0,6,0,0.0,0
392,1,train,Give me the reference to .,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> """"@en . }","```
# No valid query can be generated due to incomplete input.
```",1,1,2,1,1,2,2,9,0,0,98447,0,0.0,0
816,24,train,Give me the parent of the professional in Photographer and parent of Doon Arbus.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/occupation> ""Photographer""@en . ?result <http://dbpedia.org/ontology/child> ?v2 . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
# Query to find the parent class of Photographer
SELECT ?parentClass WHERE {
  wd:Q10553 rdfs:subClassOf* ?parentClass .
}
```

```sparql
# Query to find information about Doon Arbus and her parent class
SELECT ?parentClass WHERE {
  wd:Q1066345 rdfs:subClassOf* ?parentClass .
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
293,14,train,Give me the person born as the birth name of Ann Sothern.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
SELECT ?person ?birthName WHERE {
  ?person rdfs:label ""Ann Sothern""@en .
  ?person dbo:birthName ?birthName .
  FILTER(LANG(?birthName) = 'en')
}
```",2,2,3,2,1,3,3,71,1,1,0,0.5,1.0,0.6666666666666666
871,41,train,"Give me the parent of the awardee of Commander of the Royal Victorian Order and father of Arthur Stanley (politician) and parent of the child of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v4 . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?v4 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/child> ?v0 . }","```sparql
SELECT ?person WHERE {
  # Find individuals who are awardees of Commander of the Royal Victorian Order
  ?awardee dbo:award dbpedia:Commander_of_the_Royal_Victorian_Order .
  
  # Find Arthur Stanley (politician) and his father
  ?arthur foaf:name ""Arthur Stanley""@en ;
           dbo:parent ?father .
  
  # Find Frederick Stanley, 16th Earl of Derby's child and their parent
  ?frederick foaf:name ""Frederick Stanley, 16th Earl of Derby""@en ;
             dbo:child ?child .
  ?child dbo:parent ?commonParent .

  # Match the father of Arthur Stanley with the parent of Frederick Stanley's child
  FILTER (?father = ?commonParent)

  # Ensure the person is also an awardee
  FILTER (?awardee = ?commonParent)
  
  BIND(?commonParent AS ?person)
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
198,45,train,"Give me the war of Amasa Tracy and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and force of Quincy Adams Gillmore.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/place> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?birthPlace ?war ?force 
WHERE {
  # Step 1: Find the person who died on 1850-08-05
  ?person dbo:dateOfDeath ?deathDate .
  FILTER (str(?deathDate) = ""1850-08-05"") .

  # Step 2: Get their place of birth, ensuring it is an American settlement
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:Settlement ;
              dbo:country dbr:United_States_of_America .

  # Step 3: Identify wars involving Amasa Tracy
  dbr:Amasa_Tracy dbo:militaryConflict ?war .

  # Step 4: Check for any connection between the birthplace and these wars
  OPTIONAL { ?birthPlace dbo:location ?warLocation .
             FILTER (?warLocation = ?war) }

  # Step 5: Confirm Quincy Adams Gillmore's military force
  dbr:Quincy_Adams_Gillmore dbo:militaryForce ?force .

  # Ensure the birthplace is linked with both the war and the force
  OPTIONAL { ?force dbo:partOfMilitaryConflict ?war }
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
782,16,train,"Give me the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
SELECT ?person ?band WHERE {
  ?person dbo:birthDate ""1945-03-30""^^xsd:date .
  ?person dbo:genre dbr:Musical_artist .
  ?person dbo:memberOfBand ?band .
}
```",2,3,3,2,1,3,3,71,0,0,61,0,0.0,0
347,27,train,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/property/father> ?v2 . },"```sparql
SELECT ?secondChild WHERE {
  # Step 1: Identify Maria Anna of Bavaria
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria""@en ;
             dbo:birthDate ?birthDate .
  
  FILTER(YEAR(?birthDate) = 1574)

  # Step 2: Find one of her children
  ?child dbo:parent ?mariaAnna .

  # Step 3: Determine the father (her husband)
  ?husband dbo:spouse ?mariaAnna ;
           dbo:child ?child .

  # Step 4: Identify another child of this father
  ?secondChild dbo:parent ?husband .
  
  # Step 5: Ensure this second child is associated with royalty
  ?secondChild dbo:royaltyTitle ?title .
}
```",3,4,4,3,1,3,3,71,0,0,3,0,0.0,0
871,59,train,"Give me the parent of the awardee of the award of Rodney Lees and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/child> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?parentOfAwardee ?politicianParent WHERE {
  # Step 1: Find the award Rodney Lees received
  ?rodneyLees dbo:awardReceived ?award .
  
  FILTER(?rodneyLees = dbr:Rodney_Lees)

  # Step 2: Find another awardee of the same award and their parent
  ?otherAwardee dbo:awardReceived ?award .
  ?otherAwardee dbo:parent ?parentOfAwardee .

  # Step 3: Identify Edward Stanley's parent
  dbr:Edward_Stanley,_17th_Earl_of_Derby dbo:parent ?edwardParent .

  # Step 4: Find a child of this parent who is a politician and an office holder
  ?childOfEdwinParent dbo:parent ?edwardParent .
  ?childOfEdwinParent rdf:type dbo:Politician .
  ?childOfEdwinParent dbo:officeHolder ?office .

  # Step 5: Determine the parent of this child
  ?childOfEdwinParent dbo:parent ?politicianParent .
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
943,39,train,"Give me the reference to  and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?grandfather WHERE {
  # Baeda Maryam I's child is Eskender (Amda Seyon II)
  dbr:Baeda_Maryam_I dbo:child dbr:Eskender_(emperor) .
  
  # Baeda Maryam I's father
  dbr:Baeda_Maryam_I dbo:father ?father .

  # Baeda Maryam I's grandfather (Yeshaq)
  ?father dbo:father ?grandfather .

  # Ensure both are royalty and office holders
  FILTER EXISTS { ?father a dbo:Monarch . }
  FILTER EXISTS { ?grandfather a dbo:Monarch . }
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
737,37,train,Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and child of Archduchess Margarete Sophie of Austria.,SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commonDescendant WHERE {
  # Alexander of Württemberg and his great-great-grandchildren
  dbr:Alexander_of_W%C3%BCrttemberg (dbo:child|dbo:spouse)* ?grandChild1 .
  ?grandChild1 (dbo:child|dbo:spouse)* ?greatGrandChild .
  ?greatGrandChild (dbo:child|dbo:spouse)* ?greatGreatGrandChild .

  # Archduchess Margarete Sophie and her children
  dbr:Archduchess_Margarete_Sophie_of_Austria dbo:child ?childOfMargareteSophie .

  # Find a common descendant
  ?commonDescendant rdf:type dbo:Person .
  FILTER (?greatGreatGrandChild = ?commonDescendant)
  OPTIONAL { ?childOfMargareteSophie (dbo:child|dbo:spouse)* ?commonDescendant }
}
```",4,4,5,3,2,3,3,71,0,0,2,0,0.0,0
159,17,train,"Give me the war, that is a television show and a societal event, of the military force of Battle of Vienna.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?tvShow WHERE {
  ?war dbo:partOfEvent dbr:Great_Turkish_War .
  ?tvShow dbo:depicts ?war .
  FILTER EXISTS { ?tvShow a dbo:TelevisionSeries }
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
668,38,train,Give me the professional in the profession of Rod Argent and person born as the birth name of Joey B.,SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find individuals with the same profession as Rod Argent
  VALUES ?profession { dbr/Musician }
  
  ?person dbo:occupation ?occupation .
  FILTER (?occupation = ?profession)
  
  UNION
  
  # Find individuals with the same birth name as Joey B
  ?person foaf:name ""Joseph Agyepong""@en .
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
668,58,train,"Give me the associated musical artist of $pacely and professional in the profession of Rod Argent and person born as the birth name of the native, that is an artist, of Central Region, Ghana.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v1 <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Gerry Marsden from The Pacemakers
  OPTIONAL { 
    dbr:The_Pacemakers dbo:leadMember dbr:Gerry_Marsden .
    dbr:Gerry_Marsden dbo:associatedBand ?artist .
  }
  
  # Rod Argent from The Zombies
  OPTIONAL {
    dbr:The_Zombies dbo:member dbr:Rod_Argent .
    dbr:Rod_Argent dbo:associatedBand ?artist .
  }

  # Teddy Osei from Osibisa
  OPTIONAL {
    dbr:Osibisa dbo:leadMember dbr:Teddy_Osei .
    dbr:Teddy_Osei dbo:associatedBand ?artist .
  }
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
392,3,train,Give me the designer of Aston Martin AMR1.,SELECT ?result WHERE { <http://dbpedia.org/resource/Aston_Martin_AMR1> <http://dbpedia.org/property/designer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?designer WHERE {
  dbr:Aston_Martin_AMR1 dbo:manufacturer dbr:Aston_Martin .
  OPTIONAL { 
    dbr:Aston_Martin_AMR1 dbo:creator ?designer .
  }
}
```",1,1,2,1,1,2,2,9,0,0,3,0,0.0,0
140,13,train,"Give me the commander in the war, that is a societal event, of the military force of Pickett's Charge.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Pickett's_Charge> . ?v1 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?event dbo:eventType dbr:Battle_of_Gettysburg .
  ?event dbo:participatedIn dbr:American_Civil_War .
  ?charge dbo:partOf ?event .
  ?charge dbo:commandedBy ?divisionLeader .
  ?divisionLeader foaf:name ""George Pickett"" .
  ?army dbo:commander ?commander .
  ?army dbo:participatedIn ?event .
  FILTER(CONTAINS(LCASE(?commander), ""robert e. lee""))
}
```",3,4,4,3,1,3,2,20,0,0,42,0,0.0,0
270,5,train,"Give me the predecessor of the person born, that is a politician, as Ada Jane Low.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/birthName> ""Ada Jane Low""@en . }","```sparql
SELECT ?predecessor WHERE {
  wd:Q123456 wdt:P39 wd:Q789012 . # Ada Deer (Q123456) has the occupation of Assistant Secretary of Indian Affairs (P39, Q789012)
  wd:Q789012 wdt:P1368 ?startDate . # The start date of her term
  ?predecessor wdt:P39 wd:Q789012 .
  ?predecessor wdt:P580 ?endDate .
  FILTER (?endDate < ?startDate) .
  MINUS { ?otherPredecessor wdt:P580 ?otherEndDate .
          FILTER (?otherEndDate > ?endDate && ?otherEndDate < ?startDate) }
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Ada Deer and `wd:Q789012` with the identifier for the position of Assistant Secretary of Indian Affairs.",2,3,3,2,1,2,2,9,0,0,1,0,0.0,0
816,4,train,"Give me the movie, that is a work, with Herschel Bernardi.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie WHERE {
  dbr:Herschel_Bernardi dbo:starring ?actor .
  ?actor dbo:starring ?movie .
  FILTER (isLiteral(?movie) = false)
}
```",1,2,2,1,1,3,3,71,0,0,13,0,0.0,0
198,50,train,"Give me the force of the awardee of the award of Quincy Adams Gillmore and entity in the birthplace, that is a settlement and American, of Henry Clay Lewis.",SELECT ?result WHERE { <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/commander> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/place> ?v3 . ?v4 <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . },"```sparql
# Step 1: Find Quincy Adams Gillmore's award
SELECT ?award WHERE {
    wd:Q1234567 dbo:awardedBy ?award .
}

# Step 2: Identify other recipients of the same award (Medal of Honor)
SELECT DISTINCT ?recipient WHERE {
    ?recipient dbo:receivedAward ?award .
    FILTER(?award = wd:Q1234568) # Assuming Q1234568 is the Medal of Honor
}

# Step 3: Find Henry Clay Lewis' birthplace and ensure it's a settlement in America
SELECT ?birthPlace WHERE {
    wd:Q2345678 dbo:birthPlace ?birthPlace .
    ?birthPlace rdf:type wd:Q515 . # Q515 represents ""settlement""
    ?birthPlace dbo:country wd:Q30 . # Q30 is the United States of America
}

# Step 4: Find forces associated with both the awardee and Henry Clay Lewis' birthplace
SELECT DISTINCT ?force WHERE {
    {
        ?recipient dbo:militaryForce ?force .
    }
    UNION
    {
        ?birthPlace dbo:associatedMilitaryForce ?force .
    }
}
```",5,7,6,3,2,3,3,71,0,0,2,0,0.0,0
609,14,train,Give me the birth place of the author of El Deafo.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?author a dbo:Writer ;
          foaf:name ""Cece Bell""@en .
  OPTIONAL { ?author dbo:birthPlace ?birthPlace . }
}
```",2,2,3,2,1,3,3,71,1,0,0,1.0,1.0,1.0
943,23,train,"Give me the child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?child WHERE {
  # Step 1: Identify the Siege of Mukha event
  ?siege dbo:wikiPageRedirects db:Siege_of_Mukha .
  
  # Step 2: Find the commander involved in the siege
  ?siege dbo:commander ?commander .

  # Step 3: Check if the commander is a royalty
  ?commander rdf:type dbo:Monarch .

  # Step 4: Identify the parent of this royal commander
  ?commander dbo:parent ?parent .

  # Step 5: Check if the parent is also a royalty
  ?parent rdf:type dbo:Monarch .

  # Step 6: Find the child of this parent who is a royalty
  ?parent dbo:child ?child .
  ?child rdf:type dbo:Monarch .
}
```",3,5,4,3,1,3,3,71,0,0,4,0,0.0,0
375,15,train,Give me the entity in the birth place of Yamaza Enjirō and war of Hashiba Hidekatsu.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v1 . },"```sparql
# Query to get the birthplace of Yamaza Enjirō
SELECT ?birthPlace WHERE {
  dbpedia:Yamaza_Enjirō dbo:birthPlace ?birthPlace .
}

# Assuming we have identified the birthplace, query for entities in that place
SELECT DISTINCT ?entity WHERE {
  ?entity dbo:location ?birthPlace .
  FILTER(?birthPlace = <URI_OF_BIRTHPLACE>)
}

# Query to get the war associated with Hashiba Hidekatsu
SELECT ?war WHERE {
  dbpedia:Hashiba_Hidekatsu dbo:associatedWith ?war .
  FILTER(STRSTARTS(STR(?war), ""http://dbpedia.org/resource/""))
}

# Assuming we have identified the war, query for entities related to that war
SELECT DISTINCT ?entity WHERE {
  ?entity dbo:relatedTo ?war .
  FILTER(?war = <URI_OF_WAR>)
}
```

Replace `<URI_OF_BIRTHPLACE>` and `<URI_OF_WAR>` with the actual URIs obtained from the first two queries.",3,3,4,2,2,2,3,28,0,0,3,0,0.0,0
905,42,train,"Give me the child of the child, that is a royalty, of Béla IV of Hungary and spouse of the father of Philip I, Prince of Taranto and parent of Charles Martel of Anjou.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v0 . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT DISTINCT ?child WHERE {
  # Step 1: Béla IV of Hungary's child who is royalty
  ?belavChild dbo:spouse ?parentOfPhilipI .
  ?belavChild rdf:type dbo:RoyalFamilyMember .
  ?belavChild dbo:father dbr:Béla_IV_of_Hungary .

  # Step 2: Philip I, Prince of Taranto's father and his spouse
  ?parentOfPhilipI dbo:child dbr:Philip_I,_Prince_of_Taranto .
  
  # Step 3: Parent of Charles Martel of Anjou
  ?spouseChild dbo:child dbr:Charles_Martel_of_Anjou .
  ?spouseChild rdf:type dbo:RoyalFamilyMember .

  FILTER (?belavChild = ?spouseChild)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
89,52,train,"Give me the child of the parent of the child of Minye Kyawswa and predecessor of Myat Hpone Pyo and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v5 . ?result <http://dbpedia.org/ontology/spouse> ?v5 . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?v2 <http://dbpedia.org/ontology/child> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?finalPerson WHERE {
  # Step 1: Identify Minye Kyawswa's child
  ?minyeKyawswaChild dbo:childOf dbr:Minye_Kyawswa .

  # Step 2: Find the parent of that child
  ?parentOfChild dbo:parentOf ?minyeKyawswaChild .

  # Step 3: Identify Myat Hpone Pyo's predecessor
  ?myatHponePyoPredecessor dbo:predecessor dbr:Myat_Hpone_Pyo .

  # Step 4: Determine the spouse of the father of Myat Hpone Pyo
  ?fatherOfMyatHponePyo dbo:child dbr:Myat_Hpone_Pyo .
  ?spouseOfFather dbp:spouse ?fatherOfMyatHponePyo .

  # Step 5: Find the child of this spouse who is royalty
  ?royalChild dbo:childOf ?spouseOfFather ;
              a dbo:Monarch .

  # Step 6: Identify the child of the parent from step 2
  ?finalPerson dbo:childOf ?parentOfChild .
  
  # Ensure the final person is the same as the royal child identified in step 5
  FILTER (?finalPerson = ?royalChild)
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
687,44,train,"Give me the player in Juan Carlos Molina (footballer) and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and team of the person born, that is a soccer player and a soccer manager, on 1979-11-03.","SELECT ?result WHERE { <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> ?v2 . ?v2 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v4 <http://dbpedia.org/ontology/team> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?playerInMolinaTeam ?actorPlayerAthlete ?soccerManagerBorn1979
WHERE {
  # Juan Carlos Molina's team
  dbr:Juan_Carlos_Molina_(footballer) dbo:team dbr:Molino_Team ;
    dbo:member ?playerInMolinaTeam .

  # Actor in ""All or Nothing: Manchester City"" who is also a soccer player and athlete
  ?actorPlayerAthlete dbo:profession dbr:Soccer_Player ;
                     dbo:profession dbr:Athlete ;
                     dbo:appearance dbr:All_or_Nothing:_Manchester_City .

  # Soccer player and manager born on 1979-11-03
  ?soccerManagerBorn1979 dbo:birthday ""1979-11-03""^^xsd:date ;
                         dbo:occupation dbr:Soccer_Player ;
                         dbo:occupation dbr:Soccer_Manager .
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
633,13,train,"Give me the spouse of the parent, that is a royalty and a noble, of the child, that is a royalty, of Antoine, Duke of Lorraine.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Antoine,_Duke_of_Lorraine> . ?v1 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Antoine, Duke of Lorraine
  ?antoine a dbo:Duke ;
          foaf:name ""Antoine, Duke of Lorraine""@en .
  
  # Step 2: Find Antoine's children who are royalty
  ?child dbo:parent ?antoine ;
         a dbo:Monarch .

  # Step 3: Determine the parent of this royal child (should be Antoine)
  ?parent dbo:child ?child .

  # Step 4: Identify the spouse of this parent who is a royalty and noble
  ?spouse dbo:spouse ?parent ;
          a dbo:Monarch, dbo:Noble .
}
```",3,6,4,3,1,3,2,20,0,0,1,0,0.0,0
39,23,train,Give me the professional in the profession of the producer of Coke Studio Philippines.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v2 . },"```sparql
# Step 1: Get the producer of Coke Studio Philippines
SELECT ?producer WHERE {
    ?studio dcterms:title ""Coke Studio Philippines""@en .
    ?studio dbo:producer ?producer .
}

# Step 2: Determine the profession of that producer
SELECT ?profession WHERE {
    # Assuming we have identified the producer from step 1, replace <ProducerURI> with actual URI
    BIND(<ProducerURI> AS ?person) .
    ?person dbo:occupation ?profession .
}

# Step 3: Find other professionals in the same field
SELECT DISTINCT ?otherPerson WHERE {
    # Replace <ProfessionURI> with the URI of the profession obtained from step 2
    BIND(<ProfessionURI> AS ?sameProfession) .
    ?otherPerson dbo:occupation ?sameProfession .
    FILTER(?otherPerson != <ProducerURI>) # Exclude the original producer
}
```

Note: The placeholders `<ProducerURI>` and `<ProfessionURI>` need to be replaced with actual URIs obtained from executing the first two queries.",3,3,4,3,1,3,3,71,0,0,46017,0,0.0,0
905,55,train,"Give me the parent of the father, that is a royalty, of Charles I of Hungary and spouse of the father of Philip I, Prince of Taranto and child of the child, that is a royalty, of Béla IV of Hungary.","SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v5 . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/father> ?v0 . }","```sparql
SELECT DISTINCT ?parent WHERE {
  # Step 1: Identify Charles I of Hungary's father
  ?charlesI dbo:father ?fatherCharlesI .
  FILTER(STR(?charlesI) = ""Charles_I_of_Hungary"") .

  # Step 2: Find the parent of that father who is royalty
  ?parentRoyalParent rdf:type dbo:Monarch ;
                    (dbo:child|dbo:spouse) ?fatherCharlesI .

  # Step 3: Identify Philip I, Prince of Taranto's father
  ?philipI dbo:father ?fatherPhilipI .
  FILTER(STR(?philipI) = ""Philip_I,_Prince_of_Taranto"") .

  # Step 4: Find the spouse of that father
  ?spouseFatherPhilipI rdf:type dbo:Spouse ;
                       (dbo:child|dbo:spouse) ?fatherPhilipI .

  # Step 5: Determine the child of that spouse who is royalty
  ?royalChildSpouse rdf:type dbo:Monarch ;
                    dbo:parent ?spouseFatherPhilipI .

  # Step 6: Identify Béla IV of Hungary's child who is royalty
  ?belavChild rdf:type dbo:Monarch ;
              dbo:child ""Béla_IV_of_Hungary""^^xsd:string .

  # Step 7: Find the common parent
  FILTER(?parentRoyalParent = ?royalChildSpouse || ?parentRoyalParent = ?belavChild)
}
```",6,8,7,2,3,3,3,71,0,0,1,0,0.0,0
668,30,train,Give me the associated musical artist of $pacely and professional in Musician and person born as the birth name of Joey B.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Find the birth name of Joey B
  ?joeyB a dbo:MusicalArtist ;
         foaf:name ""Joey B""@en .
  ?joeyB dbo:birthName ?birthName .

  # Find the associated musical artist of $pacely
  ?pacely a dbo:MusicalArtist ;
          foaf:name ""$pacely""@en .
  ?pacely dbo:associatedBandOrMusicalArtist ?artist .

  # Ensure the person is both a musician and has the birth name of Joey B
  ?person a dbo:Person, dbo:MusicalArtist ;
          foaf:name ?birthName ;
          foaf:name ?artistName .
  
  FILTER(?birthName = ?joeyBBirthName && ?artistName = ?pacelyArtist)
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
609,40,train,Give me the birth place of Cece Bell and birth place of the awardee of the award of Vince Gilligan and birth place of Glenn Youngkin.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/awards> ?v2 . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v2 . },"```sparql
# Query for the birth place of Cece Bell
SELECT ?birthPlace WHERE {
  ?person dbo:birthName ""Cece Bell""@en .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for a notable awardee associated with Vince Gilligan (Breaking Bad Emmy Awards)
SELECT ?awardeeBirthPlace WHERE {
  ?award dbo:name ""Primetime Emmy Award for Outstanding Writing for a Drama Series""@en .
  ?award dbo:recipient ?person .
  ?person rdfs:label ?awardeeLabel FILTER(CONTAINS(LCASE(?awardeeLabel), ""breaking bad"")).
  ?person dbo:birthPlace ?awardeeBirthPlace .
}

UNION

# Query for the birth place of Glenn Youngkin
SELECT ?birthPlace WHERE {
  ?person dbo:birthName ""Glenn Youngkin""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
595,12,train,Give me the author of Back to Work (book) and commander in Third Taiwan Strait Crisis.,SELECT ?result WHERE { <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
# Query for the author of ""Back to Work""
SELECT ?author WHERE {
  ?book dcterms:title ""Back to Work""@en .
  ?book dbo:author ?author .
}

UNION

# Query for the commander in the Third Taiwan Strait Crisis
SELECT ?commander WHERE {
  ?event dbp:name ""Third Taiwan Strait Crisis""@en ;
         dbo:commander ?commander .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
557,15,train,"Give me the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v1 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v1 <http://dbpedia.org/property/alterEgo> ?result . }","```sparql
SELECT ?fictionalCharacter WHERE {
  ?author foaf:name ""Robert A. Heinlein"" .
  ?author dbo:penName ?penName .
  ?penName rdfs:label ""Kent Allard""@en .
  ?work dbo:creator ?author .
  ?work dbo:fictionalCharacter ?fictionalCharacter .
  ?fictionalCharacter rdfs:label ?characterLabel .
  FILTER(CONTAINS(LCASE(?characterLabel), ""jubal harshaw""))
}
```",2,3,3,2,1,3,3,71,0,0,3,0,0.0,0
609,20,train,"Give me the birth place of Vince Gilligan and birth place of the governor, that is a politician, of Virginia.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v2 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for Vince Gilligan's birthplace
SELECT ?birthPlace WHERE {
  dbpedia:Vince_Gilligan dbo:birthPlace ?birthPlace .
}

# Query for the current governor of Virginia's birthplace (assuming Glenn Youngkin as of 2023)
SELECT ?birthPlace WHERE {
  dbpedia:Glenn_Youngkin dbo:birthPlace ?birthPlace .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
737,61,train,"Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . ?v5 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?childOfGrandChild WHERE {
  # Alexander of Württemberg's lineage
  ?alexander a dbo:Person ;
             foaf:name ""Alexander of Württemberg""@en ;
             dbo:birthYear ?birthYear1 .
  FILTER(?birthYear1 = 1804) .

  ?child1 dbo:parent ?alexander ;
         dbo:child ?grandChild1 .
  
  ?grandChild1 dbo:parent ?child1 ;
               dbo:child ?greatGrandChild1 .

  ?greatGrandChild1 dbo:parent ?grandChild1 ;
                    dbo:child ?childOfGreatGrandChild1 .

  # Archduchess Margarete Sophie of Austria's parent
  ?margarete a dbo:Person ;
             foaf:name ""Archduchess Margarete Sophie of Austria""@en .
  
  ?parentMargarete dbo:child ?margarete .

  # Child of the child of Archduchess Margarete Sophie's parent
  ?child2 dbo:parent ?parentMargarete ;
          dbo:child ?grandChild2 .

  ?grandChild2 dbo:parent ?child2 ;
               dbo:child ?greatGrandChild2 .

  # Ensure both are royalty
  FILTER EXISTS { ?childOfGreatGrandChild1 dbo:occupation dbp:RoyalFamilyMember . }
  FILTER EXISTS { ?greatGrandChild2 dbo:occupation dbp:RoyalFamilyMember . }

  # Find commonality
  ?childOfGreatGrandChild1 foaf:name ?name .
  ?greatGrandChild2 foaf:name ?sameName .

  FILTER(?name = ?sameName)
}
```",6,7,7,3,2,3,3,71,0,0,2,0,0.0,0
531,32,train,"Give me the tenant of the residence of Alberto Ruiz-Gallardón and office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?office ?location WHERE {
  # Find Alberto Ruiz-Gallardón's political roles
  ?person a dbo:Politician ;
          foaf:name ""Alberto Ruiz-Gallardón""@en .
  
  # Get his offices or positions
  ?person dbo:positionHeld ?office .

  # Filter for time frame related to the Central African Republic Civil War (2012-2014)
  OPTIONAL { 
    ?office dbp:endDate ?endDate .
    FILTER (?endDate >= ""2012-01-01""^^xsd:date && ?endDate <= ""2014-12-31""^^xsd:date)
  }

  # Get location of the office
  ?office dbo:location ?location .

  # Filter for offices related to high-ranking positions or command roles
  FILTER EXISTS {
    ?office rdf:type ?type .
    VALUES ?type { 
      dbo:GovernmentBuilding 
      dbo:OfficialResidence 
      dbo:MilitaryCommanderOffice 
    }
  }
}
```",4,6,5,2,2,3,3,71,0,0,2,0,0.0,0
905,30,train,"Give me the parent of Charles Martel of Anjou and child of the child, that is a royalty, of Béla IV of Hungary and spouse of Charles II of Naples.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?individual WHERE {
  # Step 1: Find Charles Martel of Anjou's parent
  ?charlesMartel a dbr:Charles_Martel_of_Anjou ;
                 dbo:father ?parent .

  # Step 2: Find Béla IV of Hungary's grandchild who is royalty
  ?belaIV a dbr:Béla_IV_of_Hungary ;
          dbo:child ?belasChild .
  ?belasChild dbo:child ?royalGrandchild .
  ?royalGrandchild dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen""))

  # Step 3: Find the spouse of Charles II of Naples
  ?charlesII a dbr:Charles_II_of_Naples ;
             dbo:spouse ?spouse .

  # Combine all conditions to find the individual who satisfies all three roles
  FILTER (?parent = ?royalGrandchild && ?royalGrandchild = ?spouse)
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
742,0,train,Give me the birthplace of Ekaterina Zaharieva.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ekaterina_Zaharieva> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Ekaterina Zaharieva""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,2,20,2,0,0,1.0,1.0,1.0
375,13,train,"Give me the author of the movie, that is a work and a television show, with the person deceased, that is an artist and a musical artist, on 2020-06-18.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/deathDate> ""2020-06-18""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/property/starring> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?work dbo:film ?movie .
  ?work dbo:book ?book .
  ?work dbo:televisionSeries ?tvShow .
  
  ?work dbo:creator ?author .

  ?author a dbo:Writer ;
          dbo:deathDate ?deathDate ;
          dbo:occupation ?occupation1, ?occupation2 .

  FILTER (?deathDate < ""2020-06-18T00:00:00Z""^^xsd:dateTime)
  
  VALUES ?occupation1 { dbr:Artist dbr:Musical_artist }
  VALUES ?occupation2 { dbr:Artist dbr:Musical_artist }

}
```",3,7,4,3,1,3,2,20,0,0,1,0,0.0,0
89,11,train,Give me the child of the parent of Min Hla Htut of Pyakaung.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v0 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . },"```sparql
SELECT ?child WHERE {
  # Find Min Hla Htut of Pyakaung
  ?minHlaHtut dbo:name ""Min Hla Htut""@en .
  
  # Identify his parent (assuming father for this example)
  ?minHlaHtut dbo:father ?parent .

  # Find the child of that parent (could be another sibling or Min Hla Htut himself)
  ?parent dbo:child ?child .
}
```",2,2,3,2,1,3,3,71,0,0,5,0,0.0,0
203,54,train,"Give me the commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of the war, that is a military conflict and an event, of the reference to William Bayne and military force of Battle of Cape Finisterre (1805).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v0 <http://dbpedia.org/ontology/battle> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://dbpedia.org/ontology/commander> ?result . }","```sparql
# Query to find the commander of the 30th Regiment of Foot and their military force
SELECT ?commander ?conflict WHERE {
  ?regiment dbpedia-owl:officialName ""30th (Cambridgeshire) Regiment of Foot""@en .
  ?regiment dbo:militaryCommander ?commander .
  ?regiment dbo:participatedIn ?conflict .
  FILTER EXISTS { ?conflict a dbo:MilitaryConflict }
}

# Query to find William Bayne's military force in the Battle of Cape Finisterre (1805)
SELECT ?force WHERE {
  ?bayne foaf:name ""William Bayne""@en .
  ?bayne dbo:memberOf ?force .
  ?battle dbpedia-owl:wikiPageRedirects dbpedia:Cape_Finisterre_Battle_of_1805 .
  ?battle dbo:participatedIn ?force .
}

# Query to find the commander of the Battle of Cape Finisterre (1805)
SELECT ?commander WHERE {
  ?battle dbpedia-owl:wikiPageRedirects dbpedia:Cape_Finisterre_Battle_of_1805 .
  ?battle dbo:militaryCommander ?commander .
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
143,4,train,Give me the birth name of Cynthia Morgan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/property/birthName> ?result . },"```sparql
SELECT ?birthName WHERE {
  ?person foaf:name ""Cynthia Morgan""@en .
  ?person dbo:birthName ?birthName .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
687,28,train,"Give me the player in Sergio Agüero and team of Pablo Aimar and player in the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . }","```sparql
# Step 1: Find one of Sergio Agüero's teams
SELECT ?team WHERE {
    dbpedia:Sergio_Agüero dbo:playsFor ?team .
}

# Step 2: Find Pablo Aimar's team
SELECT ?aimarTeam WHERE {
    dbpedia:Pablo_Aimar dbo:playsFor ?aimarTeam .
}

# Step 3: Find an athlete born on 1955-02-22
SELECT ?athlete WHERE {
    ?athlete a dbo:Athlete ;
             dbo:birthDate ""1955-02-22""^^xsd:date .
}

# Step 4: Find a player in the same team as the identified athlete
SELECT DISTINCT ?player WHERE {
    # Assuming we have found an athlete and their team from previous queries
    ?athlete dbpedia:birthDate ""1955-02-22""^^xsd:date ;
             dbo:playsFor ?team .
    
    ?player dbo:playsFor ?team .
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
943,34,train,"Give me the father of Baeda Maryam I and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . },"```sparql
# Step 1: Find Baeda Maryam I's father
SELECT ?father WHERE {
    dbpedia:Baeda_Maryam_I dbo:parent ?person .
    ?person rdf:type dbo:Monarch .
    BIND(?person AS ?father)
}

UNION

# Step 2: Identify the commander in Siege of Mukha and their royal parent
SELECT ?commanderParent WHERE {
    ?event dbo:eventParticipant ?participant .
    ?event rdfs:label ""Siege of Mukha""@en .
    ?participant dbo:role ?role .
    FILTER(CONTAINS(LCASE(?role), ""commander"")).
    
    ?participant dbo:parent ?person .
    ?person rdf:type dbo:Monarch .
    BIND(?person AS ?commanderParent)
}

UNION

# Step 3: Find the child of this royal parent
SELECT ?child WHERE {
    ?commanderParent dbo:child ?child .
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
398,10,train,Who is the writer of the work of Aleksandr Filimonov?,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Aleksandr_Filimonov> . ?v0 <http://dbpedia.org/property/writer> ?result . },"```sparql
SELECT DISTINCT ?work ?writer WHERE {
  ?work dbo:creator dbr:Aleksandr_Filimonov .
  OPTIONAL { ?work dbo:author ?writer . }
}
```",2,2,3,2,1,3,2,20,0,0,2,0,0.0,0
731,8,train,Give me the war of the commander in Sinking of Prince of Wales and Repulse.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Sinking_of_Prince_of_Wales_and_Repulse> <http://dbpedia.org/ontology/commander> ?v0 . },"```sparql
SELECT ?war WHERE {
  ?event dbo:wikiPageRedirects db:Sinking_of_Prince_of_Wales_and_Repulse.
  ?event dbo:partOfWar ?war.
}
```",2,2,3,2,1,3,2,20,0,0,12,0,0.0,0
159,35,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?war ?role
WHERE {
  # Find Jean Baptist, Comte d'Arco's role in a war that is also a TV show and societal event
  ?jeanBaptist dbo:occupation ""Commander""@en .
  ?jeanBaptist dbo:wikiPageRedirects ?war .
  
  # Ensure the war is depicted as a television show and recognized as a societal event
  ?war dbo:wikiPageDisambiguates dbr:List_of_wars_by_name .
  ?war dbo:wikiPageWikiLink ?tvShow .
  ?tvShow rdf:type dbo:TelevisionSeries .

  # Find his successor in the Russo-Polish War (1654–1667)
  ?successor dbo:occupation ""Politician""@en ;
             dbo:officeHolder ""Office Holder""@en ;
             dbo:commanderOf dbr:Russo-Polish_War_(1654%E2%80%931667) .
  
  # Ensure the successor succeeded Jean Baptist, Comte d'Arco
  ?jeanBaptist dbo:succeededBy ?successor .
}
```",4,8,5,2,2,3,3,71,0,0,1,0,0.0,0
263,13,train,"Give me the parent of Mary Elphinstone, Lady Elphinstone and native of the birthplace, that is a region and a country, of William Gayner.","SELECT ?result WHERE { <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. }","```sparql
# Query to get Mary Elphinstone, Lady Elphinstone's parent
SELECT ?parent WHERE {
  wd:Q1234567 wdt:P22 ?parent .
}

# Query to get William Gayner's birthplace
SELECT ?birthPlace WHERE {
  wd:Q6543210 wdt:P19 ?birthPlace .
}

# Assuming we have the results from above queries, find a region and country that matches both criteria
SELECT DISTINCT ?region ?country WHERE {
  # Replace with actual parent ID obtained from first query
  wd:Q1234567_Parent wdt:P19 ?parentBirthPlace .

  # Replace with actual birthplace ID obtained from second query
  wd:Q6543210_BirthPlace wdt:P17 ?country .
  
  ?region wdt:P131* ?parentBirthPlace ;
          wdt:P17 ?country .
}
```

Note: The placeholders `wd:Q1234567`, `wd:Q6543210`, `wd:Q1234567_Parent`, and `wd:Q6543210_BirthPlace` should be replaced with the actual DBpedia IDs for Mary Elphinstone, Lady Elphinstone, her parent, and William Gayner's birthplace respectively. These can be found by querying DBpedia or using known identifiers.",3,5,4,2,2,2,3,28,0,0,2,0,0.0,0
119,11,train,Give me the office of the leader of 2009 Galician regional election.,SELECT ?result WHERE { <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v0 . ?v0 <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
    ?person a dbo:Politician ;
            foaf:name ""Alberto Núñez Feijóo""@en .
    OPTIONAL { ?person dbo:positionHeld ?holding . }
    OPTIONAL { ?holding dbo:office ?office . }
    FILTER(CONTAINS(LCASE(STR(?office)), ""president of the xunta de galicia""))
}
```",2,2,3,2,1,3,3,71,0,0,12,0,0.0,0
158,5,train,"Give me the administration, that is a country, of Nicholas II of Russia.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
SELECT ?country WHERE {
  ?person dbo:givenName ""Nicholas"" .
  ?person dbo:familyName ""II"" .
  ?person dbo:country ?country .
  FILTER (CONTAINS(LCASE(?country), ""russia""))
}
```",1,2,2,1,1,2,3,28,0,0,3,0,0.0,0
531,11,train,Give me the tenant of the residence of Alberto Ruiz-Gallardón.,SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v0 . ?result <http://dbpedia.org/ontology/headquarter> ?v0 . },"```sparql
SELECT ?tenant WHERE {
  ?person foaf:name ""Alberto Ruiz-Gallardón""@en .
  ?person dbo:office ?office .
  ?office dbo:residence ?residence .
  OPTIONAL { ?residence dbo:currentTenant ?tenant . }
}
```",2,2,3,2,1,3,3,71,0,0,375,0,0.0,0
295,6,train,Give me the native of Birmingham and writer of Boom Shack-A-Lak.,SELECT ?result WHERE { <http://dbpedia.org/resource/Boom_Shack-A-Lak> <http://dbpedia.org/property/writer> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Birmingham> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?birthPlace WHERE {
  ?person a dbo:MusicArtist ;
          foaf:name ""Carl McIntosh"" .
  OPTIONAL { ?person dbo:nationality dbr:United_Kingdom . }
  OPTIONAL { ?person dbo:birthPlace dbr:Birmingham . }
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
668,6,train,Give me the profession of Rod Argent.,SELECT ?result WHERE { <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?profession WHERE {
  ?person foaf:name ""Rod Argent""@en .
  ?person dbo:occupation ?profession .
}
```",1,1,2,1,1,3,3,71,0,0,6,0,0.0,0
628,33,train,"Give me the band member of Uncle Murda and person born as the birth name of the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?v0 <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v3 . },"```sparql
# Step 1: Find a band member of Uncle Murda
SELECT ?bandMember WHERE {
  ?uncleMurda dbo:birthName ""Trevor Tahiem Smith Jr."" .
  ?uncleMurda foaf:name ""Uncle Murda"" .
  ?collaboration dbo:artist ?uncleMurda ;
                dbo:artist ?bandMember .
}

UNION

# Step 2: Find a native musical artist from Florida and their birth name
SELECT ?birthName WHERE {
  ?floridaArtist dbo:birthPlace dbr:Florida ;
                 dbo:occupation ""musician"" ;
                 foaf:name ?name .
  ?floridaArtist foaf:name ?birthName .
}

UNION

# Step 3: Find another person with the same birth name who is a musical artist
SELECT ?person WHERE {
  ?person foaf:name ?birthName ;
          dbo:occupation ""musician"" .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
198,47,train,Give me the force of the awardee of the award of Quincy Adams Gillmore and war of the awardee of Medal of Honor.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?v4 <http://dbpedia.org/property/awards> ?v0 . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?result <http://dbpedia.org/ontology/commander> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient ?force ?war WHERE {
  # Find awards associated with Quincy Adams Gillmore
  ?award dbo:awardee ?recipient .
  ?award dbo:associatedWith dbr:Quincy_Adams_Gillmore .

  OPTIONAL {
    # Determine the military force of the awardee
    ?recipient dbo:militaryBranch ?force .
  }

  OPTIONAL {
    # Find the war in which the Medal of Honor was awarded to the recipient
    ?medalOfHonorAward dbo:awardee ?recipient ;
                      dbo:war dbr:American_Civil_War .

    ?medalOfHonorAward dbo:associatedWith ?force .
  }
}
```",5,5,6,3,2,3,3,71,0,0,3,0,0.0,0
103,31,train,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in Actor.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v0 <http://dbpedia.org/property/starring> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?movie ?role WHERE {
  ?person a dbo:Actor ;
          foaf:name ""Richard E. Grant""@en ;
          dbo:birthName ""Richard Grant Esterhuysen""@en .
  
  ?film dbo:starring ?person ;
        dbo:title ?title ;
        dbo:genre ?genre .

  FILTER(CONTAINS(LCASE(?genre), ""television"") || CONTAINS(LCASE(?title), ""tv series""))

  OPTIONAL { ?film dbo:actor ?role . }
  
  BIND(STR(?title) AS ?movie)
}
```",4,5,5,3,2,3,3,71,0,0,24,0,0.0,0
288,0,train,Give me the native of Lahore.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Lahore> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person ?name WHERE {
  {
    ?person dbo:birthPlace dbr:Lahore .
  } UNION {
    ?person dbo:residence dbr:Lahore .
  } UNION {
    ?person dbo:almaMater dbr:Lahore . 
  } UNION {
    ?person dbo:notableFor ?notable ;
            ?notable dbo:wikiPageWikiLink dbr:Lahore .
  }
  ?person rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
ORDER BY ?name
```",1,1,2,1,1,2,2,9,0,0,881,0,0.0,0
203,23,train,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?event dbo:type dbr:Military_conflict .
  ?event rdfs:label ""World War I""@en .
  ?event dbo:participatingMilitaryPersonal ?person .
  ?person dbo:occupation dbr:Soldier .
  ?person dbo:positionHeld ?position .
  ?position rdfs:label ?commanderLabel .
  FILTER(CONTAINS(LCASE(?commanderLabel), ""supreme commander""))
}
```",3,5,4,3,1,3,3,71,0,0,113,0,0.0,0
557,18,train,Give me the professional in  and producer of A Star Is Born (1937 film) and producer of The Adventures of Tom Sawyer (1938 film).,"SELECT ?result WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . }","```sparql
SELECT ?producer (GROUP_CONCAT(?filmLabel; separator="", "") AS ?films) WHERE {
  VALUES ?film1 { dbpedia:A_Star_Is_Born_(1937_film) }
  VALUES ?film2 { dbpedia:The_Adventures_of_Tom_Sawyer_(1938_film) }

  ?film1 dbo:producer ?producer .
  ?film2 dbo:producer ?producer .

  ?film1 rdfs:label ?filmLabel1 .
  FILTER (LANG(?filmLabel1) = 'en')
  BIND(REPLACE(STR(?film1), ""http://dbpedia.org/resource/"", """") AS ?filmLabel)

  OPTIONAL { ?producer dbo:profession ?profession . }
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }

} GROUP BY ?producer
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
609,33,train,"Give me the birth place of Vince Gilligan and birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/governor> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Step 1: Find Vince Gilligan's birth place
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
}

# Step 2: Find the governor of Vince Gilligan's birth place (assuming it's a U.S. state)
SELECT ?governor WHERE {
  ?state wdt:P31/wdt:P279* wd:Q222 . # Assuming ?birthPlace is a U.S. state
  ?state wdt:P6 ?governor .
}

# Step 3: Find Paulus Powell's birth place
SELECT ?birthPlace WHERE {
  wd:Q654321 wdt:P19 ?birthPlace .
}

# Step 4: Determine the region and administrative region of Paulus Powell's birth place
SELECT ?region ?adminRegion WHERE {
  ?birthPlace wdt:P17 ?country . # Region (Country)
  OPTIONAL { ?birthPlace wdt:P131 ?adminRegion } # Administrative region (State/Province)
}

# Step 5: Find the governor or equivalent leader of that administrative region
SELECT ?leader WHERE {
  ?adminRegion wdt:P6 ?leader .
}
```

Note: Replace `wd:Q123456` with Vince Gilligan's DBpedia QID and `wd:Q654321` with Paulus Powell's DBpedia QID. The queries assume the birth places are linked to administrative regions like U.S. states, which have governors.",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
38,3,train,"Give me the work, that is a work and a written work and American and a book, of Joe Biden.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?result <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?work dbo:author dbr:Joe_Biden .
  ?work rdf:type dbo:Work .
  ?work rdf:type dbo:WrittenWork .
  ?work rdf:type dbo:Book .
}
```",1,5,2,1,1,3,2,20,1,1,0,0.5,1.0,0.6666666666666666
687,59,train,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v3 . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v5 <http://dbpedia.org/ontology/team> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://dbpedia.org/ontology/birthDate> ?v3 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/property/starring> ?v5 . },"```sparql
# Step 1: Find Marty Pollio's birthdate
SELECT ?birthdate WHERE {
  dbpedia:Marty_Polio dbo:birthday ?birthdate .
}

# Step 2: Find athletes born on the same date as Marty Pollio
SELECT DISTINCT ?athlete WHERE {
  ?athlete a dbo:Athlete ;
           dbo:birthday ?birthdate .
  FILTER(?birthdate = <Marty_Polio_birthdate>)
}

# Step 3: Identify films directed by Manuel Huerga
SELECT DISTINCT ?film WHERE {
  ?film dbo:director dbpedia:Manuel_Huerga ;
        a dbo:Film .
}

# Step 4: Find soccer players who acted in those films
SELECT DISTINCT ?actor WHERE {
  ?film dbo:starring ?actor .
  ?actor a dbo:SoccerPlayer ;
         dbo:occupation dbo:Athlete .
}
```

Note: Replace `<Marty_Polio_birthdate>` with the actual birthdate obtained from Step 1.",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
782,30,train,"Give me the reference to The Fabulous Thunderbirds and associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and band of Kim Wilson.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?thunderbirds ?curranArtist ?wilsonBand WHERE {
  # Find the DBpedia resource for The Fabulous Thunderbirds
  dbr:The_Fabulous_Thunderbirds a dbo:MusicalGroup ;
    rdfs:label ""The Fabulous Thunderbirds""@en .

  # Get the reference URL for The Fabulous Thunderbirds
  ?thunderbirds rdfs:label ""The Fabulous Thunderbirds""@en .
  
  # Find Nicholas Michael Curran's associated musical artist role
  dbr:Nicholas_Michael_Curran dbo:musicalArtistOf ?curranArtist .

  # Confirm Kim Wilson is part of The Fabulous Thunderbirds
  dbr:Kim_Wilson dbo:bandMember ?wilsonBand .
  FILTER(?wilsonBand = ?thunderbirds)
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
58,16,train,Give me the producer of the movie with  and spouse of the person born as Linda Sue Cobb.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ""Linda Sue Cobb""@en . ?v3 <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v3 <http://dbpedia.org/property/starring> """"@en . }","```sparql
SELECT ?spouse ?producer WHERE {
  ?lindaSueCobb foaf:name ""Linda Sue Cobb""@en .
  ?lindaSueCobb dbo:birthName ""Linda Sue Cobb"" .
  ?lindaSueCobb dbo:spouse ?spouse .
  
  OPTIONAL {
    ?movie dbo:producer ?spouse ;
           dbo:productionCompany ?company .
    ?company foaf:name ?producer .
  }
}
```",4,4,5,2,2,3,2,20,0,0,1,0,0.0,0
531,18,train,Give me the office of Mariano Rajoy and office of Miguel Maura and tenant of Madrid.,SELECT ?result WHERE { <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?officeLabel WHERE {
  VALUES ?person { 
    dbr:Mariano_Rajoy 
    dbr:Miguel_Maura 
  }
  ?person dbo:office ?office .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}

SELECT ?mayorLabel WHERE {
  ?mayor dbo:position ""Mayor of Madrid""@en .
  FILTER EXISTS { ?mayor dbo:city dbr:Madrid . }
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
39,53,train,"Give me the professional in  and band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in the profession of the producer of Coke Studio Philippines.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v3 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v3 <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/occupation> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find Robert Lamar Thompson's band affiliation
  ?thompson a dbo:MusicalArtist ;
            foaf:name ""Robert Lamar Thompson"" .
  
  ?thompson dbo:bandMemberOf ?band .

  # Find the producer of Coke Studio Philippines and their profession
  ?producer a dbo:Producer ;
           dbo:worksFor dbr:Coke_Studio_Philippines ;
           dbo:profession ?profession .

  # Find individuals who are professionals in both contexts
  ?person dbo:professionalIn ?band .
  ?person dbo:profession ?profession .
}
```",6,7,7,3,3,3,3,71,0,0,4,0,0.0,0
246,0,train,Give me the parent of Princess Sara bint Faisal.,SELECT ?result WHERE { <http://dbpedia.org/resource/Princess_Sara_bint_Faisal> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  ?person a dbo:Person ;
          foaf:name ""Princess Sara bint Faisal""@en .
  OPTIONAL { ?person dbo:parent ?parent . }
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
668,1,train,Give me the professional in Musician.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Musician""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?musician WHERE {
  ?musician rdf:type dbo:MusicalArtist .
}
LIMIT 10
```",1,1,2,1,1,3,3,71,0,10,7563,0.0,0.0,0
943,46,train,"Give me the reference to the alter ego of The Shadow and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v0 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://dbpedia.org/ontology/parent> ?v0 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo ?childOfRoyalty ?commander
WHERE {
  # The Shadow's alter ego
  dbr:The_Shadow dbo:alias ?alterEgo .
  
  # Child of royalty connected to the alter ego
  ?childOfRoyalty dbo:parent ?royalParent ;
                 dbo:relatedTo ?alterEgo .
  ?royalParent dbo:title ""Royal"" .

  # Commander in Siege of Mukha who is royalty
  ?commander dbo:role ""Commander"" ;
             dbo:work dbr:Siege_of_Mukha ;
             dbo:title ""Royal"" .
  
  # Ensure the child and commander are connected through the alter ego
  ?childOfRoyalty dbo:relatedTo ?alterEgo .
}
```",5,7,6,3,2,3,3,71,0,0,3,0,0.0,0
943,36,train,"Give me the child of Dawit I and father of the father, that is a royalty and an office holder, of the child of Baeda Maryam I.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Dawit I's child (Lebna Dengel)
  ?dawitIChild dbo:childOf dbr:Dawit_I ;
               dbo:parent dbr:Baeda_Maryam_I .

  # Zara Yaqob as the father of Dawit I
  dbr:Dawit_I dbo:childOf ?zaraYaqob .
  
  # Check if Zara Yaqob is royalty and an office holder
  ?zaraYaqob a dbo:Monarch ;
             dbo:officeHolder ?office .

  # Baeda Maryam I's child (Lebna Dengel)
  ?baedaMaryamChild dbo:childOf dbr:Baeda_Maryam_I .
  
  FILTER (?dawitIChild = ?baedaMaryamChild) 
  BIND(?zaraYaqob AS ?person)
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
68,17,train,"Give me the father of Catherine of Austria, Queen of Portugal and child of the commander, that is a royalty, in Siege of Padua.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v2 . <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  wd:Q1116 wdt:P22 ?father .
  ?father wdt:P31 wd:Q5 . # Ensure the father is a human (royalty)
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
687,31,train,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio and player in Sergio Agüero.",SELECT ?result WHERE { <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v0 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v0 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  # Find Marty Pollio's birthdate
  VALUES (?martyBirthDate) { 
    SELECT ?birthdate WHERE { 
      dbr:Marty_Pollio dbo:birthday ?birthdate .
    } LIMIT 1
  }

  # Find Sergio Agüero's team
  VALUES (?sergioTeam) {
    SELECT ?team WHERE {
      dbr:Sergio_Agüero dbo:playsFor ?team .
    } LIMIT 1
  }
  
  # Find athletes with the same birthdate as Marty Pollio and who play for Sergio Agüero's team
  ?player a dbo:Athlete ;
          dbo:birthday ?birthdate ;
          dbo:playsFor ?team .
  FILTER (?birthdate = ?martyBirthDate && ?team = ?sergioTeam)
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
89,27,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v2 <http://dbpedia.org/property/father> ?v1 . },"```sparql
SELECT DISTINCT ?predecessor WHERE {
  # Step 1: Identify Saw Min Phyu
  ?sawMinPhyu dbo:name ""Saw Min Phyu""@en.
  
  # Step 2: Find Spouse of Saw Min Phyu
  ?sawMinPhyu dbo:spouse ?spouse.

  # Step 3: Check if Spouse is Royalty
  OPTIONAL { ?spouse dbo:title ?title. }
  FILTER(CONTAINS(LCASE(?title), ""royal"") || CONTAINS(LCASE(?title), ""king"" || CONTAINS(LCASE(?title), ""queen""))).

  # Step 4: Find Child of the Royal Spouse
  ?spouse dbo:child ?child.

  # Step 5: Identify Predecessor of the Child
  ?child dbo:predecessor ?predecessor.
}
```",3,4,4,3,1,3,3,71,0,0,1,0,0.0,0
628,35,train,"Give me the native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and band member of the associated musical artist, that is a musical artist, of Bobby Shmurda.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?awardName ?bandMemberNativePlace WHERE {
  # Find an award that is a region, American, state, and settlement
  ?award dbo:type dbr:Award .
  ?award dbo:country dbr:United_States_of_America .
  ?award dbo:stateOrProvince ?state .
  ?state rdf:type/(dbo:state|dbo:settlement) .

  # Find a connection between Coro de la Pontificia Universidad Católica de Puerto Rico and the award
  ?coro dbo:associatedAward ?award .
  dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico dbo:associatedAward ?award .

  # Find a musical artist associated with Bobby Shmurda who is connected to this award
  ?artist dbo:associatedBandMember ?bandMember .
  dbr:Bobby_Shmurda dbo:associatedBandMember ?bandMember .
  ?bandMember dbo:hasWonAward ?award .

  # Get the native place of the band member
  ?bandMember dbo:nativePlace ?nativePlace .
  ?nativePlace rdfs:label ?bandMemberNativePlace .
  
  FILTER (lang(?bandMemberNativePlace) = 'en')
}
```",4,9,5,2,2,3,3,71,0,0,1,0,0.0,0
80,4,train,Give me the movie with .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> """"@en . }","```
# No valid query can be constructed due to lack of specific details in the question.
```",1,1,2,1,1,3,3,71,0,0,39790,0,0.0,0
295,9,train,"Give me the work, that is a musical work, of the true self, that is an artist, of Steven Kapur.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/writer> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/givenName> ""Steven Kapur""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?person a dbo:Musician ;
          foaf:name ""Steven Kapur""@en .
  
  OPTIONAL { ?person dbo:birthName ?name . FILTER(CONTAINS(LCASE(?name), ""steven kapur"")) }
  
  ?work dbo:composer ?person ;
        a dbo:MusicalWork .

}
```",2,4,3,2,1,3,2,20,0,0,1,0,0.0,0
756,55,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and native of the administration, that is a country, of Theodor Heuss.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v5 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v3 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?letschManager ?vflBochumManager WHERE {
  # Thomas Letsch's managerial role
  ?letsch a dbo:SoccerCoach ;
          foaf:name ""Thomas Letsch"" .
  
  OPTIONAL { 
    ?letsch dbo:managerOf ?team .
    ?team dbo:sport dbr:Football ; 
          dbo:season ?season .
    FILTER(?season = dbr:2007–08_VfL_Bochum_season)
  }
  
  # Manager of VfL Bochum in the 2007-08 season
  ?vflBochumManager a dbo:SoccerCoach ;
                    dbo:managerOf ?vflBochum .
  ?vflBochum dbo:sport dbr:Football ;
             dbo:season dbr:2007–08_VfL_Bochum_season .

  # Theodor Heuss's native country
  ?heuss a dbo:Person ;
         foaf:name ""Theodor Heuss"" .
  ?heuss dbo:nationality dbr:Germany .
  
  OPTIONAL {
    ?letschManager a dbo:SoccerCoach ;
                   dbo:managerOf ?team .
    ?team dbo:sport dbr:Football ; 
          dbo:season ?season .
    FILTER(?season = dbr:2007–08_VfL_Bochum_season)
  }
}
```",6,13,7,2,3,3,3,71,0,0,1,0,0.0,0
742,6,train,Give me the birthplace of Ekaterina Zaharieva and birthplace of Reneta Kamberova.,SELECT ?result WHERE { <http://dbpedia.org/resource/Reneta_Kamberova> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Ekaterina_Zaharieva> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?name ?birthplace WHERE {
  VALUES ?person { 
    dbr:Ekaterina_Zaharieva 
    dbr:Reneta_Kamberova 
  }
  
  OPTIONAL { ?person dbo:name ?name . FILTER(lang(?name) = 'en') } # To get the name in English if available
  OPTIONAL { ?person dbo:birthPlace ?birthplace . }
}
```",2,2,3,1,2,3,2,20,1,4,0,0.2,1.0,0.33333333333333337
412,22,train,"Give me the war of the leader of National Party of Greece and entity in the death place, that is a settlement, of Antonios Varthalitis.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v3 . ?v2 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/ontology/place> ?v3 . },"```sparql
# Step 1: Find Antonios Varthalitis's death place
SELECT ?deathPlace WHERE {
    dbpedia:Antonios_Varthalitis dbo:placeOfBirth ?birthPlace .
    dbpedia:Antonios_Varthalitis dbo:deathPlace ?deathPlace .
}

# Step 2: Ensure the death place is a settlement
SELECT DISTINCT ?settlement WHERE {
    ?deathPlace rdf:type dbo:Settlement .
    FILTER(?deathPlace = <URI_of_death_place_from_step_1>)
}

# Step 3: Find the leader of the National Party of Greece during the relevant period
SELECT DISTINCT ?leader WHERE {
    ?party dbo:leader ?leader .
    ?party rdfs:label ""National Party (Greece)""@en .
    FILTER(YEAR(?deathPlace) >= YEAR(?birthDate)) # Assuming we have birth and death dates for context
}

# Step 4: Find wars involving this leader
SELECT DISTINCT ?war WHERE {
    ?leader dbo:participatedIn ?war .
}
```

Note: The above SPARQL queries are structured to be executed sequentially. You will need to replace `<URI_of_death_place_from_step_1>` with the actual URI obtained from Step 1.",4,5,5,2,2,2,3,28,0,0,1,0,0.0,0
414,9,train,"Give me the host, that is an educational institution, of the award of Rainer Weiss.",SELECT ?result WHERE { <http://dbpedia.org/resource/Rainer_Weiss> <http://dbpedia.org/property/awards> ?v0 . ?v0 <http://dbpedia.org/ontology/presenter> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. },"```sparql
SELECT ?host WHERE {
  ?award dcterms:isPartOf <http://dbpedia.org/resource/Nobel_Prize_in_Physics> .
  ?award dbo:hostedBy ?host .
  FILTER (strstarts(str(?host), ""http://dbpedia.org/resource/""))
}
```",2,3,3,2,1,3,2,20,0,0,2,0,0.0,0
633,6,train,"Give me the parent of Francis I, Duke of Lorraine and spouse of Renée of Bourbon.","SELECT ?result WHERE { <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Renée_of_Bourbon> <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent ?spouse WHERE {
  VALUES ?francisI { dbr:François_I,_Duke_of_Lorraine }
  
  # Find the parent (father) of Francis I, Duke of Lorraine
  ?francisI dbo:father ?parent .
  
  # Find the spouse of Renée of Bourbon
  ?renéeOfBourbon dbo:spouse ?spouse .
  FILTER(?spouse = ?francisI)
  
  VALUES ?renéeOfBourbon { dbr:Renée_of_Bourbon }
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
943,28,train,"Give me the child of the parent, that is a royalty, of Yeshaq I and reference to  and father of Baeda Maryam I.","SELECT ?result WHERE { <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v1 . }","```sparql
SELECT ?child WHERE {
  ?yeshaq dbo:spouse ?parent . # Assuming Yeshaq I is linked to his spouse
  ?yeshaq dbo:child ?child .
  ?child rdf:type dbo:Monarch . # Filter for royalty
  ?child dbo:child ?baedaMaryamI .
  ?baedaMaryamI rdfs:label ""Baeda Maryam I""@en .
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
203,58,train,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and commander in French campaign in Egypt and Syria.",SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/commander> ?v1 . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v5 . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce ?event ?societalEvent WHERE {
  # Identify William Bayne's military force during the French campaign in Egypt and Syria
  ?bayne a dbo:MilitaryPerson ;
         foaf:name ""William Bayne"" ;
         dbo:militaryBranch ?navy .
  
  ?navy rdfs:label ""Royal Navy""@en .

  # Identify the war (French campaign in Egypt and Syria)
  ?campaign dbo:partOf ?war ;
            rdfs:label ""French campaign in Egypt and Syria""@en .

  ?war a dbo:MilitaryConflict ;
       rdfs:label ?eventLabel .
  
  BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", REPLACE(LCASE(?eventLabel), "" "", ""_""))) AS ?event)

  # Check if William Bayne was awarded Knight Commander of the Order of the Bath
  OPTIONAL {
    ?bayne dbo:honoraryTitle dbr:Knight_Commander_of_the_Order_of_the_Bath .
  }

  # Identify societal implications of the campaign
  ?campaign dbo:societalEvent ?societalEvent .

}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
80,21,train,Give me the actor of the movie with  and professional in .,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://dbpedia.org/property/starring> """"@en . }","```sparql
SELECT ?actor WHERE {
  ?movie dbo:name ""Movie Name""@en .
  ?movie dbo:starring ?actor .
}
```

Replace `""Movie Name""` with the actual movie title when available.",3,3,4,2,2,3,3,71,0,0,7802,0,0.0,0
687,60,train,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . ?v2 <http://dbpedia.org/ontology/birthDate> ?v3 . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v0 . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://dbpedia.org/ontology/coach> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?martyTeam ?marceloTeam WHERE {
  # Find Marty Pollio's birthdate and team if he is an athlete
  ?marty a dbo:Person ;
         dbp:birthday ""1963-09-22""^^xsd:date ;
         dbo:sport dbr:Athletics (sports) .
  OPTIONAL { ?marty dbo:team ?martyTeam . }

  # Find Marcelo Sarmiento's birthdate and team if he is a soccer player and manager
  ?marcelo a dbo:Person ;
           dbp:birthday ""1963-09-22""^^xsd:date ;
           dbo:sport dbr:Soccer .
  OPTIONAL { ?marcelo dbo:team ?marceloTeam . }
  
  # Ensure Marcelo Sarmiento is also a manager
  ?marcelo dbo:occupation dbr:Soccer_manager .

}
```",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
119,24,train,"Give me the tenant of Santiago de Compostela and tenant of the residence, that is a country, of Álvaro Quirós.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
SELECT ?mayor ?country WHERE {
  # Query to find the current mayor of Santiago de Compostela
  dbpedia:Santiago_de_Compostela dbo:mayor ?mayor .
  
  # Query to find Álvaro Quirós and his country of residence
  ?person foaf:name ""Álvaro Quirós""@en .
  ?person dbo:nationality ?country .
}
```",3,4,4,2,2,3,3,71,0,0,4,0,0.0,0
143,10,train,Give me the person born as the birth name of Cynthia Morgan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/property/birthName> ?v0 . },"```sparql
# Step 1: Retrieve Cynthia Morgan's birth name
SELECT ?birthName WHERE {
  wd:Q1234568 foaf:name ""Cynthia Morgan""@en .
  wd:Q1234568 dbo:birthName ?birthName .
}

# Step 2: Find any person with the same birth name
SELECT DISTINCT ?person ?personLabel WHERE {
  ?person a dbo:Person ;
          dbo:birthName ?birthName .
  FILTER(?birthName = ""Cynthia Morgan""@en) # Replace this with the actual birth name obtained from step 1
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```

Note: In the second query, replace `""Cynthia Morgan""` in `FILTER(?birthName = ""Cynthia Morgan""@en)` with the actual birth name retrieved from the first query.",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
203,49,train,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?v0 . },"```sparql
SELECT ?militaryForce WHERE {
  ?event rdf:type dbo:MilitaryConflict .
  ?event dbo:participatingUnit dbr:30th_(Cambridgeshire)_Regiment_of_Foot .
  
  ?person dbo:award dbr:Knight_Commander_of_the_Order_of_the_Bath ;
          dbo:militaryCommanderOf ?militaryForce ;
          dbo:commanderInMilitaryConflict ?event .

  FILTER EXISTS { ?person rdfs:label ""Arthur Wellesley""@en }
  
  ?militaryForce rdf:type dbo:MilitaryForce .
}
```",5,9,6,3,2,3,3,71,0,0,2,0,0.0,0
23,20,train,Give me the party of Roy Barreras and entity in the country of Daniel Elahi Galán and party of Gustavo Petro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . ?result <http://dbpedia.org/ontology/country> ?v1 . <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?royParty ?danielCountry ?gustavoParty WHERE {
  # Roy Barreras's political party
  OPTIONAL { 
    dbr:Roy_Barreras dbo:party ?royParty .
  }
  
  # Daniel Elahi Galán's country (nationality)
  OPTIONAL {
    dbr:Daniela_Elái_Galán dbo:nationality ?danielCountry .
  }

  # Gustavo Petro's political party
  OPTIONAL {
    dbr:Gustavo_Petro dbo:party ?gustavoParty .
  }
}
```",4,4,5,2,3,2,3,28,1,9,0,0.1,1.0,0.18181818181818182
198,56,train,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and war of the awardee of Medal of Honor and force of Quincy Adams Gillmore.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v0 <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v0 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/place> ?v1 . }","```sparql
SELECT DISTINCT ?entity ?birthPlace ?force WHERE {
  # Step 1: Find the person who died on 1850-08-05
  ?person dbo:dateOfDeath ?deathDate .
  FILTER (str(?deathDate) = ""1850-08-05"") .

  # Step 2: Get Quincy Adams Gillmore's force and Medal of Honor awardees
  ?gillmore foaf:name ""Quincy Adams Gillmore"" .
  ?gillmore dbo:militaryBranch ?force .
  
  ?medalOfHonorAward dbo:recipient ?awardee .
  ?medalOfHonorAward dbo:relatedMilitaryAction ?action .
  ?action dbo:commander ?gillmore .

  # Step 3: Find the birthplace of the person who died on 1850-08-05
  ?person dbo:birthPlace ?birthPlace .
  
  # Ensure the birthplace is a settlement in America
  ?birthPlace rdf:type dbo:Settlement ;
              dbo:country dbc:United_States_of_America .

  # Step 4: Ensure the person is American
  ?person dbo:nationality dbc:American .

  # Return the entity, its birthplace, and the force associated with Quincy Adams Gillmore
  BIND(?person AS ?entity)
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
492,5,train,Give me the actor of Aladdin (1958 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?result . },"```sparql
SELECT ?actor WHERE {
  ?movie dbo:title ""Aladdin (1958 film)""@en .
  ?movie dbo:genre dbc:Disney_animated_feature_films .
  ?movie dbo:voiceActor ?actor .
}
```",1,1,2,1,1,2,3,28,0,0,5,0,0.0,0
414,12,train,Give me the show of Royal Swedish Academy of Sciences and award of the awardee of Nobel Prize in Physics.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Royal_Swedish_Academy_of_Sciences> . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Nobel_Prize_in_Physics> . ?v0 <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?award WHERE {
  ?academy a dbo:AwardingBody ;
           rdfs:label ""Royal Swedish Academy of Sciences""@en .
  
  ?prize a dbo:NobelPrizeInPhysics ;
         dbo:awardingAcademy ?academy .

  OPTIONAL { 
    ?prize dbo:ceremony ?event .
  }

  BIND(""Nobel Prize in Physics"" AS ?award)
}
```",3,3,4,2,2,3,2,20,0,0,2,0,0.0,0
513,1,train,Give me the residence of Doug Beattie.,SELECT ?result WHERE { <http://dbpedia.org/resource/Doug_Beattie> <http://dbpedia.org/ontology/residence> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?residence WHERE {
  ?person foaf:name ""Doug Beattie""@en .
  ?person dbo:residence ?residence .
}
```",1,1,2,1,1,3,2,20,2,0,0,1.0,1.0,1.0
143,17,train,Give me the associated musical artist of the person born as the birth name of Cynthia Morgan and actor of The Campus Queen.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Campus_Queen> <http://dbpedia.org/property/starring> ?result . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/property/birthName> ?v0 . ?v3 <http://dbpedia.org/property/birthName> ?v0 . },"```sparql
# Query to get Cynthia Morgan's birth name
SELECT ?birthName WHERE {
  wd:Q1234568 foaf:name ""Cynthia Morgan""@en .
  wd:Q1234568 schema:birthName ?birthName .
}

# Query to find the actor known as ""The Campus Queen""
SELECT ?actor WHERE {
  ?actor foaf:name ""The Campus Queen""@en .
}

# Assuming we have identified Cynthia Morgan's birth name and the actor, 
# we can now look for any associated musical artist
# Replace `?birthName` and `?actor` with actual values obtained from above queries

SELECT DISTINCT ?artist WHERE {
  # Query to find artists associated with Cynthia Morgan by her birth name
  wd:Q1234568 schema:birthName ?birthName .
  ?person foaf:name ?birthName .
  ?person dbo:associatedMusicalArtist ?artist .

  # Query to find artists associated with the actor known as ""The Campus Queen""
  ?actor foaf:name ""The Campus Queen""@en .
  ?actor dbo:associatedMusicalArtist ?artist .
}
```",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
80,8,train,Give me the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo WHERE {
  VALUES ?shadow { dbr:The_Shadow }
  ?shadow dbo:aliasName ?alterEgo .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
80,18,train,Give me the actor of Shelby Oaks and professional in  and actor of ATL (film).,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Query to get the cast of Shelby Oaks
SELECT ?actor WHERE {
  ?movie dbo:starring ?actor .
  ?movie rdfs:label ""Shelby Oaks""@en .
  FILTER (lang(?movie) = 'en')
}

UNION

# Query to get the cast of ATL
SELECT ?actor WHERE {
  ?movie dbo:starring ?actor .
  ?movie rdfs:label ""ATL (2006 film)""@en .
  FILTER (lang(?movie) = 'en')
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
816,51,train,Give me the parent of the child of the spouse of Mariclare Costello and parent of the professional in Photographer.,"SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/occupation> ""Photographer""@en . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v4 . }","```sparql
# Step 1: Get Mariclare Costello's spouse
SELECT ?spouse WHERE {
  dbpedia:Mariclare_Costello dbo:spouse ?spouse .
}

# Step 2: Get the child of Mariclare Costello's spouse
SELECT ?child WHERE {
  ?spouse dbo:child ?child .
  FILTER(?spouse IN (<SPONSPECE>)) # Replace <SPONSPECE> with actual URI from step 1
}

# Step 3: Get the parent of this child (should be Mariclare Costello or her spouse)
SELECT ?parent WHERE {
  ?child dbo:parent ?parent .
  FILTER(?child IN (<CHILD_URI>)) # Replace <CHILD_URI> with actual URI from step 2
}

# Step 4: Find a professional in Photography
SELECT ?photographer WHERE {
  ?photographer rdf:type dbo:Photographer .
}

# Step 5: Get the parent of this photographer
SELECT ?parent WHERE {
  ?photographer dbo:parent ?parent .
  FILTER(?photographer IN (<PHOTOGRAPHER_URI>)) # Replace <PHOTOGRAPHER_URI> with actual URI from step 4
}
```

Note: The placeholders `<SPONSPECE>`, `<CHILD_URI>`, and `<PHOTOGRAPHER_URI>` need to be replaced with the actual URIs obtained from executing each respective query.",5,5,6,3,2,3,3,71,0,0,2,0,0.0,0
347,47,train,"Give me the father of the child of the parent of Archduke Charles Joseph of Austria and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://dbpedia.org/property/father> ?result . ?v4 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?father WHERE {
  # Step 1: Identify Archduke Charles Joseph of Austria
  ?archduke a dbo:Person ;
            foaf:name ""Archduke Charles Joseph of Austria""@en .

  # Step 2: Find his parent
  ?parent dbo:child ?archduke .

  # Step 3: Determine the child of this parent
  ?child dbo:parent ?parent .

  # Step 4: Identify the father of this child
  ?father dbo:spouse ?mother ;
          dbo:child ?child .

  # Step 5: Link to societal event, event, television show, and 2nd Dragoon Regiment (France)
  ?event a dbo:SocietalEvent ;
         dbo:participant ?father .
  
  ?tvShow a dbo:TelevisionShow ;
          dbo:actor ?father .

  ?regiment a dbo:MilitaryUnit ;
            dbo:commander ?father ;
            foaf:name ""2nd Dragoon Regiment (France)""@en .
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
119,14,train,"Give me the tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?administration dbo:party dbr:Spanish_Socialist_Workers'_Party .
  ?administration dbo:headOfGovernment ?person .
  ?person rdfs:label ?name .
  FILTER (LANG(?name) = 'en')
}
```",2,3,3,2,1,3,3,71,0,0,100,0,0.0,0
468,7,train,Give me the reference to the real name of Peter IV of Aragon.,SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://xmlns.com/foaf/0.1/name> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?realName WHERE {
  ?person a dbo:Monarch ;
          foaf:name ""Peter IV of Aragon""@en .
  OPTIONAL { ?person foaf:givenName ?firstName . }
  OPTIONAL { ?person foaf:familyName ?lastName . }
  BIND(CONCAT(?firstName, ' ', ?lastName) AS ?realName)
}
```",2,2,3,2,1,3,2,20,0,0,1,0,0.0,0
151,1,train,Give me the reference to Order of the Medjidie.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Order of the Medjidie""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?entity ?description WHERE {
  ?entity rdfs:label ""Order of the Medjidie""@en .
  OPTIONAL { ?entity dbo:description ?description . FILTER (lang(?description) = 'en') }
}
```",1,1,2,1,1,2,2,9,1,0,0,1.0,1.0,1.0
731,5,train,Who is the commander in Sinking of Prince of Wales and Repulse?,SELECT ?result WHERE { <http://dbpedia.org/resource/Sinking_of_Prince_of_Wales_and_Repulse> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT ?commander WHERE {
  ?event dcterms:subject dbc:Sinking_of_Prince_of_Wales_and_Repulse .
  ?event dbo:agent ?person .
  ?person rdf:type dbo:MilitaryPerson .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""tom phillips"")) .
  BIND(CONCAT(""Vice Admiral Sir "", ?name) AS ?commander)
}
```",1,1,2,1,1,3,2,20,0,0,6,0,0.0,0
198,31,train,"Give me the war of the awardee of the show, that is an award, of United States Congress and force of Quincy Adams Gillmore.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v0 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?person dbo:award dbr:Congressional_Gold_Medal .
  ?person rdfs:label ""Quincy Adams Gillmore""@en .
  ?person dbo:militaryConflict ?war .
}
```",4,5,5,3,2,3,3,71,0,0,3,0,0.0,0
347,48,train,"Give me the child of the father of Cecilia Renata of Austria and commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?societalEvent ?tvShow WHERE {
  # Cecilia Renata of Austria's father
  dbr:Cecilia_Renata_of_Austria dbo:father ?father .
  
  # Child who was a commander in war
  ?father dbo:child ?child .
  ?child dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""commander"") || CONTAINS(LCASE(?occupation), ""military""))

  # Societal events and TV shows related to the Algerian War
  ?societalEvent dbo:relatedTo dbr:Algerian_War .
  ?tvShow dbo:subject dbr:Algerian_War .

  # Ensure the military force is linked to the Algerian War
  ?militaryForce dbo:partOf dbr:Algerian_War .
  FILTER(?militaryForce = dbr:French_Army)

  # Link the commander to these events and shows
  ?child dbo:relatedTo ?societalEvent .
  ?child dbo:subject ?tvShow .
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
782,49,train,"Give me the reference to the real name of The Fabulous Thunderbirds and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v0 . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandName ?nickCurranRealName WHERE {
  # Retrieve the real name of The Fabulous Thunderbirds band
  dbr:The_Fabulous_Thunderbirds a dbo:Band ;
                               rdfs:label ?bandName .

  # Retrieve information about Nick Curran
  dbr:Nick_Curran a dbo:MusicalArtist ;
                  foaf:name ?nickCurranRealName .
  
  FILTER (lang(?bandName) = 'en' && lang(?nickCurranRealName) = 'en')
}
```",5,6,6,3,2,3,3,71,0,2,1,0.0,0.0,0
353,18,train,"Give me the child of Elvira of Castile, Queen of Sicily and father of William II of Sicily and child of Roger II of Sicily.","SELECT ?result WHERE { <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:parent dbr:Elvira_of_Castile ;
          dbo:parent dbr:Roger_II_of_Sicily .
  ?person dbo:child dbr:William_II_of_Sicily .
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
943,41,train,"Give me the father of Baeda Maryam I and child of the parent, that is a royalty, of Yeshaq I and reference to the alter ego of The Shadow.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father ?child WHERE {
  # Baeda Maryam I's father
  VALUES (?baedaMaryamI) { dbr:Baeda_Maryam_I }
  ?baedaMaryamI dbo:father ?father .
  
  # Yeshaq I's parent and a child of that parent who is royalty
  VALUES (?yeshaqI) { dbr:Isaac_of_Ethiopia }
  ?yeshaqI dbo:parent ?parentYeshaq .
  ?child dbo:parent ?parentYeshaq .
  
  # Dawit II as a royal descendant
  FILTER(?child = dbr:Dawit_II)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
198,48,train,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and war of the awardee of the show, that is an award, of United States Congress.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v3 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
# Query 1: Find Henry Clay Lewis's birthplace
SELECT ?birthPlace WHERE {
  dbpedia:Henry_Clay_Lewis dbo:birthPlace ?birthPlace .
  FILTER (isLiteral(?birthPlace) && regex(str(?birthPlace), ""United States""))
}

# Query 2: Find an American entity related to his birthplace
SELECT DISTINCT ?entity WHERE {
  ?birthPlace dbo:country dbr:United_States_of_America .
  ?birthPlace dbo:wikiPageDisambiguates ?disambiguation .
  ?disambiguation dbo:country dbr:United_States_of_America .
  ?disambiguation rdfs:label ?entity .
  FILTER (lang(?entity) = ""en"")
}

# Query 3: Find the award given by U.S. Congress and its awardee
SELECT DISTINCT ?awardAwardee WHERE {
  ?award dbo:awardingBody dbr:United_States_Congress ;
         dbo:recipient ?awardAwardee .
}

# Query 4: Identify a common entity between the two parts
SELECT DISTINCT ?commonEntity WHERE {
  VALUES (?entity) { (<entities_from_query_2>) }
  VALUES (?awardAwardee) { (<awardees_from_query_3>) }
  FILTER (?entity = ?awardAwardee)
}
```

Note: Replace `<entities_from_query_2>` and `<awardees_from_query_3>` with the actual results from Queries 2 and 3.",5,8,6,3,2,3,3,71,0,0,2,0,0.0,0
39,17,train,"Who is the person born, that is a musical artist, as the birth name of Bob Thompson (musician)?",SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?birthName WHERE {
  ?person a dbo:MusicalArtist .
  ?person foaf:givenName ""Bob"" .
  ?person foaf:surname ""Thompson"" .
  OPTIONAL { ?person dbo:birthName ?birthName . }
  FILTER(?birthName = ""Bob Thompson"")
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
293,5,train,"Give me the product, that is a film, of Nat Levine.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?film WHERE {
  ?film a dbo:Film .
  ?film dbo:producer dbr:Nat_Levine .
}
```",1,2,2,1,1,3,3,71,96,0,0,1.0,1.0,1.0
384,3,train,"Give me the person born, that is an office holder and a politician, as Bruno Daniel Marie Paul Retailleau.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/property/birthName> ""Bruno Daniel Marie Paul Retailleau""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?birthDate WHERE {
  ?person a dbo:OfficeHolder .
  ?person a dbo:Politician .
  ?person rdfs:label ""Bruno Retailleau""@en .
  OPTIONAL { ?person dbo:birthDate ?birthDate . }
}
```",1,3,2,1,1,2,2,9,1,1,0,0.5,1.0,0.6666666666666666
293,37,train,"Give me the spouse of the actor of the product, that is a film, of Nat Levine and person born as Harriette Arlene Lake.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v0 <http://dbpedia.org/property/starring> ?v3 . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . }","```sparql
# Step 1: Identify Nat Levine and Harriette Arlene Lake
SELECT ?natLevine ?harrietteLake WHERE {
  ?natLevine foaf:name ""Nat Levine""@en .
  ?harrietteLake foaf:name ""Harriette Arlene Lake""@en ;
                 foaf:birthName ""Harriette Arlene Lake""@en .
}

# Step 2: Find a common film they were associated with
SELECT DISTINCT ?film WHERE {
  ?natLevine dbo:associatedWith ?film .
  ?harrietteLake dbo:associatedWith ?film .
  FILTER (rdf:type(?film) = dbpedia-owl:Film)
}

# Step 3: Determine an actor from that film
SELECT DISTINCT ?actor WHERE {
  ?film dbo:starring ?actor .
}

# Step 4: Find the spouse of the actor
SELECT DISTINCT ?spouse WHERE {
  ?actor foaf:mbox ?email .
  ?actor dbo:spouse ?spouse .
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
293,58,train,"Give me the party member of Republican Party (United States) and spouse of the actor of 1,000 Dollars a Minute and person born as the birth name of the parent of Tisha Sterling.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v1 <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v5 . }","```sparql
# Step 1: Identify the actor associated with ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
  ?movie dbo:title ""1,000 Dollars a Minute""@en .
  ?movie dbo:starring ?actor .
}

# Step 2: Find the spouse of that actor
SELECT ?spouse WHERE {
  ?actor dbo:spouse ?spouse .
}

# Step 3: Identify Tisha Sterling's parent and their birth name
SELECT ?parent ?birthName WHERE {
  wd:QXXXXX dbo:child wd:QYYYYY . # Replace QXXXXX with Tisha Sterling's DBpedia ID, QYYYYY with the parent's DBpedia ID
  ?parent foaf:name ?birthName .
}

# Step 4: Find a person born with that birth name
SELECT ?person WHERE {
  ?person foaf:name ?birthName .
}

# Step 5: Check if this person is a member of the Republican Party (United States)
SELECT ?person WHERE {
  ?person dbo:partyMember wd:QZ12345 . # Replace QZ12345 with the DBpedia ID for the Republican Party
}
```

Note: The placeholders `QXXXXX`, `QYYYYY`, and `QZ12345` need to be replaced with actual DBpedia IDs, which can be found through preliminary queries or manual lookup.",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
628,44,train,"Give me the native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and band member of Uncle Murda and person born as the birth name of Bobby Shmurda.",SELECT ?result WHERE { <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v4 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Ackquille Jean Pollard""@en .
  ?person dbo:nationality dbr:United_States .
  ?person dbo:placeOfBirth dbr:Puerto_Rico .
  OPTIONAL { ?bandMember dbo:member ?person . }
  FILTER EXISTS {
    ?bandMember rdfs:label ""Uncle Murda""@en .
  }
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
905,1,train,Give me the parent of Charles Martel of Anjou.,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?person a dbo:Person ;
          foaf:name ""Charles Martel of Anjou""@en .
  OPTIONAL { ?person dbo:parent ?parent . }
}
```",1,1,2,1,1,3,3,71,2,0,0,1.0,1.0,1.0
347,50,train,Give me the child of the father of Cecilia Renata of Austria and father of the child of the parent of Archduke Charles Joseph of Austria.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v4 <http://dbpedia.org/property/father> ?result . ?v4 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v3 . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?commonChild WHERE {
  # Step 1: Find Cecilia Renata of Austria's father
  ?ceciliaRenata dbo:father ?fatherCeciliaRenata .
  
  # Step 2: Find the child of Cecilia Renata's father
  ?childFatherCeciliaRenata dbo:parent ?fatherCeciliaRenata .

  # Step 3: Identify Archduke Charles Joseph of Austria's parent
  ?charlesJoseph dbo:parent ?parentCharlesJoseph .
  
  # Step 4: Find the child of this parent
  ?childParentCharlesJoseph dbo:parent ?parentCharlesJoseph .

  # Step 5: Determine the common link (shared descendant)
  FILTER (?childFatherCeciliaRenata = ?commonChild && ?childParentCharlesJoseph = ?commonChild)

  # Bind Cecilia Renata and Charles Joseph to their respective DBpedia resources
  VALUES ?ceciliaRenata { <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> }
  VALUES ?charlesJoseph { <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> }
}
```",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
905,39,train,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and parent of Charles Martel of Anjou.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v2 . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
# Step 1: Find Stephen V of Hungary's predecessor
SELECT ?predecessor WHERE {
  wd:Q1234568 wdt:P39 wd:Q7890123 . # Stephen V of Hungary (replace with actual QID)
  wd:Q7890123 wdt:P22 ?predecessor .
}

# Step 2: Find the parent of Charles Martel of Anjou
SELECT ?parent WHERE {
  wd:Q3456789 wdt:P22 ?parent . # Charles Martel of Anjou (replace with actual QID)
}

# Step 3: Determine the common individual
SELECT DISTINCT ?commonIndividual WHERE {
  { 
    wd:Q1234568 wdt:P39 wd:Q7890123 .
    wd:Q7890123 wdt:P22 ?predecessor .
  }
  UNION
  {
    wd:Q3456789 wdt:P22 ?parent .
  }
  FILTER (?predecessor = ?parent)
}

# Step 4: Identify the child of this common individual
SELECT DISTINCT ?child WHERE {
  ?commonIndividual wdt:P40 ?child .
}

# Step 5: Find the royalty among the grandchildren
SELECT DISTINCT ?grandchild WHERE {
  ?child wdt:P40 ?grandchild .
  ?grandchild wdt:P31 wd:Q5 . # Human (to ensure it's a person)
  OPTIONAL { ?grandchild wdt:P39 ?royaltyPosition } # Check if they held any royalty position
}
```

Note: Replace `wd:Q1234568`, `wd:Q7890123`, and `wd:Q3456789` with the actual QIDs for Stephen V of Hungary, his predecessor, and Charles Martel of Anjou respectively. The queries assume that these relationships are available in DBpedia.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
39,35,train,"Give me the band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in the profession of Sam Concepcion.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  ?person dbo:birthName ""Robert Lamar Thompson""@en .
  ?person a dbo:MusicalArtist .
  ?person dbo:associatedBand ?band .
  FILTER EXISTS { ?band rdfs:label ?bandLabel . FILTER (lang(?bandLabel) = 'en') }
  OPTIONAL { ?person foaf:name ?name . FILTER regex(?name, ""Sam Concepcion"", ""i"") }
}
```",4,5,5,2,2,3,3,71,0,0,4,0,0.0,0
668,5,train,"Who is the writer, that is a musical artist, of The Live Anthology?",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?album rdf:type dbo:Album .
  ?album rdfs:label ""The Live Anthology""@en .
  ?album dbo:artist ?artist .
  FILTER EXISTS { ?artist dbo:genre ?genre . }
}
```",1,2,2,1,1,3,3,71,0,0,19,0,0.0,0
68,10,train,"Give me the child of the commander, that is a royalty, in Siege of Padua.",SELECT ?result WHERE { <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?title WHERE {
  ?siege dbo:eventType dbr:Siege_of_Padua .
  ?siege dbo:commander ?commander .
  ?commander dbo:child ?child .
  ?child dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") || 
         CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess""))
}
```",2,3,3,2,1,2,3,28,0,0,3,0,0.0,0
68,2,train,"Give me the father of Catherine of Austria, Queen of Portugal.","SELECT ?result WHERE { <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  ?catherine dbo:spouse dbr:Catherine_of_Austria,_Queen_of_Portugal .
  ?catherine a dbo:Monarch ;
             rdfs:label ""Catherine of Austria, Queen of Portugal""@en .
  OPTIONAL { ?catherine dbo:father ?father . }
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
375,13,train,Give me the entity in the birth place of Yamaza Enjirō and war of Toyotomi Hidenaga.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v1 . },"```sparql
SELECT DISTINCT ?birthPlaceEntity ?warEntity WHERE {
  # Yamaza Enjirō's birthplace
  ?yamaza en:birthPlace ?birthPlace .
  ?birthPlace rdfs:label ?birthPlaceLabel .
  FILTER (lang(?birthPlaceLabel) = ""en"" && contains(lcase(str(?birthPlaceLabel)), ""yamaza enjirō""))
  
  # Get the DBpedia entity for the birthplace
  SERVICE <http://dbpedia.org/sparql> {
    ?birthPlaceEntity rdfs:label ?birthPlaceLabel .
    FILTER (lang(?birthPlaceLabel) = ""en"")
  }
  
  # Toyotomi Hidenaga's associated war
  ?hidenaga dbo:associatedWith ?war .
  ?war rdfs:label ?warLabel .
  FILTER (lang(?warLabel) = ""en"" && contains(lcase(str(?warLabel)), ""toyotomi hidenaga""))
  
  # Get the DBpedia entity for the war
  SERVICE <http://dbpedia.org/sparql> {
    ?warEntity rdfs:label ?warLabel .
    FILTER (lang(?warLabel) = ""en"")
  }
}
```",3,3,4,2,2,2,3,28,0,0,3,0,0.0,0
295,8,train,Give me the native of the birth place of Victor Saville.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . <http://dbpedia.org/resource/Victor_Saville> <http://dbpedia.org/ontology/birthPlace> ?v0 . },"```sparql
SELECT ?nativeLanguage WHERE {
  ?person dbo:birthPlace ?place.
  ?place dbo:country ?country.
  ?country dbo:nativeLanguage ?nativeLanguage.
  
  FILTER (str(?person) = ""Victor_Saville"")
}
```",2,2,3,2,1,3,2,20,0,0,1531,0,0.0,0
263,24,train,"Give me the parent of the person born as Hon. Mary Frances Bowes-Lyon and parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v2 . ?v0 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . }","```sparql
SELECT ?parent WHERE {
  ?honMaryFrancesBowesLyon a dbo:Person ;
                            foaf:name ""Hon. Mary Frances Bowes-Lyon""@en .
  ?claudBowesLyon13thEarl a dbo:Person ;
                         foaf:name ""Claude Bowes-Lyon, 13th Earl of Strathmore and Kinghorne""@en .
  ?honMaryFrancesBowesLyon dbo:parent ?parent .
  ?claudBowesLyon13thEarl dbo:parent ?parent .
}
```",4,4,5,2,2,2,3,28,0,0,2,0,0.0,0
628,29,train,Give me the person born as the birth name of Bobby Shmurda and band member of Uncle Murda and native of Florida.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v3 . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthName ?bandMemberOf ?placeOfBirth
WHERE {
  ?person dbo:birthName ""Ackquille Jean Pollard""@en .
  OPTIONAL { ?person dbo:memberOf dbr:Uncle_Murda . }
  OPTIONAL { ?person dbp:birthPlace ?placeOfBirth . }
  FILTER (CONTAINS(LCASE(?placeOfBirth), ""florida""))
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
756,15,train,"Give me the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?player WHERE {
  # Identify the 2007–08 VfL Bochum season as the successor of the 2006–07 season
  dbr:VfL_Bochum_season_2006%E2%80%9307 dbo:succeeds ?successorSeason .
  
  # Ensure the successor is a football league season, sports team season, and sports season
  ?successorSeason a dbo:FootballLeagueSeason ;
                  a dbo:SportsTeamSeason ;
                  a dbo:SportsSeason .

  # Find players associated with this season
  ?player dbo:playsFor ?team .
  ?team dbo:season ?successorSeason .

  # Ensure the player is linked to a sports club, organization, and soccer club
  ?team a dbo:SoccerClub ;
        a dbo:SportsClub ;
        a dbo:Organization .
}
```",2,8,3,2,1,3,3,71,0,0,1,0,0.0,0
492,12,train,Give me the death place of Reed Howes and death place of Carolyn Jones and death place of Sal Mineo.,SELECT ?result WHERE { <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?deathPlace WHERE {
  VALUES ?person { 
    dbr:Reed_Howes 
    dbr:Carolyn_Jones 
    dbr:Sal_Mineo
  }
  ?person dbo:deathPlace ?deathPlace .
}
```",3,3,4,1,3,2,3,28,1,3,0,0.25,1.0,0.4
756,12,train,Give me the manager of 2020–21 SBV Vitesse season and native of West Germany.,SELECT ?result WHERE { <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager ?birthPlace WHERE {
  ?team dbo:season = ""2020–21"" .
  ?team dbo:manager = ?manager .
  FILTER (strstarts(str(?team), str(dbr:SBV_Vitesse))) .

  OPTIONAL { ?manager dbp:birthPlace ?birthPlace . }
  
  # Filter for birthplace in West Germany
  VALUES ?westGermanyPlaces {
    dbr:Bonn
    dbr:Cologne
    dbr:Düsseldorf
    dbr:Frankfurt_am_Main
    dbr:Hamburg
    dbr:Munich
    dbr:Stuttgart
    dbr:Berlin_West
    # Add more cities or regions as needed
  }
  
  OPTIONAL { ?birthPlace dbo:country dbr:West_Germany . }

  FILTER EXISTS {
    VALUES ?westGermanyPlaces {
      ?birthPlace
    }
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
723,7,train,"Give me the band member of the producer, that is an organisation and a group, of Nothing to Gein.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . <http://dbpedia.org/resource/Nothing_to_Gein> <http://dbpedia.org/ontology/producer> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bandMember WHERE {
  # Identify the band ""Nothing to Gein""
  dbr:Nothing_to_Gein a dbo:Band ;
                      dbo:musicalArtist ?nothingToGeinEntity .

  # Find the producer of Nothing to Gein
  ?nothingToGeinEntity dbo:producer ?producer .
  
  # Ensure the producer is an organization or group
  ?producer a (dbo:Organization | dbo:MusicalGroup) .

  # Check if any band member is associated with both Nothing to Gein and the producer
  ?producer dbo:musicalArtist ?bandMember ;
           dbo:musicalArtist ?nothingToGeinEntity .
}
```",2,4,3,2,1,3,2,20,0,0,5,0,0.0,0
668,14,train,Give me the person born as the birth name of Joey B.,SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person a dbo:Person .
  ?person dbo:birthName ""Joseph Benjamin Akwasi Boakye"" .
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
871,56,train,"Give me the father of the child, that is a politician, of the alumnus of Eton College and parent of the awardee of Commander of the Royal Victorian Order and parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/property/father> ?v5 . ?v5 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?father WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  ?edward dbo:parent ?politicianChild .
  ?edward foaf:name ""Edward Stanley, 17th Earl of Derby""@en .

  # Step 2: Find the politician child who is also a parent to Edward Stanley
  ?politicianChild rdf:type dbo:Politician ;
                   dbo:child ?edward ;
                   dbo:parent ?awardParent .

  # Step 3: Check if this politician's parent received the Commander of the Royal Victorian Order
  ?awardParent dbo:award ?award .
  ?award rdfs:label ""Commander of the Royal Victorian Order""@en .

  # Step 4: Identify the alumnus of Eton College who is a parent to this politician child
  ?alumnus dbo:almaMater dbr:Eton_College ;
           dbo:child ?politicianChild .

  # Step 5: Find the father of this politician child
  ?father dbo:parent ?politicianChild .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
595,6,train,"Give me the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?result <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?work dbo:author dbr:Bill_Clinton .
  ?work a dbo:Book .
  ?work a dbo:WrittenWork .
}
```",1,4,2,1,1,3,3,71,6,1,0,0.8571428571428571,1.0,0.923076923076923
595,50,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and commander in the war, that is a disease and a societal event, of United States Navy.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v4 <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://dbpedia.org/property/author> ?result . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?person dbo:residenceLocation dbr:Chappaqua,_New_York ;
          a dbo:Politician ;
          dbo:officeHolderOf dbr:United_States_Secretary_of_State .
  
  ?war dbo:name ""Vietnam War"" ;
       dbo:societalEvent true ;
       dbo:diseaseRelatedEvent true .

  ?person dbo:militaryCommanderIn ?war .

  ?work dbo:author ?person ;
        a dbo:Book, dbo:WrittenWork .

  FILTER EXISTS { ?work rdfs:label ""Living History""@en }
  
  BIND(?person AS ?author)
}
```",5,12,6,3,2,3,3,71,0,0,1,0,0.0,0
225,17,train,"Give me the entity in Japan and birthplace of the awardee, that is Japanese, of the reference, that is a television show, to Anita Borg Institute Women of Vision Awards.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://xmlns.com/foaf/0.1/name> ""Anita Borg Institute Women of Vision Awards""@en . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> . ?v3 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?v3 <http://dbpedia.org/property/awards> ?v0 . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?entity ?locationInJapan ?birthPlace WHERE {
  ?award dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  ?award dbo:recipient ?entity .
  
  # Filter for Japanese awardees
  ?entity dbo:nationality dbr:Japan .

  # Ensure the reference includes a connection to a television show
  OPTIONAL { ?entity dbo:wikiPageWikiLink ?tvShow . FILTER regex(str(?tvShow), ""television"", ""i"") }

  # Retrieve location in Japan (assuming this is where they work or reside)
  OPTIONAL { ?entity dbo:location dbr:Japan .
             ?entity dbo:residence ?locationInJapan .
           }
  
  # Obtain birthplace
  OPTIONAL { ?entity dbo:birthPlace ?birthPlace . }
}
```",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
706,8,train,Give me the birthplace of the actor of Akaler Shandhaney.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Akaler_Shandhaney> <http://dbpedia.org/property/starring> ?v0 . },"```sparql
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P106 wd:Q33999; # Soumitra Chatterjee's occupation as actor
  wdt:P19 ?birthPlace.
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Soumitra Chatterjee.",2,2,3,2,1,3,2,20,0,0,10,0,0.0,0
742,8,train,Give me the birthplace of the resident of Sofia.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Sofia> . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?person ?birthPlace WHERE {
  ?person dbo:residence dbr:Sofia .
  ?person dbo:birthPlace ?birthPlace .
  FILTER(CONTAINS(LCASE(STR(?person)), ""rumen radev""))
}
```",2,2,3,2,1,3,2,20,0,0,14,0,0.0,0
609,29,train,"Give me the birth place of Cece Bell and birth place of the governor, that is a politician, of Virginia and birth place of Vince Gilligan.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v3 . },"```sparql
# Query for Cece Bell's birth place
SELECT ?birthPlace WHERE {
  ?person dbo:name ""Cece Bell""@en .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for Glenn Youngkin's (Governor of Virginia) birth place
SELECT ?birthPlace WHERE {
  ?person dbo:name ""Glenn Youngkin""@en .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for Vince Gilligan's birth place
SELECT ?birthPlace WHERE {
  ?person dbo:name ""Vince Gilligan""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
905,31,train,"Give me the parent of Charles Martel of Anjou and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?parentSpouse WHERE {
  # Step 1: Find Charles Martel of Anjou's parent (likely father)
  ?charles dbo:father ?parent .

  FILTER(?charles = dbpedia:Charles_Martel_of_Anjou)

  # Step 2: Find the spouse of that parent
  ?parent dbo:spouse ?parentSpouse .

  # Step 3: Identify Philip, Despot of Romania's lineage
  ?philip dbo:father ?philipParent .
  ?philipParent dbo:father ?grandparent .

  FILTER(?philip = dbpedia:Philip_Despot_of_Romania)

  # Ensure the spouse is royalty (e.g., has a title)
  ?parentSpouse dbo:title ?title .
  
  FILTER(STRSTARTS(LCASE(?title), ""king"") || STRSTARTS(LCASE(?title), ""queen"") ||
         STRSTARTS(LCASE(?title), ""prince"") || STRSTARTS(LCASE(?title), ""princess""))
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
198,20,train,Give me the force of the awardee of Gillmore Medal and war of Amasa Tracy.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee ?force ?war WHERE {
  # Find the awardee of the Gillmore Medal and their associated force
  ?awardee dbo:award dbr:Gillmore_Medal .
  OPTIONAL { ?awardee dbo:militaryUnit ?force . }

  # Find Amasa Tracy's association with a war
  dbr:Amasa_Tracy dbo:associatedWithWar ?war .

  FILTER(?war = dbr:American_Civil_War)
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
756,8,train,"Give me the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?result <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?team WHERE {
  ?person rdfs:label ""Thomas Letsch""@en.
  ?person dbo:managerOf ?team.
  FILTER (lang(?person) = 'en')
  OPTIONAL { ?team a dbo:SoccerClub. }
}
```",1,4,2,1,1,3,3,71,0,0,5,0,0.0,0
816,50,train,Give me the parent of the professional in the profession of Eugène Cattin and parent of the child of Allan Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v4 . ?v4 <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
# Query for Eugène Cattin's profession and its parent
SELECT ?profession ?parentProfession WHERE {
  wd:Eug%C3%A8ne_Cattin dbo:occupation ?occupation .
  ?occupation rdfs:label ?profession .
  FILTER(LANG(?profession) = 'en')
  
  OPTIONAL {
    ?occupation rdfs:subClassOf+ ?parentOccupation .
    ?parentOccupation rdfs:label ?parentProfession .
    FILTER(LANG(?parentProfession) = 'en')
  }
}

UNION

# Query for Allan Arbus's child and their profession/role, and its parent
SELECT ?child ?childRole ?parentChildRole WHERE {
  wd:Allan_Arbus dbo:child ?child .
  
  OPTIONAL {
    ?child dbo:occupation ?childOccupation .
    ?childOccupation rdfs:label ?childRole .
    FILTER(LANG(?childRole) = 'en')
    
    OPTIONAL {
      ?childOccupation rdfs:subClassOf+ ?parentChildOccupation .
      ?parentChildOccupation rdfs:label ?parentChildRole .
      FILTER(LANG(?parentChildRole) = 'en')
    }
  }
  
  OPTIONAL {
    ?child dbo:profession ?childProfession .
    ?childProfession rdfs:label ?childRole .
    FILTER(LANG(?childRole) = 'en')
    
    OPTIONAL {
      ?childProfession rdfs:subClassOf+ ?parentChildProfession .
      ?parentChildProfession rdfs:label ?parentChildRole .
      FILTER(LANG(?parentChildRole) = 'en')
    }
  }
}
```",5,5,6,3,2,3,3,71,0,0,2,0,0.0,0
353,44,train,"Give me the child of Roger II of Sicily and child of the child of Alfonso VI of León and Castile and father of the child, that is a royalty, of William I of Sicily.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?result . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Roger II of Sicily's child
  ?child1 dbo:parent dbr:Roger_II_of_Sicily .
  
  # Alfonso VI's grandchild
  ?grandchild dbo:parent ?child2 .
  ?child2 dbo:parent dbr:Alfonso_VI_of_Léon_and_Castile .

  # Common person between Roger II's child and Alfonso VI's grandchild
  FILTER (?child1 = ?grandchild)

  # William I of Sicily's parent (father)
  ?child3 dbo:parent dbr:William_I_of_Sicily .
  ?father dbo:child ?child3 .

  # Ensure the person is royalty
  ?person dbo:royalty true .
  
  # The common person must be the father of William I's child and a royal figure
  FILTER (?person = ?father && ?person = ?child1)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
492,14,train,Give me the death place of Reed Howes and death place of the actor of Color Me Dead.,SELECT ?result WHERE { <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v1 . },"```sparql
# Query to get the death place of Reed Howes
SELECT ?deathPlace WHERE {
  dbpedia:Reed_Howes dbo:deathPlace ?deathPlace .
}

# Query to find the actor(s) of ""Color Me Dead"" and their death places
SELECT DISTINCT ?actor ?actorDeathPlace WHERE {
  # Find actors in the film ""Color Me Dead""
  dbpedia:""Color_Me_Dead""@en dbo:starring ?actor .

  OPTIONAL {
    ?actor dbo:deathPlace ?actorDeathPlace .
  }
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
258,2,train,"Give me the alma mater, that is a university and an organisation and an educational institution, of Luiza Erundina.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>. <http://dbpedia.org/resource/Luiza_Erundina> <http://dbpedia.org/ontology/almaMater> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?university WHERE {
  ?luizaErundina dbo:almaMater ?university .
  FILTER EXISTS { ?luizaErundina a dbo:Person . }
  FILTER EXISTS { ?university rdf:type dbo:University . }
}
```",1,4,2,1,1,3,2,20,1,14993,0,6.669334400426837e-05,1.0,0.00013337779259753248
78,10,train,"Give me the associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?soundtrack dbo:genre ""Soundtrack"" .
  ?soundtrack dbo:contributor ?person .
  ?person dbo:profession dbr/Musician ;
          dbo:profession dbr/Artist .
  FILTER(CONTAINS(LCASE(?soundtrack), ""wizards of waverly place soundtrack""))
}
```",2,4,3,2,1,2,3,28,0,0,18,0,0.0,0
347,28,train,"Give me the commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France) and child of Ferdinand II, Holy Roman Emperor and father of Eleonore of Austria, Queen of Poland.","SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:child dbr:Ferdinand_II,_Holy_Roman_Emperor .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child dbr:Eleonore_of_Austria,_Queen_of_Poland .
  ?person rdfs:label ""Albrecht von Wallenstein""@en .
}
```",4,7,5,2,3,3,3,71,0,0,1,0,0.0,0
595,35,train,"Give me the commander in the war, that is a disease and a societal event, of United States Navy and spouse of the author, that is a politician and an office holder, of An Invitation to the White House.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
SELECT ?person WHERE {
  ?person dbo:spouse dbr:Franklin_D._Roosevelt .
  ?person dbo:author dbr:An_Invitation_to_the_White_House .
  ?person dbo:occupation dbr:First_Lady_of_the_United_States .
}
```",4,8,5,2,2,3,3,71,0,0,1,0,0.0,0
119,58,train,"Give me the tenant of the residence, that is a country, of Álvaro Quirós and office of Alberto Núñez Feijóo and tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party.","SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v1 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> ?v5 . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v5 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  # Álvaro Quirós' residence country
  OPTIONAL { 
    dbr:Álvaro_Quirós dbo:nationality ?person1.
    ?person1 dbo:country ?country1.
  }
  
  # Alberto Núñez Feijóo's office
  OPTIONAL {
    dbr:Alberto_Núñez_Feijóo dbo:office ?office.
    ?office dbo:country ?country2.
  }

  # Tenant of the administration related to PSOE
  OPTIONAL {
    dbr:Spanish_Socialist_Workers'_Party dbo:member ?person3.
    ?person3 dbo:nationality ?nationality.
    ?nationality rdfs:label ""Spain""@en.
    ?person3 dbo:country ?country3.
  }

  # Ensure all countries are the same
  FILTER (?country1 = ?country2 && ?country2 = ?country3)
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
203,7,train,Who is the awardee of Knight Commander of the Order of the Bath?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:award dbr:Knight_Commander_of_the_Order_of_the_Bath .
}
```",1,1,2,1,1,3,3,71,892,25,7,0.9727371864776445,0.9922135706340378,0.9823788546255506
353,12,train,"Give me the father of William II of Sicily and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?person WHERE {
  ?person wdt:P31 wd:Q5;  # Person
          wdt:P22 wd:Q1116; # Father of William II of Sicily (Tancred)
          wdt:P25 wd:Q123456. # Mother of William II of Sicily (Sibylla of Acerra)

  ?person wdt:P40 wd:Q12345. # Child of Elvira of Castile, Queen of Sicily
}
```

Note: In the query above, `wd:Q1116` should be replaced with the actual DBpedia identifier for Tancred of Lecce, and `wd:Q123456` should be replaced with the identifier for Sibylla of Acerra. Similarly, `wd:Q12345` should be replaced with the identifier for Elvira of Castile.",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
531,22,train,"Give me the tenant of Madrid and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v1 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query for the tenant (headquarters) in Madrid
SELECT ?entity ?location WHERE {
  ?entity dbo:city ""Madrid""@en .
  ?entity dbo:headquarterLocation ?location .
}

UNION

# Query for the office of the leader of the Conservative Republican Party (Spain)
SELECT ?leader ?office WHERE {
  ?party dbr:Conservative_Party_(Spain) ;
         dbo:leader ?leader .
  ?leader foaf:workplaceHomepage ?homepage .
  ?homepage rdfs:label ?office .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
628,40,train,"Give me the native of Florida and person born as Ackquille Jean Pollard and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.","SELECT ?result WHERE { <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  # Ackquille Jean Pollard is known as 2 Chainz
  dbr:2_Chainz dbo:nativePlace dbr:Georgia_(U.S._state) .
  
  # GS9 association
  dbr:GS9 dbo:member ?gs9Member .

  # Filter members who are both artists and musical artists
  ?gs9Member a dbo:MusicalArtist ;
             dbo:birthPlace ?birthPlace .

  # Check if the member is native to Florida
  FILTER (str(?birthPlace) = ""Florida"" || str(?birthPlace) = ""United_States"") .
  
  # Ensure the person is an artist and musical artist
  ?gs9Member dbo:occupation dbr:Artist ;
             dbo:occupation dbr:Musical_artist .

  BIND(?gs9Member AS ?person)
}
```",5,8,6,3,3,3,3,71,0,0,1,0,0.0,0
293,16,train,"Give me the actor of the product, that is a film, of Nat Levine.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  ?film dbo:producer dbr:Nat_Levine .
  ?film dbo:starring ?actor .
}
```",2,3,3,2,1,3,3,71,201,31,56,0.8663793103448276,0.7821011673151751,0.8220858895705522
295,0,train,Give me the writer of Boom Shack-A-Lak.,SELECT ?result WHERE { <http://dbpedia.org/resource/Boom_Shack-A-Lak> <http://dbpedia.org/property/writer> ?result . },"```sparql
SELECT ?artist WHERE {
  ?song dbo:title ""Boom Shack-A-Lak"" .
  ?song dbo:performer ?artist .
  FILTER (lang(?title) = 'en')
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
263,7,train,"Give me the parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne and native of Middlesex.","SELECT ?result WHERE { <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . }","```sparql
SELECT ?parent ?nativePlace WHERE {
  ?person a dbo:Person ;
          foaf:name ""Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne""@en .
  
  ?person dbo:parent ?parent .

  OPTIONAL { 
    ?parent dbo:nationality ?nationality .
    FILTER(CONTAINS(LCASE(?nationality), ""middlesex""))
  }
  
  OPTIONAL {
    ?parent dbo:birthPlace ?nativePlace .
    FILTER(CONTAINS(LCASE(STR(?nativePlace)), ""middlesex""))
  }

  FILTER(NOT EXISTS { ?parent dbo:nationality ?nationality . })
}
```",2,2,3,1,2,2,3,28,0,0,2,0,0.0,0
347,61,train,"Give me the father of the child of the parent of Archduke Charles Joseph of Austria and child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574).",SELECT ?result WHERE { <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> ?result . ?v5 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v1 <http://dbpedia.org/property/father> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  # Archduke Charles Joseph's parent
  ?charlesJoseph a dbo:Person ;
                 foaf:name ""Archduke Charles Joseph of Austria""@en .
  ?parent dbo:child ?charlesJoseph .

  # Maria Anna of Bavaria (born 1574) and her child
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria (1574)""@en .
  ?fatherOfMariaAnna dbo:child ?mariaAnna .
  ?royalChild dbo:parent ?fatherOfMariaAnna .

  # Find the father who is common to both
  ?commonFather dbo:child ?charlesJoseph ;
                dbo:child ?royalChild .
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
628,21,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and native of Florida.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . },"```sparql
SELECT ?member ?memberLabel WHERE {
  # Find members associated with GS9 or collaborations involving Bobby Shmurda
  ?bobby dbo:associatedMusicalArtist ?gs9 .
  ?gs9 dbo:bandMember ?member .

  # Ensure the member is also a musical artist
  ?member dbo:occupation dbr/Musical_artist .

  # Check if the member is native to Florida
  ?member dbo:birthPlace ?place .
  ?place rdfs:label ""Florida""@en .

  # Filter out Bobby Shmurda himself
  FILTER (?bobby != ?member)

  # Get labels for readability
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
361,4,train,Give me the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo WHERE {
  dbr:The_Shadow dbo:aliasName ?alterEgo .
}
```",1,1,2,1,1,2,3,28,0,0,3,0,0.0,0
687,42,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the person born, that is an athlete, on 1955-02-22 and player in Sergio Agüero.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/coach> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?team WHERE {
  # Find the person born on 1979-11-03 who is both a soccer player and manager
  ?person dbo:birthDate ""1979-11-03""^^xsd:date ;
          dbo:sport dbr:Soccer ;
          dbo:occupation [a dbo:SoccerPlayer ; dbo:managerOf ?team] .

  # Find the athlete born on 1955-02-22
  ?athlete dbo:birthDate ""1955-02-22""^^xsd:date ;
           dbo:sport dbr:Athletics .

  # Ensure this person played with both the athlete and Sergio Agüero
  ?person dbo:teamMember ?commonTeam1 .
  ?athlete dbo:teamMember ?commonTeam1 .
  
  ?person dbo:teamMember ?commonTeam2 .
  dbr:Sergio_Agüero dbo:teamMember ?commonTeam2 .

  # Ensure the team is related to soccer
  ?commonTeam1 a dbo:SoccerClub ;
              rdfs:label ?teamLabel .
}
```",5,8,6,2,3,3,3,71,0,0,1,0,0.0,0
119,13,train,"Give me the war of the commander in the force, that is a television show and a military conflict, of Maria I of Portugal.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Maria_I_of_Portugal> . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v0 <http://dbpedia.org/ontology/commander> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?tvShow WHERE {
  # Find the war associated with Maria I of Portugal
  dbr:Maria_I_of_Portugal dbo:reignOver dbr:Portugal .
  
  OPTIONAL {
    ?war dbo:place dbr:Portugal ;
         dbo:participatedIn dbr:Napoleonic_Wars .
    FILTER(CONTAINS(LCASE(?war), ""napoleonic wars""))
  }
  
  # Find the TV show related to military command
  OPTIONAL {
    ?tvShow dbo:genre dbr:Military_drama ;
            dbo:title ""The Commander"" .
  }
}
```",3,5,4,3,1,3,2,20,0,0,121,0,0.0,0
375,14,train,Give me the war of the person born as Koichirō and entity in Japan.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Koichirō""@en . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . }","```sparql
SELECT ?war WHERE {
  ?person foaf:name ""Koichiro"" .
  ?person dbo:birthPlace dbr:Japan .
  ?person dbo:nationality dbr:Japanese .
  ?person dbo:occupation dbo:MilitaryPerson .
  ?person dbo:participatedIn ?war .
}
```",3,3,4,2,2,2,3,28,0,0,3,0,0.0,0
58,11,train,Give me the spouse of the person born as Linda Sue Cobb and producer of 12 Strong.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v2 . ?v2 <http://dbpedia.org/property/birthName> ""Linda Sue Cobb""@en . <http://dbpedia.org/resource/12_Strong> <http://dbpedia.org/ontology/producer> ?result . }","```sparql
SELECT ?spouse WHERE {
  wd:Q1234568 wdt:P569 ?birthDate .
  wd:Q1234568 wdt:P26 ?spouse .
  ?spouse wdt:P106 wd:Q86168 . # Occupation as film producer
  wd:Q1234568 rdfs:label ""Linda Sue Cobb""@en .
  ?movie wdt:P57 ?spouse .
  ?movie rdfs:label ""12 Strong""@en .
}
```

In this query:
- `wd:Q1234568` should be replaced with the DBpedia resource ID for Tammy Henson.
- The query checks for a person (`?spouse`) who is married to someone born as Linda Sue Cobb and has an occupation of film producer, and also produced ""12 Strong.""",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
859,4,train,"Give me the member, that is a musical artist, of Khlyst (band).",SELECT ?result WHERE { <http://dbpedia.org/resource/Khlyst_(band)> <http://dbpedia.org/ontology/bandMember> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?member WHERE {
  ?band dbr:Khlyst ;
        dbo:bandMember ?member .
  OPTIONAL { ?member dbo:musicalArtist ?artist . }
  FILTER EXISTS { ?member dbo:musicalArtist ?artist }
}
```",1,2,2,1,1,3,2,20,0,0,3,0,0.0,0
89,13,train,"Give me the spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v1 . ?result <http://dbpedia.org/ontology/spouse> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Find Myat Hpone Pyo and get his father's name
SELECT ?father WHERE {
    ?person foaf:name ""Myat Hpone Pyo""@en .
    ?person dbo:parent ?parent .
    ?parent foaf:name ?fatherName .
    BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", REPLACE(LCASE(?fatherName), "" "", ""_""))) AS ?father)
}

# Step 2: Check if the father is royalty
SELECT DISTINCT ?royalTitle WHERE {
    ?father dbo:title ?title .
    FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""queen"") || 
           CONTAINS(LCASE(STR(?title)), ""prince"") || CONTAINS(LCASE(STR(?title)), ""princess""))
}

# Step 3: If the father is royalty, find his spouse
SELECT DISTINCT ?spouse WHERE {
    ?father dbo:spouse ?spouse .
}
```",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
23,22,train,"Give me the entity in the country of Daniel Elahi Galán and party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> ?v0 . ?v3 <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?politician WHERE {
  # Find the country of Daniel Elahi Galán
  dbr:Daniel_Elahi_Galán dbo:nationality ?country .

  # Find the political party of Roy Leonardo Barreras Montealegre
  dbr:Roy_Leonardo_Barreras_Montealegre dbo:party ?party .

  # Find a politician who is from the same country and belongs to the same party
  ?politician a dbo:Politician ;
             dbo:nationality ?country ;
             dbo:party ?party .
}
```",4,5,5,2,2,2,3,28,0,0,5,0,0.0,0
531,1,train,Give me the office of Mariano Rajoy.,SELECT ?result WHERE { <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  ?person dbo:givenName ""Mariano""@en .
  ?person dbo:familyName ""Rajoy""@en .
  ?person dbo:office ?office .
}
```",1,1,2,1,1,3,3,71,0,0,13,0,0.0,0
39,54,train,"Give me the band of Bob Thompson (musician) and professional in the profession of Sam Concepcion and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v5 . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/property/alterEgo> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  # Find the band associated with Bob Thompson (musician)
  dbr:Bob_Thompson_(musician) dbo:musicalArtistInBand ?band .

  # Check if Sam Concepcion is an actor
  dbr:Sam_Concepcion dbo:profession dbr:Actor .

  # Identify the fictional character created by Walter B. Gibson
  dbr:The_Shadow dbo:creator dbr:Walter_B._Gibson .
  
  # Ensure the band is The Monkees
  ?band rdfs:label ""The Monkees""@en .
}
```",6,8,7,3,3,3,3,71,0,0,4,0,0.0,0
80,9,train,Give me the actor of ATL (film) and actor of Shelby Oaks.,SELECT ?result WHERE { <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT ?actor WHERE {
  VALUES (?movie) { 
    (dbpedia:ATL_(film)) 
    (dbpedia:Shelby_Oaks)
  }
  ?movie dbo:starring ?actor .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
347,22,train,Give me the child of the father of Cecilia Renata of Austria and commander in Thirty Years' War.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Find Cecilia Renata of Austria and her father
  dbr:Cecilia_Renata_of_Austria dbo:father ?father .
  
  # Identify Ferdinand II as the father
  ?father rdfs:label ""Ferdinand II, Holy Roman Emperor""@en .

  # Find Maximilian II, the father of Ferdinand II
  ?grandfather dbo:child ?father .
  ?grandfather rdfs:label ""Maximilian II, Holy Roman Emperor""@en .

  # Identify children of Maximilian II who were commanders in the Thirty Years' War
  ?grandfather dbo:child ?child .
  ?child dbo:occupation ?occupation .
  
  FILTER(CONTAINS(LCASE(?occupation), ""commander"") && CONTAINS(LCASE(?child), ""thirty years war""))
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
628,37,train,"Give me the native of Florida and person born as the birth name of the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativeName ?birthName WHERE {
  ?person a dbo:MusicalArtist ;
          dbo:birthPlace dbr:Florida .
  OPTIONAL { ?person foaf:name ?nativeName . }
  OPTIONAL { ?person dbo:birthName ?birthName . }
}
```",4,5,5,3,2,3,3,71,0,97,59,0.0,0.0,0
687,55,train,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and player in the person born, that is an athlete, on 1955-02-22 and team of the person born, that is a soccer player and a soccer manager, on 1979-11-03.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?result <http://dbpedia.org/ontology/coach> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v3 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v5 . ?v5 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  # Actor in ""All or Nothing: Manchester City""
  ?actor dbo:starringIn dbr:All_or_Nothing:_Manchester_City.
  
  # Soccer player and athlete
  ?actor a dbo:SoccerPlayer;
         a dbo:Athlete.

  # Person born on 1955-02-22 who is an athlete
  ?athlete dbo:birthday ""1955-02-22""^^xsd:date;
           a dbo:Athlete.
  
  # Ensure the actor and athlete are the same person
  FILTER (?actor = ?athlete)

  # Team of person born on 1979-11-03 who is a soccer player and manager
  ?person dbo:birthday ""1979-11-03""^^xsd:date;
          a dbo:SoccerPlayer, dbo:FootballManager.
  
  ?team dbo:member ?person.

  # Ensure the actor is associated with this team
  ?actor dbo:playsFor ?team.
}
```",6,11,7,2,3,3,3,71,0,0,1,0,0.0,0
668,19,train,Give me the professional in Musician and associated musical artist of the person born as Elorm Kabu Amenyah.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?v0 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?associatedArtist WHERE {
  VALUES ?stonebwoy { dbr:Stonebwoy }
  
  ?stonebwoy dbo:occupation ?profession .
  FILTER(CONTAINS(LCASE(STR(?profession)), ""musician""))

  OPTIONAL {
    ?stonebwoy dbo:member ?group .
    ?group dbo:member ?associatedArtist .
    FILTER(?associatedArtist != ?stonebwoy)
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
557,28,train,Give me the producer of A Star Is Born (1937 film) and professional in the alter ego of The Shadow and producer of The Adventures of Tom Sawyer (1938 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
# Step 1: Find the producer of A Star Is Born (1937)
SELECT ?producer WHERE {
  ?film dbpedia-owl:title ""A Star Is Born""@en .
  ?film dbpedia-owl:productionCompany ?company .
  ?company dbo:producer ?producer .
  FILTER(?film.dbpedia-owl:releaseDate = ""1937-01-01""^^xsd:date)
}

UNION

# Step 2: Find the professional in the alter ego of The Shadow
SELECT ?professional WHERE {
  ?person dbp:alterEgo ""The Shadow""@en .
  ?person dbo:profession ?professional .
}

UNION

# Step 3: Find the producer of The Adventures of Tom Sawyer (1938)
SELECT ?producer WHERE {
  ?film dbpedia-owl:title ""The Adventures of Tom Sawyer""@en .
  ?film dbpedia-owl:productionCompany ?company .
  ?company dbo:producer ?producer .
  FILTER(?film.dbpedia-owl:releaseDate = ""1938-01-01""^^xsd:date)
}

# Find the intersection
SELECT DISTINCT ?person WHERE {
  VALUES ?person { 
    # Results from Step 1
    ?producer1 .
    # Results from Step 2
    ?professional1 .
    # Results from Step 3
    ?producer2 .
  }
  FILTER(?producer1 = ?professional1 && ?professional1 = ?producer2)
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
687,37,train,"Give me the team of Pablo Aimar and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . ?v3 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v0 <http://dbpedia.org/property/starring> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. },"```sparql
# Step 1: Find Pablo Aimar's team(s)
SELECT ?team WHERE {
    ?player dbo:birthName ""Pablo Aimar"" .
    ?player dbo:sportTeam ?team .
}

# Step 2: Identify the actor who is also a soccer player and athlete
SELECT DISTINCT ?actor WHERE {
    ?actor rdf:type dbo:Actor ;
           dbo:occupation ""soccer player"" ;
           dbo:occupation ""athlete"" .
}

# Step 3: Find the film by Manuel Huerga featuring this actor
SELECT ?film WHERE {
    ?film dbo:director <http://dbpedia.org/resource/Manuel_Huerga> ;
          dbo:starring ?actor .
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
119,0,train,Give me the office of Alberto Núñez Feijóo.,SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  dbr:Alberto_Núñez_Feijóo dbo:office ?office .
}
```",1,1,2,1,1,3,3,71,0,0,7,0,0.0,0
80,17,train,Give me the alter ego of the series of The Golden Master.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . ?v1 <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo WHERE {
  dbr:The_Golden_Master dbo:character dbr:Batman .
  dbr:Batman dbo:secretIdentity ?alterEgo .
}
```",2,2,3,2,1,3,3,71,0,0,3,0,0.0,0
119,30,train,"Give me the tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and office of Alberto Núñez Feijóo and tenant of Spain.",SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?primeMinister ?officeFeijoo WHERE {
  # Find the current Prime Minister of Spain from PSOE
  ?party a dbo:PoliticalParty ;
         rdfs:label ""Spanish Socialist Workers' Party""@en .
  
  ?government dbo:ministers ?minister ;
              dbo:country dbr:Spain ;
              dbo:politicalParty ?party .

  ?minister dbo:office ?primeMinisterOffice .
  ?primeMinisterOffice dbo:title ""Prime Minister of Spain""@en .
  ?minister foaf:name ?primeMinister .

  # Find the office held by Alberto Núñez Feijóo
  ?feijoo a dbo:Person ;
          foaf:name ""Alberto Núñez Feijóo"" ;
          dbo:office ?officeFeijoo .
  
  FILTER EXISTS {
    ?officeFeijoo dbo:title ?title .
    FILTER(CONTAINS(LCASE(?title), ""president of galicia""))
  }
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
531,60,train,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/residence> ?v2 . ?v1 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v3 . ?v0 <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  # Step 1: Identify Miguel Maura's political party
  dbr:Miguel_Maura dbo:memberOfParty ?party .

  # Step 2: Determine the leader of that political party in 2003
  ?party dbo:leader ?leader .
  ?leader dbo:office ?office .
  
  # Filter for the year 2003, assuming there's a property or context indicating this timeframe
  FILTER (YEAR(?startDate) <= 2003 && (YEAR(?endDate) >= 2003 || NOT EXISTS { ?leader dbo:endDate ?endDate }))

  # Step 3: Find out which office the leader held during the 2003 Madrid City Council election
  ?office dbo:election ?election .
  FILTER (?election = dbr:Madrid_City_Council_election,_2003)
}
```",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
557,0,train,Give me the professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . }","```
# No specific query can be generated due to lack of detail.
```",1,1,2,1,1,3,3,71,0,0,39640,0,0.0,0
531,0,train,Give me the tenant of Madrid.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?mayorName WHERE {
  dbr:Madrid dbo:mayor ?mayor .
  ?mayor foaf:name ?mayorName .
}
```",1,1,2,1,1,3,3,71,0,0,259,0,0.0,0
595,60,train,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v3 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/property/author> ?v2 . },"```sparql
SELECT ?commander WHERE {
  ?ship wdt:P527 wd:Q1234567; # USS Arcadia (ID-1605)
        wdt:P127 ?owner. # owner of the ship

  ?book wdt:P50 wd:Q309; # Hillary Clinton
        wdt:P31/wdt:P279* wd:Q216229. # book and written work

  ?author wdt:P26 ?spouse;
          wdt:P39 ?officeHolder;
          wdt:P106 wd:Q82955. # politician and office holder

  ?war wdt:P361 wd:Q1234; # World War I
       wdt:P31/wdt:P279* wd:Q12345, wd:Q6789. # disease and societal event

  ?commander wdt:P39 wd:Q123456; # President of the United States during WWI
             wdt:P69 ?war.
}
```",6,12,7,3,2,3,3,71,0,0,1,0,0.0,0
37,3,train,"Who is the work, that is an artist and a musical artist, of Ethan Iverson?",SELECT ?result WHERE { ?result <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Ethan_Iverson> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?person rdfs:label ""Ethan Iverson""@en .
  ?person dbo:musicalArtist dbr:The_Bad_Plus ;
          dbo:member dbr:The_Bad_Plus ;
          dbo:instrument dbr:Piano .

  OPTIONAL { ?person dbo:album ?work . }
  FILTER (lang(?person) = 'en')
}
```",1,3,2,1,1,2,2,9,0,0,1,0,0.0,0
782,20,train,Give me the band of the band member of Eric Clapton and reference to The Fabulous Thunderbirds.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?result <http://dbpedia.org/ontology/bandMember> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . }","```sparql
SELECT ?band WHERE {
  ?clapton dbo:memberOf ?band .
  ?clapton foaf:name ""Eric Clapton"" .
  
  OPTIONAL {
    ?album dbo:artist ?fabulousThunderbirds ;
           dbo:title ""Tuff Enuff"" .
    ?fabulousThunderbirds foaf:name ""The Fabulous Thunderbirds"" .
    
    ?collaboration dbo:involvesArtist ?clapton ;
                   dbo:relatedToAlbum ?album .
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
668,61,train,"Give me the person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in the profession of the writer, that is a musical artist, of The Live Anthology.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/occupation> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/property/birthName> ?v3 . ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/birthName> ?v3 . }","```sparql
# Step 1: Identify the artist from Central Region, Ghana
SELECT ?artist ?birthName WHERE {
  ?artist dbo:nationality dbr:Ghana .
  ?artist dbo:regionOfOrigin dbr:Central_Region_(Ghana) .
  ?artist foaf:name ?name .
  ?artist dbo:birthName ?birthName .
}

# Step 2: Identify the musical artist associated with ""The Live Anthology""
SELECT ?musicalArtist WHERE {
  ?musicalArtist dbo:work ?work .
  ?work rdfs:label ""The Live Anthology""@en .
  FILTER(CONTAINS(LCASE(?musicalArtist), ""artist""))
}

# Step 3: Determine the profession of this musical artist
SELECT ?profession WHERE {
  ?musicalArtist dbo:occupation ?profession .
}

# Step 4: Find someone born with the same birth name and in the same profession
SELECT ?person WHERE {
  ?person foaf:name ?name .
  ?person dbo:birthName ?birthName .
  ?person dbo:occupation ?profession .
}
```

Note: This query is a conceptual framework. The actual implementation may require adjustments based on available DBpedia data and specific identifiers for the entities involved.",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
38,15,train,"Give me the author of the work, that is a work and a written work and American and a book, of the commander, that is an office holder and a politician, in North Carolina Air National Guard and author of Promise Me, Dad.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/property/author> ?v0 . <http://dbpedia.org/resource/North_Carolina_Air_National_Guard> <http://dbpedia.org/ontology/commander> ?v0 . ?v1 <http://dbpedia.org/ontology/author> ?result . <http://dbpedia.org/resource/Promise_Me,_Dad> <http://dbpedia.org/property/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?work WHERE {
  ?person a dbo:Politician ;
          dbo:officeHolderOf dbr:North_Carolina_Air_National_Guard ;
          dbo:book ""Promise Me, Dad"" .
  
  ?person foaf:name ""Joe Biden""@en .

  ?work dbo:author ?person ;
        a dbo:Book ;
        dbo:literaryGenre dbr:American_literature .

  BIND(?person AS ?author)
}
```",4,10,5,3,2,3,2,20,0,0,1,0,0.0,0
140,12,train,"Give me the commander in Pickett's Charge and party member of the ruling party, that is a political party and an organisation, in Westport, Connecticut.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Westport,_Connecticut> <http://dbpedia.org/property/leaderParty> ?v0 . ?result <http://dbpedia.org/ontology/party> ?v0 . <http://dbpedia.org/resource/Pickett's_Charge> <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party ?organization WHERE {
  # George Pickett as commander of Pickett's Charge
  dbr:George_Pickett dbo:commanderOf dbr:Picketts_Charge .

  # Find political party or organization associated with George Pickett
  OPTIONAL { dbr:George_Pickett dbo:memberOf ?party . }
  OPTIONAL { dbr:George_Pickett dbo:memberOfOrganization ?organization . }

  # Check for connection to Westport, Connecticut
  FILTER EXISTS {
    ?party dbo:location dbr:Westport,_Connecticut .
    ?organization dbo:location dbr:Westport,_Connecticut .
  }
}
```",3,5,4,2,2,3,2,20,0,0,1,0,0.0,0
23,4,train,Give me the country of Daniel Elahi Galán.,SELECT ?result WHERE { <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country WHERE {
  VALUES ?galan { dbr:Daniel_Elahi_Galán }
  OPTIONAL { ?galan dbo:nationality ?country . }
  OPTIONAL { ?galan dbo:birthPlace ?place .
             ?place dbo:country ?country . }
}
```",1,1,2,1,1,2,3,28,1,0,0,1.0,1.0,1.0
203,8,train,"Give me the force, that is an event and a societal event, of Robert Calder.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event WHERE {
  ?calder dbo:nationality dbr:United_Kingdom ;
          dbo:occupation dbr:Navy_officer .
  ?calder foaf:name ""Robert Calder""@en .
  
  ?event dbo:agent ?calder ;
         a dbo:MilitaryConflict ;
         dbo:societalEvent true .

  FILTER (CONTAINS(LCASE(str(?event)), ""cape finisterre""))
}
```",1,3,2,1,1,3,3,71,0,0,4,0,0.0,0
119,10,train,"Give me the residence, that is a country, of the native, that is Polish and an athlete, of Łódź.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Poland>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Łódź> . ?v0 <http://dbpedia.org/property/residence> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?athlete ?residence WHERE {
  ?athlete a dbo:Athlete ;
           dbo:nationality dbr:Poland ;
           dbo:hometown dbr:Łódź .
  
  OPTIONAL { 
    ?athlete dbo:currentResidence ?residence .
    FILTER (isLiteral(?residence) && datatype(?residence) = xsd:string)
  }
}
```",2,5,3,2,1,3,2,20,0,0,1,0,0.0,0
668,48,train,Give me the associated musical artist of the person born as the birth name of $pacely and person born as the birth name of Joey B.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/property/birthName> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  VALUES (?person) { 
    (dbr:Tupac_Shamakur) 
    (dbr:Joey_Bada$$)
  }
  
  ?person dbo:birthName ?birthName .
  FILTER (
    (?birthName = ""Tupac Amaru Shakur"" && ?person = dbr:Tupac_Shamakur) ||
    (?birthName = ""Joseph Anthony Cartagena"" && ?person = dbr:Joey_Bada$$)
  )
  
  OPTIONAL {
    ?artist dbo:associatedMusicalArtist ?person .
    FILTER NOT EXISTS { ?artist a dbo:Agent }
  }
}
```",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
585,17,train,Give me the child of the professional in the profession of Shirley Stoler and native of New York (state).,SELECT ?result WHERE { <http://dbpedia.org/resource/Shirley_Stoler> <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_(state)> . },"```sparql
# Step 1: Find Shirley Stoler's profession
SELECT ?profession WHERE {
    dbpedia:Shirley_Stoler dbo:occupation ?profession .
}

# Step 2: Confirm her birthplace is New York State
SELECT ?birthPlace WHERE {
    dbpedia:Shirley_Stoler dbo:birthPlace ?birthPlace .
    FILTER(CONTAINS(LCASE(str(?birthPlace)), ""new york""))
}

# Step 3: Find a professional in the same field from New York State
SELECT DISTINCT ?person WHERE {
    ?person dbo:occupation ?profession .
    ?person dbo:birthPlace ?birthPlace .
    FILTER(CONTAINS(LCASE(str(?birthPlace)), ""new york""))
    FILTER(?profession = <http://dbpedia.org/resource/Category:Actors_from_New_York_City>) # Assuming acting as profession
}

# Step 4: Identify the child of this professional
SELECT DISTINCT ?child WHERE {
    ?person dbo:child ?child .
}
```",4,4,5,3,2,3,2,20,0,0,9,0,0.0,0
941,4,train,"Who is the child, that is a royalty, of Princess Antoinette of Brunswick-Wolfenbüttel?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Antoinette_of_Brunswick-Wolfenbüttel> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child WHERE {
  ?princess a dbo:Person ;
            foaf:name ""Antoinette of Brunswick-Wolfenbüttel""@en .
  
  ?princess dbo:child ?child .

  OPTIONAL { 
    ?child dbo:royaltyTitle ?title .
  }

  FILTER EXISTS { ?child dbo:royaltyTitle ?title }
}
```",1,2,2,1,1,3,2,20,0,0,6,0,0.0,0
816,55,train,"Give me the parent of the child of Allan Arbus and actor of the movie, that is a work, with Herschel Bernardi and parent of the professional in Photographer.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v2 . ?result <http://dbpedia.org/ontology/child> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?v5 <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
# Step 1: Identify Allan Arbus's child
SELECT ?child WHERE {
  wd:Q123456 wdt:P40 ?child. # Allan Arbus's child (replace Q123456 with Allan Arbus's DBpedia ID)
}

# Step 2: Find the parent of that child
SELECT ?parent WHERE {
  ?child wdt:P22 ?parent.
}

# Step 3: Identify a movie featuring Herschel Bernardi and this person
SELECT DISTINCT ?movie WHERE {
  wd:Q123456 wdt:P161 ?actor. # Allan Arbus's child (replace Q123456 with the child's DBpedia ID)
  wd:Q78910 wdt:P161 ?actor.   # Herschel Bernardi (replace Q78910 with Herschel Bernardi's DBpedia ID)
  ?movie wdt:P161 ?actor.
}

# Step 4: Find the parent of the professional photographer
SELECT ?photographer WHERE {
  ?photographer wdt:P106 wd:Q13442814. # Photographer profession (replace Q13442814 with the DBpedia ID for Photographer)
}
SELECT ?parent WHERE {
  ?photographer wdt:P22 ?parent.
}

# Step 5: Check if there is any overlap or connection between the two parents
SELECT DISTINCT ?commonParent WHERE {
  VALUES (?parent1) { (<parent_id_from_step_2>) } # Replace <parent_id_from_step_2> with actual ID from step 2
  VALUES (?parent2) { (<parent_id_from_photographer>) } # Replace <parent_id_from_photographer> with actual ID from step 4
  ?commonParent wdt:P31 wd:Q5. # Ensure it's a human (replace Q5 with the DBpedia ID for human)
  FILTER (?commonParent = ?parent1 || ?commonParent = ?parent2)
}
```",6,7,7,2,3,3,3,71,0,0,1,0,0.0,0
159,12,train,Give me the commander in Great Turkish War and reference to George Ducas.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?description WHERE {
  # Find the commander of the Ottoman Empire during the Great Turkish War
  ?commander a dbo:MilitaryPerson ;
             dbo:office ""Grand Vizier""@en ;
             dbo:country ""Ottoman Empire"" ;
             dbo:spouse ?spouse .
  
  OPTIONAL { 
    ?commander dbo:description ?description .
  }
  
  # Check for any mention of George Ducas
  FILTER(CONTAINS(LCASE(?description), ""george ducas""))
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
103,42,train,"Give me the professional in Actor and professional in the alter ego of The Shadow and actor of the movie, that is a television show, with Richard E. Grant.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?v2 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor1 ?actor2 WHERE {
  # Actor whose profession is acting
  ?actor1 a dbo:Actor ;
          rdfs:label ?actorLabel1 .
  
  FILTER regex(?actorLabel1, ""Lamont Cranston"", ""i"") .

  # Richard E. Grant's movies or TV shows
  ?film dbo:starring dbr:Richard_E._Grant ;
        dbo:starring ?actor2 .
  
  # Ensure the actor is also an actor by profession
  ?actor2 a dbo:Actor ;
          rdfs:label ?actorLabel2 .

  FILTER regex(?actorLabel1, ""Lamont Cranston"", ""i"") .
}
```",5,6,6,2,3,3,3,71,0,0,9,0,0.0,0
78,0,train,Give me the associated musical artist of Stuart Tosh.,SELECT ?result WHERE { <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?band WHERE {
  ?person a dbo:Person ;
          foaf:name ""Stuart Tosh""@en .
  OPTIONAL { ?person dbo:associatedBand ?band . }
}
```",1,1,2,1,1,2,3,28,4,0,0,1.0,1.0,1.0
213,17,train,"Give me the birth place of Winston Chang and country of the work of the spouse, that is a writer, of Hu Jieqing.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Hu_Jieqing> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>. ?v3 <http://dbpedia.org/property/author> ?v0 . ?v3 <http://dbpedia.org/ontology/country> ?result . <http://dbpedia.org/resource/Winston_Chang> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query 1: Birth Place of Winston Chang
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Winston Chang""@en .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query 2: Country of Work of Hu Jieqing's Spouse (who is a writer)
SELECT ?country WHERE {
  ?huJieqing dbo:spouse ?spouse .
  ?spouse rdf:type dbo:Writer .
  ?spouse dbo:workLocation ?location .
  ?location geo:hasCountry ?country .
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
159,16,train,Give me the writer of the work of George Ducas.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/writer> ?result . ?v1 <http://dbpedia.org/property/writer> ""George Ducas""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?workLabel WHERE {
  ?person a dbo:Actor ;
          foaf:name ""George Ducas""@en .
  OPTIONAL { 
    ?work dbo:writer ?person ;
          rdfs:label ?workLabel .
    FILTER (lang(?workLabel) = 'en')
  }
}
```",2,2,3,2,1,3,3,71,0,0,4,0,0.0,0
871,34,train,Give me the parent of the awardee of the award of Rodney Lees and father of Arthur Stanley (politician).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v0 . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?parent WHERE {
  # Step 1: Find Rodney Lees' award
  ?award dbo:recipient dbr:Rodney_Lees .
  
  # Step 2: Identify the awardee of that award
  ?award dbo:recipient ?awardee .

  # Step 3: Determine the parent (likely father) of that awardee
  ?awardee dbo:father ?parent .

  # Step 4: Find Arthur Stanley's father
  dbr:Arthur_Stanley_(politician) dbo:father ?arthur_father .
  
  # Step 5: Ensure both individuals are the same person
  FILTER (?parent = ?arthur_father)
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
492,23,train,Give me the death place of the actor of The Sky Ranger (1928 film) and death place of the actor of Aladdin (1958 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v1 . ?v2 <http://dbpedia.org/ontology/deathPlace> ?result . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for ""The Sky Ranger"" (1928)
SELECT ?actorName ?deathPlace WHERE {
  ?film dbo:title ""The Sky Ranger""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1928) .
  ?film dbo:starring ?actor .
  ?actor rdfs:label ?actorName .
  OPTIONAL { ?actor dbo:deathPlace ?deathPlace . }
  FILTER(LANG(?actorName) = ""en"")
} ORDER BY ?actorName

UNION

# Query for ""Aladdin"" (1958)
SELECT ?actorName ?deathPlace WHERE {
  ?film dbo:title ""Aladdin""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1958) .
  ?film dbo:starring ?actor .
  ?actor rdfs:label ?actorName .
  OPTIONAL { ?actor dbo:deathPlace ?deathPlace . }
  FILTER(LANG(?actorName) = ""en"")
} ORDER BY ?actorName
```",4,4,5,2,2,2,3,28,0,0,1,0,0.0,0
513,4,train,"Give me the party, that is an organisation and a political party, of George Savage (politician).",SELECT ?result WHERE { <http://dbpedia.org/resource/George_Savage_(politician)> <http://dbpedia.org/ontology/party> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?party WHERE {
  ?person a dbo:Person ;
          foaf:name ""George Savage"" .
  ?person dbo:affiliation ?party .
  ?party a dbo:Organization, dbo:PoliticalParty .
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
816,16,train,Give me the professional in the profession of Eugène Cattin.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person ?name WHERE {
  # Identify Eugène Cattin's profession
  dbr:Eug%C3%A8ne_Cattin dbo:occupation ?profession .
  
  # Find other individuals with the same profession(s)
  ?person a dbo:Person ;
          dbo:occupation ?sameProfession .

  FILTER (?sameProfession = ?profession && ?person != dbr:Eug%C3%A8ne_Cattin)

  # Get names of these individuals
  OPTIONAL { ?person rdfs:label ?name . FILTER (lang(?name) = 'en') }
}
```",2,2,3,2,1,3,3,71,0,0,940,0,0.0,0
782,58,train,"Give me the reference to The Fabulous Thunderbirds and band of the band member of Eric Clapton and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . ?result <http://dbpedia.org/ontology/bandMember> ?v5 . ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?thunderbirds ?claptonBandMember ?nickCurranPersona ?associatedArtist WHERE {
  # The Fabulous Thunderbirds reference
  dbr:The_Fabulous_Thunderbirds a dbo:MusicalGroup ;
                                rdfs:label ?thunderbirds .

  # Band members of Eric Clapton
  OPTIONAL {
    ?claptonBandMember dbo:memberOf dbr:Eric_Clapton ;
                       rdfs:label ?bandMemberLabel .
  }

  # Nick Curran's musical artist persona
  dbr:Nick_Curran a dbo:Person ;
                  dbo:birthPlace ?curranBirthplace ;
                  dbo:profession dbr:MusicalArtist .

  OPTIONAL {
    ?nickCurranPersona dbo:associatedMusicalArtist ?associatedArtist ;
                       rdfs:label ?personaLabel .
  }

  # Connections between entities
  OPTIONAL {
    ?claptonBandMember dbo:associatedMusicalArtist ?thunderbirds .
  }
  
  OPTIONAL {
    ?nickCurranPersona dbo:associatedMusicalArtist ?thunderbirds .
  }
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
384,8,train,"Give me the party of the person born, that is an office holder and a politician, as Bruno Daniel Marie Paul Retailleau and party of Guillaume Peltier.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Guillaume_Peltier> <http://dbpedia.org/ontology/party> ?result . ?v1 <http://dbpedia.org/ontology/party> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/property/birthName> ""Bruno Daniel Marie Paul Retailleau""@en . }","```sparql
# Query for Bruno Retailleau's party
SELECT ?party WHERE {
  ?person foaf:name ""Bruno Daniel Marie Paul Retailleau""@en .
  ?person dbo:politicalParty ?party .
}

UNION

# Query for Guillaume Peltier's party
SELECT ?party WHERE {
  ?person foaf:name ""Guillaume Peltier""@en .
  ?person dbo:politicalParty ?party .
}
```",3,5,4,2,2,2,2,9,0,0,1,0,0.0,0
609,16,train,"Who is the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell?",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/governor> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?governor WHERE {
  # Step 1: Find Paulus Powell's birthplace
  dbr:Paulus_Powell dbo:birthPlace ?birthPlace .

  # Step 2: Ensure the birthplace is a region and an administrative region
  ?birthPlace rdf:type dbo:Region .
  ?birthPlace rdf:type dbo:AdministrativeRegion .

  # Step 3: Find the governor of this place
  ?birthPlace dbo:governor ?governor .

  # Step 4: Ensure the governor is a politician
  ?governor rdf:type dbo:Politician .
}
```",2,5,3,2,1,3,3,71,0,0,1,0,0.0,0
89,19,train,Give me the spouse of Saw Shwe Khet and child of the parent of Min Hla Htut of Pyakaung.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/parent> ?v0 . },"```sparql
# Step 1: Find Min Hla Htut's parents
SELECT ?parent WHERE {
    ?minHlaHtut dbp:birthPlace dbr:Pyakaung .
    ?minHlaHtut rdfs:label ""Min Hla Htut""@en .
    ?parent dbo:child ?minHlaHtut .
}

# Step 2: Find the children of Min Hla Htut's parents
SELECT DISTINCT ?child WHERE {
    # Replace ?parent with actual parent URIs found in step 1
    ?parent dbo:child ?child .
}

# Step 3: Identify which child is married to Saw Shwe Khet
SELECT ?spouse WHERE {
    ?sawShweKhet rdfs:label ""Saw Shwe Khet""@en .
    ?sawShweKhet dbo:spouse ?spouse .
    
    # Ensure the spouse is one of the children found in step 2
    VALUES (?child) { 
        # Replace with actual child URIs from step 2
    }
    FILTER(?spouse = ?child)
}
```

Note: The placeholders for parent and child URIs need to be replaced with actual values obtained from executing the first two queries.",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
782,46,train,Give me the band of the band member of Eric Clapton and reference to the real name of the band of Kim Wilson.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?result <http://xmlns.com/foaf/0.1/name> ?v1 . ?result <http://dbpedia.org/ontology/bandMember> ?v4 . ?v2 <http://xmlns.com/foaf/0.1/name> ?v1 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . },"```sparql
# Query for a band that Eric Clapton was a member of
SELECT ?band WHERE {
  wd:Q3473 dbo:memberOf ?band .
}

UNION

# Query to find the real name or alias of The Fabulous Thunderbirds (Kim Wilson's band)
SELECT ?realName WHERE {
  wd:Q1058788 rdfs:label ""The Fabulous Thunderbirds""@en.
  OPTIONAL { wd:Q1058788 skos:altLabel ?realName . }
}
```",5,5,6,3,2,3,3,71,0,0,2,0,0.0,0
737,40,train,"Give me the child of Albrecht, Duke of Württemberg and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria and child of Archduchess Margarete Sophie of Austria.","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v2 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/property/father> ?v2 . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?person WHERE {
  # Step 1: Find a child of Albrecht, Duke of Württemberg
  ?child dbo:parent dbr:Albrecht,_Duke_of_W%C3%BCrttemberg .
  
  # Step 2: Find the predecessor of that child
  ?predecessor dbo:successor ?child .

  # Step 3: Identify Archduchess Helena's spouse and their child
  ?spouse dbo:spouse dbr:Archduchess_Helena_of_Austria .
  ?helenaChild dbo:parent ?spouse .
  
  # Step 4: Find the royalty among these children
  ?royalty rdf:type dbo:Monarch .
  FILTER(?royalty = ?helenaChild) .

  # Step 5: Identify Archduchess Margarete Sophie's child
  ?margareteChild dbo:parent dbr:Archduchess_Margarete_Sophie_of_Austria .

  # Step 6: Match the conditions
  FILTER(?predecessor = ?royalty && ?royalty = ?margareteChild)
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
609,28,train,Give me the birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of Cece Bell and birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . },"```sparql
# Query for Vince Gilligan's birthplace
SELECT ?birthPlace WHERE {
  ?person dbo:award ""List of awards and nominations received by Vince Gilligan""@en.
  ?person foaf:name ""Vince Gilligan""@en.
  ?person dbp:birthPlace ?birthPlace.
}

UNION

# Query for Cece Bell's birthplace
SELECT ?birthPlace WHERE {
  ?person dbo:wikiPageRedirects dbc:Cece_Bell.
  ?person dbp:birthPlace ?birthPlace.
}

UNION

# Query for Glenn Youngkin's birthplace
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Glenn Youngkin""@en.
  ?person dbp:birthPlace ?birthPlace.
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
347,19,train,"Give me the commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France) and father of Eleonore of Austria, Queen of Poland.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v0 . <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:commanderOf ?war .
  ?person dbo:spouse ?eleonore .
  ?eleonore rdfs:label ""Eleonore of Austria, Queen of Poland""@en .
  ?person dbo:child ?eleonore .
  ?person dbo:militaryUnit dbr:2nd_Dragoon_Regiment_(France) .
}
```",3,6,4,2,2,3,3,71,0,0,1,0,0.0,0
492,1,train,Give me the death place of Carolyn Jones.,SELECT ?result WHERE { <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?deathPlace WHERE {
  ?person rdfs:label ""Carolyn Jones""@en .
  FILTER(STRSTARTS(LCASE(?personLabel), ""carolyn jones""))
  ?person dbo:deathPlace ?deathPlace .
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
347,32,train,"Give me the father of the child of Ferdinand III, Holy Roman Emperor and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v1 . }","```sparql
SELECT ?child ?father WHERE {
  ?person rdf:type dbo:Person .
  ?person foaf:name ""Ferdinand III"" .
  ?person dbo:spouse ?spouse .
  ?child dbo:parent ?person ;
         dbo:parent ?mother .
  ?person rdfs:label ?fatherLabel .
  FILTER(CONTAINS(LCASE(?fatherLabel), ""ferdinand iii""))
}
```",4,7,5,2,2,3,3,71,0,0,1,0,0.0,0
816,61,train,Give me the parent of the professional in the profession of Eugène Cattin and parent of the child of the spouse of Mariclare Costello.,SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/ontology/child> ?v5 . ?v1 <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . },"```sparql
# Query for Eugène Cattin's profession and its parent category
SELECT ?professionParent WHERE {
  ?eugeneCattin dbo:occupation ?profession .
  ?profession rdfs:subClassOf* ?professionParent .
  FILTER(STRSTARTS(LCASE(?eugeneCattin), ""eugene_cattin""))
}

UNION

# Query for Mariclare Costello's spouse's child and its parent category
SELECT ?childParent WHERE {
  ?mariclareCostello dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child rdfs:subClassOf* ?childParent .
  FILTER(STRSTARTS(LCASE(?mariclareCostello), ""mariclare_costello""))
}
```",6,6,7,3,2,3,3,71,0,0,2,0,0.0,0
213,2,train,Who is the person decedent at Taipei?,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Taipei> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person ;
          dbo:deathPlace dbr:Taipei .
  OPTIONAL { ?person rdfs:label ?name FILTER (lang(?name) = 'en') }
}
ORDER BY ?name
LIMIT 10
```",1,1,2,1,1,3,2,20,10,10,210,0.5,0.045454545454545456,0.08333333333333334
80,53,train,Give me the actor of the movie with the author of Smartbomb (book) and professional in the alter ego of The Shadow and actor of ATL (film).,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/property/starring> ?v3 . },"```sparql
# Query to find the author of the book ""Smartbomb""
SELECT ?author WHERE {
  ?book dcterms:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Query to find Lamont Cranston's professional identity (The Shadow)
SELECT ?professional WHERE {
  ?character rdfs:label ""Lamont Cranston""@en ;
             dbo:alterEgo ?shadow .
  ?shadow dbo:profession ?professional .
}

# Query to find the actor of the film ""ATL""
SELECT ?actor WHERE {
  ?film dcterms:title ""ATL""@en ;
        dbo:starring ?actor .
}

# Assuming we have identified the individuals from above queries, 
# we will now look for a movie that features all three and identify an actor.
# Replace <Author>, <Professional>, and <Actor> with actual URIs obtained from previous results.

SELECT DISTINCT ?movie ?actor WHERE {
  ?movie dbo:starring <Author> ;
         dbo:starring <Professional> ;
         dbo:starring <Actor> .
  ?movie dbo:starring ?actor .
}
```",6,6,7,3,3,3,3,71,0,0,4,0,0.0,0
293,29,train,"Give me the spouse of the actor of 1,000 Dollars a Minute and person born as Harriette Arlene Lake and party member of Republican Party (United States).","SELECT ?result WHERE { <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v3 . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . }","```sparql
SELECT ?spouse WHERE {
  ?actor foaf:name ""Clint Eastwood""@en .
  ?actor dbo:birthName ""Harriette Arlene Lake"" .
  ?actor dbo:partyMemberOf dbr:Republican_Party_(United_States) .
  ?actor dbo:spouse ?spouse .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
198,6,train,Give me the awardee of Gillmore Medal.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient WHERE {
  ?award a dbo:Award .
  ?award dbo:name ""Gillmore Medal""@en .
  ?award dbo:recipient ?recipient .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
361,24,train,"Give me the professional in the alter ego of The Shadow and actor of the album, that is a film and a work, of Lasso the Moon.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v1 . ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find Lamont Cranston as The Shadow's alter ego
  ?shadow dbo:alterEgo dbr:Lamont_Cranston .
  
  # Find Sting and his album ""Lasso the Moon""
  ?album dbo:title ""Lasso the Moon"" ;
         dbo:artist dbr:Sting .

  # Check if there is a film or work titled ""Lasso the Moon"" associated with Sting
  OPTIONAL {
    ?work dbo:title ""Lasso the Moon"" .
    ?work dbo:actor dbr:Sting .
  }

  # Ensure the actor of the album and the alter ego are connected through Sting
  ?actor rdfs:label ""Sting""@en .
}
```",4,6,5,2,2,2,3,28,0,0,3,0,0.0,0
905,33,train,"Give me the spouse of Charles II of Naples and parent of the father, that is a royalty, of the spouse of Maria of Bytom.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v0 . ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/father> ?v2 . },"```sparql
# Step 1: Find Charles II of Naples' spouse
SELECT ?spouse WHERE {
  dbpedia:Charles_II_of_Naples dbo:spouse ?spouse .
}

# Step 2: Find the father of Charles II's spouse
SELECT ?father WHERE {
  ?spouse dbo:parent ?father .
}

# Step 3: Find the paternal grandfather (father of the father) of Charles II's spouse
SELECT ?paternalGrandfather WHERE {
  ?father dbo:parent ?paternalGrandfather .
}

# Step 4: Find Maria of Bytom's spouse
SELECT ?spouse2 WHERE {
  dbpedia:Maria_of_Bytom dbo:spouse ?spouse2 .
}

# Step 5: Find the father of Maria of Bytom's spouse
SELECT ?father2 WHERE {
  ?spouse2 dbo:parent ?father2 .
}

# Step 6: Find the paternal grandfather (father of the father) of Maria of Bytom's spouse
SELECT ?paternalGrandfather2 WHERE {
  ?father2 dbo:parent ?paternalGrandfather2 .
}

# Step 7: Ensure both individuals are royalty and compare them
SELECT DISTINCT ?paternalGrandfather ?paternalGrandfather2 WHERE {
  { 
    ?spouse dbo:spouse dbpedia:Charles_II_of_Naples .
    ?spouse dbo:parent ?father .
    ?father dbo:parent ?paternalGrandfather .
    ?paternalGrandfather rdf:type dbo:Monarch .
  }
  UNION
  {
    ?spouse2 dbo:spouse dbpedia:Maria_of_Bytom .
    ?spouse2 dbo:parent ?father2 .
    ?father2 dbo:parent ?paternalGrandfather2 .
    ?paternalGrandfather2 rdf:type dbo:Monarch .
  }
  FILTER (?paternalGrandfather = ?paternalGrandfather2)
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
140,5,train,"Give me the ruling party, that is a political party and an organisation, in Westport, Connecticut.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. <http://dbpedia.org/resource/Westport,_Connecticut> <http://dbpedia.org/property/leaderParty> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party WHERE {
  ?westport dbo:type dbr:Town ;
            dbo:government ?government .
  
  OPTIONAL { ?government dbo:member ?official . }
  OPTIONAL { ?official dbo:affiliation ?party . }

  FILTER (CONTAINS(LCASE(str(?westport)), ""westport, connecticut""))
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
782,40,train,Give me the reference to the real name of the band of Kim Wilson and associated musical artist of Nick Curran and band of Kim Wilson.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v2 <http://xmlns.com/foaf/0.1/name> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ?v1 . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandName ?memberName ?associatedArtist ?artistName WHERE {
  # Information about The Fabulous Thunderbirds and Kim Wilson
  OPTIONAL {
    ?band a dbo:Band ;
          rdfs:label ""The Fabulous Thunderbirds""@en .
    ?band dbo:member ?member .
    ?member rdfs:label ?memberName .
    FILTER(CONTAINS(LCASE(?memberName), ""kim wilson""))
    BIND(""The Fabulous Thunderbirds"" AS ?bandName)
  }

  # Information about Nick Curran & His Graveworms and Nick Curran
  OPTIONAL {
    ?artist a dbo:MusicalArtist ;
            rdfs:label ""Nick Curran""@en .
    ?artist dbo:associatedBand ?associatedBand .
    ?associatedBand rdfs:label ?associatedArtist .
    FILTER(CONTAINS(LCASE(?associatedArtist), ""nick curran & his graveworms""))
    BIND(""Nick Curran"" AS ?artistName)
  }
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
687,9,train,Give me the player in Juan Carlos Molina (footballer) and player in Sergio Agüero.,SELECT ?result WHERE { <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?player ?team
WHERE {
  VALUES (?person ?label) { 
    (<http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> ""Juan Carlos Molina"") 
    (<http://dbpedia.org/resource/Sergio_Ag%C3%BCero> ""Sergio Agüero"")
  }
  
  ?player dbp:name ?label .
  ?player dbpedia-owl:birthName ?person .
  OPTIONAL { ?player dbp:team ?team . }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
668,29,train,Give me the person born as Darryl Paa Kwesi Bannerman-Martin and professional in the profession of Rod Argent and associated musical artist of $pacely.,"SELECT ?result WHERE { <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Darryl Paa Kwesi Bannerman-Martin""@en .
  ?person dbo:occupation dbr:Musician .
  ?person dbo:associatedBand dbr:The_Zombies .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
23,13,train,"Give me the entity in Colombia and party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . ?v0 <http://dbpedia.org/ontology/party> ?result . ?v0 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace ?partyAffiliation WHERE {
  VALUES ?person { dbr:Roy_Leonardo_Barreras_Montealegre }
  
  ?person dbo:birthPlace ?birthPlace .
  FILTER (lang(?birthPlace) = 'en' && regex(str(?birthPlace), ""Colombia""))

  OPTIONAL { 
    ?person dbo:partyAffiliation ?partyAffiliation .
    FILTER (lang(?partyAffiliation) = 'en')
  }
}
```",3,4,4,2,2,2,3,28,0,0,5,0,0.0,0
737,22,train,"Give me the child of the child, that is a royalty, of Archduke Charles Louis of Austria and predecessor of Carl, Duke of Württemberg.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Archduke Charles Louis of Austria and his children
  dbr:Archduke_Charles_Louis_of_Austria dbo:spouse ?spouse .
  
  # Find Marie Antoinette, daughter of Charles Louis
  ?spouse dbo:child dbr:Maria_Theresa_of_Austria .

  # Marie Antoinette's child who is royalty and predecessor to Carl, Duke of Württemberg
  dbr:Maria_Theresa_of_Austria dbo:child ?marie_therese_charlotte .
  
  ?marie_therese_charlotte a dbo:Person ;
    rdfs:label ""Marie Thérèse Charlotte""@en .

  # Check if Marie Thérèse Charlotte is an ancestor of Carl, Duke of Württemberg
  ?marie_therese_charlotte dbo:child ?descendant .
  
  ?descendant dbo:parent* dbr:Claude_François_Bonaventure_de_Buffet ;
              rdfs:label ""Carl, Duke of Württemberg""@en .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
198,43,train,"Give me the entity in Charleston, South Carolina and war of Amasa Tracy and force of the awardee of the award of Quincy Adams Gillmore.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity WHERE {
  # Find entities related to Amasa Tracy in the context of a war
  ?tracy dbo:occupation dbr:Military_person ;
         dbo:spouseOrPartner ?war .
  
  # Find Quincy Adams Gillmore and his award
  ?gillmore dbo:awardReceived dbr:Medal_of_Honor ;
            dbo:placeOfBirth ?charleston .

  # Ensure the war is related to Charleston, South Carolina
  ?war dbo:location dbr:Charleston,_South_Carolina .
  
  # Find entities that connect these individuals and locations
  ?entity dbo:relatedTo ?tracy ;
          dbo:relatedTo ?gillmore ;
          dbo:location ?charleston .
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
816,48,train,"Give me the actor of the movie, that is a work, with the person decedent at Los Angeles and parent of the child of Allan Arbus.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . ?v2 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT DISTINCT ?actor WHERE {
  # Step 1: Identify Allan Arbus and his children
  ?allanArbus dbp:name ""Allan Arbus""@en .
  ?child dbo:parent ?allanArbus ;
         rdf:type dbo:Child .

  # Step 2: Find the parent of Allan Arbus's child (other than Allan)
  ?parent dbo:child ?child .
  
  # Step 3: Identify a person who died in Los Angeles
  ?decedent dbo:deathPlace dbr:Los_Angeles ;
            dbo:causeOfDeath ?cause .

  # Step 4: Ensure the decedent is connected to a work classified as a movie
  ?work dbo:creator ?decedent ;
        rdf:type dbo:Film .
  
  # Step 5: Find an actor from that movie
  ?actor dbo:film ?work ;
         rdf:type dbo:Actor .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
87,2,train,Give me the actor of Always (1989 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT ?actor WHERE {
  ?film dbo:title ""Always""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1989)
  ?film dbo:starring ?actor .
}
```",1,1,2,1,1,2,3,28,0,0,5,0,0.0,0
288,8,train,Give me the theme of the show with Anumta Qureshi and native of Lahore.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Anumta_Qureshi> . ?v2 <http://dbpedia.org/ontology/openingTheme> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Lahore> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?theme WHERE {
  ?actor a dbo:Actor ;
         foaf:name ""Anumta Qureshi""@en .
  
  ?actor dbo:actedIn ?show .

  OPTIONAL { 
    ?show dbo:location dbr:Lahore .
  }

  ?show dbo:genre ?genre .
  
  FILTER (lang(?genre) = 'en')
}
```",3,3,4,2,2,2,2,9,0,0,1,0,0.0,0
258,0,train,Give me the establishment of 1955-12-02.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/foundingDate> ""1955-12-02""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity ?label WHERE {
    ?entity dbo:established ""1955-12-02""^^xsd:date .
    SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
386,9,train,Give me the war of Karl Gustav von Baggovut and war of Alexander Lvovich Davydov.,SELECT ?result WHERE { <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
SELECT ?war WHERE {
  ?war dbo:wikiPageRedirects db:Q1234 . # Assuming Q1234 is the identifier for the War of 1812 in DBpedia
}
```

Note: The exact DBpedia resource identifier (e.g., `db:Q1234`) for the War of 1812 should be verified from DBpedia to ensure accuracy.",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
557,49,train,"Give me the professional in the alter ego of The Shadow and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v1 . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v0 . ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
SELECT ?actor ?famousWork ?producer WHERE {
  # Find the actor from ""High Society Blues""
  ?movie dbo:starring ?actor .
  ?movie rdfs:label ""High Society Blues""@en .

  # Find the actor's claim to fame (most famous work)
  ?actor dbo:famousFor ?famousWork .

  # Identify The Shadow's alter ego and producer
  ?alterEgo dbo:alias ""Lamont Cranston"" .
  ?alterEgo dbo:producer ?producer .

  # Link the famous work to the producer of Lamont Cranston
  ?famousWork dbo:producer ?producer .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
311,1,train,Give me the band member of Mark Eitzel.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mark_Eitzel> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  dbr:Mark_Eitzel dbo:bandMember ?band .
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
353,33,train,"Give me the father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of Roger II of Sicily.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v3 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?father WHERE {
  wd:Q11696 wdt:P31/wdt:P279* wd:Q5; # Henry I of England (child who is royalty)
    wdt:P22 ?mother. # mother of Henry I

  ?reference wdt:P31/wdt:P279* wd:Q5; # reference who is royalty
             wdt:P39 ?office. # office holder

  FILTER(?reference = wd:Q11696) . # ensure the child is Henry I

  ?child wdt:P22 ?mother;
         wdt:P25 ?father. # find father of the child

  FILTER(?child = wd:Q11696) . # ensure the child is Henry I
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
361,18,train,"Give me the actor of the album, that is a film and a work, of Lasso the Moon and professional in .","SELECT ?result WHERE { <http://dbpedia.org/resource/Lasso_the_Moon> <http://dbpedia.org/ontology/album> ?v0 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?album rdfs:label ""Lasso the Moon""@en .
  ?album a dbo:Album ;
         dbo:workType dbr:Film ;
         dbo:workType dbr:Work .

  ?film dbo:starring ?actor .
  FILTER (strstarts(str(?film), str(?album)))

  ?actor a dbo:Actor .
}
```",3,5,4,2,2,2,3,28,0,0,3,0,0.0,0
375,10,train,"Give me the native, that is an artist and a musical artist, of the location, that is English and a settlement, for ,.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/postalCode> "","" . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom>. ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. }","```sparql
SELECT ?native ?locationLabel WHERE {
  ?location rdf:type dbo:PopulatedPlace ;
            dbo:country dbr:England ;
            rdfs:label ?locationLabel .
  
  FILTER(CONTAINS(LCASE(?locationLabel), ""settlement""))

  ?native dbo:nativePlace ?location ;
          dbo:occupation ?occupation .

  VALUES ?occupation { 
    dbc:Musical_artists
    dbc:Artists
  }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,6,3,2,1,3,2,20,0,0,659,0,0.0,0
595,40,train,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and commander in Third Taiwan Strait Crisis and author of Back to Work (book).",SELECT ?result WHERE { <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/property/author> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
SELECT ?spouse WHERE {
  ?billClinton dbo:spouse ?spouse .
  ?billClinton foaf:name ""Bill Clinton""@en .
}
```",5,9,6,3,3,3,3,71,0,0,1,0,0.0,0
80,27,train,Give me the professional in the alter ego of the series of The Golden Master.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character ?profession WHERE {
  ?series dbo:title ?title .
  FILTER regex(?title, ""The Golden Master"", ""i"") .
  
  ?character dbo:alias ?alias .
  ?alias rdfs:label ""The Golden Master""@en .

  OPTIONAL { ?character dbo:occupation ?profession . }
}
```",3,3,4,3,1,3,3,71,0,0,39640,0,0.0,0
871,44,train,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of the child of Frederick Stanley, 16th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v3 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?father WHERE {
    # Step 1: Identify children of Frederick Stanley, 16th Earl of Derby who are politicians
    ?child dbo:parent dbr:Frederick_Stanley,_16th_Earl_of_Derby .
    ?child dbo:occupation dbr:Politician .

    # Step 2: Find Victor Stanley's parents and match with the children from step 1
    ?victorParent dbo:child dbr:Victor_Stanley_(Royal_Navy_officer) .
    FILTER(?child = ?victorParent)

    # Step 3: Retrieve the father of the identified child
    ?father dbo:spouse ?mother .
    ?child dbo:parent ?father .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
159,43,train,Give me the reference to the writer of the work of George Ducas and successor of Yurii Khmelnytsky and commander in Great Turkish War.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v0 <http://dbpedia.org/property/writer> ?v4 . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . }","```sparql
SELECT ?person WHERE {
  ?person dbo:successor dbr:Yurii_Khmelnytsky .
  ?work dbo:author ?person ;
        dbo:wikiPageRedirects dbr:George_Ducas .
  ?event dbo:commander ?person ;
         rdfs:label ""Great Turkish War""@en .
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
737,21,train,"Give me the child of Archduchess Margarete Sophie of Austria and predecessor of the child of Philipp Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v1 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?childOfMargareteSophie WHERE {
  ?margareteSophie dbo:spouse ?husband .
  ?margareteSophie foaf:name ""Margarete Sophie of Austria""@en .
  ?margareteSophie dbo:child ?childOfMargareteSophie .

  ?philippAlbrecht dbo:spouse ?wife .
  ?philippAlbrecht foaf:name ""Philipp Albrecht, Duke of Württemberg""@en .
  ?philippAlbrecht dbo:child ?childOfPhilippAlbrecht .

  FILTER EXISTS {
    ?childOfMargareteSophie dbo:predecessor ?childOfPhilippAlbrecht
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
531,59,train,"Give me the tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v3 . ?v3 <http://dbpedia.org/property/residence> ?v2 . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/commander> ?v5 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?tenant1 ?tenant2 WHERE {
  # Find the leader of the 2003 Madrid City Council election
  ?person1 dbo:officeHolderOf dbr:Madrid_City_Council_Election_2003 .
  
  # Find the commander in a force associated with Manuel Pinto da Costa
  ?person2 dbo:commanderIn ?force .
  ?force dbo:associatedWith dbr:Manuel_Pinto_da_Costa .

  # Get the residence (tenant) of these individuals
  ?person1 dbo:residence ?residence1 .
  ?residence1 dbo:tenant ?tenant1 .

  ?person2 dbo:residence ?residence2 .
  ?residence2 dbo:tenant ?tenant2 .
}
```",6,11,7,3,2,3,3,71,0,0,2,0,0.0,0
531,36,train,"Give me the tenant of Madrid and office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v0 . ?v1 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/property/leader> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party ?leader ?office ?madridOffice WHERE {
  # Step 1: Identify Miguel Maura and his political party
  dbr:Miguel_Maura dbo:memberOf ?party .

  # Step 2: Find the leader of that political party
  ?party dbo:leader ?leader .

  # Step 3: Determine the office held by this leader
  ?leader dbo:office ?office .

  # Step 4: Find the tenant (office) in Madrid for this leader
  OPTIONAL {
    ?leader dbo:location ?madridOffice .
    FILTER(CONTAINS(LCASE(str(?madridOffice)), ""madrid""))
  }
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
905,32,train,"Give me the spouse of the father of Philip I, Prince of Taranto and parent of the father, that is a royalty, of Charles I of Hungary.","SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v3 . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v1 . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Philip I, Prince of Taranto
  ?philip dbo:father ?father .
  ?philip dbp:name ""Philip I, Prince of Taranto""@en .

  # Step 2: Find his father
  ?father dbp:name ?fatherName .

  # Step 3: Determine the spouse of Philip I's father
  ?father dbo:spouse ?spouse .

  # Step 4: Identify the parent of Charles I of Hungary
  ?charlesI dbo:father ?grandFather .
  ?charlesI dbp:name ""Charles I of Hungary""@en .

  # Step 5: Find the commonality
  ?grandFather dbp:mother|dbp:father ?spouse .

  # Step 6: Ensure the person is royalty
  ?spouse rdf:type dbo:Monarch .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
871,40,train,"Give me the parent of Edward Stanley, 17th Earl of Derby and father of Arthur Stanley (politician) and parent of the awardee of the award of Rodney Lees.","SELECT ?result WHERE { <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v0 . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/awards> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  ?person rdfs:label ""Edward Stanley, 17th Earl of Derby""@en .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child1 .
  ?spouse dbo:child ?child2 .
  
  FILTER(CONTAINS(LCASE(?child1), ""arthur stanley (politician)""))
  OPTIONAL { 
    ?awardee dbo:awardReceived dbr:Rodney_Lees_Award .
    ?awardee dbo:parent ?person .
  }
  
  ?person dbo:parent ?parent .
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
89,4,train,Give me the parent of Min Hla Htut of Pyakaung.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?person dbo:name ""Min Hla Htut""@en .
  OPTIONAL { ?person dbo:birthPlace dbr:Pyakaung . }
  ?person dbo:parent ?parent .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
905,38,train,"Give me the child of the child, that is a royalty, of Béla IV of Hungary and parent of the father, that is a royalty, of Charles I of Hungary.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?result <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Find Béla IV of Hungary's children
SELECT ?child WHERE {
    wd:Q123456 wdt:P40 ?child .
}

# Step 2: For each child, find their children who are royalty (Béla IV's grandchildren)
SELECT DISTINCT ?grandchild WHERE {
    ?child wdt:P40 ?grandchild .
    ?grandchild wdt:P39 wd:Q11424 . # P39 is the property for ""royalty""
}

# Step 3: Find Charles I of Hungary's father
SELECT ?father WHERE {
    wd:Q1234567 wdt:P22 ?father .
}

# Step 4: Find the parent (grandparent) of Charles I's father
SELECT DISTINCT ?grandparent WHERE {
    ?father wdt:P40 ?grandparent .
}

# Final step: Match the grandchild from Béla IV with the grandparent of Charles I's father
SELECT DISTINCT ?commonIndividual WHERE {
    ?grandchild wdt:P40 ?commonIndividual .
    ?commonIndividual wdt:P40 ?grandparent .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Béla IV of Hungary and `wd:Q1234567` with the DBpedia ID for Charles I of Hungary. The property `P39` is used here as a placeholder for ""royalty"" which might need to be adjusted based on the exact schema in DBpedia.",4,6,5,2,2,3,3,71,0,0,1,0,0.0,0
293,32,train,"Give me the party member of the ruling party in Central, Louisiana and spouse of the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v1 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v1 . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v3 . ?v3 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
# Step 1: Find the ruling party member in Central, Louisiana
SELECT ?person WHERE {
  ?governor dbo:officeHolderOf dbr:Council_of_Central,_Louisiana .
  ?governor dbo:partyAffiliation ?party .
}

UNION

SELECT ?person WHERE {
  ?mayor dbo:officeHolderOf dbr:Municipal_government_of_Central,_Louisiana .
  ?mayor dbo:partyAffiliation ?party .
}

# Step 2: Find the actor of ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
  ?movie dbo:title ""1,000 Dollars a Minute""@en .
  ?movie dbo:starring ?actor .
}

# Step 3: Find the spouse of that actor
SELECT ?spouse WHERE {
  ?actor dbo:spouse ?spouse .
}

# Step 4: Check if there is any overlap between the party member and the spouse
SELECT DISTINCT ?person WHERE {
  VALUES (?party) { ?party }
  ?governor dbo:officeHolderOf dbr:Council_of_Central,_Louisiana .
  ?governor dbo:partyAffiliation ?party .

  UNION

  ?mayor dbo:officeHolderOf dbr:Municipal_government_of_Central,_Louisiana .
  ?mayor dbo:partyAffiliation ?party .

  ?movie dbo:title ""1,000 Dollars a Minute""@en .
  ?movie dbo:starring ?actor .
  ?actor dbo:spouse ?spouse .
  
  FILTER(?governor = ?spouse || ?mayor = ?spouse)
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
782,38,train,"Give me the band of the band member of Eric Clapton and associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?result <http://dbpedia.org/ontology/bandMember> ?v3 . ?v2 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . }","```sparql
# Step 1: Find bands associated with Eric Clapton
SELECT ?band WHERE {
  ?clapton dbo:member ?band .
  ?clapton foaf:name ""Eric Clapton""@en .
}

UNION

# Step 2: Find Nicholas Michael Curran's associated musical artist
SELECT ?artist WHERE {
  ?curran dbo:birthPlace ?place .
  ?curran foaf:name ""Nicholas Michael Curran""@en .
  ?curran dbo:associatedMusicalArtist ?artist .
}

# Step 3: Find common band/artist between Eric Clapton and Nicholas Michael Curran
SELECT DISTINCT ?commonBand WHERE {
  # Bands associated with Eric Clapton
  ?clapton dbo:member ?band .
  ?clapton foaf:name ""Eric Clapton""@en .

  # Associated musical artist of Nicholas Michael Curran
  ?curran dbo:birthPlace ?place .
  ?curran foaf:name ""Nicholas Michael Curran""@en .
  ?curran dbo:associatedMusicalArtist ?artist .

  # Check for commonality
  FILTER (?band = ?artist)
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
159,47,train,"Give me the successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/writer> ?v4 . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . }","```sparql
# Step 1: Identify a commander in the Russo-Polish War (1654–1667)
SELECT ?commander WHERE {
  ?event dbo:wikiPageWikiLink dbr:Russo-Polish_War_(1654%E2%80%931667) .
  ?event dbo:agent ?commander .
  ?commander rdf:type dbo:MilitaryPerson .
}

# Step 2: Find the successor who is a politician and office holder
SELECT DISTINCT ?successor WHERE {
  # Assuming we have identified a commander, replace <Commander_URI> with actual URI
  ?commander dbo:succeededBy ?successor .
  ?successor rdf:type dbo:Politician ;
             dbo:officeHolder true .
}

# Step 3: Reference to the writer of the work of George Ducas
SELECT DISTINCT ?writer WHERE {
  ?work dbo:author ?writer .
  ?work dbo:wikiPageWikiLink dbr:George_Ducas .
}
```

Note: The above query is a template and requires specific URIs for commanders identified in Step 1. Additionally, the exact properties and classes might need adjustments based on DBpedia's schema.",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
80,41,train,Give me the professional in  and actor of the album of What You Know (T.I. song) and actor of the movie with .,"SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v4 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v2 <http://dbpedia.org/property/starring> """"@en . }","```sparql
# Step 1: Find the album associated with ""What You Know"" by T.I.
SELECT ?album WHERE {
    dbpedia:What_You_Know_(T.I._song) dbo:partOf ?album .
}

# Step 2: Identify producers of that album
SELECT DISTINCT ?producer WHERE {
    ?album dbo:producer ?producer .
    FILTER(?album IN (<http://dbpedia.org/resource/Urban_Legend_(T.I._album)>))
}

# Step 3: Find an actor involved in both the album and a movie
SELECT DISTINCT ?actor WHERE {
    # Actor associated with the album (e.g., featured artist)
    ?album dbo:featuredArtist ?actor .
    
    # Ensure this actor is also known for acting in movies
    ?actor rdf:type dbpedia-owl:Actor .
    
    # Find any movie they acted in
    ?movie dbo:starring ?actor .
}
```",5,5,6,2,3,3,3,71,0,0,4,0,0.0,0
213,4,train,"Who is the spouse, that is a writer, of Hu Jieqing?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>. ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Hu_Jieqing> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?spouse WHERE {
  ?huJieqing dbo:spouse ?spouse .
  FILTER (str(?huJieqing) = ""Hu_Jieqing"")
  
  OPTIONAL { ?spouse dbo:occupation ?occupation . }
  OPTIONAL { ?spouse dbp:profession ?profession . }

  FILTER (
    (?occupation = dbpedia:Writer || 
     ?profession = dbpedia:Writer)
  )
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
103,5,train,"Give me the actor, that is a politician, of Ab Kya Hoga.",SELECT ?result WHERE { <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?movie dbo:title ""Ab Kya Hoga""@en .
  ?movie dbo:starring ?actor .
  OPTIONAL { ?actor dbo:occupation dbr:Politician . }
  FILTER EXISTS { ?actor dbo:occupation dbr:Politician . }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
668,10,train,Give me the associated musical artist of $pacely and person born as Darryl Paa Kwesi Bannerman-Martin.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?artist WHERE {
  # Get musical works of Lil Wayne
  ?work dbo:performer dbr:Lil_Wayne .
  
  # Get collaborators on those works
  ?work dbo:composer ?collaborator .

  # Ensure the collaborator is also a performer in Stevie Wonder's works
  ?stevieWork dbo:performer dbr:Stevie_Wonder .
  ?stevieWork dbo:composer ?collaborator .

  BIND(?collaborator AS ?artist)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
737,29,train,"Give me the child of the child of Duke Philipp of Württemberg and predecessor of Carl, Duke of Württemberg and child of Archduchess Margarete Sophie of Austria.","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?grandchild WHERE {
  ?philipp dbo:child ?child1 .
  FILTER(STR(?philipp) = ""Duke Philipp of Württemberg"") .

  ?child1 dbo:child ?grandchild .
  
  ?grandchild dbo:parent ?margareteSophie .
  FILTER(STR(?margareteSophie) = ""Archduchess Margarete Sophie of Austria"") .

  OPTIONAL { 
    ?carl dbo:predecessor ?grandchild .
    FILTER(STR(?carl) = ""Carl, Duke of Württemberg"")
  }
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
756,14,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?teamName WHERE {
  ?letsch a dbo:Person ;
          foaf:name ""Thomas Letsch""@en .
  
  ?letsch dbo:managerOf ?team .
  ?team a dbo:SoccerClub ;
        rdfs:label ?teamName .

  FILTER(LANG(?teamName) = 'en')
}
```",2,5,3,2,1,3,3,71,0,0,5,0,0.0,0
668,45,train,"Give me the associated musical artist of $pacely and person born as the birth name of the native, that is an artist, of Central Region, Ghana and professional in Musician.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Central_Region,_Ghana> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?v0 <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
SELECT ?artist WHERE {
  # For Pacely (Pac-Man)
  OPTIONAL {
    ?pacManArtist dbo:associatedMusicalArtist dbr:Pac-Man .
    ?pacManArtist rdfs:label ?artistLabel .
    FILTER(CONTAINS(LCASE(?artistLabel), ""buckner & garcia""))
  }
  
  UNION
  
  # For Shatta Wale
  OPTIONAL {
    ?shattaWale dbo:birthName ?birthName .
    ?shattaWale dbo:nationality dbr:Ghana .
    ?shattaWale dbo:birthPlace dbr:Central_Region,_Ghana .
    ?shattaWale dbo:profession dbr:Musician .
    ?shattaWale rdfs:label ?artistLabel .
    FILTER(LCASE(?artistLabel) = ""shatta wale"")
  }
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
375,5,train,Give me the child of Toyotomi Hideyoshi.,SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child ?childLabel WHERE {
  ?s dbo:child ?child .
  ?child rdfs:label ?childLabel .
  FILTER (lang(?childLabel) = 'en')
  VALUES ?s {<http://dbpedia.org/resource/Toyotomi_Hideyoshi>}
}
```",1,1,2,1,1,2,3,28,2,2,1,0.5,0.6666666666666666,0.5714285714285715
668,11,train,Give me the associated musical artist of the person born as Elorm Kabu Amenyah.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?artist WHERE {
  ?person foaf:name ""Elorm Kabu Amenyah""@en .
  ?person dbo:birthName ""Elorm Kabu Amenyah"" .
  ?person foaf:name ?artist .
}
```",2,2,3,2,1,3,3,71,0,0,7,0,0.0,0
737,42,train,"Give me the child of the child, that is a royalty, of Archduke Charles Louis of Austria and predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . }","```sparql
# Step 1: Find a notable child of Archduke Charles Louis of Austria
SELECT ?child WHERE {
    ?person dbo:spouse ?spouse .
    ?person rdfs:label ""Archduke Charles Louis of Austria""@en .
    ?person dbo:child ?child .
    FILTER(LANG(?child) = 'en')
}

# Step 2: Find the child of that child who is royalty
SELECT ?royalChild WHERE {
    ?parent dbo:child ?child .
    VALUES ?parent { <URI_of_Child_from_Step1> } # Replace with actual URI from step 1
    ?child dbo:child ?royalChild .
    ?royalChild dbo:title ?title .
    FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") || 
           CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""duke""))
}

# Step 3: Find a notable child of Philipp Albrecht, Duke of Württemberg
SELECT ?child WHERE {
    ?person dbo:spouse ?spouse .
    ?person rdfs:label ""Philipp Albrecht, Duke of Württemberg""@en .
    ?person dbo:child ?child .
    FILTER(LANG(?child) = 'en')
}

# Step 4: Find the predecessor of that child
SELECT ?predecessor WHERE {
    ?succession dbo:succeeds ?predecessor .
    VALUES ?succession { <URI_of_Child_from_Step3> } # Replace with actual URI from step 3
}

# Step 5: Find a notable child of Albrecht, Duke of Württemberg
SELECT ?child WHERE {
    ?person dbo:spouse ?spouse .
    ?person rdfs:label ""Albrecht, Duke of Württemberg""@en .
    ?person dbo:child ?child .
    FILTER(LANG(?child) = 'en')
}

# Step 6: Match the royalty from step 2 with the predecessor from step 4
SELECT DISTINCT ?royalChild WHERE {
    VALUES ?predecessor { <URI_of_Predecessor_from_Step4> } # Replace with actual URI from step 4
    ?parent dbo:child ?royalChild .
    FILTER(?royalChild = ?predecessor)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
39,50,train,"Give me the band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v0 <http://dbpedia.org/property/alterEgo> ?v4 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v4 . }","```sparql
SELECT ?band WHERE {
  ?person foaf:name ""Kool & The Gang""@en .
  ?person dbo:birthName ""Robert Lamar Thompson""@en .
  ?person dbo:profession dbr_Musician .
  ?person dbo:associatedBand ?band .
}
```",5,8,6,3,2,3,3,71,0,0,4,0,0.0,0
386,3,train,Give me the birth place of Elena Žalinkevičaitė-Petrauskienė.,SELECT ?result WHERE { <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthPlace WHERE {
  ?person a dbo:Person ;
          foaf:name ""Elena Žalinkevičaitė-Petrauskienė""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,2,3,28,3,0,0,1.0,1.0,1.0
353,60,train,"Give me the child of the parent of the child, that is a royalty, of Roger II of Sicily and child of the child of the spouse, that is a royalty, of Constance of Burgundy.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?finalChild WHERE {
  # Step 1: Identify Roger II of Sicily
  ?roger2 a dbo:Monarch ;
          foaf:name ""Roger II of Sicily""@en .

  # Step 2: Find his child who is royalty
  ?child1 dbo:parent ?roger2 ;
         a dbo:Monarch .

  # Step 3: Identify the parent of this royal child
  ?parentOfChild1 dbo:child ?child1 .

  # Step 4: Identify Constance of Burgundy
  ?constance a dbo:Monarch ;
             foaf:name ""Constance of Burgundy""@en .

  # Step 5: Find her spouse who is royalty
  ?spouse dbr:Constance_of_Burgundy dbo:spouse ;
          a dbo:Monarch .

  # Step 6: Identify a child of this royal spouse
  ?child2 dbo:parent ?spouse .

  # Step 7: Find a child of the previously identified child
  ?finalChild dbo:parent ?child2 .
}
```",6,8,7,3,2,3,3,71,0,0,4,0,0.0,0
595,41,train,"Give me the commander in Third Taiwan Strait Crisis and author of the work, that is a written work and a book and a work, of Bill Clinton and spouse of the author, that is a politician and an office holder, of An Invitation to the White House.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v2 . ?v4 <http://dbpedia.org/property/author> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?author ?spouse WHERE {
  # Commander in Third Taiwan Strait Crisis
  VALUES (?event) { dbr:Third_Taiwan_Strait_Crisis }
  ?event dbo:commanderInCharge ?commander .
  
  # Author of ""An Invitation to the White House""
  ?book a dbo:Book ;
        rdfs:label ""An Invitation to the White House""@en ;
        dbo:author ?author .

  # Spouse of the author
  ?author dbo:spouse ?spouse .
  ?spouse a dbo:Politician ;
          dbo:officeHolder true .
}
```",5,10,6,2,3,3,3,71,0,0,1,0,0.0,0
353,53,train,"Give me the father of William II of Sicily and child of the parent of the child, that is a royalty, of Roger II of Sicily and child of the child of Alfonso VI of León and Castile.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father ?childOfChild WHERE {
  # William II of Sicily's father
  dbr:William_II_of_Sicily dbo:father ?father .
  
  # Roger II of Sicily is the father of William II
  FILTER(?father = dbr:Roger_II_of_Sicily)
  
  # Child of Roger II who is royalty
  ?childOfRoger dbo:parent ?father ;
               a dbo:Monarch .

  # Alfonso VI's child
  dbr:Alfonso_VI_of_León_and_Castile dbo:child ?alfonsoChild .
  
  # Child of Alfonso VI's child (Urraca)
  ?grandchildOfAlfonso dbo:parent ?alfonsoChild ;
                      a dbo:Monarch .

  # Find the connection
  FILTER(?childOfRoger = dbr:Tancred_of_Lecce) # Assuming Tancred is the royalty child of Roger II
  FILTER(?grandchildOfAlfonso = dbr:Alfonso_VII_of_León_and_Castile)
  
  # Return the father and a notable child connection
  VALUES ?father {dbr:Roger_II_of_Sicily}
  VALUES ?childOfChild {dbr:Tancred_of_Lecce dbr:Alfonso_VII_of_León_and_Castile}
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
557,17,train,"Give me the claim to fame, that is a movie and a work, of the actor of High Society Blues.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/knownFor> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie WHERE {
  ?actor a dbo:Actor ;
         foaf:name ""Woody Harrelson""@en .
  
  ?actor dbo:filmRole ?role .
  ?role dbo:work ?movie .

  FILTER(CONTAINS(LCASE(STR(?movie)), ""natural born killers""))
}
```",2,4,3,2,1,3,3,71,0,0,3,0,0.0,0
595,8,train,"Give me the war, that is a disease and a societal event, of United States Navy.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?war WHERE {
  ?n navy dbp:participatedInWar ?war .
  FILTER (str(?n) = ""United States Navy"")
  
  OPTIONAL { 
    ?war dbo:description ?desc .
    FILTER (
      CONTAINS(LCASE(str(?desc)), ""societal event"") ||
      CONTAINS(LCASE(str(?desc)), ""disease"") ||
      CONTAINS(LCASE(str(?desc)), ""impact"") ||
      CONTAINS(LCASE(str(?desc)), ""conflict"")
    )
  }
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
89,61,train,"Give me the spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v5 . ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?v1 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v5 . ?result <http://dbpedia.org/ontology/successor> ?v3 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?spouseOfFather WHERE {
  # Step 1: Find Saw Shwe Khet's child who is royalty
  ?childShweKhet dbo:parent dbr:Saw_Shwe_Khet ;
                a dbo:Monarch .

  # Step 2: Find the predecessor of that child
  ?predecessor dbo:succeededBy ?childShweKhet ;
               a dbo:Monarch .

  # Step 3 & 4: Identify and ensure the spouse of this predecessor is royalty
  ?spousePredecessor dbo:spouse ?predecessor ;
                     a dbo:Monarch .

  # Step 5: Find Saw Min Phyu's child who is royalty
  ?childMinPhyu dbo:parent dbr:Saw_Min_Phu ;
                a dbo:Monarch .

  # Step 6: Identify the father of this child
  ?fatherChildMinPhyu dbo:spouse ?motherChildMinPhyu ;
                     dbo:child ?childMinPhyu .

  # Step 7 & 8: Find and ensure the spouse of this father is royalty
  ?spouseFatherChildMinPhyu dbo:spouse ?fatherChildMinPhyu ;
                           a dbo:Monarch .

  # Step 9: Identify the spouse of the father (from step 6) who is royalty
  ?spouseOfFather dbo:spouse ?fatherChildMinPhyu ;
                  a dbo:Monarch .
}
```",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
595,31,train,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and author of Back to Work (book).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/property/author> ?v0 . ?v0 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  # Identify the book authored by Hillary Clinton
  dbr:Back_to_Work_(book) dbo:author dbr:Hillary_Clinton .

  # Find the spouse of Hillary Clinton who is also a politician and office holder
  dbr:Hillary_Clinton dbo:spouse ?spouse .
  
  # Ensure that the spouse is a politician and an office holder (e.g., President)
  ?spouse a dbo:Politician ;
         dbo:officeHolderOf dbr:United_States_President .
}
```",4,8,5,3,2,3,3,71,0,0,1,0,0.0,0
756,48,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v3 . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://dbpedia.org/ontology/team> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
# Step 1: Find the successor of the 2006–07 VfL Bochum season
SELECT ?successor WHERE {
  ?vflBochumSeason dbo:sport dbr:Soccer .
  ?vflBochumSeason dbo:season ""2006–07"" .
  ?vflBochumSeason dbo:club dbr:VfL_Bochum .
  ?vflBochumSeason dbo:successor ?successor .
}

# Step 2: Find Thomas Letsch's team during the successor season
SELECT DISTINCT ?team WHERE {
  ?letschTeam dbo:manager dbr:Thomas_Letsch .
  ?letschTeam dbo:sport dbr:Soccer .
  ?letschTeam dbo:season ?successor .
  
  # Ensure it is a soccer club and sports organization
  ?letschTeam rdf:type dbp:Soccer_Club ;
              rdf:type dbp:Sports_Organization .
}

# Step 3: Find a player from Thomas Letsch's team
SELECT DISTINCT ?player WHERE {
  ?teamPlayer dbo:playsFor ?team .
  ?teamPlayer rdf:type dbp:Footballer .
  
  # Ensure it is a soccer club and sports organization
  ?team rdf:type dbp:Soccer_Club ;
        rdf:type dbp:Sports_Organization .
}

# Step 4: Determine the manager of this player
SELECT DISTINCT ?manager WHERE {
  ?player dbo:currentManager ?manager .
}
```",5,14,6,3,2,3,3,71,0,0,1,0,0.0,0
398,0,train,Give me the figure known as Наши парни / Nashi parni.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/nickname> ""Наши парни / Nashi parni""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?title WHERE {
  ?movie a dbo:Film .
  ?movie dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""our guys""))
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
609,10,train,Give me the birth place of Vince Gilligan and birth place of Cece Bell.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name ?birthPlace WHERE {
  VALUES (?name) { (""Vince Gilligan"" ""Cece Bell"") }
  
  ?person foaf:name ?name .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
782,27,train,"Give me the associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?associatedArtist WHERE {
  # Identify Nick Curran as a musical artist
  dbr:Nick_Curran dbo:musicalArtistOf ?nickCurranEntity .
  
  # Find the birth name or associated persona of Nick Curran
  ?nickCurranEntity dbo:birthName ?persona .

  # Check if this persona is also a musical artist and find their associated artists
  OPTIONAL { ?persona dbo:musicalArtistOf ?associatedArtist . }
  
  FILTER(?associatedArtist != dbr:Nick_Curran)
}
```",3,4,4,3,1,3,3,71,0,0,3,0,0.0,0
905,50,train,"Give me the child of the child, that is a royalty, of Béla IV of Hungary and parent of the father, that is a royalty, of the spouse of Maria of Bytom.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v1 <http://dbpedia.org/property/father> ?v3 . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v3 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
# Step 1: Find Béla IV's children
SELECT ?child WHERE {
  wd:Q12345 wdt:P40 ?child .
}

# Step 2: Identify grandchildren who are royalty
SELECT DISTINCT ?grandchild WHERE {
  ?child wdt:P40 ?grandchild .
  ?grandchild wdt:P39 wd:Q11424 . # P39 is the property for ""royalty""
}

# Step 3: Find Maria of Bytom's spouse
SELECT ?spouse WHERE {
  wd:Q123456 wdt:P26 ?spouse .
}

# Step 4: Identify the father of this spouse who is royalty
SELECT DISTINCT ?father WHERE {
  ?spouse wdt:P22 ?father .
  ?father wdt:P39 wd:Q11424 . # P39 is the property for ""royalty""
}

# Step 5: Find the parent of this royal father
SELECT DISTINCT ?parent WHERE {
  ?father wdt:P22 ?parent .
}

# Combine steps to find the required individual
SELECT DISTINCT ?grandchild WHERE {
  wd:Q12345 wdt:P40 ?child .
  ?child wdt:P40 ?grandchild .
  ?grandchild wdt:P39 wd:Q11424 . # Grandchild is royalty

  wd:Q123456 wdt:P26 ?spouse .
  ?spouse wdt:P22 ?father .
  ?father wdt:P39 wd:Q11424 . # Father of spouse is royalty
  ?father wdt:P22 ?parent .

  FILTER(?grandchild = ?parent)
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
213,9,train,"Who is the child, that is a politician, of the person decedent at Taipei?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Taipei> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?childLabel WHERE {
  ?parent dbo:deathPlace dbr:Taipei .
  ?parent dbo:child ?child .
  ?child dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(STR(?occupation)), ""politician""))
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,3,3,2,1,3,2,20,0,0,2,0,0.0,0
609,54,train,"Give me the birth place of Cece Bell and birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the awardee of List of awards and nominations received by Vince Gilligan.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/governor> ?v5 . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for Cece Bell's Birth Place
SELECT ?birthPlace WHERE {
  dbpedia:Cece_Bell dbo:birthPlace ?birthPlace .
}

# Query for Paulus Powell's Birth Place and Region
SELECT ?birthPlace ?region WHERE {
  dbpedia:Paulus_Powell dbo:birthPlace ?birthPlace .
  OPTIONAL { ?birthPlace dbo:partOfRegion ?region . }
}

# Assuming the region is a US state, query for its governor
# Replace `?state` with the actual URI of the state obtained from the previous query
SELECT ?governor WHERE {
  ?state dbo:governmentOfficial ?office .
  ?office rdf:type dbpedia:Governor .
  ?office dbo:person ?governor .
}

# Query for Vince Gilligan's Awardee
SELECT ?award WHERE {
  dbpedia:Vince_Gilligan dbo:awardReceived ?award .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
375,3,train,"Give me the movie, that is a work and a television show, with Vera Lynn.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Vera_Lynn> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?work WHERE {
  ?work a dbo:Film .
  ?work a dbo:TelevisionSeries .
  ?work dbo:starring dbr:Vera_Lynn .
  OPTIONAL { ?work dbo:performerIn dbr:Vera_Lynn . }
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
203,16,train,"Give me the war, that is a military conflict and an event, of the reference to William Bayne.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?war a dbo:MilitaryConflict ;
       a dbo:Event .
  ?war dbo:wikiPageWikiLink dbr:William_Bayne .
}
```",2,4,3,2,1,3,3,71,0,0,5,0,0.0,0
871,28,train,"Give me the parent of Edward Stanley, 17th Earl of Derby and father of Arthur Stanley (politician) and parent of the awardee of Commander of the Royal Victorian Order.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
  ?person1 rdfs:label ""Edward Stanley, 17th Earl of Derby""@en .
  ?person2 rdfs:label ""Arthur Stanley (politician)""@en .
  
  ?person1 dbo:child ?commonChild .
  ?person2 dbo:child ?commonChild .

  ?parent dbo:child ?person1 .
  OPTIONAL { ?parent dbo:honorReceived dbr:Commander_of_the_Royal_Victorian_Order . }

  FILTER (lang(?person1) = 'en' && lang(?person2) = 'en')
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
595,26,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/author> ?result . ?v2 <http://dbpedia.org/property/author> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
SELECT ?author WHERE {
  ?person dbo:residenceLocation dbr:Chappaqua,_New_York ;
          rdf:type dbo:Politician .
  ?work dbo:author ?person ;
        rdf:type dbo:Book ;
        dbo:abstract ?description .
  FILTER CONTAINS(LCASE(?description), ""living history"")
}
```",3,8,4,3,1,3,3,71,0,0,3,0,0.0,0
151,3,train,Give me the award of Charles Parsons (British Army officer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_Parsons_(British_Army_officer)> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?person rdfs:label ""Charles Parsons (British Army officer)""@en .
  ?person dbo:occupation dbr:Military_officer .
  ?person dbo:honorificPrefix ?prefix .
  OPTIONAL { ?person dbo:honorificSuffix ?suffix . }
  OPTIONAL { ?person dbo:dateOfBirth ?dob . }
  OPTIONAL { ?person dbo:dateOfDeath ?dod . }
  
  ?person dbo:award ?award .
}
```",1,1,2,1,1,2,2,9,0,0,5,0,0.0,0
941,9,train,"Who is the parent, that is a royalty, of the child of Ferdinand Albert II, Duke of Brunswick-Lüneburg?","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg> . }","```sparql
SELECT ?parent WHERE {
  ?child dbo:childOf dbr:Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg .
  ?child dbo:parent ?parent .
  ?parent a dbo:Monarch ; 
          rdfs:label ?label .
  FILTER (LANG(?label) = 'en')
}
```",2,3,3,2,1,3,2,20,0,0,2,0,0.0,0
628,46,train,"Give me the person born as the birth name of Bobby Shmurda and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v4 . },"```sparql
# Step 1: Identify GS9 and its members
SELECT ?member WHERE {
  wd:Q1234567 wdt:P127* ?member .
}

# Step 2: Filter members who are both artists and musical artists
SELECT DISTINCT ?artist WHERE {
  ?artist wdt:P106 wd:Q33999 . # Artist
  ?artist wdt:P21 wd:Q5 .       # Musical artist
  ?artist wdt:P463* ?member .   # Member of GS9
}

# Step 3: Find associated musical artists for these members
SELECT DISTINCT ?associatedArtist WHERE {
  ?artist wdt:P436 ?associatedArtist .
}

# Step 4: Identify band members of these associated musical artists
SELECT DISTINCT ?bandMember WHERE {
  ?associatedArtist wdt:P127* ?bandMember .
}

# Step 5: Find the birth name of Bobby Shmurda
SELECT ?birthName WHERE {
  wd:Q1234568 wdt:P735 ?birthName .
}

# Step 6: Match the birth name with a band member
SELECT DISTINCT ?matchedBandMember WHERE {
  ?bandMember wdt:P735 ""Ackquille Jean Pollard""@en .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia identifier for GS9 and `wd:Q1234568` with the identifier for Bobby Shmurda.",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
756,26,train,"Give me the native of the administration, that is a country, of the leader of West Germany.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
SELECT ?nativePlaceLabel WHERE {
  ?person dbo:occupation dbr/Chancellor_of_West_Germany .
  ?person foaf:name ""Konrad Adenauer""@en .
  ?person dbp:nationality dbr/Germany .
  ?person dbp:birthPlace ?nativePlace .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",3,4,4,3,1,3,3,71,0,0,5170,0,0.0,0
557,56,train,"Give me the producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and professional in the alter ego of The Shadow and producer of The Adventures of Tom Sawyer (1938 film).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v0 <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . },"```sparql
# Step 1: Find actor in ""High Society Blues""
SELECT ?actor WHERE {
  ?movie dbo:title ""High Society Blues""@en .
  ?movie dbo:starring ?actor .
}

UNION

# Step 2: Identify alter ego of The Shadow
SELECT ?alterEgoActor WHERE {
  ?character rdfs:label ""The Shadow""@en .
  ?character dbo:portrayedBy ?alterEgoActor .
}

UNION

# Step 3: Find producer of ""The Adventures of Tom Sawyer"" (1938 film)
SELECT ?producer WHERE {
  ?movie dbo:title ""The Adventures of Tom Sawyer""@en ;
         dbo:productionYear ""1938""^^xsd:gYear ;
         dbo:producer ?producer .
}

# Step 4: Identify common individual
SELECT DISTINCT ?commonIndividual WHERE {
  VALUES ?role { ?actor ?alterEgoActor ?producer }
  ?commonIndividual rdf:type dbo:Actor ;
                    dbo:alternateName ?role .
}

# Step 5: Determine claim to fame and its producer
SELECT ?claimToFame ?producer WHERE {
  ?commonIndividual dbo:claimToFame ?claimToFame .
  ?claimToFame dbo:producer ?producer .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
816,12,train,Give me the parent of Doon Arbus and parent of Amy Arbus.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?parentName WHERE {
  VALUES ?person { 
    dbr:Doon_Arbus 
    dbr:Amy_Arbus 
  }
  
  ?person dbo:parent ?parent .
  ?parent rdfs:label ?parentName .
  FILTER (lang(?parentName) = 'en')
}
```",2,2,3,1,2,3,3,71,0,4,2,0.0,0.0,0
737,50,train,"Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and child of the child, that is a royalty, of Archduke Charles Louis of Austria.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v3 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?commonDescendant WHERE {
  # Alexander of Württemberg's lineage
  ?alexander dbo:child ?firstChild1 .
  FILTER(STR(?alexander) = ""Alexander_of_W%C3%BCrttemberg_(1804-1881)"")

  ?firstChild1 dbo:child ?secondChild1 .
  
  ?secondChild1 dbo:child ?thirdChild1 .

  # Archduke Charles Louis of Austria's lineage
  ?charlesLouis dbo:child ?firstChild2 .
  FILTER(STR(?charlesLouis) = ""Archduke_Charles_Louis_of_Austria"")

  ?firstChild2 dbo:child ?secondChild2 .

  # Check if any second child from Archduke Charles Louis is royalty
  OPTIONAL { ?secondChild2 dbp:title ?title . FILTER(CONTAINS(LCASE(?title), ""royalty"")) }

  # Find common descendant who is a royalty
  VALUES ?commonDescendant { ?thirdChild1 ?secondChild2 }
  
  OPTIONAL {
    ?commonDescendant dbp:title ?descendantTitle .
    FILTER(CONTAINS(LCASE(?descendantTitle), ""royalty""))
  }
}
```",5,6,6,3,2,3,3,71,0,0,2,0,0.0,0
386,2,train,Give me the war of Alexander Lvovich Davydov.,SELECT ?result WHERE { <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?davydov dbo:wikiPageID ?id .
  ?davydov rdfs:label ""Alexander Lvovich Davydov""@en .
  
  OPTIONAL { ?davydov dbo:militaryConflict ?war . }
  FILTER (isLiteral(?war) = false)
}
```",1,1,2,1,1,2,3,28,0,0,15,0,0.0,0
756,36,train,"Give me the manager of VfL Bochum and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v1 <http://dbpedia.org/ontology/manager> ?v0 . <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v0 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://dbpedia.org/ontology/manager> ?result . }","```sparql
# Query to get the manager of VfL Bochum
SELECT ?manager WHERE {
  ?team dbo:officialName ""VfL Bochum""@en .
  ?team dbo:coach ?manager .
}

UNION

# Query to find the sports manager born on 1968-08-26
SELECT ?sportsManager WHERE {
  ?person dbo:birthday ""1968-08-26""^^xsd:date ;
          rdf:type dbo:SportsManager .
  ?person foaf:name ?sportsManager .
}

UNION

# Query to find the team managed by this sports manager
SELECT ?teamName WHERE {
  ?manager dbo:managedTeam ?team .
  ?team rdfs:label ?teamName .
}
```",4,8,5,3,2,3,3,71,0,0,1,0,0.0,0
198,57,train,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and force of the awardee of the award of Quincy Adams Gillmore and war of Amasa Tracy.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> ?v5 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v5 <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/place> ?v3 . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
# Step 1: Find Henry Clay Lewis's birthplace
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
}

# Step 2: Check if the birthplace is a settlement and American
SELECT ?settlement WHERE {
  ?birthPlace wdt:P31/wdt:P279* wd:Q515 . # Settlement type
  ?birthPlace wdt:P17 wd:Q30 .            # Country of America
}

# Step 3: Find Quincy Adams Gillmore's award
SELECT ?award WHERE {
  wd:Q654321 wdt:P166 ?award .
}

# Step 4: Identify the war associated with Amasa Tracy
SELECT ?war WHERE {
  wd:Q789012 wdt:P39 ?war .
}

# Step 5: Find the force related to Quincy Adams Gillmore's award
SELECT ?force WHERE {
  ?award wdt:P361 ?relatedAward .        # Related awards or categories
  ?relatedAward wdt:P31/wdt:P279* wd:Q12345 . # Force type
}
```

Note: Replace `wd:Q123456`, `wd:Q654321`, and `wd:Q789012` with the actual DBpedia identifiers for Henry Clay Lewis, Quincy Adams Gillmore, and Amasa Tracy respectively. The placeholders like `wd:Q515`, `wd:Q30`, and `wd:Q12345` should be replaced with the correct DBpedia resource URIs for settlement, America, and force type.",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
668,0,train,Give me the associated musical artist of $pacely.,SELECT ?result WHERE { <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?artist ?alias WHERE {
  ?entity a dbo:MusicalArtist .
  OPTIONAL { ?entity rdfs:label ""Pacely""@en . }
  OPTIONAL { ?entity dbo:alsoKnownAs ?alias . }
  FILTER (lang(?alias) = 'en')
  BIND(strafter(STR(?entity), str(dbr:)) AS ?artist)
}
```",1,1,2,1,1,3,3,71,0,0,7,0,0.0,0
89,47,train,"Give me the child of the parent of Min Hla Htut of Pyakaung and spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v4 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v2 . },"```sparql
# Step 1: Find Min Hla Htut of Pyakaung's parent
SELECT ?parent WHERE {
    ?minHlaHtut dbo:spouse ?parent .
    ?minHlaHtut foaf:name ""Min Hla Htut""@en .
}

# Step 2: Find the spouse of this parent
SELECT ?spouse WHERE {
    ?parent dbo:spouse ?spouse .
}

# Step 3: Identify Saw Shwe Khet's child that is a royalty
SELECT ?royalChild WHERE {
    ?sawShweKhet dbo:child ?royalChild .
    ?royalChild rdf:type dbo:Monarch .
    ?sawShweKhet foaf:name ""Saw Shwe Khet""@en .
}

# Step 4: Find the father of this royal child
SELECT ?father WHERE {
    ?royalChild dbo:parent ?father .
}

# Step 5: Determine the spouse of this father
SELECT ?spouseOfFather WHERE {
    ?father dbo:spouse ?spouseOfFather .
}

# Step 6: Identify the child of this spouse that is a royalty
SELECT ?finalRoyalChild WHERE {
    ?spouseOfFather dbo:child ?finalRoyalChild .
    ?finalRoyalChild rdf:type dbo:Monarch .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
159,41,train,"Give me the reference to the writer of Always the Love Songs and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and commander in Great Turkish War.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/successor> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v2 . <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v4 . },"```sparql
SELECT ?person WHERE {
  ?book dcterms:creator ?person .
  VALUES ?book { <http://dbpedia.org/resource/Always_the_Love_Songs> } .

  OPTIONAL {
    ?person dbo:successorOf ?commander .
    ?commander dbo:war ?russianPolishWar .
    VALUES ?russianPolishWar { <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> }
  }

  OPTIONAL {
    ?person dbo:officeHolder ?office .
    ?office dbo:heldDuring ?event .
    ?event dbo:war ?russianPolishWar .
    VALUES ?russianPolishWar { <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> }
  }

  OPTIONAL {
    ?person dbo:commanderOf ?greatTurkishWar .
    ?greatTurkishWar dbo:war <http://dbpedia.org/resource/Great_Turkish_War> .
  }

  FILTER EXISTS { ?person rdfs:label ""John III Sobieski""@en }
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
633,3,train,"Give me the parent, that is a royalty and a noble, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent ?title WHERE {
  VALUES ?person { dbr:François_Ier,_Duc_de_Lorraine }
  
  ?person dbo:father|dbo:mother ?parent .
  OPTIONAL { ?parent dbo:title ?title . FILTER(CONTAINS(LCASE(?title), ""duke"") || CONTAINS(LCASE(?title), ""royalty"")) }
}
```",1,3,2,1,1,3,2,20,0,0,1,0,0.0,0
782,3,train,Give me the band of Kim Wilson.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . },"```sparql
SELECT ?band WHERE {
  dbpedia:Kim_Wilson dbo:associatedBand ?band .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
737,27,train,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . },"```sparql
SELECT ?grandchild WHERE {
  # Step 1: Find the parent of Archduchess Margarete Sophie of Austria
  ?parent dbo:child dbr:Archduchess_Margarete_Sophie_of_Austria .

  # Step 2: Find the children of that parent
  ?sibling dbo:parent ?parent .
  
  # Step 3: For each sibling, find their children (grandchildren of Archduchess Margarete Sophie)
  ?child dbo:parent ?sibling .

  # Step 4: Check if any of these grandchildren have a royal title
  OPTIONAL { ?child dbo:royalTitle ?title . }
  
  FILTER EXISTS { ?child dbo:royalTitle ?title } .
}
```",3,4,4,3,1,3,3,71,0,0,2,0,0.0,0
347,15,train,"Give me the war, that is a societal event and an event and a television show, of the military force of Algerian War.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/battle> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?war a dbo:Event .
  ?war dbo:socialEvent true .
  ?war dbo:wikiPageRedirects ?redirect .
  OPTIONAL { ?war dbo:wikiPageWikiLink ?tvShow . }
  
  FILTER EXISTS {
    ?tvShow a dbo:TelevisionSeries .
    ?tvShow dbo:subject ?war .
  }

  VALUES ?redirect { dbr:Algerian_War }
}
```",2,5,3,2,1,3,3,71,0,0,5,0,0.0,0
628,14,train,"Give me the native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?nativePlace WHERE {
  ?award dbo:recipient dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico .
  OPTIONAL { ?award dbo:nativePlace ?place . }
  FILTER (
    EXISTS { ?place rdfs:label ""Puerto Rico""@en } ||
    EXISTS { ?place rdfs:label ""United States"" && ?place dbo:state dbr:Puerto_Rico } ||
    EXISTS { ?place rdfs:label ""Settlement""@en && ?place dbo:country dbr:Puerto_Rico }
  )
}
```",2,6,3,2,1,3,3,71,0,0,8569,0,0.0,0
737,9,train,"Give me the child of Albrecht, Duke of Württemberg and predecessor of Carl, Duke of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . }","```sparql
SELECT ?child WHERE {
  ?albrecht dbo:spouse ?parent .
  ?parent foaf:name ""Albrecht, Duke of Württemberg""@en .
  ?albrecht dbo:child ?child .
  
  ?carl dbo:predecessor ?predecessor .
  ?predecessor foaf:name ""Carl, Duke of Württemberg""@en .
  ?predecessor dbo:spouse ?parent2 .
  ?parent2 foaf:name ""Wilhelm II, Duke of Urach""@en .

  FILTER(?child = ?predecessor)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
557,47,train,"Give me the professional in the alter ego of The Shadow and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/knownFor> ?v4 . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v4 <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Step 1: Find the alter ego of The Shadow
SELECT ?actor WHERE {
  ?shadow dbo:alterEgo dbr:The_Shadow .
  ?shadow dbo:portrayedBy ?actor .
}

# Step 2: Find the producer of The Shadow's claim to fame
SELECT ?producer WHERE {
  ?work dbo:starring ?actor .
  ?work dbo:productionCompany ?company .
  ?company dbo:president ?producer .
  FILTER(?actor IN (?actorFromStep1))
}

# Step 3: Find the actor who played Johnny Doughboy
SELECT ?actor WHERE {
  dbr:A_Tree_Grows_in_Brooklyn dbo:character dbr:Johnny_Doughboy .
  dbr:A_Tree_Grows_in_Brooklyn dbo:starring ?actor .
}

# Step 4: Identify the professional role of that actor
SELECT ?profession WHERE {
  ?actor dbo:occupation ?profession .
  FILTER(?actor IN (?actorFromStep3))
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
293,48,train,Give me the party member of the ruling party in the landmark at elevation of 20.116800000000001347 and person born as the birth name of Ann Sothern.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v2 . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . ?v3 <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v3 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . }","```sparql
# Step 1: Find the landmark at the specified elevation
SELECT ?landmark WHERE {
  ?landmark dbp:elevation ""20.116800000000001347""^^xsd:float .
}

# Step 2: Find the person born as Ann Sothern
SELECT ?person WHERE {
  ?person foaf:name ""Ann Sothern""@en ;
          dbo:birthName ""Ann Sothern""@en .
}

# Assuming we have identified a landmark and a person, let's say:
# ?landmark = <http://dbpedia.org/resource/Some_Landmark>
# ?person = <http://dbpedia.org/resource/Ann_Sothern>

# Step 3: Determine the ruling party at the location of the landmark
SELECT ?rulingParty WHERE {
  <http://dbpedia.org/resource/Some_Landmark> dbo:location <http://dbpedia.org/resource/Location_of_the_Landmark> .
  <http://dbpedia.org/resource/Location_of_the_Landmark> dbo:government <http://dbpedia.org/resource/Government_of_the_Location> .
  <http://dbpedia.org/resource/Government_of_the_Location> dbo:headOfGovernment ?leader .
  ?party dbo:hasMember ?leader ;
         rdf:type dbo:PoliticalParty .
  FILTER EXISTS { ?party dbo:isRulingParty ""true"" }
}

# Step 4: Find a member of the ruling party
SELECT ?member WHERE {
  ?rulingParty dbo:hasMember ?member .
}
```",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
816,21,train,"Give me the parent of Doon Arbus and actor of the movie, that is a work, with Herschel Bernardi.",SELECT ?result WHERE { <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Query to find the parent of Doon Arbus
SELECT ?parent WHERE {
  dbpedia:Doon_Arbus dbo:parent ?parent .
}

UNION

# Query to find a movie with Herschel Bernardi and an actor from that movie
SELECT DISTINCT ?actor WHERE {
  ?movie dbo:starringHerschelBernardi dbpedia:Herschel_Bernardi ;
         dbo:starring ?actor .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
89,43,train,"Give me the predecessor of Myat Hpone Pyo and spouse of the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet and child of Saw Min Hla.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v4 . ?v0 <http://dbpedia.org/property/father> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor ?spouse WHERE {
  # Find Myat Hpone Pyo's predecessor
  ?myatHponePyo a dbo:Person ;
                foaf:name ""Myat Hpone Pyo""@en .
  
  ?predecessor dbo:successor ?myatHponePyo .

  # Identify the child of Saw Shwe Khet and Saw Min Hla who is royalty
  ?sawShweKhet a dbo:Person ;
               foaf:name ""Saw Shwe Khet""@en .
  
  ?sawMinHla a dbo:Person ;
             foaf:name ""Saw Min Hla""@en .

  ?royalChild dbo:parent ?sawShweKhet, ?sawMinHla ;
              a dbo:RoyalFamilyMember .

  # Find the father of this royal child and his spouse who is royalty
  ?father dbo:child ?royalChild .
  
  ?spouse dbo:spouse ?father ;
          a dbo:RoyalFamilyMember .
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
353,5,train,"Who is the reference, that is a royalty and an office holder, to William I?","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?successor WHERE {
  ?williamI rdf:type dbo:Monarch ;
            foaf:name ""William I""@en .
  ?williamI dbo:successor ?successor .
  ?successor rdf:type dbo:Monarch .
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
151,5,train,Give me the entity in the birthplace of Burhan Belge.,SELECT ?result WHERE { <http://dbpedia.org/resource/Burhan_Belge> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?result <http://dbpedia.org/ontology/country> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlaceEntity WHERE {
  dbr:Burhan_Belge dbo:birthPlace ?birthPlaceEntity .
}
```",2,2,3,2,1,2,2,9,0,2,249,0.0,0.0,0
386,18,train,Give me the war of the awardee of Golden Sword for Bravery and war of Karl Gustav von Baggovut.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> ?result . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . <http://dbpedia.org/resource/Karl_Gustav_von_Baggovut> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
# Query to find a recipient of the Golden Sword for Bravery and their associated war
SELECT ?recipient ?war WHERE {
  ?recipient dbo:award dbpedia:Gold_Sword_of_St._George .
  ?recipient dbo:militaryConflict ?war .
}

UNION

# Query to find wars Karl Gustav von Baggovut participated in
SELECT ?person ?war WHERE {
  ?person rdfs:label ""Karl Gustav von Baggovut""@en .
  ?person dbo:militaryConflict ?war .
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
263,0,train,Give me the native of Middlesex.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:birthPlace dbr:Middlesex .
  ?person rdfs:label ?name .
  FILTER (LANG(?name) = 'en')
}
```",1,1,2,1,1,2,3,28,916,916,19,0.5,0.9796791443850268,0.6620889049512108
293,31,train,Give me the party member of the ruling party in the landmark at elevation of 20.116800000000001347 and spouse of Roger Pryor (actor).,"SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . ?v1 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?result <http://dbpedia.org/ontology/party> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?partyMember WHERE {
  # Find the landmark with the specified elevation
  ?landmark a dbo:Lighthouse ;
            dbo:elevationAboveSeaLevel ""20.116800000000001347""^^xsd:float .

  # Determine the ruling party at this location
  ?location dbo:isPartOfCity ?city .
  ?city dbo:government ?government .
  ?government dbo:rulingParty ?party .

  # Find a member of this party who is married to Roger Pryor
  ?member dbo:memberOfPoliticalParty ?party ;
          dbo:spouse dbr:Roger_Pryor_(actor) .

  # Ensure the landmark and location are related
  FILTER(?landmark = ?location)
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
905,24,train,"Give me the child of Stephen V of Hungary and parent of the father, that is a royalty, of Charles I of Hungary.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v2 . },"```sparql
SELECT ?person WHERE {
  # Step 1: Find Stephen V of Hungary's child
  ?stephenV dbo:child ?child .
  FILTER(STRSTARTS(LCASE(?stephenV), ""stephen v of hungary""))

  # Step 2: Identify the father of that child (which is Stephen V himself)
  ?father dbo:parent ?child .

  # Step 3: Find the parent of the father (Stephen V's parent)
  ?grandParent dbo:parent ?father .
  
  # Ensure this person is royalty and related to Charles I
  ?charlesI rdfs:label ""Charles I of Hungary""@en .
  OPTIONAL { ?grandParent dbo:spouse ?charlesI . }
  FILTER(STRSTARTS(LCASE(?grandParent), ""elisabeth of thuringia"") || STRSTARTS(LCASE(?grandParent), ""elizabeth of bohemia""))
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
756,59,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and native of the administration, that is a country, of the leader of West Germany.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/team> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . ?v5 <http://dbpedia.org/property/leader> ?v0 . ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. },"```sparql
SELECT ?manager WHERE {
  # Identify the 2006-07 VfL Bochum season
  ?season dbo:club dbr:VfL_Bochum ;
          dbo:sport dbr:Soccer ;
          dbo:startDate ?start_date ;
          dbo:endDate ?end_date .
  
  FILTER (YEAR(?start_date) = 2006 && YEAR(?end_date) = 2007)

  # Determine the successor season, 2007-08 VfL Bochum
  ?successorSeason dbo:club dbr:VfL_Bochum ;
                   dbo:sport dbr:Soccer ;
                   dbo:startDate ?successor_start_date ;
                   dbo:endDate ?successor_end_date .
  
  FILTER (YEAR(?successor_start_date) = 2007 && YEAR(?successor_end_date) = 2008)

  # Identify the manager during the successor season
  ?manager dbo:managedTeam ?successorSeason .

  # Find a player managed by this person
  ?player dbo:manager ?manager ;
          dbo:playsFor ?team .
  
  # Determine the sports club and organization associated with this player
  ?team rdf:type dbr:Soccer_club ;
        dbo:sport dbr:Soccer .

  # Identify the successor season related to these entities
  ?teamSeason dbo:club ?team ;
              dbo:sport dbr:Soccer ;
              dbo:startDate ?team_season_start_date ;
              dbo:endDate ?team_season_end_date .
  
  FILTER (YEAR(?team_season_start_date) > YEAR(?successor_start_date))

  # Find the administration's country
  ?leader dbo:nationality dbr:Germany ;
          dbo:position dbr:Chancellor_of_Germany .

  # Determine the native of this administration
  ?native dbo:nationality dbr:Germany .
  
  FILTER (?player = ?native)
}
```",6,13,7,3,2,3,3,71,0,0,1,0,0.0,0
288,6,train,Give me the theme of the show with Anumta Qureshi.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/openingTheme> ?result . ?v0 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Anumta_Qureshi> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?theme WHERE {
  ?person foaf:name ""Anumta Qureshi""@en.
  ?person dbo:performerIn ?show.
  OPTIONAL { ?show dbo:genre ?theme. }
}
```",2,2,3,2,1,2,2,9,0,0,1,0,0.0,0
557,24,train,"Give me the producer of A Star Is Born (1937 film) and producer of the claim to fame, that is a work, of Cora Sue Collins.",SELECT ?result WHERE { <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v2 . ?v2 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
SELECT ?producer1 ?producer2 WHERE {
  # Query for the producer of ""A Star Is Born"" (1937 film)
  dbpedia:Star_Is_Born_(1937_film) dbo:producer ?producer1 .

  # Query for a notable work associated with Cora Sue Collins and its producer
  ?collinsWork dbo:wikiPageDisambiguates dbpedia:Cora_Sue_Collins .
  ?collinsWork dbo:producer ?producer2 .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
513,17,train,"Give me the entity in United Kingdom and residence of the leader of the party, that is an organisation and a political party, of George Savage (politician).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. <http://dbpedia.org/resource/George_Savage_(politician)> <http://dbpedia.org/ontology/party> ?v0 . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://dbpedia.org/ontology/leader> ?v3 . ?v3 <http://dbpedia.org/ontology/residence> ?result . },"```sparql
SELECT ?party ?leader ?residence ?entityInUK WHERE {
  # Find George Savage's political party
  ?savage dbo:occupation dbr:Member_of_Parliament.
  ?savage foaf:name ""George Savage""@en.
  ?savage dbo:memberOf ?party.
  
  # Identify the leader of this party
  ?leader dbo:positionHeld ?partyPosition.
  ?partyPosition dbo:positionTitle dbr:Leader_of_the_Labour_Party.
  ?leader foaf:name ?leaderName.

  # Find the residence of the leader
  ?leader dbo:residenceLocation ?residence.

  # Identify an entity in the UK related to this residence
  ?entityInUK a dbo:Residence;
              dbo:locationCountry dbr:United_Kingdom.
  FILTER(?residence = ?entityInUK)
}
```",4,6,5,3,2,3,2,20,0,0,2,0,0.0,0
39,4,train,Give me the profession of Sam Concepcion.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?occupation WHERE {
  ?s dbp:name ""Sam Concepcion""@en .
  ?s dbo:occupation ?occupation .
}
```",1,1,2,1,1,3,3,71,1,0,6,1.0,0.14285714285714285,0.25
585,8,train,Give me the child of the professional in Actress.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/occupation> ""Actress""@en . ?v0 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?childClass WHERE {
  ?childClass rdfs:subClassOf* dbo:Actress .
  FILTER(?childClass != dbo:Actress)
}
```",2,2,3,2,1,3,2,20,0,0,935,0,0.0,0
80,2,train,Give me the professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . }","```
# No valid query can be constructed without specifying the profession.
```",1,1,2,1,1,3,3,71,0,0,39640,0,0.0,0
905,40,train,"Give me the child of Stephen V of Hungary and parent of Charles Martel of Anjou and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?child ?spouse WHERE {
  # Step 1: Find Stephen V of Hungary's child who is also a parent of Charles Martel of Anjou
  ?stephenV dbo:child ?child .
  FILTER (str(?stephenV) = ""Stephen_V_of_Hungary"")
  
  ?child dbo:parent dbr:Charles_Martel_of_Anjou .

  # Step 2: Find the spouse of the father of Charles Martel of Anjou
  ?father dbo:spouse ?spouse .
  ?child dbo:parent ?father .

  # Ensure the spouse is royalty
  ?spouse a dbo:Monarch ;
         dbo:country dbr:Romania .

  # Step 3: Connect to Philip, Despot of Romania
  OPTIONAL {
    ?spouse dbo:child ?philip .
    FILTER (str(?philip) = ""Philip,_Despot_of_Romania"")
  }
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
492,17,train,Give me the death place of Sal Mineo and death place of the actor of Color Me Dead.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v1 . <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query to find the death place of Sal Mineo
SELECT ?deathPlace WHERE {
  dbpedia:Sal_Mineo dbo:deathPlace ?deathPlace .
}

# Query to find the main actor of ""Color Me Dead"" and their death place
SELECT ?actor ?deathPlace WHERE {
  # Find the movie resource for ""Color Me Dead""
  ?movie rdfs:label ""Color Me Dead""@en .

  # Find the main actor associated with this movie
  ?movie dbo:starring ?actor .
  
  # Get the death place of that actor
  ?actor dbo:deathPlace ?deathPlace .
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
89,49,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of the parent of Min Hla Htut of Pyakaung.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?predecessor WHERE {
  # Step 1: Identify Saw Min Phyu
  ?sawMinPhyu a dbo:Person ;
              rdfs:label ""Saw Min Phyu""@en .

  # Step 2: Find Spouse of Saw Min Phyu
  ?spouse dbo:spouse ?sawMinPhyu .

  # Step 3: Check if the Spouse is Royalty
  ?spouse dbp:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""royalty""))

  # Step 4: Identify Child of the Spouse
  ?child dbo:parent ?spouse .

  # Step 5: Find Predecessor of the Child
  ?predecessor dbo:succeededBy ?child .

  # Step 6: Identify Min Hla Htut of Pyakaung
  ?minHlaHtut a dbo:Person ;
              rdfs:label ""Min Hla Htut""@en ;
              dbp:residence ""Pyakaung"" .

  # Step 7: Find Parent of Min Hla Htut
  ?parent dbo:child ?minHlaHtut .

  # Step 8: Find Child of the Parent
  ?matchingChild dbo:parent ?parent .

  # Step 9: Match with Step 4
  FILTER(?child = ?matchingChild)
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
89,31,train,Give me the spouse of Saw Shwe Khet and child of the parent of the child of Minye Kyawswa.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v0 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v1 . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
# Step 1: Find Minye Kyawswa and his child
SELECT ?child WHERE {
    dbpedia:Minye_Kyawswa dbo:child ?child .
}

# Step 2: Identify the spouse of Saw Shwe Khet
SELECT ?spouse WHERE {
    dbpedia:Saw_Shwe_Khet dbo:spouse ?spouse .
}

# Step 3: Find the child of Minye Kyawswa (which is also the parent in step 3)
SELECT ?child WHERE {
    dbpedia:Minye_Kyawswa dbo:child ?child .
}

# Step 4: Combine to find the final answer
SELECT ?finalChild WHERE {
    # The spouse of Saw Shwe Khet
    dbpedia:Saw_Shwe_Khet dbo:spouse ?spouse .

    # Minye Kyawswa's child (which is also his parent in this context)
    dbpedia:Minye_Kyawswa dbo:child ?parentChild .

    # The final child we are looking for
    ?parentChild dbo:child ?finalChild .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
905,3,train,"Give me the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?parent ?title WHERE {
  ?philip dbo:givenName ""Philip"" .
  ?philip dbo:title ""Despot of Romania""@en .
  ?philip dbo:parent ?parent .

  OPTIONAL { 
    ?parent dbo:title ?title .
    FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") || CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess""))
  }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
198,11,train,Give me the war of the awardee of Medal of Honor.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> ?result . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient ?war WHERE {
  ?recipient dbo:award ?medal .
  ?medal rdf:type dbr:Medal_of_Honor .
  ?recipient dbo:servedInMilitaryConflict ?conflict .
  ?conflict dbo:name ?war .
}
```",2,2,3,2,1,3,3,71,0,0,611,0,0.0,0
225,4,train,"Give me the reference, that is a television show, to Anita Borg Institute Women of Vision Awards.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://xmlns.com/foaf/0.1/name> ""Anita Borg Institute Women of Vision Awards""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  ?award dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  ?award dbo:wikiPageRedirects ?relatedEntity .
  ?relatedEntity dbo:wikiPageDisambiguates ?disambiguation .
  ?disambiguation rdf:type dbo:TelevisionShow .
  BIND(?disambiguation AS ?show)
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
80,24,train,Give me the actor of the album of What You Know (T.I. song) and professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v2 . ?v2 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
SELECT ?actor ?actorName ?profession WHERE {
  # Find the album containing the song ""What You Know"" by T.I.
  ?album dbo:artist dbr:T.I. ;
         dbo:song dbr:What_You_Know_(T.I._song) .
  
  # Identify actors associated with this album
  ?album dbo:contributor ?actor .

  # Get the name of these actors
  ?actor foaf:name ?actorName .

  # Find their professional field
  OPTIONAL { ?actor dbo:occupation ?profession . }
}
```",3,3,4,2,2,3,3,71,0,0,4,0,0.0,0
103,28,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant and professional in Actor and professional in .","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?v1 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?show a dbo:Film ;
        a dbo:TelevisionShow ;
        dbo:starring dbr:Richard_E._Grant .
  
  ?show dbo:starring ?actor .
  
  FILTER(?actor != dbr:Richard_E._Grant)
}
```",4,5,5,2,3,3,3,71,2,6,7,0.25,0.2222222222222222,0.23529411764705882
905,61,train,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and parent of the father, that is a royalty, of the spouse of Maria of Bytom.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v3 . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . ?v1 <http://dbpedia.org/property/father> ?v4 . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
# Step 1: Find Stephen V of Hungary's predecessor
SELECT ?predecessor WHERE {
  wd:Q123456 wdt:P31/wdt:P279* wd:Q5; # Stephen V of Hungary is a human
  wdt:P22 ?parent. # Parent (father) relationship
  ?parent wdt:P39 wd:Q11111. # Predecessor held the position of King of Hungary
}

# Step 2: Find the child of the predecessor that is royalty
SELECT ?child WHERE {
  ?predecessor wdt:P40 ?child. # Child relationship
  ?child wdt:P31/wdt:P279* wd:Q5; # The child is a human
  OPTIONAL { ?child wdt:P39 ?position. FILTER EXISTS { ?position wdt:P279* wd:Q11111 } } # Check if the position is related to royalty
}

# Step 3: Find Maria of Bytom's spouse
SELECT ?spouse WHERE {
  wd:Q654321 wdt:P26 ?spouse. # Spouse relationship for Maria of Bytom
}

# Step 4: Determine the father of the spouse that is royalty
SELECT ?father WHERE {
  ?spouse wdt:P22 ?father. # Father relationship
  ?father wdt:P31/wdt:P279* wd:Q5; # The father is a human
  OPTIONAL { ?father wdt:P39 ?position. FILTER EXISTS { ?position wdt:P279* wd:Q11111 } } # Check if the position is related to royalty
}

# Step 5: Find the child of the child identified in steps 2 and 4
SELECT ?finalChild WHERE {
  ?child1 wdt:P40 ?finalChild. # Child relationship from step 2's result
  ?father wdt:P40 ?child1. # Father-child relationship from step 4's result
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
668,57,train,"Give me the person born as the birth name of Joey B and associated musical artist of $pacely and professional in the profession of the writer, that is a musical artist, of The Live Anthology.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v3 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Joseph Benjamin""@en .
  ?association dbo:musicalArtist dbr:Jay-Z ;
               dbo:associatedMusicalArtist ?person .
  ?person dbo:profession dbr:Musical_artist ;
          dbo:wikiPageRedirects ?springsteen .
  ?springsteen rdfs:label ""Bruce Springsteen""@en .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
119,57,train,"Give me the office of Alberto Núñez Feijóo and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.",SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> ?v5 . ?v0 <http://dbpedia.org/property/residence> ?v5 . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v3 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?administration WHERE {
  # Alberto Núñez Feijóo's office
  dbr:Alberto_Núñez_Feijóo dbo:positionHeld ?office .
  
  # Office details
  ?office dbo:country dbr:Spain .

  # Administration associated with PSOE
  ?administration dbo:party dbr:Spanish_Socialist_Workers'_Party ;
                  dbo:country dbr:Spain .

  FILTER(?office != ?administration)
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
871,31,train,"Give me the parent of the awardee of the award of Rodney Lees and parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ?v1 . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
# Query for Rodney Lees
SELECT DISTINCT ?parent WHERE {
    ?award dbo:recipient dbr:Rodney_Lees .
    ?award dbo:awardee ?entity .
    OPTIONAL { ?entity dbo:parentOrganization ?parent . }
}

UNION

# Query for Edward Stanley, 17th Earl of Derby
SELECT DISTINCT ?parent WHERE {
    ?award dbo:recipient dbr:Edward_Stanley,_17th_Earl_of_Derby .
    ?award dbo:awardee ?entity .
    OPTIONAL { ?entity dbo:parentOrganization ?parent . }
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
769,15,train,"Give me the player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on the birthday of Tony Hollings and player in Lai Sun Cheung.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Lai_Sun_Cheung> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Tony_Hollings> <http://dbpedia.org/ontology/birthDate> ?v0 . },"```sparql
# Step 1: Find Tony Hollings' birthday
SELECT ?birthday WHERE {
    dbpedia:Tony_Hollings dbo:birthday ?birthday .
}

# Step 2: Use the found birthday to find people who match all criteria
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?person WHERE {
    # Replace 'YYYY-MM-DD' with Tony Hollings' actual birthdate after running Step 1
    ?person dbo:birthday ""YYYY-MM-DD""^^xsd:date .
    
    ?person a dbo:Athlete ;
            a dbo:SoccerPlayer ;
            a dbo:SportsManager ;
            a dbo:SoccerManager .

    # Check association with Lai Sun Cheung
    OPTIONAL {
        ?association dbpedia:Lai_Sun_Cheung ?person .
    }
}
```

Note: Replace `""YYYY-MM-DD""` in the query with Tony Hollings' actual birthdate obtained from Step 1.",4,8,5,3,2,3,2,20,0,0,2,0,0.0,0
412,21,train,Give me the war of Napoleon Zervas and war of the awardee of 30 and entity in Athens.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war1 ?war2 ?entityInAthens WHERE {
  # War involving Napoleon Zervas (Greek Civil War)
  ?war1 dbo:participated Napoléon_Zervas ;
        rdfs:label ?labelWar1 .
  
  FILTER CONTAINS(LCASE(?labelWar1), ""greek civil war"") .

  # Awardee of 1930 and their involvement in a war
  ?awardee dbo:awardReceived dbr:Nobel_Prize_in_Physiology_or_Medicine_1930 ;
          dbo:participated ?war2 .
  
  FILTER EXISTS { ?war2 dbo:label ?labelWar2 } .

  # Entity based in Athens
  ?entityInAthens dbo:location dbr:Athens ;
                  dbo:isPartOf ?organization .
  
  FILTER EXISTS { ?organization dbo:label ?labelOrganization } .
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
375,17,train,Give me the war of Hashiba Hidekatsu and war of the person born as Koichirō.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/birthName> ""Koichirō""@en . }","```sparql
SELECT ?hashibaHidekatsuWar ?koichiroWar WHERE {
  ?hashibaHidekatsu dbo:birthName ""Hashiba Hidekatsu""@ja .
  ?hashibaHidekatsu dbo:associatedWith ?hashibaHidekatsuWar .

  OPTIONAL {
    ?tokugawaIeyasu dbo:birthName ""Koichirō""@ja .
    ?tokugawaIeyasu dbo:associatedWith ?koichiroWar .
  }
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
905,21,train,"Give me the spouse of the father of Philip I, Prince of Taranto and child of Stephen V of Hungary.","SELECT ?result WHERE { <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v2 . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v2 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?spouse WHERE {
  ?philip dbo:father ?charles .
  ?charles foaf:name ""Charles II of Anjou""@en .
  ?charles dbo:spouse ?spouse .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
263,15,train,"Give me the parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne and native of the birthplace, that is a region and a country, of William Gayner.","SELECT ?result WHERE { <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. }","```sparql
# Step 1: Find the parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne
SELECT ?parent WHERE {
  ?person rdfs:label ""Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne""@en .
  ?person dbo:childOf ?parent .
}

# Step 2: Find the birthplace of William Gayner
SELECT ?birthPlace WHERE {
  ?gayner rdfs:label ""William Gayner""@en .
  ?gayner dbo:birthPlace ?birthPlace .
}

# Step 3: Check if the parent's birthplace matches the region and country criteria
SELECT DISTINCT ?parentBirthPlace WHERE {
  # Assuming we have found the parent from step 1, replace <ParentURI> with actual URI
  <ParentURI> dbo:birthPlace ?parentBirthPlace .

  # Ensure it is both a region and a country
  ?parentBirthPlace rdf:type dbo:Region .
  ?parentBirthPlace rdf:type dbo:Country .
}
```",3,5,4,2,2,2,3,28,0,0,2,0,0.0,0
203,20,train,"Give me the commander in French campaign in Egypt and Syria and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).",SELECT ?result WHERE { <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v2 . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?commander ?militaryForce WHERE {
  # Find the war involving William Bayne
  ?bayne dbo:nationality dbr:United_Kingdom ;
         dbo:occupation dbr:Royal_Navy_officer .
  
  ?bayne dbo:participatedIn ?war .

  # Identify the commander of British forces in Egypt and Syria campaign
  ?commander dbo:rank ""Admiral""@en ;
             dbo:nationality dbr:United_Kingdom ;
             dbo:occupation dbr:Royal_Navy_officer ;
             dbo:commanded ?militaryForce .
  
  # Ensure the war is related to the French campaign in Egypt and Syria
  ?war dbo:location dbr:Egypt ; 
       dbo:location dbr:Syria ;
       dbo:participatedIn dbr:Napoleonic_Wars .

  # Link the military force to the commander
  ?militaryForce dbo:commander ?commander .
}
```",3,5,4,2,2,3,3,71,0,0,2,0,0.0,0
782,29,train,Give me the reference to The Fabulous Thunderbirds and band of the band member of Eric Clapton and associated musical artist of Nick Curran.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> ?v3 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember ?associationWithNickCurran WHERE {
  # Get information about The Fabulous Thunderbirds
  VALUES ?fabulousThunderbirds { dbr:The_Fabulous_Thunderbirds }
  
  # Find band members of The Fabulous Thunderbirds
  ?fabulousThunderbirds dbo:member ?bandMember .
  
  # Check if the band member is associated with Eric Clapton
  OPTIONAL {
    ?bandMember dbo:musicalArtist dbr:Eric_Clapton .
  }

  # Check for association between Nick Curran and the band member or The Fabulous Thunderbirds
  OPTIONAL {
    ?associationWithNickCurran dbo:associatedMusicalArtist dbr:Nick_Curran ;
                                (dbo:member|dbo:musicalArtist) ?bandMember .
  }
  
  FILTER (?bandMember != dbr:Eric_Clapton)
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
225,10,train,"Give me the awardee, that is Japanese, of the reference, that is a television show, to Anita Borg Institute Women of Vision Awards.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?result <http://dbpedia.org/property/awards> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Anita Borg Institute Women of Vision Awards""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?awardee WHERE {
  ?award dbo:type dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  ?award dbo:recipient ?awardee .
  ?awardee dbo:nationality dbr:Japan .
  ?category dbo:name ""Television"" .
  ?award dbo:category ?category .
}
```",2,4,3,2,1,3,2,20,0,0,1,0,0.0,0
78,22,train,"Give me the associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack) and associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v0 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
# Query for Wizards of Waverly Place soundtrack
SELECT DISTINCT ?writer ?artist WHERE {
  ?soundtrack dcterms:creator ?writer .
  FILTER(STRSTARTS(LCASE(?soundtrack), ""wizards_of_waverly_place_soundtrack""))
  OPTIONAL { ?writer dbo:musicalArtist ?musicalArtist . }
  OPTIONAL { ?writer dbo:artist ?artist . }
  FILTER EXISTS { ?musicalArtist a dbo:MusicalArtist } .
  FILTER EXISTS { ?artist a dbo:Artist } .
}

# Query for Stuart Mcbeath Tosh
SELECT DISTINCT ?associatedArtist WHERE {
  ?person foaf:name ""Stuart Mcbeath Tosh""@en .
  OPTIONAL { ?person dbo:musicalArtist ?associatedArtist . }
  FILTER EXISTS { ?associatedArtist a dbo:MusicalArtist } .
}
```",4,7,5,2,2,2,3,28,0,0,3,0,0.0,0
293,61,train,"Give me the person born as the birth name of the parent of Tisha Sterling and spouse of the actor of the product, that is a film, of Nat Levine.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v0 <http://dbpedia.org/property/starring> ?v5 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v5 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ?v3 . },"```sparql
# Step 1: Find Tisha Sterling's parent
SELECT ?parent WHERE {
  dbpedia:Tisha_Sterling dbo:parent ?parent .
}

# Step 2: Find films produced by Nat Levine and their actors
SELECT DISTINCT ?film ?actor WHERE {
  ?film dbo:producer dbpedia:Nat_Levine ;
        dbo:starring ?actor .
}

# Step 3: Identify the spouse of an actor from these films
SELECT DISTINCT ?spouse ?birthName WHERE {
  ?actor dbo:spouse ?spouse .
  ?spouse foaf:name ?name .
  OPTIONAL { ?spouse foaf:givenName ?birthName }
  
  # Join with results from Step 1 and Step 2
  FILTER EXISTS {
    dbpedia:Tisha_Sterling dbo:parent ?parent .
    ?film dbo:producer dbpedia:Nat_Levine ;
          dbo:starring ?actor .
    ?spouse foaf:name ?name .
    ?parent foaf:name ?birthName .
  }
}

# Step 4: Filter for the person with the matching birth name
SELECT DISTINCT ?person WHERE {
  ?person foaf:givenName ?birthName .
  
  # Join with results from previous steps
  FILTER EXISTS {
    dbpedia:Tisha_Sterling dbo:parent ?parent .
    ?film dbo:producer dbpedia:Nat_Levine ;
          dbo:starring ?actor .
    ?spouse dbo:spouse ?person .
    ?parent foaf:name ?birthName .
  }
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
492,0,train,Give me the death place of Reed Howes.,SELECT ?result WHERE { <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?deathPlace WHERE {
  ?person a dbo:Person ;
          foaf:name ""Reed Howes""@en .
  OPTIONAL { ?person dbo:deathPlace ?deathPlace . }
}
```",1,1,2,1,1,2,3,28,1,0,0,1.0,1.0,1.0
871,9,train,"Give me the parent of Victor Stanley (Royal Navy officer) and parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?individual ?name ?parentName WHERE {
  {
    # Query for Victor Stanley (Royal Navy officer)
    ?victor a dbo:Person ;
            rdfs:label ""Victor Stanley (Royal Navy officer)""@en .
    OPTIONAL { ?victor dbo:parent ?vParent . }
    BIND(?victor AS ?individual)
    BIND(""Victor Stanley"" AS ?name)
  } UNION {
    # Query for Edward Stanley, 17th Earl of Derby
    ?edward a dbo:Person ;
            rdfs:label ""Edward Stanley, 17th Earl of Derby""@en .
    OPTIONAL { ?edward dbo:parent ?eParent . }
    BIND(?edward AS ?individual)
    BIND(""Edward Stanley, 17th Earl of Derby"" AS ?name)
  }

  # Get parent names
  OPTIONAL {
    ?parent a dbo:Person ;
            rdfs:label ?parentName .
    FILTER (?vParent = ?parent || ?eParent = ?parent)
  }
}
ORDER BY ?individual
```",2,2,3,1,2,3,3,71,0,4,1,0.0,0.0,0
375,16,train,Give me the war of the child of Toyotomi Hideyoshi and entity in Japan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v2 . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . ?v2 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
SELECT ?war WHERE {
  wd:Q12345 wdt:P136 ?war .
  FILTER (CONTAINS(LCASE(STR(?war)), ""siege of osaka""))
}
```

In this query:
- `wd:Q12345` should be replaced with the DBpedia identifier for Toyotomi Hideyori.
- The property `P136` is used to denote an ""occupation"" or involvement, which in this context refers to his participation in a war.",3,3,4,2,2,2,3,28,0,0,3,0,0.0,0
87,16,train,"Give me the actor of the movie, that is a work and a film, with Audrey Hepburn and actor of Paradise (2013 film).","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . }","```sparql
# Step 1: Find actors in the 2013 film ""Paradise""
SELECT ?actor WHERE {
    ?film dcterms:title ""Paradise""@en .
    ?film dbo:releaseDate ?date .
    FILTER(YEAR(?date) = 2013)
    ?film dbo:starring ?actor .
}

# Step 2: Find films featuring Audrey Hepburn
SELECT DISTINCT ?film WHERE {
    ?film dbo:starring <http://dbpedia.org/resource/Audrey_Hepburn> .
    ?film a dbo:Film .
}

# Step 3: Cross-reference actors from ""Paradise"" with Audrey Hepburn's films
SELECT DISTINCT ?commonFilm ?actor WHERE {
    # Films featuring Audrey Hepburn
    ?film1 dbo:starring <http://dbpedia.org/resource/Audrey_Hepburn> .
    ?film1 a dbo:Film .

    # Actors from ""Paradise""
    ?film2 dcterms:title ""Paradise""@en .
    ?film2 dbo:releaseDate ?date .
    FILTER(YEAR(?date) = 2013)
    ?film2 dbo:starring ?actor .

    # Common film
    ?commonFilm dbo:starring <http://dbpedia.org/resource/Audrey_Hepburn> ;
               dbo:starring ?actor .
}

# Step 4: Ensure the common film is both a work and a film
SELECT DISTINCT ?commonFilm WHERE {
    ?commonFilm dbo:starring <http://dbpedia.org/resource/Audrey_Hepburn> .
    ?commonFilm dbo:starring ?actor .
    ?commonFilm a dbo:Film ;
                a dbo:Work .
}
```",3,5,4,2,2,2,3,28,0,0,1,0,0.0,0
159,49,train,"Give me the successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v2 . ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query for successor in Russo-Polish War
SELECT ?successor WHERE {
  ?person dbo:occupation dbr/Politician ;
          dbo:officeHolderOf dbr/King_of_Poland ;
          dbo:commanderInMilitaryConflict dbr/Russo-Polish_War_(1654–1667) .
  ?person dbo:succeededBy ?successor .
}

# Query for commander in Battle of Vienna
SELECT ?commander WHERE {
  ?event rdf:type dbo:MilitaryEngagement ;
         dbo:location dbr/Battle_of_Vienna ;
         dbo:commander ?commander .
  FILTER EXISTS { ?tvShow dbo:depicts ?event . }
  FILTER EXISTS { ?societalEvent dbo:relatedTo ?event . }
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
203,43,train,"Give me the military force of the war, that is a military conflict and an event, of the reference to William Bayne and military force of Battle of Cape Finisterre (1805) and commander in French campaign in Egypt and Syria.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/battle> ?v4 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . }","```sparql
# Step 1: Find the military force associated with William Bayne
SELECT ?force WHERE {
  ?bayne dbo:occupation dbr:Military_person.
  ?bayne foaf:name ""William Bayne""@en.
  ?bayne dbo:militaryForce ?force.
}

UNION

# Step 2: Identify the military force involved in the Battle of Cape Finisterre (1805)
SELECT ?battleForce WHERE {
  ?battle dbr:Battle_of_Cape_Finisterre_(1805).
  ?battle dbo:participatingMilitaryUnit ?battleForce.
}

UNION

# Step 3: Determine the commander of the French campaign in Egypt and Syria
SELECT ?commander WHERE {
  ?campaign dbr:French_campaign_in_Egypt_and_Syria.
  ?campaign dbo:commander ?commander.
  FILTER (lang(?commanderLabel) = ""en"")
}

UNION

# Step 4: Find a military conflict involving both forces and under Napoleon's command
SELECT DISTINCT ?conflict WHERE {
  ?conflict dbo:participatingMilitaryUnit ?force1, ?force2.
  ?conflict dbo:commander <http://dbpedia.org/resource/Napoleon>.
  FILTER (?force1 IN ({?bayneForce}) && ?force2 IN ({?battleForce}))
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
531,33,train,"Give me the tenant of Madrid and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenantOfMadrid ?officeOfCommander WHERE {
  # Identify Manuel Pinto da Costa as an office holder and politician
  dbr:Manuel_Pinto_da_Costa a dbo:OfficeHolder ;
                            dbo:politicalParty ?party .

  # Find the military conflict associated with him
  ?conflict dbo:participant dbr:Manuel_Pinto_da_Costa ;
            a dbo:MilitaryConflict .

  # Determine the specific office he held during this conflict
  ?officeOfCommander dbo:heldBy dbr:Manuel_Pinto_da_Costa ;
                     dbo:positionTitle ?title ;
                     dbo:conflict ?conflict .

  # Identify who was in power or had significant influence in Madrid at that time
  ?tenantOfMadrid dbo:capital dbr:Madrid ;
                  a dbo:OfficeHolder ;
                  dbo:office ?office .
}
```",4,8,5,3,2,3,3,71,0,0,2,0,0.0,0
557,58,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and professional in .","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/knownFor> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v5 . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
# Query for Cora Sue Collins' notable work and its producer
SELECT ?work ?producer WHERE {
  wd:Q1234567 dbo:notableWork ?work .
  ?work dbo:producer ?producer .
}

# Query to find the actor of ""High Society Blues""
SELECT ?actor WHERE {
  wd:Q7890123 dbo:starring ?actor .
}

# Query for the claim to fame (movie and work) of the actor
SELECT ?claimToFame WHERE {
  ?actor dbo:claimToFame ?claimToFame .
  FILTER EXISTS { ?claimToFame a dbo:Film . }
}

# Query for the producer of the actor's claim to fame
SELECT ?producer WHERE {
  ?claimToFame dbo:producer ?producer .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia ID for Cora Sue Collins and `wd:Q7890123` with the DBpedia ID for ""High Society Blues.""",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
723,17,train,"Give me the band member of Mudvayne and band member of the associated musical artist, that is an organisation, of the associated musical artist, that is a band and an organisation, of Nate Newton (musician).",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . <http://dbpedia.org/resource/Nate_Newton_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mudvayne> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?mudvayneMember ?deathwishBandMember WHERE {
  # Step 1: Identify Nate Newton's associated band (Converge)
  dbr:Nate_Newton dbo:memberOf dbr:Converge .

  # Step 2: Find an associated musical artist that is both a band and an organization
  ?associatedArtist dbo:memberOf dbr:Converge .
  ?associatedArtist rdf:type dbo:Band ;
                   dbo:organization dbr:Deathwish_Inc .

  # Step 3: Identify a member of Mudvayne
  ?mudvayneMember dbo:memberOf dbr:Mudvayne .

  # Step 4: Find if there's any overlap between Mudvayne members and Deathwish Inc. band members
  ?deathwishBandMember dbo:memberOf ?associatedArtist .
  
  FILTER(?mudvayneMember != ?deathwishBandMember)
}
```",4,7,5,3,2,3,2,20,0,0,1,0,0.0,0
353,22,train,Give me the child of the child of Alfonso VI of León and Castile and child of Roger II of Sicily.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v1 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Alfonso VI's children
  VALUES (?alfonsoChild) { 
    dbr:Urraca_I_of_León 
    dbr:Sancho_II_of_Castile 
    dbr:Theresa_of_Portugal 
  }
  
  # Roger II's children
  VALUES (?rogerChild) {
    dbr:William_I_of_Sicily 
    dbr:Alfonso,_Duke_of_Calabria 
    dbr:Constance_of_Hauteville 
  }

  ?alfonsoChild dbo:child ?intermediate1 .
  ?intermediate1 dbo:child ?commonChild .

  ?rogerChild dbo:child ?intermediate2 .
  ?intermediate2 dbo:child ?commonChild .

  FILTER(?commonChild = dbr:Constance_of_Sicily)
}
```",3,3,4,2,2,3,3,71,0,0,3,0,0.0,0
80,51,train,Give me the professional in the alter ego of the series of The Golden Master and actor of the album of What You Know (T.I. song).,SELECT ?result WHERE { <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v4 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v1 . ?v4 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . },"```sparql
SELECT ?person WHERE {
  # Find the alter ego from ""The Golden Master""
  ?character dbo:wikiPageRedirects db:The_Golden_Master_character_with_alter_ego .
  ?character dbo:alterEgo ?alterEgo.
  
  # Find actors associated with T.I.'s album ""What You Know""
  ?album dbo:title ""What You Know"" ;
         dbo:performer ?actor .
  
  # Check if the alter ego and actor are the same person
  FILTER (?alterEgo = ?actor)
}
```",5,5,6,3,2,3,3,71,0,0,4,0,0.0,0
633,17,train,"Give me the spouse of Renée of Bourbon and parent of the father of the child, that is a royalty, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { <http://dbpedia.org/resource/Renée_of_Bourbon> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/father> ?v3 . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?spouse WHERE {
  wd:Q1234567 wdt:P26 ?spouse . # Francis I, Duke of Lorraine (replace Q1234567 with actual DBpedia ID)
  ?spouse wdt:P22 wd:Q2345678 . # Charles III, Duke of Lorraine (replace Q2345678 with actual DBpedia ID)
  wd:Q2345678 wdt:P25 wd:Q3456789 . # Christina of Denmark (replace Q3456789 with actual DBpedia ID)
  ?spouse wdt:P26 wd:Q4567890 . # Renée of Bourbon (replace Q4567890 with actual DBpedia ID)
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
723,9,train,"Give me the producer, that is an organisation and a group, of the reference to Nothing to Gein.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""Nothing to Gein""@en . ?v0 <http://dbpedia.org/ontology/producer> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  ?film dbo:productionCompany ?producer .
  FILTER (strstarts(str(?film), ""Nothing to Gein""))
  ?producer a ?type1 .
  ?producer a ?type2 .
  VALUES (?type1) {<http://dbpedia.org/ontology/Organization>}
  VALUES (?type2) {<http://dbpedia.org/ontology/MusicalGroup>} 
}
```",2,4,3,2,1,3,2,20,0,0,1,0,0.0,0
816,18,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of Doon Arbus and parent of Amy Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
SELECT ?actor WHERE {
  # Find actors in ""Judgment: The Trial of Julius and Ethel Rosenberg""
  ?movie dcterms:title ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
  ?movie dbo:starring ?actor .

  # Check if the actor is a parent of both Doon Arbus and Amy Arbus
  ?actor foaf:parentOf ?doon .
  ?doon foaf:name ""Doon Arbus""@en .
  
  ?actor foaf:parentOf ?amy .
  ?amy foaf:name ""Amy Arbus""@en .
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
249,2,train,"Give me the work, that is Indian, of Jamsetji Tata.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. ?result <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Jamsetji_Tata> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?person a dbo:Person ;
          foaf:name ""Jamsetji Tata""@en .
  ?person dbo:founded ?work .
  ?work dbo:country dbr:India .
}
```",1,2,2,1,1,2,2,9,0,0,1,0,0.0,0
816,58,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of the child of the spouse of Mariclare Costello and parent of the professional in Photographer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v5 . ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v5 <http://dbpedia.org/property/occupation> ""Photographer""@en . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/ontology/child> ?v2 . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v1 . }","```sparql
# Step 1: Find actor of ""Judgment: The Trial of Julius and Ethel Rosenberg""
SELECT ?actor WHERE {
    ?film dcterms:title ""Judgment: The Trial of Julius and Ethel Rosenberg"" .
    ?film dbo:starring ?actor .
}

# Step 2: Identify Mariclare Costello's spouse
SELECT ?spouse WHERE {
    wd:Q1234567 dbo:spouse ?spouse . # Assuming Q1234567 is the DBpedia ID for Mariclare Costello
}

# Step 3: Determine the child of Mariclare Costello's spouse
SELECT ?child WHERE {
    ?spouse dbo:child ?child .
}

# Step 4: Find the parent of that child (should be Mariclare Costello or another individual)
SELECT ?parent WHERE {
    ?child dbo:parent ?parent .
}

# Step 5: Identify a professional in Photography
SELECT ?photographer WHERE {
    ?person dbo:occupation ""Photographer"" .
}

# Step 6: Determine the parent of this photographer
SELECT ?parent WHERE {
    ?photographer dbo:parent ?parent .
}

# Step 7: Find commonality between steps 4 and 6
SELECT DISTINCT ?commonParent WHERE {
    { ?child dbo:parent ?commonParent . }
    UNION
    { ?photographer dbo:parent ?commonParent . }
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
609,61,train,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of the author of the reference, that is American, to El Deafo.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/property/author> ?v3 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://dbpedia.org/property/governor> ?v5 . ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Step 1: Find Paulus Powell's birth place
SELECT ?birthPlace WHERE {
  ?paulusPowell dbo:birthPlace ?birthPlace .
  FILTER(STR(?paulusPowell) = ""Paulus_Powell"")
}

# Step 2: Determine the region and administrative region of his birth place
SELECT DISTINCT ?region ?adminRegion WHERE {
  VALUES ?birthPlace { <URI_of_birth_place> } # Replace with actual URI from step 1
  OPTIONAL { ?birthPlace dbo:partOfRegion ?region . }
  OPTIONAL { ?birthPlace dbo:administrativeRegion ?adminRegion . }
}

# Step 3: Find the governor of that region
SELECT DISTINCT ?governorBirthPlace WHERE {
  VALUES ?region { <URI_of_region> } # Replace with actual URI from step 2
  ?governor dbo:officeHolderOf ?region .
  ?governor dbo:birthPlace ?governorBirthPlace .
}

# Step 4 and 5: Find Cece Bell's birth place
SELECT DISTINCT ?ceceBellBirthPlace WHERE {
  ?ceceBell dbo:birthPlace ?ceceBellBirthPlace .
  FILTER(STR(?ceceBell) = ""Cece_Bell"")
}
```",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
80,13,train,Give me the actor of the album of What You Know (T.I. song).,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v1 . },"```sparql
SELECT ?album ?actor WHERE {
  ?song dcterms:title ""What You Know"" ;
        dbo:artist <http://dbpedia.org/resource/T.I.> ;
        dbo:partOfAlbum ?album .
  
  OPTIONAL {
    ?album dbo:featuredActor ?actor .
  }
}
```",2,2,3,2,1,3,3,71,0,0,10,0,0.0,0
375,0,train,Give me the author of A Picture of Britain.,SELECT ?result WHERE { <http://dbpedia.org/resource/A_Picture_of_Britain> <http://dbpedia.org/ontology/author> ?result . },"```sparql
SELECT ?authorLabel WHERE {
  ?book rdfs:label ""A Picture of Britain""@en .
  ?book dbo:author ?author .
  ?author rdfs:label ?authorLabel .
  FILTER(LANG(?authorLabel) = 'en')
}
```",1,1,2,1,1,3,2,20,0,1,1,0.0,0.0,0
723,16,train,"Give me the band member of the producer, that is an organisation and a group, of Nothing to Gein and band member of the associated musical artist, that is an organisation, of Cavalera Conspiracy.",SELECT ?result WHERE { <http://dbpedia.org/resource/Cavalera_Conspiracy> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . <http://dbpedia.org/resource/Nothing_to_Gein> <http://dbpedia.org/ontology/producer> ?v2 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
# Query to find the producer organization for ""Nothing to Gein""
SELECT ?producer WHERE {
  ?album dcterms:isPartOf <http://dbpedia.org/resource/Nothing_to_Gein> .
  ?album dbo:producer ?producer .
  ?producer a dbo:Organization .
}

# Query to find associated musical artists of ""Cavalera Conspiracy""
SELECT DISTINCT ?artist WHERE {
  ?band dbo:associatedMusicalArtist ?artist .
  FILTER(STRSTARTS(LCASE(?band), LCASE(""cavalera conspiracy"")))
}

# Find the band member who is linked to both
SELECT DISTINCT ?person WHERE {
  # Link producer of ""Nothing to Gein"" with a person
  ?album dcterms:isPartOf <http://dbpedia.org/resource/Nothing_to_Gein> .
  ?album dbo:producer ?producer .
  ?producer a dbo:Organization .
  ?producer dbo:member ?person .

  # Link the same person to an artist associated with ""Cavalera Conspiracy""
  ?artist dbo:bandMember ?person .
  ?band dbo:associatedMusicalArtist ?artist .
  FILTER(STRSTARTS(LCASE(?band), LCASE(""cavalera conspiracy"")))
}
```",4,7,5,2,2,3,2,20,0,0,1,0,0.0,0
756,11,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v0 <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?manager WHERE {
  ?team a dbo:SoccerClub ;
        dbp:name ""VfL Bochum"" .
  
  OPTIONAL { 
    ?team dbp:season2007_08Manager ?manager .
  }
  
  FILTER NOT EXISTS { ?team dbp:season2007_08Manager ?otherManager . FILTER(?otherManager != ?manager) }
}
```",2,5,3,2,1,3,3,71,0,0,1,0,0.0,0
531,39,train,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and office of Mariano Rajoy.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v0 . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/property/leader> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. },"```sparql
# Query for Miguel Maura's party and its leader
SELECT ?partyLabel ?leaderName ?officeLabel WHERE {
  # Find the political party associated with Miguel Maura
  ?miguelMaura dbo:spouse ?person .
  ?person foaf:name ""Miguel Maura"" .
  ?miguelMaura dbo:memberOfParty ?party .

  # Get the label of the party
  ?party rdfs:label ?partyLabel .

  # Find the current leader of this party
  ?party dbo:leader ?leader .
  ?leader foaf:name ?leaderName .

  # Find the office held by this leader
  ?leader dbo:office ?office .
  ?office rdfs:label ?officeLabel .

  FILTER (lang(?partyLabel) = ""en"" && lang(?leaderName) = ""en"" && lang(?officeLabel) = ""en"")
}

UNION

# Query for Mariano Rajoy's party and its leader
SELECT ?partyLabel ?leaderName ?officeLabel WHERE {
  # Known political party of Mariano Rajoy
  VALUES ?party { dbpedia-es:Partido_Popular_(Espa%C3%B1a) }

  # Get the label of the party
  ?party rdfs:label ?partyLabel .

  # Find the current leader of this party
  ?party dbo:leader ?leader .
  ?leader foaf:name ?leaderName .

  # Find the office held by this leader
  ?leader dbo:office ?office .
  ?office rdfs:label ?officeLabel .

  FILTER (lang(?partyLabel) = ""en"" && lang(?leaderName) = ""en"" && lang(?officeLabel) = ""en"")
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
609,3,train,Give me the award of Vince Gilligan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  dbr:Vince_Gilligan dbo:award ?award .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
119,22,train,"Give me the office of Alberto Núñez Feijóo and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> ?v1 . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?administration WHERE {
  # Find Alberto Núñez Feijóo's office
  dbr:Alberto_Núñez_Feijóo dbo:positionHeld ?office .
  
  OPTIONAL {
    # Find administrations involving the PSOE
    ?administration dbo:party dbr:Spanish_Socialist_Workers'_Party ;
                    dbo:country dbr:Spain .
    
    # Check if there is any connection between his office and such an administration
    ?office dbo:partOfOrganization ?administration .
  }
}
```",3,4,4,2,2,3,3,71,0,0,2,0,0.0,0
472,1,train,Give me the administration of Christian IX of Denmark.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administration WHERE {
  ?person a dbo:Monarch ;
          foaf:name ""Christian IX""@en ;
          dbo:monarch dbr:Denmark .
  
  OPTIONAL { 
    ?person dbo:reign ?administration .
  }
}
```",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
58,12,train,Give me the spouse of Linda Bruckheimer and producer of the movie with .,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Linda_Bruckheimer> . ?v0 <http://dbpedia.org/ontology/producer> ?result . ?v0 <http://dbpedia.org/property/starring> """"@en . }","```sparql
SELECT ?movie WHERE {
  ?person foaf:name ""Don Bruckheimer""@en .
  ?person dbo:spouse ?lindaBruckheimer .
  ?lindaBruckheimer foaf:name ""Linda Bruckheimer""@en .
  ?film dbo:producer ?person ;
        dbo:title ?movie .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
585,7,train,"Give me the native of the award, that is American and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?native WHERE {
  ?choir dbo:name ""Coro de la Pontificia Universidad Católica de Puerto Rico"" .
  ?choir dbo:awardsReceived ?award .
  ?award dbo:country dbr:United_States .
  ?award dbo:name ?name .
  FILTER regex(?name, ""^([A-Za-z]+)$"") # Assuming settlement names are single words
  OPTIONAL { ?award dbo:nativeName ?native }
}
```",2,4,3,2,1,3,2,20,0,0,8569,0,0.0,0
263,9,train,"Give me the parent of Mary Elphinstone, Lady Elphinstone and parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
# Query to find parents of Mary Elphinstone, Lady Elphinstone
SELECT ?parent WHERE {
  wd:Q123456 dbo:parent ?parent .
}

UNION

# Query to find parents of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne
SELECT ?parent WHERE {
  wd:Q654321 dbo:parent ?parent .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for Mary Elphinstone, Lady Elphinstone, and `wd:Q654321` with that of Patrick Bowes-Lyon. These identifiers can be found by searching their names in DBpedia or using a service like Wikidata to get the correct Q-identifiers.",2,2,3,1,2,2,3,28,0,0,2,0,0.0,0
782,13,train,Give me the band of the band member of Eric Clapton.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?result <http://dbpedia.org/ontology/bandMember> ?v1 . },"```sparql
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?band WHERE {
  ?person a dbpedia-owl:MusicalArtist .
  ?person foaf:name ""Eric Clapton""@en .
  ?person dbp:bandMember ?band .
}
```",2,2,3,2,1,3,3,71,0,0,14,0,0.0,0
258,10,train,"Who is the person born, that is a politician, as the birth name of Eleonora Menicucci?",SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/property/birthName> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/property/birthName> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?birthName WHERE {
  ?person dbo:occupation dbr:Politician .
  ?person foaf:name ""Eleonora Menicucci""@en .
  ?person foaf:givenName ?birthName .
}
```",2,3,3,2,1,3,2,20,0,0,1,0,0.0,0
687,7,train,Give me the birthday of Marcelo Sarmiento.,SELECT ?result WHERE { <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthday WHERE {
  ?person a dbo:Person ;
          foaf:name ""Marcelo Sarmiento""@en .
  ?person dbo:birthDate ?birthday .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
816,2,train,Give me the parent of Doon Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parentLabel WHERE {
  ?person dbo:birthName ""Doon Arbus""@en .
  ?person dbo:parent ?parent .
  ?parent rdfs:label ?parentLabel .
  FILTER(LANG(?parentLabel) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
159,52,train,"Give me the commander in Great Turkish War and reference to the writer of Always the Love Songs and successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac.",SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v5 . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?author ?successor WHERE {
  # Michał Kazimierz Pac as a commander in the Great Turkish War
  dbr:Mikołaj_Kazimierz_Pas_(general) dbo:participatedIn dbr:Great_Turkish_War .

  # Author of ""Always the Love Songs""
  ?author dbo:title dbr:Always_the_Love_Songs ;
          rdfs:label ?authorLabel .

  # Successor as a politician or office holder
  ?successor dbo:succeededBy dbr:Mikołaj_Kazimierz_Pas_(general) .
  ?successor (dbo:officeHolder|dbo:politicalPartyMember) ?position .

  # Ensure the successor is related to the military force/event
  ?successor dbo:participatedIn dbr:Great_Turkish_War .

  FILTER(LANG(?authorLabel) = ""en"")
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
225,11,train,Give me the birthplace of Chieko Asakawa and entity in the region of Japan Standard Time.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . <http://dbpedia.org/resource/Chieko_Asakawa> <http://dbpedia.org/ontology/birthPlace> ?result . ?result <http://dbpedia.org/ontology/country> ?v2 . },"```sparql
SELECT ?birthPlace ?entityInJST WHERE {
  # Query for Chieko Asakawa's birthplace
  dbp:Chieko_Asakawa dbo:birthPlace ?birthPlace .

  # Query for an entity in the region of Japan Standard Time
  ?region rdfs:label ""Japan Standard Time""@en .
  ?entityInJST dbo:timeZone ?region ;
               a dbo:City ; # Assuming we want to find a city, but this can be adjusted
               dbp:country dbr:Japan .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
871,19,train,"Give me the parent of the awardee of Commander of the Royal Victorian Order and parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . }","```sparql
# Query for parent of an awardee of Commander of the Royal Victorian Order
SELECT ?person ?parent WHERE {
  ?person dbo:award dbr:Commander_of_the_Royal_Victorian_Order .
  ?person dbo:parent ?parent .
}

UNION

# Query for parent of Edward Stanley, 17th Earl of Derby
SELECT ?person ?parent WHERE {
  ?person foaf:name ""Edward Stanley""@en ;
          dbo:title dbr:Earl_of_Derby ;
          dbo:number 17 .
  ?person dbo:parent ?parent .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
905,44,train,"Give me the child of the child, that is a royalty, of Béla IV of Hungary and parent of the father, that is a royalty, of Charles I of Hungary and spouse of Charles II of Naples.",SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/father> ?v0 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v4 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfChild WHERE {
  # Béla IV of Hungary's children
  ?belavI dbo:spouse ?belavIVwife .
  ?belavI dbo:child ?belavIC1 .
  
  # One of Béla IV's child who is royalty
  ?belavIC1 a dbo:Monarch ;
            dbo:child ?childOfChild .

  # Parent of Charles I of Hungary (who is royalty)
  dbr:Charles_I_of_Hungary dbo:father ?parentOfCharlesI .
  ?parentOfCharlesI a dbo:Monarch .

  # Spouse of Charles II of Naples
  dbr:Charles_II_of_Naples dbo:spouse ?spouseOfCharlesII .

  # Connect the relationships
  FILTER (?childOfChild = ?parentOfCharlesI && ?childOfChild = ?spouseOfCharlesII)
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
557,4,train,Give me the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo WHERE {
  VALUES ?shadow { dbr:The_Shadow }
  ?shadow dbo:aliasName ?alterEgo .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
103,35,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant and professional in the alter ego of The Shadow.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://dbpedia.org/property/starring> ?result . },"```sparql
SELECT ?actor WHERE {
  ?tvShow dcterms:subject dbc:The_Shadow_(1994_TV_series) .
  ?tvShow dbo:starring ?person .
  ?person foaf:name ""Richard E. Grant""@en .
  ?person dbo:birthName ?actor .
}
```",4,5,5,2,2,3,3,71,0,0,13,0,0.0,0
609,49,train,"Give me the birth place of the author of the reference, that is American, to El Deafo and birth place of the awardee of List of awards and nominations received by Vince Gilligan.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://dbpedia.org/property/author> ?v1 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . }","```sparql
# Query to get the birth place of Cece Bell
SELECT ?birthPlace WHERE {
  wd:Q2074820 dbo:birthPlace ?birthPlace .
}

UNION

# Query to get a notable award Vince Gilligan won and its awardee's birthplace
SELECT DISTINCT ?awardeeBirthPlace WHERE {
  # Find an award Vince Gilligan won, e.g., Emmy Award for Outstanding Drama Series (2013)
  wd:Q2074820 dbo:awardReceived wd:Q198964 .
  
  # Get the awardee of that specific award
  wd:Q198964 dbo:recipient ?awardee .
  
  # Find the birthplace of the awardee
  ?awardee dbo:birthPlace ?awardeeBirthPlace .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
347,13,train,"Give me the father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . ?v1 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?child WHERE {
  dbpedia:Ferdinand_III,_Holy_Roman_Emperor dbo:child ?child .
}
```

This query retrieves the children of Ferdinand III. The father of these children is logically Ferdinand III himself, so no further SPARQL query is needed to find his name.",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
80,31,train,Give me the actor of the movie with the author of Smartbomb (book) and actor of ATL (film).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> ?v1 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v1 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Step 1: Find the author of the book ""Smartbomb""
SELECT ?author WHERE {
  ?book dcterms:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Step 2: Find the actor in the film ""ATL""
SELECT ?actor WHERE {
  ?film dcterms:title ""ATL""@en .
  ?film dbo:starring ?actor .
}

# Assuming we have identified the author and actor from above queries, let's say:
# ?author = <http://dbpedia.org/resource/Author_Name>
# ?atlActor = <http://dbpedia.org/resource/Actor_Name>

# Step 3: Find an actor who has acted in a movie with both individuals
SELECT DISTINCT ?commonActor WHERE {
  # Movie where the author acted
  ?movie1 dbo:starring ?author .
  
  # Movie where the ATL actor acted
  ?movie2 dbo:starring ?atlActor .

  # Common actor in movies with both
  ?movie1 dbo:starring ?commonActor .
  ?movie2 dbo:starring ?commonActor .
}
```",4,4,5,3,2,3,3,71,0,0,10,0,0.0,0
39,20,train,Give me the professional in the alter ego of The Shadow and professional in Singer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  VALUES (?alterEgo) { dbr:The_Shadow }
  ?person dbo:alterEgo ?alterEgo .
  ?person rdfs:label ?name FILTER (lang(?name) = 'en') .

  UNION

  VALUES (?profession) { ""singer"" }
  ?person dbo:occupation ?profession .
  ?person rdfs:label ?name FILTER (lang(?name) = 'en') .
}
```",3,3,4,2,2,3,3,71,0,0,5422,0,0.0,0
293,45,train,Give me the person born as the birth name of the parent of Tisha Sterling and party member of Republican Party (United States) and spouse of Roger Pryor (actor).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthName WHERE {
  # Find Tisha Sterling's parent
  ?tishaSterling dbo:parent ?parent .
  FILTER (str(?tishaSterling) = ""Tisha_Sterling"") .

  # Check if the parent is a member of the Republican Party and married to Roger Pryor
  ?parent dbo:spouse dbr:Roger_Pryor ;
          dbp:politicalParty dbr:Republican_Party_(United_States) .

  # Get the birth name of the person
  OPTIONAL { ?person rdfs:label ?birthName . FILTER (lang(?birthName) = ""en"") }
  
  BIND (?parent AS ?person)
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
345,3,train,Give me the time zone of Japan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Japan> <http://dbpedia.org/property/timeZone> ?result . },"```sparql
SELECT ?timeZone WHERE {
  dbr:Japan dbp:timeZone ?timeZone .
}
```",1,1,2,1,1,2,2,9,1,0,0,1.0,1.0,1.0
871,58,train,"Give me the father of the child, that is a politician, of the alumnus of Eton College and parent of the child of Frederick Stanley, 16th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . ?v2 <http://dbpedia.org/property/father> ?v5 . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v5 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v2 <http://dbpedia.org/property/father> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v4 . }","```sparql
SELECT ?father WHERE {
  # Step 1: Identify Frederick Stanley, 16th Earl of Derby
  ?frederick dbp:name ""Frederick Stanley, 16th Earl of Derby""@en .
  
  # Step 2: Find his child
  ?child dbp:parent ?frederick .

  # Step 3: Determine the parent of this child (other than Frederick)
  ?alumnus dbp:parent ?child ;
           dbp:almaMater ?etonCollege .

  # Eton College URI
  ?etonCollege rdfs:label ""Eton College""@en .
  
  # Step 4: Identify an alumnus of Eton College
  ?politician dbp:parent ?alumnus ;
              dbp:occupation ""Politician""@en .

  # Step 5: Find the politician child of this alumnus

  # Step 6: Determine the father of this politician
  ?father dbp:child ?politician .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
68,8,train,"Give me the father of the parent of Dorothea of Denmark, Electress Palatine.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v1 . }","```sparql
SELECT ?grandfather WHERE {
  wd:Q123456 wdt:P22 ?parent1 . # Dorothea of Denmark, Electress Palatine has parent
  ?parent1 wdt:P31/wdt:P279* wd:Q5 . # Parent is a human
  ?parent1 wdt:P22 ?grandfather . # Parent's father (Dorothea's grandfather)
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource identifier for Dorothea of Denmark, Electress Palatine.",2,2,3,2,1,2,3,28,0,0,2,0,0.0,0
756,21,train,"Give me the manager of 2020–21 SBV Vitesse season and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season.",SELECT ?result WHERE { <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v1 . ?v1 <http://dbpedia.org/ontology/manager> ?result . },"```sparql
# Query to find the manager of SBV Vitesse for the 2020-21 season
SELECT ?manager WHERE {
  ?team dcterms:isPartOf <http://dbpedia.org/resource/2020%E2%80%9321_Eredivisie> ;
        dbo:manager ?manager .
  FILTER (str(?team) = ""http://dbpedia.org/resource/SBV_Vitesse"")
}

UNION

# Query to find the manager of a player from VfL Bochum for the 2007-08 season
SELECT DISTINCT ?playerManager WHERE {
  ?player dbo:playsFor <http://dbpedia.org/resource/VfL_Bochum> ;
          dbo:manager ?playerManager .
  FILTER EXISTS { 
    ?team dcterms:isPartOf <http://dbpedia.org/resource/2007%E2%80%9308_2._Bundesliga> ;
           dbo:member ?player .
  }
}
```",3,6,4,2,2,3,3,71,0,0,1,0,0.0,0
472,2,train,Give me the administration of Olaf I of Denmark.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?position 
WHERE {
  ?olaf a dbo:Monarch ;
        foaf:name ""Olaf I of Denmark""@en .
  
  OPTIONAL { ?olaf dbo:positionHeld ?position . }
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
628,26,train,"Give me the person born as the birth name of the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name WHERE {
  ?person a dbo:MusicalArtist .
  ?person dbo:birthPlace dbr:Florida .
  ?person foaf:name ?name .
  OPTIONAL { ?person dbp:birthName ?birthName . }
  FILTER (?name = ?birthName)
}
```",3,4,4,3,1,3,3,71,1,1,58,0.5,0.01694915254237288,0.03278688524590164
213,10,train,"Give me the work of the spouse, that is a writer, of Hu Jieqing.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>. ?result <http://dbpedia.org/property/author> ?v0 . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Hu_Jieqing> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?huJieqing dbo:spouse ?spouse .
  FILTER (str(?huJieqing) = ""Hu_Jieqing"")
  
  ?spouse a dbo:Writer ;
          dbo:works ?work .
}
```",2,3,3,2,1,3,2,20,0,0,8,0,0.0,0
871,60,train,"Give me the parent of the awardee of the award of Rodney Lees and father of the child, that is a politician, of the alumnus of Eton College.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://dbpedia.org/property/father> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . ?v2 <http://dbpedia.org/property/father> ?result . ?v5 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . },"```sparql
# Step 1: Identify awards associated with Rodney Lees
SELECT ?award WHERE {
    ?person foaf:name ""Rodney Lees"" .
    ?person dbo:awardsReceived ?award .
}

# Step 2: Find the awardee of such an award and their parent
SELECT DISTINCT ?parent WHERE {
    ?award dbo:recipient ?awardee .
    ?awardee dbo:parent ?parent .
}

# Step 3: Query for Eton College alumni
SELECT ?alumnus WHERE {
    ?person dbo:almaMater dbr:Eton_College ;
            foaf:name ?name .
    BIND(?person AS ?alumnus)
}

# Step 4: Find children of these alumni who are politicians
SELECT DISTINCT ?child ?father WHERE {
    ?alumnus dbo:child ?child .
    ?child dbo:occupation dbr:Politician .
    ?child dbo:parent ?father .
}

# Step 5: Combine information to find the parent connection
SELECT DISTINCT ?parent1 ?parent2 WHERE {
    # Parent from award recipient
    ?award dbo:recipient ?awardee .
    ?awardee dbo:parent ?parent1 .

    # Father of politician child from Eton alumni
    ?alumnus dbo:child ?child .
    ?child dbo:occupation dbr:Politician .
    ?child dbo:parent ?father .
    FILTER(?father = ?parent1)
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
737,51,train,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and child of the child of Duke Philipp of Württemberg.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v4 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?v2 <http://dbpedia.org/property/father> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
# Step 1: Find Archduchess Margarete Sophie of Austria's parent
SELECT ?parent WHERE {
  dbpedia:Margarete_Sophie_Archduchess_of_Austria dbo:childOf ?parent .
}

# Step 2: Find the child of that parent (sibling or another child)
SELECT DISTINCT ?child WHERE {
  ?parent dbo:child ?child .
  FILTER(?parent IN (?archduchessParent))
}

# Step 3: Identify Duke Philipp of Württemberg's grandchild
SELECT DISTINCT ?grandchild WHERE {
  dbpedia:Duke_Philipp_of_W%C3%BCrttemberg dbo:child ?child .
  ?child dbo:child ?grandchild .
}

# Step 4: Check if the grandchild is royalty (has a royal title)
SELECT DISTINCT ?royalGrandchild WHERE {
  ?grandchild rdf:type dbpedia:RoyalPerson .
}

# Step 5: Find the child of the child from step 2 who is a royalty
SELECT DISTINCT ?finalAnswer WHERE {
  ?siblingChild dbo:child ?finalAnswer .
  ?finalAnswer rdf:type dbpedia:RoyalPerson .
  FILTER(?siblingChild IN (?child))
}
```

Note: The above SPARQL queries are structured to be executed sequentially, with intermediate results stored in variables like `?archduchessParent`, `?child`, and `?grandchild`. Adjustments may be needed based on actual DBpedia schema and available data.",5,6,6,3,2,3,3,71,0,0,2,0,0.0,0
353,19,train,"Give me the child of the parent of Roger III, Duke of Apulia and father of William II of Sicily.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . }","```sparql
SELECT ?child WHERE {
  # Step 1: Find the parent of Roger III, Duke of Apulia
  ?rogerIII dbr:Roger_III,_Duke_of_Sicily dbo:parent ?parent .

  # Step 2: Identify all children of this parent
  ?parent dbo:child ?child .

  # Step 3: Exclude Roger III from these children to find the other child
  FILTER (?child != ?rogerIII)
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
203,4,train,"Give me the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?regiment a dbo:MilitaryUnit ;
            rdfs:label ""30th (Cambridgeshire) Regiment of Foot""@en .
  
  ?event dbo:participatedIn ?regiment ;
         a dbo:War, dbo:MilitaryConflict .

  BIND(?event AS ?war)
}
```",1,3,2,1,1,3,3,71,0,0,5,0,0.0,0
103,20,train,Give me the actor of Dispatches from Elsewhere and professional in the profession of Shatrughan Sinha.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find actors from ""Dispatches from Elsewhere""
  ?tvSeries dbo:title ""Dispatches from Elsewhere""@en .
  ?tvSeries dbo:castMember ?actor .

  # Ensure the actor is also known for acting, like Shatrughan Sinha
  ?actor dbo:occupation dbr:Actor .
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
492,16,train,Give me the death place of Reed Howes and death place of the actor of Aladdin (1958 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v2 . <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . ?v2 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query to find the death place of Reed Howes
SELECT ?deathPlace WHERE {
  dbpedia:Reed_Howes dbo:deathPlace ?deathPlace .
}

UNION

# Query to find the actor who played Aladdin in the 1958 film and his death place
SELECT ?actorDeathPlace WHERE {
  # Find the actor who played Aladdin
  ?film dbp:starring ?actor .
  ?film rdfs:label ""The Story of Robin Hood and His Merrie Men""@en .
  FILTER(YEAR(?film) = 1958)
  
  # Assuming we know the role is Aladdin, find the specific actor
  ?role dbp:characterName ""Aladdin""@en ;
        dbp:actor ?actor .

  # Find the death place of this actor
  ?actor dbo:deathPlace ?actorDeathPlace .
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
905,7,train,Give me the predecessor of Stephen V of Hungary.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
SELECT ?predecessor WHERE {
  wd:Q123456 dbo:successor wd:Q789012 .
  wd:Q789012 rdfs:label ""Stephen V of Hungary""@en .
  ?predecessor dbo:successor wd:Q789012 .
}
```

Note: In the query, `wd:Q123456` and `wd:Q789012` are placeholders for the actual DBpedia identifiers for Stephen V of Hungary and his predecessor. You would need to replace these with the correct QIDs from DBpedia.",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
80,10,train,Give me the professional in  and actor of Shelby Oaks.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?actorRole WHERE {
  VALUES ?shelbyOaks { dbr:Shelby_Oaks }
  
  OPTIONAL {
    ?shelbyOaks dbo:occupation ?profession .
  }

  OPTIONAL {
    ?shelbyOaks dbo:film ?film .
    ?film dbo:starring ?actorRole .
    FILTER(?actorRole = ?shelbyOaks)
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
782,42,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and reference to the real name of The Fabulous Thunderbirds and band of Kim Wilson.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist ?associatedArtist WHERE {
  # Find the artist born as Nicholas Michael Curran (Nick Cave)
  ?person a dbo:MusicalArtist ;
          foaf:name ""Nick Cave"" ;
          dbo:birthName ""Nicholas Michael Curran"" .
  
  # Find associated artists or bands
  ?person dbo:associatedBandOrArtist ?associatedArtist .

  OPTIONAL {
    # Check if any of the associated artists are linked to Kim Wilson/The Fabulous Thunderbirds
    ?associatedArtist foaf:name ?name .
    FILTER (CONTAINS(LCASE(?name), ""kim wilson"") || CONTAINS(LCASE(?name), ""fabulous thunderbirds""))
  }
  
  # Return Nick Cave and his associated artist(s)
  BIND(?person AS ?artist)
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
905,14,train,"Give me the child of the child, that is a royalty, of Béla IV of Hungary.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT DISTINCT ?grandchild ?title WHERE {
  # Find Béla IV's children
  ?belaviv dbo:child ?child .
  
  # For each child, find their children (Béla IV’s grandchildren)
  ?child dbo:child ?grandchild .

  # Check if the grandchild has a royal title
  OPTIONAL { ?grandchild dbo:royalTitle ?title . }
  
  FILTER EXISTS { ?belaviv rdfs:label ""Béla IV of Hungary""@en } .
  FILTER NOT EXISTS { ?grandchild rdfs:label ""Béla IV of Hungary""@en } .
}
ORDER BY ?grandchild
```",2,3,3,2,1,3,3,71,5,5,0,0.5,1.0,0.6666666666666666
119,15,train,"Who is the leader of the administration, that is an event, of Anxo Quintana?",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/leader> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?administrationEvent ?leader WHERE {
  # Find Anxo Quintana's DBpedia resource
  dbr:Anxo_Quintana a dbo:Person .
  
  # Look for events where Anxo Quintana is involved in an administration role
  ?administrationEvent dbo:agent dbr:Anxo_Quintana ;
                      a dbo:GovernmentFunction .

  # Find the leader of that administration event
  ?administrationEvent dbo:leader ?leader .
}
```",2,3,3,2,1,3,3,71,0,0,9,0,0.0,0
816,33,train,Give me the parent of the professional in the profession of Eugène Cattin and actor of Judgment: The Trial of Julius and Ethel Rosenberg.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/ontology/child> ?v3 . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?parentName WHERE {
  ?person foaf:name ""Eugène Cattin""@en .
  OPTIONAL { ?person dbo:profession ?profession . }
  OPTIONAL { ?person dbp:parent ?parent . }
  ?parent foaf:name ?parentName .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
119,44,train,"Give me the office of Alberto Núñez Feijóo and tenant of the residence, that is a country, of Álvaro Quirós and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v4 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v2 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?country ?administration
WHERE {
  # Find Alberto Núñez Feijóo's office
  dbr:Alberto_Núñez_Feijóo dbo:positionHeld ?office .

  # Find Álvaro Quirós' residence country
  dbr:Álvaro_Quirós dbo:nationality dbr:Spain ;
                   dbo:residenceCountry ?country .

  # Find the administration associated with PSOE
  dbr:Spanish_Socialist_Workers'_Party dbo:member ?administration .
  
  FILTER (lang(?office) = 'en' && lang(?country) = 'en')
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
871,0,train,Give me the parent of Victor Stanley (Royal Navy officer).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?parent WHERE {
  ?person a dbo:Person ;
          foaf:name ""Victor Stanley""@en .
  OPTIONAL { ?person dbo:parent ?parent . }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
347,6,train,"Give me the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?person a dbo:Person ;
          foaf:name ""Ferdinand III"" ;
          dbo:spouse ?spouse .
  OPTIONAL { ?person dbo:child ?child . }
  FILTER(CONTAINS(LCASE(?person), ""ferdinand iii"") && CONTAINS(LCASE(?person), ""holy roman emperor""))
}
```",1,1,2,1,1,3,3,71,0,0,4,0,0.0,0
87,23,train,"Give me the actor of the movie, that is a work and a film, with Iliza Shlesinger and actor of the movie, that is a work and a film, with Audrey Hepburn.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
# Query to find a film with Iliza Shlesinger
SELECT ?film (GROUP_CONCAT(?actorLabel; separator="", "") AS ?actors) WHERE {
  ?film dbo:starring dbp:Iliza_Schlesinger ;
        rdf:type dbo:Film .
  ?film dbo:starring ?actor ;
        rdfs:label ?filmLabel .
  ?actor foaf:name ?actorLabel .
} GROUP BY ?film

UNION

# Query to find a film with Audrey Hepburn
SELECT ?film (GROUP_CONCAT(?actorLabel; separator="", "") AS ?actors) WHERE {
  ?film dbo:starring dbp:Audrey_Hepburn ;
        rdf:type dbo:Film .
  ?film dbo:starring ?actor ;
        rdfs:label ?filmLabel .
  ?actor foaf:name ?actorLabel .
} GROUP BY ?film
```",4,8,5,2,2,2,3,28,0,0,1,0,0.0,0
769,0,train,Give me the player in Ye Jia.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ye_Jia> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  ?team rdfs:label ""Ye Jia""@en.
  ?team a dbo:SoccerClub .
  ?team dbo:member ?player .
}
```",1,1,2,1,1,3,2,20,0,0,6,0,0.0,0
311,15,train,"Give me the associated musical artist of the associated musical artist, that is an artist, of the producer, that is an organisation and a band and a group, of Lotus (R.E.M. song) and band member of Mark Eitzel.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mark_Eitzel> . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/Lotus_(R.E.M._song)> <http://dbpedia.org/ontology/producer> ?v0 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Step 1: Find the producer of ""Lotus"" by R.E.M.
SELECT ?producer WHERE {
  ?song dcterms:title ""Lotus""@en .
  ?song dbo:artist <http://dbpedia.org/resource/R.E.M.> .
  ?song dbo:producer ?producer .
}

# Step 2: Check if the producer is an organisation and a band/group
SELECT DISTINCT ?producer WHERE {
  VALUES ?producer { ?producer1 } # Replace ?producer1 with actual result from step 1
  ?producer rdf:type <http://dbpedia.org/ontology/Organisation> .
  ?producer rdf:type <http://dbpedia.org/ontology/Band> .
}

# Step 3: Find associated musical artist of the producer
SELECT DISTINCT ?associatedArtist WHERE {
  VALUES ?producer { ?producer2 } # Replace ?producer2 with actual result from step 2
  ?producer dbo:associatedMusicalArtist ?associatedArtist .
  ?associatedArtist rdf:type <http://dbpedia.org/ontology/MusicalArtist> .
}

# Step 4: Identify Mark Eitzel's band membership
SELECT DISTINCT ?band WHERE {
  <http://dbpedia.org/resource/Mark_Eitzel> dbo:memberOfBandOrMusicalGroup ?band .
}

# Step 5: Find associated musical artist of the band member
SELECT DISTINCT ?finalArtist WHERE {
  VALUES ?band { ?band1 } # Replace ?band1 with actual result from step 4
  ?band dbo:associatedMusicalArtist ?finalArtist .
  ?finalArtist rdf:type <http://dbpedia.org/ontology/MusicalArtist> .
}
```",4,8,5,3,2,3,2,20,0,0,1,0,0.0,0
103,58,train,"Give me the professional in the profession of Shatrughan Sinha and professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and actor of Dispatches from Elsewhere.",SELECT ?result WHERE { <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v5 . },"```sparql
# Query for Shatrughan Sinha's profession
SELECT ?profession WHERE {
  dbpedia:Shatrughan_Sinha dbo:occupation ?profession .
}

# Query for The Shadow (video game) alter ego and confirm as a comic character
SELECT DISTINCT ?alterEgo WHERE {
  dbpedia:The_Shadow_(video_game)_character dbo:alterEgo ?alterEgo .
  ?alterEgo rdf:type dbo:ComicBookCharacter .
}

# Query for actor in Dispatches from Elsewhere
SELECT DISTINCT ?actor WHERE {
  dbpedia:Dispatches_from_Elsewhere dbo:starring ?actor .
}
```",6,7,7,3,3,3,3,71,0,0,2,0,0.0,0
375,6,train,Give me the parent of Kate Dimbleby and author of A Picture of Britain.,SELECT ?result WHERE { <http://dbpedia.org/resource/A_Picture_of_Britain> <http://dbpedia.org/ontology/author> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Kate_Dimbleby> . },"```sparql
# Query to find Kate Dimbleby's parent(s)
SELECT ?parent WHERE {
  dbp:Kate_Dimbleby dbo:parent ?parent .
}

# Query to find the author of ""A Picture of Britain""
SELECT ?author WHERE {
  dbc:A_Picture_of_Britain dbo:author ?author .
}
```

To combine these queries and find a common individual, we can use:

```sparql
SELECT DISTINCT ?person WHERE {
  # Find Kate Dimbleby's parent(s)
  dbp:Kate_Dimbleby dbo:parent ?person .

  # Check if the same person is the author of ""A Picture of Britain""
  dbc:A_Picture_of_Britain dbo:author ?person .
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
143,14,train,Give me the associated musical artist of the person born as the birth name of Cynthia Morgan.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/property/birthName> ?v2 . ?v0 <http://dbpedia.org/property/birthName> ?v2 . },"```sparql
# Step 1: Retrieve the birth name of Cynthia Morgan
SELECT ?birthName WHERE {
  ?cynthiaMorgan dbo:birthName ?birthName .
  ?cynthiaMorgan rdfs:label ""Cynthia Morgan""@en .
  FILTER (lang(?cynthiaMorgan) = 'en')
}

# Step 2: Find associated musical artist with the birth name
SELECT DISTINCT ?artist WHERE {
  ?person dbo:birthName ?birthName .
  ?artist dbo:associatedMusicalArtist ?person .
  ?artist rdfs:label ?artistLabel .
  FILTER (lang(?artist) = 'en')
}
```",3,3,4,3,1,3,2,20,0,0,6,0,0.0,0
159,4,train,"Give me the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?name WHERE {
  ?commander a dbo:MilitaryPerson ;
             dbo:spouseOrPartner ?officeHolder .
  ?officeHolder a dbo:OfficeHolder ;
                dbo:heldPublicOffice ?position .
  ?commander dbo:associatedWith dbr:Russo-Polish_War_(1654%E2%80%931667) .
  OPTIONAL { ?commander rdfs:label ?name FILTER (lang(?name) = 'en') }
}
ORDER BY ?name
```",1,3,2,1,1,3,3,71,0,0,2,0,0.0,0
595,9,train,Give me the spouse of Hillary Clinton and author of Back to Work (book).,SELECT ?result WHERE { <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . },"```sparql
SELECT ?author WHERE {
  ?book dcterms:title ""Back to Work""@en .
  ?book dbo:author ?author .
  FILTER EXISTS { ?author foaf:name ""Bill Clinton""@en }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
158,0,train,Give me the person decedent at Switzerland.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Switzerland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:name ?name .
  ?person dbo:deathPlace dbr:Switzerland .
}
ORDER BY ?name
```",1,1,2,1,1,2,3,28,0,0,906,0,0.0,0
706,4,train,"Give me the movie, that is a movie and Indian, with Dipankar De.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Dipankar_De> . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie WHERE {
  ?movie a dbo:Film .
  ?movie dbo:country dbr:India .
  ?movie dbo:starring dbr:Dipankar_De .
}
```",1,3,2,1,1,3,2,20,3,1,0,0.75,1.0,0.8571428571428571
531,48,train,"Give me the office of the leader, that is a politician, of Conservative Republican Party (Spain) and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/property/office> ?result . ?v3 <http://dbpedia.org/property/residence> ?v2 . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v3 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?conservativeLeaderOffice ?madridCouncilLeaderResidence
WHERE {
  # Find the leader of the Conservative Republican Party (Spain) and their office
  ?party a dbo:PoliticalParty ;
         rdfs:label ""Conservative Republican Party (Spain)""@en .
  
  ?leader dbo:leaderOf ?party ;
          dbo:officeHolder ?conservativeLeaderOffice .

  # Find the leader from the 2003 Madrid City Council election and their residence
  ?election a dbo:Election ;
            dbo:electedOffice dbr:Madrid_City_Council ;
            dbo:date ""2003-05-25""^^xsd:date .
  
  ?madridCouncilLeader dbo:officeHolder ?electedPosition ;
                       dbo:residence ?madridCouncilLeaderResidence .

  # Ensure the leader is related to the election
  ?electedPosition dbo:election ?election .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
311,13,train,"Give me the associated musical artist of the associated musical artist, that is an artist, of the producer, that is an organisation and a band and a group, of Lotus (R.E.M. song).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . <http://dbpedia.org/resource/Lotus_(R.E.M._song)> <http://dbpedia.org/ontology/producer> ?v0 . },"```sparql
# Step 1: Find the producer of ""Lotus"" by R.E.M. that is an organization and a band/group
SELECT ?producer WHERE {
  ?song dbo:artist dbr:R.E.M.;
        dbo:title ""Lotus"";
        dbo:producer ?producer.
  ?producer rdf:type dbp:Band;
            rdf:type dbp:MusicalGroup;
            rdf:type dbp:Organization.
}

# Step 2: Find an associated musical artist of the producer
SELECT DISTINCT ?associatedArtist WHERE {
  VALUES ?producer { <Producer_URI> } # Replace with actual URI from step 1
  ?artist dbo:collaboratedWith ?producer .
  ?artist rdf:type dbp:MusicalArtist.
}

# Step 3: Find an associated musical artist of the first associated artist
SELECT DISTINCT ?finalAssociatedArtist WHERE {
  VALUES ?associatedArtist { <Associated_Artist_URI> } # Replace with actual URI from step 2
  ?finalArtist dbo:collaboratedWith ?associatedArtist .
  ?finalArtist rdf:type dbp:MusicalArtist.
}
```

Note: The placeholders `<Producer_URI>` and `<Associated_Artist_URI>` need to be replaced with the actual URIs obtained from executing the previous queries.",3,7,4,3,1,3,2,20,0,0,28,0,0.0,0
609,55,train,"Give me the birth place of the author of El Deafo and birth place of the awardee of List of awards and nominations received by Vince Gilligan and birth place of the governor, that is a politician, of Virginia.",SELECT ?result WHERE { <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v2 . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for the birth place of Cece Bell, author of ""El Deafo""
SELECT ?birthPlace WHERE {
  wd:Q1234567 dbo:birthPlace ?birthPlace .
}

# Query for the birth place of an awardee from Vince Gilligan's list (example: Emmy Award winner)
SELECT ?awardeeBirthPlace WHERE {
  wd:Q7890123 dbo:awardRecipient ?awardee .
  ?awardee dbo:birthPlace ?awardeeBirthPlace .
}

# Query for the birth place of the current governor of Virginia
SELECT ?governorBirthPlace WHERE {
  wd:Q3456789 dbo:birthPlace ?governorBirthPlace .
}
```

Note: The placeholders `wd:Q1234567`, `wd:Q7890123`, and `wd:Q3456789` represent the DBpedia identifiers for Cece Bell, a specific awardee from Vince Gilligan's list, and the current governor of Virginia, respectively. These need to be replaced with the actual DBpedia resource IDs once identified.",6,7,7,2,3,3,3,71,0,0,1,0,0.0,0
731,2,train,Give me the award of Edmund Hakewill-Smith.,SELECT ?result WHERE { <http://dbpedia.org/resource/Edmund_Hakewill-Smith> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  VALUES ?person { dbr:Edmund_Hakewill-Smith }
  ?person dbo:award ?award .
}
```",1,1,2,1,1,3,2,20,7,0,0,1.0,1.0,1.0
87,10,train,Give me the spouse of the awardee of List of awards and nominations received by Janusz Kamiński.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . ?result <http://dbpedia.org/ontology/spouse> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  VALUES ?janusz { dbr:Janusz_Kamiński }
  ?janusz dbo:award ?award .
  OPTIONAL { ?janusz dbo:spouse ?spouse . }
}
```",2,2,3,2,1,2,3,28,1,0,0,1.0,1.0,1.0
816,6,train,Give me the professional in Photographer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:occupation ?occupation .
  ?occupation rdfs:label ""Photographer""@en .
  OPTIONAL { ?person rdfs:label ?name . FILTER (lang(?name) = 'en') }
}
ORDER BY ?name
```",1,1,2,1,1,3,3,71,82,765,855,0.09681227863046045,0.08751334044823907,0.09192825112107623
687,40,train,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio and team of Pablo Aimar and player in Sergio Agüero.",SELECT ?result WHERE { <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v2 . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . ?v1 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/birthDate> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?athlete WHERE {
  # Find Marty Pollio's birthdate
  VALUES ?martyPollio { dbr:Marty_Polloi }
  ?martyPollio dbo:birthday ?birthdate .

  # Find athletes born on the same date as Marty Pollio
  ?athlete a dbo:Athlete ;
           dbo:birthday ?sameBirthDate .
  FILTER (?sameBirthDate = ?birthdate)

  # Get teams associated with Pablo Aimar
  VALUES ?pabloAimar { dbr:Pablo_Aimar }
  ?team dbo:member ?pabloAimar .

  # Find players who were teammates with Sergio Agüero
  VALUES ?sergioAgüero { dbr:Sergio_Agüero }
  ?teammateTeam dbo:member ?sergioAgüero .
  
  # Ensure the athlete is in both teams (Pablo Aimar's and a teammate of Sergio Agüero)
  ?athlete dbo:teamMembership ?pabloAimarTeam ;
           dbo:teamMembership ?teammateTeam .

  FILTER (?pabloAimarTeam = ?team && ?teammateTeam = ?teammateTeam)
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
816,53,train,"Give me the parent of Amy Arbus and parent of the child of Allan Arbus and actor of the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v3 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v1 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . ?v2 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Query for Amy Arbus's parent
SELECT ?parent WHERE {
  ?person dbo:birthName ""Amy Arbus""@en .
  ?person dbo:parent ?parent .
}

UNION

# Query for Allan Arbus's child and their parent
SELECT ?grandParent WHERE {
  ?child dbo:parent ?allanArbus .
  ?allanArbus rdfs:label ""Allan Arbus""@en .
  ?child dbo:parent ?grandParent .
}

UNION

# Query for a movie with an actor whose decedent died in Los Angeles
SELECT ?actor WHERE {
  ?movie dbo:starring ?actor .
  ?actor dbo:deathPlace ?place .
  ?place rdfs:label ""Los Angeles""@en .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
782,35,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and reference to the real name of The Fabulous Thunderbirds.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . }","```sparql
# Query to find the musical artist associated with Nicholas Michael Curran (Nick Curran)
SELECT ?associatedArtist WHERE {
  ?curran dbo:birthName ""Nicholas Michael Curran""@en .
  ?curran foaf:name ""Nick Curran"" .
  ?curran dbo:associatedMusicalArtist ?associatedArtist .
}

UNION

# Query to find the real name of The Fabulous Thunderbirds' prominent member
SELECT ?realName WHERE {
  ?band dbo:leadMember ?member .
  ?band foaf:name ""The Fabulous Thunderbirds""@en .
  ?member foaf:name ?stageName .
  FILTER(?stageName = ""Jimmie Vaughan""^^xsd:string) .
  ?member dbo:birthName ?realName .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
531,9,train,Give me the tenant of Madrid and office of Mariano Rajoy.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party ?office WHERE {
  VALUES ?rajoy { dbr:Mariano_Rajoy }
  
  # Find the political party (tenant) of Mariano Rajoy
  ?rajoy dbo:memberOfParty ?party .
  
  # Find the office or position related to Madrid
  OPTIONAL {
    ?rajoy dbo:office ?office .
    FILTER(CONTAINS(LCASE(STR(?office)), ""madrid""))
  }
}
```",2,2,3,1,2,3,3,71,0,0,2,0,0.0,0
143,1,train,Give me the associated musical artist of Cynthia Morgan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?artist WHERE {
  ?cynthia a dbo:MusicalArtist ;
           foaf:name ""Cynthia Morgan""@en .
  ?cynthia dbo:associatedMusicalArtist ?artist .
}
```",1,1,2,1,1,3,2,20,6,0,0,1.0,1.0,1.0
585,2,train,Give me the awardee of New York (state).,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee WHERE {
  ?award dbo:givenBy dbr:New_York_State_Senate .
  ?award dbo:name ""Outstanding Young Person Award""@en .
  ?award dbo:recipient ?awardee .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
293,60,train,Give me the person born as the birth name of the parent of Tisha Sterling and party member of the ruling party in the landmark at elevation of 20.116800000000001347.,"SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?result <http://dbpedia.org/ontology/party> ?v2 . ?v3 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . }","```sparql
# Step 1: Find Tisha Sterling's parent
SELECT ?parent WHERE {
  dbp:Tisha_Sterling dbo:parent ?parent .
}

# Step 2: Get the birth name of the identified parent
SELECT ?birthName WHERE {
  ?parent foaf:name ?fullName ;
          foaf:givenName ?givenName ;
          foaf:familyName ?familyName .
  BIND(CONCAT(?givenName, "" "", ?familyName) AS ?birthName)
}

# Step 3: Identify the landmark at elevation 20.1168
SELECT ?landmark WHERE {
  ?landmark a dbo:Lighthouse ;
            dbo:elevationAboveSeaLevel ?elevation .
  FILTER(?elevation = 20.1168)
}

# Step 4: Determine the ruling party in the location of this landmark
SELECT ?rulingParty WHERE {
  ?landmark dbo:location ?location .
  ?location dbo:government ?government .
  ?government dbo:rulingParty ?rulingParty .
}

# Step 5: Find a member of this party with the same birth name as Tisha Sterling's parent
SELECT ?person WHERE {
  ?person foaf:name ?fullName ;
          foaf:givenName ?givenName ;
          foaf:familyName ?familyName ;
          dbo:partyAffiliation ?rulingParty .
  BIND(CONCAT(?givenName, "" "", ?familyName) AS ?birthName)
  FILTER(?birthName = <INSERT_BIRTH_NAME_HERE>)
}
```

Note: Replace `<INSERT_BIRTH_NAME_HERE>` with the actual birth name obtained from Step 2.",6,6,7,3,2,3,3,71,0,0,2,0,0.0,0
151,0,train,Give me the entity in Ottoman Empire.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Ottoman_Empire> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity ?label WHERE {
  VALUES ?ottomanEmpire { dbr:Ottoman_Empire }
  
  # Find subclasses or instances related to the Ottoman Empire
  ?entity rdfs:subClassOf* ?ottomanEmpire .
  OPTIONAL { ?entity dbo:wikiPageRedirects ?redirect . FILTER (!bound(?redirect)) }

  # Get labels for better readability
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
ORDER BY ?label
LIMIT 100
```",1,1,2,1,1,2,2,9,0,0,247,0,0.0,0
143,11,train,"Give me the actor of the show, that is a movie, with Afeez Oyetoro and associated musical artist of Cynthia Morgan.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?result . ?v2 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Afeez_Oyetoro> . <http://dbpedia.org/resource/Cynthia_Morgan> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
# Step 1: Find movies or shows featuring Afeez Oyetoro
SELECT ?movie WHERE {
  ?movie dbo:starring dbpedia:Afeez_Oyetoro .
}

# Step 2: Check if these are also known as a show (e.g., TV series)
SELECT DISTINCT ?show WHERE {
  ?movie rdfs:label ?title .
  FILTER(CONTAINS(LCASE(?title), ""tv series"") || CONTAINS(LCASE(?title), ""show""))
  ?movie dbo:starring dbpedia:Afeez_Oyetoro .
}

# Step 3: Find musical artists associated with Cynthia Morgan
SELECT DISTINCT ?artist WHERE {
  ?artist dbo:associatedMusicalArtist dbpedia:Cynthia_Morgan .
}

# Step 4: Check if these artists are associated with the identified show/movie
SELECT DISTINCT ?show ?artist WHERE {
  ?show dbo:starring dbpedia:Afeez_Oyetoro .
  ?artist dbo:associatedMusicalArtist dbpedia:Cynthia_Morgan .
  ?show dbo:musicalArtist ?artist .
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
595,21,train,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House and commander in Third Taiwan Strait Crisis.",SELECT ?result WHERE { <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v1 . ?v1 <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?spouse WHERE {
  ?person dbo:author ""An Invitation to the White House""@en .
  ?person foaf:name ""Henry Kissinger""@en .
  ?person dbo:spouse ?spouse .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
816,57,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of the professional in the profession of Eugène Cattin and parent of the child of Allan Arbus.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v5 . ?v5 <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v3 . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  # Find actors in the film ""Judgment: The Trial of Julius and Ethel Rosenberg""
  ?film dbo:title ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
  ?film dbo:starring ?actor .

  # Find children or descendants of Eugène Cattin
  dbr:Eugène_Cattin dbo:profession ?profession .
  ?child dbo:parent dbr:Eugène_Cattin ;
         dbo:profession ?profession .

  # Find children of Allan Arbus and their parents
  ?allanChild dbo:parent dbr:Allan_Arbus .
  ?parent dbo:child ?allanChild .

  # Match the actor with both conditions
  FILTER (?actor = ?child && ?actor = ?parent)
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
39,30,train,"Give me the professional in Singer and band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in .","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?singerRole ?bandRole WHERE {
  ?person a foaf:Person ;
          foaf:name ""Robert Lamar Thompson"" .
  
  OPTIONAL { ?person dbo:birthDate ?birthDate . }
  
  FILTER EXISTS { ?person dbo:occupation ?occupation . 
                 VALUES ?occupation { dbo:Singer dbo:BandMember } }

  OPTIONAL { ?person dbo:singerRole ?singerRole . }
  OPTIONAL { ?person dbo:bandRole ?bandRole . }
}
```",4,5,5,2,3,3,3,71,0,0,3,0,0.0,0
158,23,train,"Give me the native of the administration, that is a country, of Nicholas II of Russia and person decedent at the birthplace, that is a country, of Sandro Bertaggia.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/deathPlace> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . },"```sparql
# Find the native country (birthplace) of Nicholas II of Russia
SELECT ?country WHERE {
  wd:Q1524 dbo:nativePlace ?birthPlace .
  ?birthPlace wdt:P17 ?country .
}

# Find the birthplace of Sandro Bertaggia
SELECT ?birthCountry WHERE {
  wd:Q1234567 dbo:birthPlace ?birthPlace . # Replace Q1234567 with the actual DBpedia ID for Sandro Bertaggia
  ?birthPlace wdt:P17 ?birthCountry .
}

# Find a person who is a descendant of Nicholas II and born in Switzerland
SELECT DISTINCT ?descendant WHERE {
  wd:Q1524 dbo:child ?child . # Direct children of Nicholas II
  ?child dbo:child ?grandChild . # Grandchildren
  ?grandChild dbo:child ?greatGrandChild . # Great-grandchildren, continue as needed for descendants
  ?descendant (wdt:P31/wdt:P279*) wd:Q5 . # Ensure the entity is a human
  ?descendant wdt:P19 ?birthPlace .
  ?birthPlace wdt:P17 wd:Q64 . # Switzerland's DBpedia ID is Q64
}
```",4,6,5,2,2,2,3,28,0,0,36,0,0.0,0
531,14,train,"Give me the office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . ?v1 <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  ?person dbo:partyMember dbr:Partido_Popular_(Spain) .
  ?person dbo:positionHeld ?office .
  FILTER EXISTS { ?office rdfs:label ?officeLabel . FILTER (lang(?officeLabel) = ""en"") }
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
706,17,train,"Give me the birthplace of the actor of the movie, that is a movie and Indian, with Dipankar De and birthplace of Ebrahim Alkazi.",SELECT ?result WHERE { <http://dbpedia.org/resource/Ebrahim_Alkazi> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/starring> ?v3 . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Dipankar_De> . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actorBirthPlace ?alkaziBirthPlace WHERE {
  # Find Indian movies featuring Dipankar De
  ?movie dbo:starring dbr:Dipankar_De ;
         dbo:country dbr:India .

  # Get actors from those movies
  ?movie dbo:starring ?actor .
  
  # Get birthplaces of these actors
  ?actor dbp:birthPlace ?actorBirthPlace .

  # Find Ebrahim Alkazi's birthplace
  dbr:Ebrahim_Alkazi dbp:birthPlace ?alkaziBirthPlace .
}
```",4,6,5,3,2,3,2,20,2,14,0,0.125,1.0,0.2222222222222222
375,22,train,Give me the war of the person born as Koichirō and entity in the birth place of Yamaza Enjirō.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/place> ?v2 . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Koichirō""@en . }","```sparql
# Step 1: Get Koichiro Matsuura's details
SELECT ?koichiro ?birthPlace WHERE {
  ?koichiro dbo:birthName ""Koichiro Matsuura""@en .
  ?koichiro dbo:birthPlace ?birthPlace .
}

# Step 2: Get Yamaza Enjirō's birthplace
SELECT ?yamazaBirthPlace WHERE {
  ?yamaza dbo:birthName ""Yamaza Enjirō""@ja .
  ?yamaza dbo:birthPlace ?yamazaBirthPlace .
}

# Step 3: Find a notable entity from Yamaza Enjirō's birthplace
SELECT DISTINCT ?entity WHERE {
  ?entity dbo:location ?yamazaBirthPlace .
  FILTER NOT EXISTS { ?entity rdf:type dbo:Person . } # Exclude people to find an organization or other entity
}

# Step 4: Find the war involvement of that entity
SELECT ?war WHERE {
  ?entity dbo:participatedIn ?war .
}
```",4,4,5,2,2,2,3,28,0,0,3,0,0.0,0
668,3,train,Give me the birth name of $pacely.,SELECT ?result WHERE { <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthName WHERE {
  ?person rdfs:label ""Jennifer Lopez""@en .
  ?person dbo:birthName ?birthName .
}
```",1,1,2,1,1,3,3,71,0,1,1,0.0,0.0,0
769,4,train,"Give me the reference, that is an organisation and a sports club and a sports team and a soccer club, to Hong Kong C.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>. ?result <http://xmlns.com/foaf/0.1/name> ""Hong Kong C""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?entity WHERE {
  ?entity a dbo:Organization .
  ?entity dbo:sportsClub true .
  ?entity dbo:sportsTeam true .
  ?entity dbo:soccerClub true .
  ?entity rdfs:label ?label .
  FILTER (CONTAINS(LCASE(?label), ""hong kong c""))
}
```",1,5,2,1,1,3,2,20,0,0,1,0,0.0,0
293,11,train,"Give me the party member of the ruling party in Central, Louisiana.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v0 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?party WHERE {
  # Find the ruling party in Louisiana
  ?party a dbo:PoliticalParty ;
         dbo:country dbr:United_States_of_America ;
         dbo:stateOrProvince dbr:Louisiana .

  # Assuming we have a way to determine the ruling party, e.g., majority in state legislature
  OPTIONAL { ?party dbo:hasMember ?member . }

  # Find representatives from Central Louisiana
  ?person dbo:politicalParty ?party ;
          dbo:residence ?location .
  
  FILTER regex(?location, ""Central Louisiana"", ""i"")

  # Ensure the person is a current member of the ruling party
  OPTIONAL { ?person dbo:officeHolderOf dbr:Louisiana_House_of_Representatives . }
}
```",2,2,3,2,1,3,3,71,0,0,21486,0,0.0,0
595,61,train,"Give me the author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605).","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v1 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?v3 . ?v5 <http://dbpedia.org/property/author> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v5 <http://dbpedia.org/property/author> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?resident a dbo:Politician ;
            dbo:residence dbr:Chappaqua,_New_York .
  ?resident dbo:officeHolderOf ?office .
  ?war a dbo:Disease ; 
       dbo:societalEvent ""HIV/AIDS crisis"" .
  ?resident dbo:commanderInWar ?war .
  ?ship a dbo:Ship ;
        dbo:owner dbr:United_States_Government .
  ?author dbo:writtenWork ?work .
  ?work a dbo:Book ;
        dbo:subject ?resident ;
        dbo:subject ?war ;
        dbo:subject ?ship .
}
```",6,13,7,3,2,3,3,71,0,0,1,0,0.0,0
119,59,train,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/property/residence> ?v5 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v3 <http://dbpedia.org/property/leader> ?v2 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?office ?country 
WHERE {
  ?person a dbo:Person ;
          foaf:name ""Anxo Quintana""@en ;
          dbp:nationality dbr:Spain .
  
  ?person dbo:occupation ?office .
  FILTER (STRSTARTS(STR(?office), ""http://dbpedia.org/ontology/"") && 
          STRCONTAINS(STR(?office), ""PoliticalOffice""))

  OPTIONAL { ?office dbo:country ?country . }
}
```",6,9,7,3,2,3,3,71,0,0,2,0,0.0,0
609,19,train,Give me the birth place of Glenn Youngkin and birth place of the awardee of List of awards and nominations received by Vince Gilligan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . },"```sparql
# Query to find Glenn Youngkin's birthplace
SELECT ?birthPlace WHERE {
  dbpedia:Glenn_Youngkin dbo:birthPlace ?birthPlace .
}

UNION

# Query to find the birthplace of an awardee of a specific award Vince Gilligan has been associated with (e.g., Primetime Emmy Award)
SELECT DISTINCT ?awardeeBirthPlace WHERE {
  # Find awards Vince Gilligan is associated with
  dbpedia:Vince_Gilligan dbo:nominatedForOrWon ?award .
  
  # Example: Filter for a specific award, e.g., ""Primetime Emmy Award""
  FILTER regex(str(?award), ""Primetime Emmy Award"", ""i"")
  
  # Find awardees of that award
  ?award dbo:recipient ?awardee .
  
  # Get the birthplace of one such awardee
  ?awardee dbo:birthPlace ?awardeeBirthPlace .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
557,30,train,"Give me the professional in  and producer of the claim to fame, that is a movie and a work, of Janet Gaynor and producer of The Adventures of Tom Sawyer (1938 film).","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
# Query to find the producer of ""Seventh Heaven"" (1927)
SELECT ?producer WHERE {
  ?film dcterms:title ""Seventh Heaven""@en .
  ?film dbo:productionCompany ?company .
  ?company dbo:president|dbo:ceo|dbo:founder ?producer .
  FILTER regex(?film, ""1927"", ""i"")
}

# Query to find the producer of ""The Adventures of Tom Sawyer"" (1938)
SELECT ?producer WHERE {
  ?film dcterms:title ""The Adventures of Tom Sawyer""@en .
  ?film dbo:productionCompany ?company .
  ?company dbo:president|dbo:ceo|dbo:founder ?producer .
  FILTER regex(?film, ""1938"", ""i"")
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
23,21,train,Give me the party of Roy Barreras and entity in Colombia and party of the father of Sofía Petro.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/party> ?result . },"```sparql
# Query for Roy Barreras' political party and associated entity in Colombia
SELECT ?party ?entity WHERE {
  ?person foaf:name ""Roy Barreras""@en .
  ?person dbo:politicalParty ?party .
  OPTIONAL { 
    ?person dbo:spouseOrPartner ?partner .
    ?partner dbo:birthPlace ?entity .
    FILTER (CONTAINS(LCASE(STR(?entity)), ""colombia""))
  }
}

# Query for Sofía Petro's father's political party
SELECT ?fatherParty WHERE {
  ?sofia foaf:name ""Sofía Petro""@en .
  ?sofia dbo:parent ?father .
  ?father foaf:name ?fatherName .
  OPTIONAL { 
    ?father dbo:politicalParty ?fatherParty .
  }
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
375,12,train,"Give me the author of A Picture of Britain and parent of the native, that is an artist and a musical artist, of London.",SELECT ?result WHERE { <http://dbpedia.org/resource/A_Picture_of_Britain> <http://dbpedia.org/ontology/author> ?result . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/London> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/ontology/child> ?v0 . },"```sparql
# Step 1: Find the author of ""A Picture of Britain""
SELECT ?author WHERE {
  ?work dcterms:title ""A Picture of Britain""@en .
  ?work dbo:creator ?author .
}

# Step 2: Identify artists and musicians from London
SELECT DISTINCT ?person WHERE {
  ?person dbo:nationality dbc:People_from_London ;
          dbo:occupation dbo:Artist ;
          dbo:occupation dbo:MusicalArtist .
}

# Step 3: Find the parent of such a person
SELECT ?parent WHERE {
  ?person dbo:child ?parent .
  # Assuming we have identified a specific person from step 2, replace `?person` with that individual's URI.
}
```

Note: The above query is structured in steps. In practice, you would need to execute these queries sequentially and use the results of one as input for the next.",3,5,4,2,2,3,2,20,0,0,1,0,0.0,0
103,25,train,Give me the professional in the alter ego of The Shadow and professional in Actor.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
SELECT ?person WHERE {
  # Find the person known by the alter ego ""The Shadow""
  ?shadowCharacter dbo:alterEgo dbr:The_Shadow .
  ?shadowCharacter dbo:portrayedBy dbr:Orson_Welles .

  # Ensure this person is also a professional actor
  OPTIONAL { 
    ?person rdfs:label ""Orson Welles""@en .
    ?person dbo:occupation dbr:Actor .
  }

  FILTER(?person = ?shadowCharacter)
}
```",3,3,4,2,2,3,3,71,0,0,4210,0,0.0,0
119,16,train,"Give me the residence, that is a country, of the citizen, that is Spanish, of Spain.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v1 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v1 <http://dbpedia.org/property/residence> ?result . ?v1 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. },"```sparql
SELECT ?residence WHERE {
  ?person dbo:country dbr:Spain .
  ?person dbo:nationality dbr:Spanish .
  ?person dbo:residenceLocation ?location .
  ?location rdfs:label ?residence .
  FILTER (lang(?residence) = ""en"")
}
LIMIT 1
```",2,4,3,2,1,3,3,71,0,0,5,0,0.0,0
39,24,train,Give me the band of Bob Thompson (musician) and professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?bandName ?profession 
WHERE {
  # Query to find the band associated with Bob Thompson (musician)
  { 
    ?person a dbo:MusicArtist ;
            foaf:name ""Bob Thompson"" .
    OPTIONAL { ?person dbo:band ?band . }
    ?band rdfs:label ?bandName .
    FILTER(LANG(?bandName) = 'en')
  }

  # Query to find the profession of The Shadow
  {
    ?shadow a dbo:FictionalCharacter ;
            foaf:name ""The Shadow"" .
    OPTIONAL { ?shadow dbo:occupation ?profession . }
    ?profession rdfs:label ?professionLabel .
    FILTER(LANG(?professionLabel) = 'en')
  }
}
```",3,3,4,2,2,3,3,71,0,0,4,0,0.0,0
347,44,train,"Give me the father of the child of Ferdinand III, Holy Roman Emperor and child of the father of Cecilia Renata of Austria and commander in Thirty Years' War.","SELECT ?result WHERE { <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://dbpedia.org/property/father> ?result . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v2 . }","```sparql
SELECT ?child WHERE {
  wd:Q1234 wdt:P40 ?child . # Ferdinand III's children
}
```

Note: `wd:Q1234` should be replaced with the actual DBpedia resource ID for Ferdinand III, Holy Roman Emperor.",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
737,17,train,"Give me the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?child WHERE {
  # Find the parent(s) of Archduchess Margarete Sophie of Austria
  VALUES ?parent { 
    dbr:Archduchess_Margarete_Sophie_of_Austria 
  }
  
  ?parent dbo:parent ?grandParent .

  # For each grandparent, find their children who are royalty
  ?grandParent dbo:child ?child .
  OPTIONAL {
    ?child dbo:royaltyStatus ?status .
    FILTER (?status != ""non-royal"") # Assuming there's a way to filter non-royals
  }
}
```",2,3,3,2,1,3,3,71,1,3,0,0.25,1.0,0.4
943,14,train,"Give me the father of the father, that is a royalty and an office holder, of Na'od.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
SELECT ?grandfather WHERE {
  ?na'od dbo:name ""Na'od""@en .
  ?na'od dbo:father ?father .
  ?father dbo:father ?grandfather .
  OPTIONAL { ?grandfather dbo:royalTitle ?title . }
  OPTIONAL { ?grandfather dbo:officeHolder ?office . }
  FILTER EXISTS { ?grandfather dbo:royalTitle ?title } .
  FILTER EXISTS { ?grandfather dbo:officeHolder ?office . }
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
39,52,train,Give me the professional in the alter ego of The Shadow and band of Bob Thompson (musician) and professional in the profession of the producer of Coke Studio Philippines.,SELECT ?result WHERE { <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v3 <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v5 . },"```sparql
# Query for Lamont Cranston (The Shadow's alter ego)
SELECT ?person WHERE {
  ?person foaf:name ""Lamont Cranston""@en .
}

UNION

# Query for Bob Thompson's band
SELECT DISTINCT ?band WHERE {
  ?musician dbo:stageName ""Bob Thompson""@en ;
            dbo:memberOfBandOrMusicalGroup ?band .
}

UNION

# Query for the producer of Coke Studio Philippines
SELECT ?producer WHERE {
  ?show dcterms:title ""Coke Studio Philippines""@en ;
        dbo:producer ?producer .
}
```",6,6,7,3,3,3,3,71,0,0,4,0,0.0,0
58,13,train,Give me the spouse of the person born as the birth name of Linda Bruckheimer.,SELECT ?result WHERE { <http://dbpedia.org/resource/Linda_Bruckheimer> <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/ontology/spouse> ?v1 . },"```sparql
# Step 1: Find Linda Bruckheimer's birth name
SELECT ?birthName WHERE {
  dbpedia:Linda_Bruckheimer dbo:birthName ?birthName .
}

# Step 2: Use the birth name to find her spouse
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?spouse WHERE {
  ?person rdfs:label ""Linda Ann Peretz""@en .
  ?person dbo:spouse ?spouse .
}
```",3,3,4,3,1,3,2,20,0,0,1,0,0.0,0
203,37,train,"Give me the military force of Battle of Cape Finisterre (1805) and military force of the war, that is a military conflict and an event, of the reference to William Bayne.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . }","```sparql
# Query to get the belligerents of the Battle of Cape Finisterre (1805)
SELECT ?belligerent WHERE {
  ?battle dbo:type dbr:Naval_battle_of_the_Napoleonic_Wars .
  ?battle rdfs:label ""Battle of Cape Finisterre (1805)""@en .
  ?battle dbo:belligerents ?belligerent .
}

UNION

# Query to find the military conflict associated with William Bayne
SELECT DISTINCT ?conflict WHERE {
  ?person foaf:name ""William Bayne""@en .
  ?event dbo:agent ?person ;
         a dbo:Military_conflict .
  ?event rdfs:label ?conflictLabel .
  FILTER (CONTAINS(LCASE(?conflictLabel), ""war"") || CONTAINS(LCASE(?conflictLabel), ""battle""))
}

UNION

# Query to get the belligerents of the military conflict associated with William Bayne
SELECT ?belligerent WHERE {
  ?event dbo:agent ?person .
  ?person foaf:name ""William Bayne""@en .
  ?event a dbo:Military_conflict ;
         dbo:belligerents ?belligerent .
}
```",4,6,5,3,2,3,3,71,0,0,4,0,0.0,0
119,29,train,"Give me the tenant of Santiago de Compostela and tenant of the residence, that is a country, of Álvaro Quirós and office of Alberto Núñez Feijóo.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v3 . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . },"```sparql
# Query for the tenant (mayor) of Santiago de Compostela
SELECT ?mayor WHERE {
  dbpedia:Compostela_mayoralty_of_Santiago_de? mayor ?mayor .
}

# Query for the country of residence of Álvaro Quirós
SELECT ?country WHERE {
  dbpedia:Álvaro_Quirós_residence ?residence .
  ?residence dbo:locationCountry ?country .
}

# Query for the office of Alberto Núñez Feijóo
SELECT ?office WHERE {
  dbpedia:Alberto_Núñez_Feijóo dbo:positionHeld ?office .
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
89,22,train,Give me the predecessor of the child of Saw Shwe Khet and child of Saw Min Hla.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?result <http://dbpedia.org/ontology/successor> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?commonChild ?predecessor WHERE {
  # Find children of Saw Shwe Khet
  ?child1 dbo:parent dbr:Saw_Shwe_Khet .
  
  # Find children of Saw Min Hla
  ?child2 dbo:parent dbr:Saw_Min_Hla .
  
  # Ensure the child is common to both parents
  FILTER (?child1 = ?child2)
  BIND(?child1 AS ?commonChild)

  # Find predecessor of the common child
  ?commonChild rdfs:subClassOf+ ?predecessor .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
419,7,train,Give me the entity in the birthplace of Yandamuri Veerendranath and alma mater of Chennupati Jagadish.,SELECT ?result WHERE { <http://dbpedia.org/resource/Yandamuri_Veerendranath> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/state> ?v2 . <http://dbpedia.org/resource/Chennupati_Jagadish> <http://dbpedia.org/ontology/almaMater> ?result . },"```sparql
# Query to get Yandamuri Veerendranath's birthplace
SELECT ?birthPlace WHERE {
  wd:Q123456 foaf:bornIn ?birthPlace .
}

# Query to get Chennupati Jagadish's alma mater
SELECT ?almaMater WHERE {
  wd:Q789012 foaf:almaMater ?almaMater .
}

# Assuming we have the results from above queries, let's say they are:
# ?birthPlace = wd:Q987654 (example resource for birthplace)
# ?almaMater = wd:Q987654 (example resource for alma mater)

# Final query to find the common entity
SELECT ?entity WHERE {
  VALUES (?resource) { wd:Q987654 }
  ?entity rdfs:label ?label .
  FILTER(LANG(?label) = 'en')
}
```

Note: Replace `wd:Q123456` and `wd:Q789012` with the actual DBpedia Q-identifiers for Yandamuri Veerendranath and Chennupati Jagadish, respectively. The example resource `wd:Q987654` should be replaced by the actual results from the first two queries.",3,3,4,2,2,2,2,9,0,0,2,0,0.0,0
756,43,train,"Give me the manager of 2020–21 SBV Vitesse season and manager of VfL Bochum and native of the administration, that is a country, of the leader of West Germany.",SELECT ?result WHERE { <http://dbpedia.org/resource/West_Germany> <http://dbpedia.org/property/leader> ?v0 . <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v4 <http://dbpedia.org/property/leader> ?v0 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . },"```sparql
# Query for manager of 2020–21 SBV Vitesse season
SELECT ?manager WHERE {
  ?team rdf:type dbo:FootballClub .
  ?team foaf:name ""SBV Vitesse""@en .
  ?season dbo:club ?team ;
          dbo:season ""2020–21""^^xsd:string .
  ?season dbo:manager ?manager .
}

UNION

# Query for manager of VfL Bochum
SELECT ?manager WHERE {
  ?team rdf:type dbo:FootballClub .
  ?team foaf:name ""VfL Bochum""@en .
  ?season dbo:club ?team ;
          dbo:season ?year .
  FILTER(?year >= 2020 && ?year <= 2021) # Assuming we want the manager around this period
  ?season dbo:manager ?manager .
}

UNION

# Query for leader of West Germany and their administrative origin
SELECT ?country WHERE {
  ?person dbo:nationality ?country ;
          foaf:name ?name .
  ?position dbo:officeHolder ?person ;
            dbo:office ""Chancellor of Germany""@en .
  FILTER(CONTAINS(?name, ""West Germany"")) # Assuming the person is associated with West Germany
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
258,17,train,"Give me the establishment of 1955-12-02 and alma mater of the person born, that is a politician, as the birth name of Eleonora Menicucci.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/foundingDate> ""1955-12-02""^^<http://www.w3.org/2001/XMLSchema#date> . <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/property/birthName> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/property/birthName> ?v0 . ?v3 <http://dbpedia.org/ontology/almaMater> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?establishmentDate ?almaMater WHERE {
  # Find Eleonora Menicucci's resource based on her birthdate and name
  ?person dbo:birthDate ""1955-12-02""^^xsd:date ;
          rdfs:label ""Eleonora Menicucci""@en .
  
  # Assuming 'establishment' refers to a political role or office start date
  OPTIONAL { 
    ?person dbo:officeStartYear ?year .
    ?role dbo:startDate ?establishmentDate .
    FILTER (?person = ?role)
  }
  
  # Find her alma mater
  ?person dbo:almaMater ?almaMater .
}
```",4,5,5,3,2,3,2,20,0,0,1,0,0.0,0
557,61,train,"Give me the producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/knownFor> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v3 <http://dbpedia.org/ontology/producer> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v5 . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . },"```sparql
# Step 1: Find the actor of ""Johnny Doughboy"" and one of their works' producers
SELECT ?actor ?work ?producer WHERE {
  ?film dbp:title ""Johnny Doughboy""@en .
  ?film dbo:starring ?actor .
  ?film dbo:productionCompany ?company .
  ?company dbo:president ?producer .
  OPTIONAL { ?actor dbo:film ?work . }
}

UNION

# Step 2: Find the actor of ""High Society Blues"" and one of their works' producers
SELECT ?actor ?movie ?producer WHERE {
  ?film dbp:title ""High Society Blues""@en .
  ?film dbo:starring ?actor .
  ?film dbo:productionCompany ?company .
  ?company dbo:president ?producer .
  OPTIONAL { ?actor dbo:film ?movie . }
}

# Step 3: Find if there is a common producer
SELECT DISTINCT ?commonProducer WHERE {
  # From Johnny Doughboy's actor works
  ?work1 dbp:director ?producer1 .
  
  # From High Society Blues' actor works
  ?movie2 dbp:director ?producer2 .

  FILTER (?producer1 = ?producer2)
  BIND(?producer1 AS ?commonProducer)
}
```",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
412,12,train,Give me the war of Konstantinos Ventiris and war of Napoleon Zervas and entity in Athens.,SELECT ?result WHERE { <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?athensEntity WHERE {
  # Find the Greek Civil War involving Konstantinos Ventiris and Napoleon Zervas
  ?war a dbo:MilitaryConflict ;
      dbo:participatedIn [
        dbo:agent dbr:Konstantinos_Ventiris ;
        dbo:agent dbr:Napoleon_Zervas
      ] .

  # Find an entity in Athens
  ?athensEntity a dbo:Place ;
                rdfs:label ?labelAthens ;
                dbo:location dbr:Athens .
  
  FILTER (lang(?labelAthens) = 'en')
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
782,51,train,"Give me the band of the band member of Eric Clapton and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> ?v4 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
# Step 1: Find bands associated with Eric Clapton
SELECT ?band WHERE {
  wd:Q12288 dbo:musicArtist ?band .
}

UNION

# Step 2: Identify Nick Curran as a musical artist
SELECT ?nickCurran WHERE {
  wd:Q1234567 rdf:type wdno:MusicalArtist .
}

UNION

# Step 3: Find associations between Nick Curran and other musical artists
SELECT ?associatedArtist WHERE {
  ?association dbo:person ?nickCurran ;
               dbo:associatedWith ?associatedArtist .
}

UNION

# Step 4: Determine the band(s) that these associated artists are part of
SELECT ?band WHERE {
  ?associatedArtist dbo:musicArtist ?band .
}
```

Note: Replace `wd:Q12288` with Eric Clapton's DBpedia QID and `wd:Q1234567` with Nick Curran's DBpedia QID. The exact properties like `dbo:musicArtist`, `rdf:type`, `dbo:associatedWith` might need adjustments based on the actual schema in DBpedia.",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
159,37,train,Give me the reference to the writer of the work of George Ducas and commander in Great Turkish War.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?v0 <http://dbpedia.org/property/writer> ?v3 . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?reference WHERE {
  ?eugene dbo:wikiPageRedirects dbr:Prince_Eugene_of_Savoy .
  ?ducas dbo:wikiPageRedirects dbr:George_Ducas .
  
  OPTIONAL { 
    ?eugene dbo:mentionedIn ?reference .
    ?reference dbo:author ?ducas .
  }
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
905,59,train,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and parent of the father, that is a royalty, of the spouse of Maria of Bytom.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v0 <http://dbpedia.org/property/father> ?v4 . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
# Step 1: Identify Philip, Despot of Romania
SELECT ?philip WHERE {
  ?philip dbo:title ""Despot of Romania""@en .
  ?philip foaf:name ""Philip"" .
}

# Step 2: Find his parent that is royalty
SELECT ?royalParent WHERE {
  VALUES ?philip { <http://dbpedia.org/resource/Philip,_Despot_of_Romania> }
  ?parent dbo:child ?philip .
  ?parent dbo:title ?title .
  FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""queen""))
}

# Step 3: Determine the spouse of this royal parent
SELECT ?spouse WHERE {
  VALUES ?royalParent { <URI_OF_ROYAL_PARENT> }
  ?royalParent dbo:spouse ?spouse .
}

# Step 4: Identify Maria of Bytom
SELECT ?maria WHERE {
  ?maria foaf:name ""Maria of Bytom""@en .
}

# Step 5: Find her spouse
SELECT ?spouseOfMaria WHERE {
  VALUES ?maria { <URI_OF_MARIA> }
  ?maria dbo:spouse ?spouseOfMaria .
}

# Step 6: Determine the father of this spouse that is royalty
SELECT ?royalFather WHERE {
  VALUES ?spouseOfMaria { <URI_OF_SPOUSE_OF_MARIA> }
  ?parent dbo:child ?spouseOfMaria .
  ?parent dbo:title ?title .
  FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""queen""))
}

# Step 7: Identify the spouse of this royal father
SELECT ?finalSpouse WHERE {
  VALUES ?royalFather { <URI_OF_ROYAL_FATHER> }
  ?royalFather dbo:spouse ?finalSpouse .
}
```

Note: Replace `<URI_OF_ROYAL_PARENT>`, `<URI_OF_MARIA>`, `<URI_OF_SPOUSE_OF_MARIA>`, and `<URI_OF_ROYAL_FATHER>` with the actual URIs obtained from previous query results.",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
297,5,train,"Give me the entity in the birth place, that is a country, of Little Hat Jones.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> ?v1 . <http://dbpedia.org/resource/Little_Hat_Jones> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?country WHERE {
  ?person rdfs:label ""Little Hat Jones""@en .
  ?person dbo:birthPlace ?place .
  ?place a dbo:Country .
  BIND(?place AS ?country)
}
```",2,3,3,2,1,2,2,9,0,1,63421,0.0,0.0,0
213,1,train,Give me the country of Cat Country (novel).,SELECT ?result WHERE { <http://dbpedia.org/resource/Cat_Country_(novel)> <http://dbpedia.org/ontology/country> ?result . },"```sparql
SELECT ?country WHERE {
  ?novel dbo:wikiPageRedirects db:Q1234567 . # Assuming Q1234567 is the DBpedia resource ID for ""Cat Country""
  ?novel dbo:locationCountry ?country .
}
```

Note: The actual DBpedia resource identifier (e.g., `db:Q1234567`) for ""Cat Country"" should be replaced with the correct one from DBpedia.",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
58,15,train,Give me the spouse of the person born as the birth name of Linda Bruckheimer and producer of 12 Strong.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> ?v1 . <http://dbpedia.org/resource/Linda_Bruckheimer> <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . <http://dbpedia.org/resource/12_Strong> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
SELECT ?spouse WHERE {
  wd:Q12345/wiki/alias ""Jerry Bruckheimer""@en.
  wd:Q12345 wdt:P26 ?spouse.
}
```

Note: Replace `wd:Q12345` with the actual DBpedia resource identifier for Jerry Bruckheimer once confirmed.",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
816,1,train,Give me the parent of Amy Arbus.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parentLabel WHERE {
  ?amy a dbo:Person ;
       foaf:name ""Amy Arbus""@en .
  
  ?amy dbo:parent ?parent .
  
  ?parent rdfs:label ?parentLabel .
  FILTER(LANG(?parentLabel) = 'en')
}
```",1,1,2,1,1,3,3,71,0,2,2,0.0,0.0,0
472,11,train,Give me the administration of the mayor of Duchy of Schleswig.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> ?v1 . <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v1 . },"```sparql
SELECT ?city ?mayor WHERE {
  ?city a dbo:City ;
        dbo:country dbr:Denmark ;
        rdfs:label ?label .
  FILTER(CONTAINS(LCASE(?label), ""sønderjylland"") && LANGMATCHES(LANG(?label), ""da""))
  
  OPTIONAL { 
    ?city dbo:mayor ?mayor .
  }
}
ORDER BY ?city
LIMIT 10
```

This query attempts to find cities in Southern Jutland (Sønderjylland) with their mayors. Adjustments can be made for Schleswig-Holstein if needed.",2,2,3,2,1,2,3,28,0,0,2,0,0.0,0
159,50,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v3 . ?v0 <http://dbpedia.org/property/writer> ?v4 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?tvShow ?writer WHERE {
  # Find wars associated with Jean Baptist, Comte d'Arco
  ?person a dbo:Person ;
          foaf:name ""Jean Baptist, Comte d'Arco""@en .
  
  OPTIONAL { 
    ?person dbo:participatedIn ?war .
  }
  
  # Find TV shows related to the war
  ?tvShow dbo:subject ?war ;
          dbo:title ?title .
  
  # Check if the war is also a societal event (e.g., depicted in media)
  OPTIONAL {
    ?societalEvent dbo:depicts ?war ;
                   rdf:type dbo:SocietalEvent .
  }
  
  # Find works by or about George Ducas
  ?work dbo:author ?writer ;
        dbo:title ?title2 .
  
  ?writer foaf:name ""George Ducas""@en .

  FILTER EXISTS { ?tvShow . } # Ensure there is a TV show related to the war

}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
633,9,train,"Give me the parent, that is a royalty and a noble, of the child, that is a royalty, of Antoine, Duke of Lorraine.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Antoine,_Duke_of_Lorraine> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT DISTINCT ?parent WHERE {
  # Find Antoine, Duke of Lorraine
  ?antoine dbo:spouse ?spouse .
  FILTER (str(?antoine) = ""Antoine, Duke of Lorraine""^^xsd:string)

  # Find his children who are royalty
  ?child dbo:childOf ?antoine ;
         a dbo:Royal .

  # Find the parent of this child
  ?parent dbo:child ?child .

  # Ensure the parent is both royalty and noble
  ?parent a dbo:Royal ;
          a dbo:Noble .
}
```",2,5,3,2,1,3,2,20,0,0,1,0,0.0,0
737,31,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria and child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v1 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v0 . ?v0 <http://dbpedia.org/property/father> ?v1 . }","```sparql
SELECT ?predecessor WHERE {
  # Step 1: Identify Archduchess Helena's spouse
  wd:Q123456 a dbo:Spouse; 
             dbo:spouse wd:Q789012 . # Assuming Q123456 is Helena and Q789012 is Albrecht

  # Step 2: Find their child who is royalty
  ?child dbo:parent wd:Q789012;
         dbo:parent wd:Q123456;
         a dbo:RoyalFamilyMember .

  # Step 3: Retrieve the predecessor of Princess Alice (one of her parents)
  ?predecessor dbo:child ?child .
}
```

Note: The actual DBpedia IDs for Archduchess Helena, Albrecht, and Princess Alice need to be replaced with their correct identifiers in the query. This example uses placeholders (`Q123456`, `Q789012`) which should be substituted with the appropriate resource URIs from DBpedia.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
353,34,train,"Give me the child of the parent of the child, that is a royalty, of Roger II of Sicily and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v1 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childOfChild WHERE {
  # Step 1: Identify Roger II of Sicily and Elvira of Castile
  ?roger a dbo:Monarch ;
        foaf:name ""Roger II of Sicily""@en .
  ?elvira a dbo:Spouse ;
          foaf:name ""Elvira of Castile""@en .

  # Step 2: Find their child who is royalty
  ?child dbo:spouseOrPartnerOf ?roger ;
         dbo:spouseOrPartnerOf ?elvira ;
         a dbo:Monarch .
  
  # Step 3: Determine the parent of that royal child (either Roger II or Elvira)
  ?parent dbo:child ?child .

  # Step 4: Identify the child of this parent, which should also be royalty
  ?childOfChild dbo:spouseOrPartnerOf ?parent ;
                a dbo:Monarch .
}
```",4,5,5,3,2,3,3,71,0,0,4,0,0.0,0
80,38,train,Give me the actor of the album of What You Know (T.I. song) and professional in the alter ego of The Shadow.,SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find the actor known as ""The Shadow""
  OPTIONAL { 
    ?shadowActor foaf:name ""Lambert Hillyer""@en .
    ?shadowActor dbo:profession dbr:Film_actor .
  }
  
  # Find the album of T.I. song ""What You Know""
  ?album dbo:title ""Trap Muzik"" ;
         dbo:artist dbr:T.I._(rapper) .

  # Check if there is any connection between the actor and the album
  OPTIONAL {
    ?actor foaf:name ?name .
    FILTER(?name = ""Lambert Hillyer""@en)
  }
  
  UNION {
    ?albumArtist dbo:title ""Trap Muzik"" ;
                 dbo:artist ?actor .
  }

}
```",4,4,5,2,2,3,3,71,0,0,4,0,0.0,0
628,6,train,Give me the birth name of Bobby Shmurda.,SELECT ?result WHERE { <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?result . },"```sparql
SELECT ?givenName WHERE {
  ?person foaf:name ""Bobby Shmurda""@en .
  ?person foaf:givenname ?givenName .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
943,24,train,Give me the father of Baeda Maryam I and reference to the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?person dbo:parent ?father .
  ?person rdfs:label ""Baeda Maryam I""@en .
  FILTER (lang(?person) = 'en')
}

UNION

SELECT ?alterEgo WHERE {
  ?character dbo:aliasName ?alterEgo .
  ?character rdfs:label ""The Shadow""@en .
  FILTER (lang(?character) = 'en')
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
140,10,train,"Give me the ruling party, that is a political party and an organisation, in the death place, that is a settlement, of John McDermott (American artist).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/John_McDermott_(American_artist)> <http://dbpedia.org/ontology/deathPlace> ?v0 . ?v0 <http://dbpedia.org/property/leaderParty> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?rulingParty WHERE {
  # Find John McDermott's death place
  dbr:John_McDermott_(artist) dbo:deathPlace ?deathPlace .

  # Ensure the death place is a settlement
  ?deathPlace a dbo:Settlement .

  # Find the ruling political party in that settlement
  ?settlement dbo:rulingParty ?rulingParty .
  
  FILTER(?settlement = ?deathPlace)
}
```",2,5,3,2,1,3,2,20,0,0,1,0,0.0,0
375,4,train,"Give me the location, that is English and a settlement, for ,.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/postalCode> "","" . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>

SELECT DISTINCT ?settlement ?location
WHERE {
  ?settlement a dbo:PopulatedPlace ;
              rdfs:label ?label .
  FILTER (lang(?label) = 'en')
  
  OPTIONAL { ?settlement dbo:country ?location }
  OPTIONAL { ?settlement geo:lat ?latitude ; geo:long ?longitude }
}
ORDER BY ?settlement
```",1,3,2,1,1,3,2,20,6,594111,0,1.0099020899923752e-05,1.0,2.0197837821461212e-05
687,18,train,Give me the player in Juan Carlos Molina (footballer) and player in Sergio Agüero and team of Pablo Aimar.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . },"```sparql
# Query for teammates of Juan Carlos Molina (footballer)
SELECT DISTINCT ?teammate WHERE {
  ?molina dbo:team ?team .
  FILTER(STRSTARTS(STR(?molina), ""http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)""))
  
  ?teammate dbo:team ?team .
  FILTER(?teammate != ?molina)
}

UNION

# Query for teammates of Sergio Agüero
SELECT DISTINCT ?teammate WHERE {
  ?aguero dbo:team ?team .
  FILTER(STRSTARTS(STR(?aguero), ""http://dbpedia.org/resource/Sergio_Ag%C3%BCero""))
  
  ?teammate dbo:team ?team .
  FILTER(?teammate != ?aguero)
}

UNION

# Query for the team of Pablo Aimar
SELECT DISTINCT ?team WHERE {
  ?aimar dbo:team ?team .
  FILTER(STRSTARTS(STR(?aimar), ""http://dbpedia.org/resource/Pablo_Aimar""))
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
103,52,train,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in the profession of Shatrughan Sinha and professional in .","SELECT ?result WHERE { <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v2 <http://dbpedia.org/property/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  # Find Stephen Fry's DBpedia resource
  ?stephenFry a dbo:Person ;
              foaf:name ""Stephen Fry""@en .
  
  # Find Shatrughan Sinha's DBpedia resource
  ?shatrughanSinha a dbo:Person ;
                   foaf:name ""Shatrughan Sinha""@en .

  # Find productions involving Stephen Fry
  ?production dbo:starring ?stephenFry ;
              a ?type .
  
  # Ensure the production is also a television show or movie
  FILTER(?type IN (dbo:Film, dbo:TelevisionShow))

  # Find productions involving Shatrughan Sinha
  ?production2 dbo:starring ?shatrughanSinha .

  # Match productions that involve both actors
  FILTER(STR(?production) = STR(?production2))
  
  # Retrieve other actors involved in the production
  ?production dbo:starring ?actor .
}
```",6,7,7,3,3,3,3,71,0,0,13,0,0.0,0
492,21,train,Give me the death place of Carolyn Jones and death place of the actor of Aladdin (1958 film) and death place of Reed Howes.,SELECT ?result WHERE { <http://dbpedia.org/resource/Reed_Howes> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Aladdin_(1958_film)> <http://dbpedia.org/property/starring> ?v1 . ?v1 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for Carolyn Jones' death place
SELECT ?deathPlace WHERE {
  wd:Q123456 wdt:P20 ?deathPlace .
}

UNION

# Query for Wolfgang Reitherman's (considered as the actor of Aladdin) death place
SELECT ?deathPlace WHERE {
  wd:Q234567 wdt:P20 ?deathPlace .
}

UNION

# Query for Reed Howes' death place
SELECT ?deathPlace WHERE {
  wd:Q345678 wdt:P20 ?deathPlace .
}
```

Note: The placeholders `wd:Q123456`, `wd:Q234567`, and `wd:Q345678` represent the DBpedia identifiers for Carolyn Jones, Wolfgang Reitherman, and Reed Howes respectively. You would need to replace these with their actual DBpedia QIDs.",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
361,3,train,Give me the profession of Frédéric Bouraly.,SELECT ?result WHERE { <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?occupation WHERE {
  ?person a dbo:Person ;
          foaf:name ""Frédéric Bouraly""@en .
  OPTIONAL { ?person dbo:occupation ?occupation . }
}
```",1,1,2,1,1,2,3,28,0,1,1,0.0,0.0,0
687,17,train,"Give me the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?result <http://dbpedia.org/ontology/birthDate> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. },"```sparql
SELECT ?person WHERE {
  # Find Marcelo Sarmiento's birth date
  ?marceloSarmiento dbo:birthDate ?birthdate .
  
  FILTER (str(?marceloSarmiento) = ""Marcelo_Sarmiento"")

  # Find persons with the same birthdate who are both soccer players and managers
  ?person dbo:birthDate ?birthdate ;
          a dbo:SoccerPlayer, dbo:SoccerManager .

  FILTER (?person != ?marceloSarmiento)
}
```",2,4,3,2,1,3,3,71,0,0,5,0,0.0,0
375,2,train,Give me the war of Hashiba Hidekatsu.,SELECT ?result WHERE { <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?description WHERE {
  ?person dbo:birthName ""Hidekatsu"" .
  ?person dbo:spouse ?parent .
  ?parent rdfs:label ""Toyotomi Hideyoshi""@en .
  
  OPTIONAL { 
    ?event dbo:agent ?person .
    ?event a dbo:MilitaryConflict ;
           rdfs:label ?war .
    ?event dbo:description ?description .
  }
}
```",1,1,2,1,1,2,3,28,0,0,5,0,0.0,0
742,10,train,"Give me the resident of the region, that is a settlement, of Eastern European Time.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Eastern_European_Time> . ?result <http://dbpedia.org/property/residence> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?settlement WHERE {
  ?settlement a dbo:Settlement .
  ?settlement dbp:timeZone ""Europe/Kiev""^^xsd:string .
}
```",2,3,3,2,1,3,2,20,0,0,159,0,0.0,0
585,5,train,Give me the professional in Actress.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actress""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:occupation ?occupation .
  ?occupation rdfs:label ?label .
  FILTER (CONTAINS(LCASE(?label), ""actress""))
  OPTIONAL { ?person foaf:name ?name }
}
ORDER BY ?name
LIMIT 100
```",1,1,2,1,1,3,2,20,18,166,19223,0.09782608695652174,0.0009355023127696066,0.0018532818532818532
633,0,train,Give me the spouse of Renée of Bourbon.,SELECT ?result WHERE { <http://dbpedia.org/resource/Renée_of_Bourbon> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?spouse WHERE {
  ?person dbo:givenName ""Renée""@en .
  ?person dbo:familyName ""of Bourbon""@en .
  ?person dbo:spouse ?spouse .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
263,11,train,"Give me the parent of the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . }","```sparql
SELECT ?child ?parent WHERE {
  ?person dbr:Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne dbo:spouse ?spouse .
  ?child dbo:parent ?person .
  OPTIONAL { ?child dbo:parent ?parent . }
}
```",2,2,3,2,1,2,3,28,0,0,3,0,0.0,0
595,3,train,"Give me the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?work dbo:author dbr:Hillary_Clinton .
  ?work a dbo:Book ;
        a dbo:WrittenWork .
}
```",1,3,2,1,1,3,3,71,5,0,0,1.0,1.0,1.0
595,0,train,Give me the spouse of Hillary Clinton.,SELECT ?result WHERE { <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?spouseName WHERE {
  wd:Q42 dbo:spouse ?spouse .
  ?spouse rdfs:label ?spouseName .
  FILTER (lang(?spouseName) = ""en"")
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
668,33,train,"Give me the associated musical artist of $pacely and professional in the profession of the writer, that is a musical artist, of The Live Anthology.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . },"```sparql
SELECT ?writer WHERE {
  ?album dcterms:creator ?person .
  ?person foaf:name ""The Live Anthology"" .
  ?person dbo:profession dbo:Writer ;
          dbo:occupation dbo:Musician .
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
943,11,train,"Give me the child of the parent, that is a royalty, of Yeshaq I.",SELECT ?result WHERE { <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?royaltyChild WHERE {
  ?yeshaq1 dbo:parent ?parent .
  FILTER(STR(?yeshaq1) = ""Yeshaq_I"") .

  ?parent dbo:child ?child .
  
  OPTIONAL { ?child a ?type . }
  
  FILTER EXISTS {
    ?child (dbo:Monarch|dbo:RoyalFamilyMember) ?role .
  }

  BIND(?child AS ?royaltyChild)
}
```",2,3,3,2,1,3,3,71,0,0,4,0,0.0,0
399,2,train,Give me the person born as Emilia Yancheva Valeva.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Emilia Yancheva Valeva""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?currentName WHERE {
  ?person a foaf:Person .
  ?person dbo:birthName ""Emilia Yancheva Valeva""@en .
  OPTIONAL { ?person foaf:name ?currentName }
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
816,28,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of Doon Arbus and parent of Amy Arbus.",SELECT ?result WHERE { <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . },"```sparql
SELECT ?movie ?actor WHERE {
  ?movie dbo:starringHerschelBernardi dbpedia:Herschel_Bernardi .
  ?movie dbo:parentOfDoonArbus dbpedia:Doon_Arbus .
  ?movie dbo:parentOfAmyArbus dbpedia:Amy_Arbus .
  ?movie dbo:starring ?actor .
  FILTER(?actor != dbpedia:Herschel_Bernardi)
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
80,6,train,Give me the album of What You Know (T.I. song).,SELECT ?result WHERE { <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?result . },"```sparql
SELECT ?album WHERE {
  ?song dbo:artist dbr:T.I. ;
        rdfs:label ""What You Know""@en .
  ?song dbo:album ?album .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
263,19,train,"Give me the parent of Mary Elphinstone, Lady Elphinstone and parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne and native of the birthplace, that is a region and a country, of William Gayner.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Mary_Elphinstone,_Lady_Elphinstone> . <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parentMary ?parentPatrick ?birthPlaceRegion ?birthPlaceCountry WHERE {
  # Find Mary Elphinstone's parent
  OPTIONAL { 
    dbr:Mary_Elphinstone_Lady_Elphinstone dbo:parent ?parentMary .
  }

  # Find Patrick Bowes-Lyon's parent
  OPTIONAL { 
    dbr:Patrick_Bowes-Lyon_15th_Earl_of_Strathmore_and_Kinghorne dbo:parent ?parentPatrick .
  }
  
  # Get William Gayner's birthplace region and country
  dbr:William_Gayner dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:countryName ?birthPlaceCountry ;
              dbo:region ?birthPlaceRegion .

  # Check if any parent is from the same region and country as William Gayner
  OPTIONAL { 
    ?parentMary dbo:birthPlace ?parentBirthPlace .
    ?parentBirthPlace dbo:countryName ?parentCountry ;
                     dbo:region ?parentRegion .
    FILTER (?parentRegion = ?birthPlaceRegion && ?parentCountry = ?birthPlaceCountry)
  }
  
  OPTIONAL {
    ?parentPatrick dbo:birthPlace ?parentBirthPlace .
    ?parentBirthPlace dbo:countryName ?parentCountry ;
                      dbo:region ?parentRegion .
    FILTER (?parentRegion = ?birthPlaceRegion && ?parentCountry = ?birthPlaceCountry)
  }
}
```",4,6,5,2,3,2,3,28,0,0,2,0,0.0,0
871,12,train,"Give me the parent of Edward Stanley, 17th Earl of Derby and father of Arthur Stanley (politician).","SELECT ?result WHERE { <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?parent WHERE {
  ?person dbo:givenName ""Edward"" .
  ?person dbo:familyName ""Stanley"" .
  ?person dbo:title dbr:17th_Earl_of_Derby .
  ?person dbo:father ?parent .
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
225,0,train,Give me the entity in Japan.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> . },"```sparql
SELECT ?entity WHERE {
  ?entity dbo:country dbr:Japan .
}
```",1,1,2,1,1,3,2,20,8916,0,0,1.0,1.0,1.0
375,18,train,Give me the war of Toyotomi Hidenaga and war of the child of Toyotomi Hideyoshi.,SELECT ?result WHERE { <http://dbpedia.org/resource/Toyotomi_Hideyoshi> <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?description WHERE {
  VALUES (?person ?role) { 
    (dbr:Toyotomi_Hidenaga dbo:spouseRole)
    (dbr:Toyotomi_Hideyori dbo:spouseRole)
  }
  
  ?event dbo:participatedIn ?person .
  ?event dbo:description ?description .

  FILTER (
    CONTAINS(LCASE(?description), ""battle of komaki and nagakute"") ||
    CONTAINS(LCASE(?description), ""siege of osaka"")
  )
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
159,7,train,Give me the military force of Battle of Vienna.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
  ?battle rdf:type dbo:Battle .
  ?battle rdfs:label ""Battle of Vienna""@en .
  ?battle dbo:participatedIn ?event .
  ?participant dbo:participatedIn ?event .
  ?participant rdfs:label ?militaryForce .
}
```",1,1,2,1,1,3,3,71,0,0,9,0,0.0,0
414,2,train,Give me the award of Rainer Weiss.,SELECT ?result WHERE { <http://dbpedia.org/resource/Rainer_Weiss> <http://dbpedia.org/property/awards> ?result . },"```sparql
SELECT ?award WHERE {
  ?person foaf:name ""Rainer Weiss""@en .
  ?person dbo:award ?award .
}
```",1,1,2,1,1,3,2,20,8,0,0,1.0,1.0,1.0
198,10,train,"Give me the war of Amasa Tracy and entity in Charleston, South Carolina.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?location WHERE {
  ?person dbo:nationality dbr:United_States_of_America ;
          rdfs:label ""Amasa Tracy""@en .
  
  ?war dbo:name ""American Civil War""@en ;
       dbo:participatedIn ?event .

  ?event dbo:place dbr:Charleston,_South_Carolina ;
         dbo:location ?location .

  FILTER(CONTAINS(LCASE(?person), LCASE(""Amasa Tracy"")))
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
871,54,train,"Give me the parent of the awardee of Commander of the Royal Victorian Order and father of Arthur Stanley (politician) and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/child> ?v4 . ?result <http://dbpedia.org/ontology/child> ?v0 . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
    # Find individuals who are awardees of the Commander of the Royal Victorian Order
    ?person dbo:awardReceived dbr:Commander_of_the_Royal_Victorian_Order .
    
    # Check if they are the father of Arthur Stanley (politician)
    ?person dbo:child dbr:Arthur_Stanley_(politician) .

    # Find Edward Stanley, 17th Earl of Derby's children who are politicians or office holders
    dbr:Edward_Stanley,_17th_Earl_of_Derby dbo:child ?child .
    ?child a dbo:Politician ;
           dbo:officeHolder ?office .

    # Check if the person is also connected to these children through lineage
    ?person dbo:parent ?parent .

    # Ensure the parent is a politician and office holder
    ?parent a dbo:Politician ;
            dbo:officeHolder ?office .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
295,7,train,"Give me the writer of the work, that is a musical work, of Apache Indian.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/writer> ?result . ?v1 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Apache_Indian> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?work ?writer WHERE {
  # Find Apache Indian's resource in DBpedia
  VALUES ?apacheIndian { dbr:Apache_Indian }
  
  # Get all musical works associated with Apache Indian
  ?work dbo:artist ?apacheIndian .
  ?work a dbo:MusicalWork .

  OPTIONAL {
    # Try to find the writer of each work
    ?work dbo:composer ?writer .
  }

  FILTER(?writer != dbr:Apache_Indian) # Exclude Apache Indian himself as a composer if listed
}
```",2,3,3,2,1,3,2,20,0,0,1,0,0.0,0
595,32,train,"Give me the author of the work, that is a written work and a book and a work, of Bill Clinton and spouse of the author, that is a politician and an office holder, of An Invitation to the White House.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/property/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?spouse WHERE {
  ?book dbo:title ""An Invitation to the White House""@en .
  ?book dbo:author ?author .
  ?author foaf:name ""Bill Clinton"" .
  
  OPTIONAL {
    ?author dbo:spouse ?spouse .
    ?spouse dbo:occupation ?occupation .
    FILTER(CONTAINS(LCASE(?occupation), ""politician"") || CONTAINS(LCASE(?occupation), ""office holder""))
  }
}
```",4,9,5,2,2,3,3,71,0,0,1,0,0.0,0
103,41,train,"Give me the professional in  and professional in the profession of Shatrughan Sinha and actor of the movie, that is a television show, with Richard E. Grant.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/property/occupation> """"@en . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v4 . }","```sparql
# Step 1: Get Shatrughan Sinha's professions
SELECT ?profession WHERE {
  wd:Q123456 wdt:P106 ?occupation .
  ?occupation rdfs:label ?profession .
  FILTER (lang(?profession) = ""en"")
}

UNION

# Step 2: Find actors of the movie ""Sholay""
SELECT DISTINCT ?actor WHERE {
  wd:Q789012 wdt:P161 ?castMember .
  ?castMember wdt:P31/wdt:P279* wd:Q11424 . # Actor or subclass
  ?castMember rdfs:label ?actorLabel .
  FILTER (lang(?actorLabel) = ""en"")
}

UNION

# Step 3: Find a television show with Richard E. Grant and an actor from ""Sholay""
SELECT DISTINCT ?tvShow WHERE {
  ?tvShow wdt:P161 ?castMember .
  ?castMember rdfs:label ?castLabel .
  FILTER (lang(?castLabel) = ""en"" && (
    ?castLabel = ""Richard E. Grant"" || 
    EXISTS { ?actor wd:Q123456 . ?actor rdfs:label ?actorLabel . FILTER(lang(?actorLabel) = ""en"") }
  ))
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Shatrughan Sinha and `wd:Q789012` with the DBpedia ID for the movie ""Sholay.""",5,6,6,2,3,3,3,71,0,0,13,0,0.0,0
353,36,train,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and child of Roger II of Sicily.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?childOfChild WHERE {
  # Step 1: Identify Constance of Burgundy
  ?constance a dbo:Person ;
             rdfs:label ""Constance of Burgundy""@en .

  # Step 2: Find her spouse
  ?spouse dbo:spouse ?constance .

  # Step 3: Determine the child of this spouse
  ?child dbo:parent ?spouse .
  
  # Step 4: Identify the royalty among these children
  ?childOfChild dbo:parent ?child ;
                a dbo:Monarch ; # Assuming Monarch is used for royalty

  # Step 5: Find the child of Roger II of Sicily
  ?rogerII a dbo:Person ;
           rdfs:label ""Roger II of Sicily""@en .
  
  ?childOfRogerII dbo:parent ?rogerII .

  # Step 6: Match the two individuals
  FILTER (?childOfChild = ?childOfRogerII)
}
```",4,5,5,3,2,3,3,71,0,0,3,0,0.0,0
23,2,train,Give me the party of Gustavo Petro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party WHERE {
  ?person a dbo:Politician ;
          foaf:name ""Gustavo Petro""@en .
  OPTIONAL { ?person dbo:party ?party . }
  FILTER (lang(?person) = 'en')
}
```",1,1,2,1,1,2,3,28,0,0,6,0,0.0,0
89,1,train,Give me the spouse of Saw Shwe Khet.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?spouseName WHERE {
  ?person rdfs:label ""Saw Shwe Khet""@en .
  ?person dbo:spouse ?spouse .
  ?spouse rdfs:label ?spouseName .
  FILTER(LANG(?spouseName) = 'en')
}
```",1,1,2,1,1,3,3,71,0,2,2,0.0,0.0,0
531,56,train,"Give me the office of Mariano Rajoy and tenant of the residence of Alberto Ruiz-Gallardón and office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v0 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v1 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/property/leader> ?v1 . },"```sparql
SELECT DISTINCT ?marianoRajoyOffice WHERE {
  # Step 1: Find Miguel Maura's political party
  ?miguelMaura dbo:politicalParty ?party .
  
  FILTER (str(?miguelMaura) = ""Miguel_Maura"")

  # Step 2: Find the leader of that party who is a politician
  ?party dbo:leader ?partyLeader .
  ?partyLeader rdf:type dbo:Politician .

  # Step 3: Get Alberto Ruiz-Gallardón's residence
  ?albertoRuizGallardon dbo:residence ?residence .
  
  FILTER (str(?albertoRuizGallardon) = ""Alberto_Ruiz-Gallardón"")

  # Step 4: Identify Mariano Rajoy's office
  ?marianoRajoy dbo:office ?marianoRajoyOffice .

  FILTER (str(?marianoRajoy) = ""Mariano_Rajoy"")
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
89,20,train,"Give me the child of Saw Min Hla and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v2 . ?result <http://dbpedia.org/ontology/spouse> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child ?spouse WHERE {
  # Find Saw Min Hla's child
  ?sawMinHla dbo:child ?child .
  
  FILTER(?sawMinHla = dbpedia:Saw_Min_Hla) .

  # Find Myat Hpone Pyo's father
  ?myatHponePyo dbo:father ?father .
  
  FILTER(?myatHponePyo = dbpedia:Myat_Hpone_Pyo) .

  # Find the spouse of Myat Hpone Pyo's father
  ?father dbo:spouse ?spouse .

  # Ensure the spouse is a royalty
  OPTIONAL { ?spouse dbo:royaltyTitle ?title . }
  
  FILTER(?title != """")
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
39,32,train,Give me the professional in the profession of Sam Concepcion and professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
# Query to find the profession of Sam Concepcion
SELECT ?profession WHERE {
  dbpedia:Sam_Concepcion dbo:occupation ?profession .
}

UNION

# Query to find the real name associated with The Shadow and then their profession
SELECT ?realNameProfession WHERE {
  # Find the person who uses ""The Shadow"" as an alter ego
  ?person rdfs:label ""The Shadow""@en .
  
  # Get the real name of this person
  ?person foaf:name ?realName .

  # Query for the profession of the real person
  ?person dbo:occupation ?profession .
  
  BIND(CONCAT(?realName, "" - "", ?profession) AS ?realNameProfession)
}
```",4,4,5,2,2,3,3,71,0,0,39640,0,0.0,0
68,6,train,"Give me the father of Isabella of Austria and child of Maximilian I, Holy Roman Emperor.","SELECT ?result WHERE { <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?father WHERE {
  ?isabella dbo:father ?father .
  ?isabella rdfs:label ""Isabella of Austria""@en .
  FILTER NOT EXISTS { ?father a dbo:Place } # Ensure we are not selecting places

  OPTIONAL {
    ?maximilian dbo:child ?father .
    ?maximilian rdfs:label ""Maximilian I, Holy Roman Emperor""@en .
  }
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
737,16,train,Give me the child of the child of Alexander of Württemberg (1804-1881).,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?result <http://dbpedia.org/property/father> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?grandchild ?grandchildLabel WHERE {
  # Step 1: Find Alexander of Württemberg
  ?alexander a dbo:Person ;
             dbp:name ""Alexander of Württemberg"" ;
             dbp:birthYear ""1804""^^xsd:gYear ;
             dbp:deathYear ""1881""^^xsd:gYear .

  # Step 2: Find his children
  ?child dbo:parent ?alexander .
  
  # Step 3: For each child, find their children (grandchildren of Alexander)
  ?grandchild dbo:parent ?child .

  # Get labels for the grandchildren
  SERVICE <http://dbpedia.org/sparql> {
    ?grandchild rdfs:label ?grandchildLabel .
    FILTER(LANG(?grandchildLabel) = 'en')
  }
}
```",2,2,3,2,1,3,3,71,0,0,3,0,0.0,0
39,29,train,Give me the professional in the alter ego of The Shadow and professional in Singer and band of Bob Thompson (musician).,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . }","```sparql
# Query for The Shadow's profession
SELECT ?profession WHERE {
  wd:Q123456 rdfs:label ""The Shadow""@en .
  ?shadow wdt:P106 ?occupationNode .
  ?occupationNode wdt:P279* wd:Q36180 . # Q36180 is the concept of a detective or private investigator
  ?occupationNode rdfs:label ?profession .
  FILTER(LANG(?profession) = ""en"")
}

# Query for Bob Thompson's profession as a musician and band member
SELECT DISTINCT ?singerRole WHERE {
  wd:Q1234567 foaf:name ""Bob Thompson""@en . # Assuming Q1234567 is the DBpedia resource ID for Bob Thompson, the musician
  ?bob wdt:P106 wd:Q7889 . # Q7889 is the concept of a singer
  ?bob wdt:P463 ?bandNode .
  ?bandNode rdfs:label ""The Thompson Twins""@en .
  ?bob rdfs:label ?singerRole .
  FILTER(LANG(?singerRole) = ""en"")
}
```",4,4,5,2,3,3,3,71,0,0,3,0,0.0,0
871,25,train,"Give me the parent of Edward Stanley, 17th Earl of Derby and father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
    # Identify Frederick Stanley, 16th Earl of Derby
    VALUES (?frederick) { dbr:Frederick_Stanley,_16th_Earl_of_Derby }
    
    # Find his children
    ?child dbo:childOf ?frederick .
    
    # Filter for the child who is a politician
    ?child dbo:occupation dbr:Politician .

    # Get the parent of this politician child (should be Frederick Stanley)
    ?parent dbo:child ?child .

    # Identify Edward Stanley, 17th Earl of Derby
    VALUES (?edward) { dbr:Edward_Stanley,_17th_Earl_of_Derby }
    
    # Ensure the same parent is also the parent of Edward Stanley, 17th Earl of Derby
    ?parent dbo:child ?edward .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
398,1,train,Give me the player in Aleksandr Filimonov.,SELECT ?result WHERE { <http://dbpedia.org/resource/Aleksandr_Filimonov> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?team WHERE {
  dbr:Aleksandr_Filimonov dbo:playerForTeam ?team .
}
```",1,1,2,1,1,3,2,20,0,0,17,0,0.0,0
89,44,train,"Give me the predecessor of the child of Saw Shwe Khet and child of Saw Min Hla and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v4 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Saw_Min_Hla> . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v2 . ?result <http://dbpedia.org/ontology/spouse> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
  # Find the child of Saw Shwe Khet and Saw Min Hla
  ?person dbo:parent dbr:Saw_Shwe_Khet .
  ?person dbo:parent dbr:Saw_Min_Hla .

  # Find the spouse of the father of Myat Hpone Pyo
  ?father dbo:child dbr:Myat_Hpone_Pyo .
  ?spouse dbo:spouse ?father .

  # Ensure the person is both a child and a spouse
  FILTER (?person = ?spouse)

  # Check if the person has a royal title
  ?person dbo:title ?title .
  FILTER CONTAINS(LCASE(?title), ""royalty"")

  # Find the predecessor of this royal person
  ?predecessor dbo:successor ?person .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
203,50,train,"Give me the military force of the war, that is a military conflict and an event, of the reference to William Bayne and military force of the force, that is an event and a societal event, of Robert Calder.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/battle> ?v4 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bayneConflict ?bayneForce ?calderEvent ?calderForce WHERE {
  # Find military conflicts involving William Bayne
  ?event dbo:agent dbr:William_Bayne ;
         a dbo:MilitaryConflict .
  ?event dbo:participatingMilitaryForce ?bayneForce .

  # Find events involving Robert Calder and extract the military force
  ?calderEvent dbo:agent dbr:Robert_Calder ;
               a (dbo:Event|dbo:SocietalEvent) .
  ?calderEvent dbo:participatingMilitaryForce ?calderForce .
}
```",5,9,6,3,2,3,3,71,0,0,5,0,0.0,0
531,46,train,"Give me the tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election and office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v2 . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v4 . ?v2 <http://dbpedia.org/property/residence> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query for the leader of the 2003 Madrid City Council Election
SELECT ?mayorName WHERE {
  ?mayor dbo:officeHolderOf dbr:Madrid_City_Council.
  ?mayor dbo:electedDuring dbr:2003_Madrid_municipal_election.
  ?mayor rdfs:label ?mayorName.
  FILTER (LANG(?mayorName) = ""en"")
}

UNION

# Query for the commander during the Central African Republic Civil War
SELECT ?commanderName WHERE {
  ?commander dbo:officeHolderOf dbr:Central_African_Republic_Civil_War.
  ?commander dbo:isPolitician true.
  ?commander rdfs:label ?commanderName.
  FILTER (LANG(?commanderName) = ""en"")
}

# Assuming we have identified the individuals, query for their residences
UNION

SELECT ?tenant WHERE {
  VALUES ?person { ?mayor ?commander }
  ?person dbo:residence ?residence.
  ?residence dbo:tenant ?tenant.
}
```",5,8,6,3,2,3,3,71,0,0,2,0,0.0,0
58,3,train,Give me the person born as Linda Sue Cobb.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Linda Sue Cobb""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?birthName WHERE {
  ?person a dbo:Person .
  ?person dbo:birthName ?birthName .
  FILTER(CONTAINS(LCASE(?birthName), ""linda sue cobb""))
}
```",1,1,2,1,1,3,2,20,1,1,0,0.5,1.0,0.6666666666666666
375,7,train,Give me the war of Hashiba Hidekatsu and entity in Japan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?relatedEntity WHERE {
  VALUES ?hashibaHidekatsu { dbr:Hashiba_Hidekatsu }
  
  ?hashibaHidekatsu dbo:participatedIn ?event .
  OPTIONAL { ?event dbo:associatedWith ?relatedEntity . FILTER(?relatedEntity != ?hashibaHidekatsu) }
}
```",2,2,3,1,2,2,3,28,0,0,3,0,0.0,0
737,43,train,"Give me the child of Archduchess Margarete Sophie of Austria and child of the child of the child of Alexander of Württemberg (1804-1881) and predecessor of Carl, Duke of Württemberg.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find a child of Archduchess Margarete Sophie of Austria
  ?child dbo:parent dbr:Archduchess_Margarete_Sophie_of_Austria .

  # Find Alexander of Württemberg's great-grandchild
  ?grandChild dbo:parent ?parent1 .
  ?parent1 dbo:parent ?parent2 .
  ?parent2 dbo:parent dbr:Alexander_of_W%C3%BCrttemberg_1804-1881 .

  # Find the predecessor of Carl, Duke of Württemberg
  ?predecessor dbo:successor dbr:Carl,_Duke_of_W%C3%BCrttemberg .

  # Combine these relationships to find the person who fits all criteria
  FILTER (?child = ?grandChild && ?grandChild = ?predecessor)
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
119,6,train,Give me the entity in Poland and war of Alexander Suvorov.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Poland> . <http://dbpedia.org/resource/Alexander_Suvorov> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event WHERE {
  ?suvorov dbo:birthName ""Alexander Vasilyevich Suvorov""@en .
  ?suvorov dbo:occupation dbr:Military_person .
  ?event dbo:place dbr:Poland ;
         dbo:participatedIn ?suvorov .
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
816,20,train,Give me the parent of the professional in Photographer and actor of Judgment: The Trial of Julius and Ethel Rosenberg.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/occupation> ""Photographer""@en . ?result <http://dbpedia.org/ontology/child> ?v2 . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?parentName WHERE {
  ?person a dbo:Actor ;
          dbo:profession dbr:Photographer ;
          dbo:film dbr:Judgment_The_Trial_of_Julius_and_Ethel_Rosenberg .
  
  OPTIONAL { ?person dbo:parent ?parent . }
  BIND(STR(?parent) AS ?parentName)
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
628,57,train,"Give me the band member of Uncle Murda and person born as the birth name of the native, that is a musical artist, of Florida and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://dbpedia.org/property/birthName> ?v5 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v5 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
# Step 1: Find Uncle Murda's band member
SELECT ?bandMember WHERE {
  ?uncleMurda dbo:associatedBandMember ?bandMember .
  ?uncleMurda foaf:name ""Uncle Murda"" .
}

UNION

# Step 2: Find a musical artist born in Florida with a specific birth name
SELECT ?artist WHERE {
  ?artist dbo:birthPlace dbr:Florida .
  ?artist dbo:birthName ?birthName .
  ?artist dbo:occupation dbr:Musical_artist .
}

UNION

# Step 3: Identify an award related to Coro de la Pontificia Universidad Católica de Puerto Rico
SELECT ?award WHERE {
  ?choir dbo:associatedAward ?award .
  ?choir foaf:name ""Coro de la Pontificia Universidad Católica de Puerto Rico"" .
}

UNION

# Step 4: Find the region/state/settlement related to the award
SELECT ?region WHERE {
  ?award dbo:location ?region .
  ?region a ?type .
  FILTER (
    (?type = dbr:Region) ||
    (?type = dbr:State_of_the_United_States) ||
    (?type = dbr:Settlement)
  )
}

# Step 5: Combine the information to find the common link
SELECT DISTINCT ?commonLink WHERE {
  VALUES ?bandMember { ?bandMember1 }
  VALUES ?artist { ?artist1 }
  VALUES ?award { ?award1 }
  VALUES ?region { ?region1 }

  # Assuming the common link is a person or entity that connects these elements
  ?commonLink dbo:associatedBandMember ?bandMember .
  ?commonLink dbo:birthPlace dbr:Florida .
  ?commonLink dbo:birthName ?artistBirthName .
  ?commonLink dbo:associatedAward ?award .
  ?commonLink dbo:location ?region .
}
```",6,11,7,3,3,3,3,71,0,0,1,0,0.0,0
119,0,train,Give me the war of Alexander Suvorov.,SELECT ?result WHERE { <http://dbpedia.org/resource/Alexander_Suvorov> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?eventLabel WHERE {
  VALUES ?suvorov { dbr:Aleksandr_Suvorov }
  ?suvorov dbo:participatedIn ?event .
  ?event a dbo:MilitaryConflict ;
         rdfs:label ?eventLabel .
  FILTER (lang(?eventLabel) = 'en')
}
```",1,1,2,1,1,3,2,20,0,0,28,0,0.0,0
531,52,train,"Give me the office of Miguel Maura and office of the commander, that is an office holder and a politician, in Central African Republic Civil War and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v3 . ?v5 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://dbpedia.org/property/residence> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?miguelOffice ?commanderOffice ?leaderResident
WHERE {
  # Miguel Maura's office during the Central African Republic Civil War and 2003 Madrid City Council election
  OPTIONAL {
    ?miguel dbo:office ?miguelOffice .
    FILTER EXISTS { ?miguel dbr:Miguel_Maura . }
    FILTER EXISTS { ?miguel dbo:politicalParty ?party . }
    FILTER EXISTS { 
      ?event dbo:location dbr:Central_African_Republic_Civil_War ;
             dbo:participant ?miguel .
    }
    OPTIONAL {
      ?electionEvent dbo:location dbr:Madrid ;
                     dbo:officeHolder ?miguel .
      FILTER (?electionEvent dbo:date ""2003""^^xsd:gYear)
    }
  }

  # Commander's office in the Central African Republic Civil War
  OPTIONAL {
    ?commander dbo:office ?commanderOffice .
    FILTER EXISTS { 
      ?warEvent dbo:location dbr:Central_African_Republic_Civil_War ;
                dbo:participant ?commander .
    }
    FILTER EXISTS { ?commander dbo:politicalParty ?party . }
  }

  # Leader's residence tenant from the 2003 Madrid City Council election
  OPTIONAL {
    ?leader dbo:residence ?residence .
    ?residence dbo:tenant ?leaderResident .
    FILTER EXISTS { 
      ?electionEvent dbo:location dbr:Madrid ;
                     dbo:officeHolder ?leader .
      FILTER (?electionEvent dbo:date ""2003""^^xsd:gYear)
    }
  }
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
905,11,train,"Give me the spouse of the father of Philip I, Prince of Taranto.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v1 . }","```sparql
SELECT ?spouse WHERE {
  ?philip dbo:father ?father .
  ?father dbo:spouse ?spouse .
  
  FILTER(STRSTARTS(LCASE(?philip), ""philip i, prince of taranto""))
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
412,3,train,Who is the leader of National Party of Greece?,SELECT ?result WHERE { <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?leader WHERE {
  ?party a dbo:PoliticalParty ;
         rdfs:label ""National Party of Greece""@en .
  OPTIONAL { ?party dbo:leader ?leader . }
}
```",1,1,2,1,1,2,3,28,1,0,0,1.0,1.0,1.0
270,8,train,"Give me the predecessor of Ada Watson and person decedent at the birth place, that is a settlement, of Mark Tournier.",SELECT ?result WHERE { <http://dbpedia.org/resource/Mark_Tournier> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Ada_Watson> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/deathPlace> ?v2 . },"```sparql
# Query to find the predecessor of Ada Watson
SELECT ?predecessor WHERE {
  ?ada wdt:P106 wd:Q82955; # Assuming Ada Watson has an occupation or role
        wdt:P102 ?predecessor. # P102 is the predecessor property
}

UNION

# Query to find a person decedent at the birthplace of Mark Tournier, which is a settlement
SELECT ?decedent WHERE {
  wd:Q123456 wdt:P19 ?birthPlace; # Assuming Q123456 is the DBpedia ID for Mark Tournier
              wdt:P31 wd:Q515. # P31 is instance of, and Q515 is settlement

  ?decedent wdt:P20 ?deathPlace;
            wdt:P19 ?birthPlace.
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Mark Tournier if known.",3,4,4,2,2,2,2,9,0,0,1,0,0.0,0
119,9,train,Give me the tenant of Spain and office of Alberto Núñez Feijóo.,SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?monarch ?office WHERE {
  # Query for the current monarch of Spain
  ?country a dbo:Country ;
           foaf:name ""Spain""@en .
  
  OPTIONAL { 
    ?country dbo:monarch ?monarch .
    ?monarch foaf:name ?name .
    FILTER(CONTAINS(LCASE(?name), ""felipe vi""))
  }
  
  # Query for the office held by Alberto Núñez Feijóo
  ?person a dbo:Person ;
          foaf:name ""Alberto Núñez Feijóo""@en .
  
  OPTIONAL {
    ?person dbo:office ?office .
    ?office foaf:name ?officeName .
    FILTER(CONTAINS(LCASE(?officeName), ""president of the xunta de galicia""))
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
492,4,train,Give me the actor of Color Me Dead.,SELECT ?result WHERE { <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?actorLabel WHERE {
  ?movie rdfs:label ""Color Me Dead""@en .
  ?movie dbo:starring ?actor .
  ?actor rdfs:label ?actorLabel .
  FILTER(LANG(?actorLabel) = 'en')
}
```",1,1,2,1,1,2,3,28,0,2,2,0.0,0.0,0
293,1,train,Give me the spouse of Roger Pryor (actor).,SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?spouse WHERE {
  ?person a dbo:Actor ;
          foaf:name ""Roger Pryor""@en .
  OPTIONAL { ?person dbo:spouse ?spouse . }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
353,61,train,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?v1 . ?v5 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?grandchild ?father WHERE {
  # Step 1: Identify Constance of Burgundy's spouse
  ?spouse dbo:spouse dbr:Constance_of_Burgundy .
  
  # Step 2: Find the child of that spouse
  ?child dbo:parent ?spouse .
  
  # Step 3: Determine the child of that child (grandchild)
  ?grandchild dbo:parent ?child .
  
  # Step 4: Identify royalty among these grandchildren
  ?grandchild a dbo:Monarch .

  # Step 5: Find William I's reference who is both royalty and an office holder
  ?reference dbo:officeHolder ?office .
  ?reference dbo:spouse dbr:William_I_of_Aquitaine .
  ?reference a dbo:Monarch .

  # Step 6: Determine the child of that reference
  ?child2 dbo:parent ?reference .

  # Step 7: Identify royalty among these children
  ?child2 a dbo:Monarch .

  # Step 8: Find the father of that child
  ?father dbo:spouse ?mother .
  ?mother dbo:parent ?child2 .
  
}
```",6,10,7,3,2,3,3,71,0,0,1,0,0.0,0
687,50,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?result <http://dbpedia.org/ontology/coach> ?v3 . ?v3 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v4 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v0 <http://dbpedia.org/property/starring> ?v4 . }","```sparql
# Step 1: Find the person born on 1979-11-03 who is a soccer player and manager
SELECT ?person WHERE {
  ?person dbo:birthDate ""1979-11-03""^^xsd:date .
  ?person dbo:sport ""Association football"" .
  ?person dbo:occupation dbp:Soccer_manager .
}

# Step 2: Find films directed by Manuel Huerga and actors who are soccer players and athletes
SELECT DISTINCT ?actor WHERE {
  ?film dbo:director dbr:Manuel_Huerga .
  ?film dbo:starring ?actor .
  ?actor dbo:sport ""Association football"" .
  ?actor dbo:occupation dbp:Athlete .
}

# Step 3: Find the team of the person identified in step 1
SELECT DISTINCT ?team WHERE {
  ?person dbo:birthDate ""1979-11-03""^^xsd:date .
  ?person dbo:sport ""Association football"" .
  ?person dbo:occupation dbp:Soccer_manager .
  ?person dbo:currentTeam ?team .
}
```",5,10,6,3,2,3,3,71,0,0,1,0,0.0,0
140,11,train,"Give me the party member of Republican Party (United States) and commander in the war, that is a societal event, of George Pickett.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . <http://dbpedia.org/resource/George_Pickett> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?commanderRole WHERE {
  dbr:George_Pickett dbo:nationality dbr:United_States ;
                     dbo:militaryConflict ?war .
  OPTIONAL { 
    ?war dbo:commander ?commanderRole .
    FILTER(?commanderRole = dbr:George_Pickett)
  }
}
```",3,4,4,2,2,3,2,20,0,0,4,0,0.0,0
816,36,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of the child of the spouse of Mariclare Costello.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v0 . ?v0 <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
# Step 1: Find the actor in ""Judgment: The Trial of Julius and Ethel Rosenberg""
SELECT ?actor WHERE {
    ?film dcterms:title ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
    ?film dbo:starring ?actor .
}

# Step 2: Find the spouse of Mariclare Costello
SELECT ?spouse WHERE {
    ?person foaf:name ""Mariclare Costello""@en ;
            dbo:spouse ?spouse .
}

# Step 3: Find any children of that spouse
SELECT ?child WHERE {
    ?spouse dbo:child ?child .
}

# Step 4: Identify the parent of those children (should be the actor from step 1)
SELECT DISTINCT ?parent WHERE {
    ?child dbo:parent ?parent .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
706,12,train,Give me the birthplace of Ebrahim Alkazi and birthplace of the actor of Akaler Shandhaney.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Ebrahim_Alkazi> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Akaler_Shandhaney> <http://dbpedia.org/property/starring> ?v0 . },"```sparql
# Query for the birthplace of Ebrahim Alkazi
SELECT ?birthPlace WHERE {
  ?person dbo:birthName ""Ebrahim Alkazi""@en .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birthplace of Soumitra Chatterjee, actor in Akaler Shandhaney
SELECT ?actorBirthPlace WHERE {
  ?film dbo:starring ?actor .
  ?actor rdfs:label ""Soumitra Chatterjee""@en .
  ?actor dbo:birthPlace ?actorBirthPlace .
  FILTER(CONTAINS(LCASE(?film), ""akaler shandhaney""))
}
```",3,3,4,2,2,3,2,20,0,0,2,0,0.0,0
78,19,train,"Give me the band member of The Alan Parsons Project and associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh and associated musical artist of Billy Lyall.","SELECT ?result WHERE { <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . }","```sparql
# Step 1: Find a band member of The Alan Parsons Project
SELECT ?member WHERE {
  ?project dcterms:title ""The Alan Parsons Project""@en .
  ?project dbo:musicalArtist ?member .
}

# Assuming Eric Woolfson is the member found, proceed to step 2

# Step 2: Find associated musical artist of Stuart McBeath Tosh
SELECT ?associatedArtist WHERE {
  wd:Q1234567 dbo:associatedMusicalArtist ?associatedArtist . # Replace Q1234567 with the actual WD ID for Stuart McBeath Tosh
}

# Step 3: Find another musical artist born on the same date as Stuart McBeath Tosh
SELECT ?artist WHERE {
  ?artist dbo:birthDate ?date .
  FILTER (?date = ""YYYY-MM-DD""^^xsd:date) # Replace YYYY-MM-DD with the actual birthdate of Stuart McBeath Tosh
}

# Step 4: Find associated musical artist of Billy Lyall
SELECT ?associatedArtist WHERE {
  wd:Q6543210 dbo:associatedMusicalArtist ?associatedArtist . # Replace Q6543210 with the actual WD ID for Billy Lyall
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
293,15,train,Give me the ruling party in the landmark at elevation of 20.116800000000001347.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?v1 <http://dbpedia.org/property/leaderParty> ?result . }","```sparql
SELECT ?landmark ?countryLabel ?rulingPartyLabel WHERE {
  ?landmark dbo:elevationMeasurement ?elevation .
  ?landmark dbo:locationCountry ?country .
  ?country foaf:name ?countryLabel .
  ?country dbp:government ?government .
  ?government dbp:rulingParty ?rulingParty .
  ?rulingParty rdfs:label ?rulingPartyLabel .
  FILTER (datatype(?elevation) = xsd:decimal && ?elevation >= 20.1167 && ?elevation <= 20.117)
}
```",2,2,3,2,1,3,3,71,0,0,3,0,0.0,0
198,29,train,"Give me the entity in Charleston, South Carolina and force of the awardee of Gillmore Medal and war of Amasa Tracy.","SELECT ?result WHERE { <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> ?v3 . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . }","```sparql
# Find entity in Charleston, South Carolina
SELECT ?entity WHERE {
  ?entity dbo:location dbr:Charleston,_South_Carolina .
}

# Find Amasa Tracy and his association with the Gillmore Medal
SELECT ?tracy ?force WHERE {
  ?tracy foaf:name ""Amasa Tracy""@en ;
         dbo:awardReceived dbr:Gillmore_Medal .
  
  # Determine the military force he was part of during the American Civil War
  ?tracy dbo:militaryService ?service .
  ?service dbo:conflict dbr:American_Civil_War ;
           dbo:organization ?force .
}

# Combine results to get the entity in Charleston and the force associated with Amasa Tracy
SELECT DISTINCT ?entity ?force WHERE {
  # Entity in Charleston, South Carolina
  ?entity dbo:location dbr:Charleston,_South_Carolina .

  # Force of the awardee of Gillmore Medal (Amasa Tracy)
  ?tracy foaf:name ""Amasa Tracy""@en ;
         dbo:awardReceived dbr:Gillmore_Medal .
  
  ?tracy dbo:militaryService ?service .
  ?service dbo:conflict dbr:American_Civil_War ;
           dbo:organization ?force .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
386,5,train,Give me the awardee of Golden Sword for Bravery.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardee WHERE {
  ?award a dbo:Award ;
        rdfs:label ""Golden Sword for Bravery""@en .
  ?award dbo:recipient ?awardee .
}
```",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
39,14,train,"Give me the band of the person born, that is a musical artist, as Robert Lamar Thompson.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Robert Lamar Thompson""@en .
  
  OPTIONAL { 
    ?person dbo:memberOfBand ?band .
  }
}
```",2,3,3,2,1,3,3,71,0,0,5,0,0.0,0
769,12,train,"Give me the player in the manager, that is a sports manager and a soccer manager, of Hong Kong C Team and player in Ye Jia.",SELECT ?result WHERE { <http://dbpedia.org/resource/Ye_Jia> <http://dbpedia.org/ontology/team> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v0 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Hong_Kong_C_Team> <http://dbpedia.org/ontology/manager> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?player WHERE {
  ?player a dbo:SoccerManager .
  ?player dbo:sport dbr:Soccer .

  # Manager of Hong Kong C Team
  ?managerTeam dbr:Hong_Kong_C_Team ;
               dbo:manager ?player .

  # Player in Ye Jia
  ?yeJiaTeam dbr:Ye_Jia ;
             dbo:teamMember ?player .
}
```",3,5,4,2,2,3,2,20,0,0,2,0,0.0,0
225,3,train,Give me the region of Japan Standard Time.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/timeZone> <http://dbpedia.org/resource/Japan_Standard_Time> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?region WHERE {
  ?country dbo:name ""Japan""@en .
  ?country dbo:timeZone ?tz .
  ?tz rdfs:label ?tzLabel .
  FILTER(CONTAINS(LCASE(?tzLabel), ""japan standard time""))
  
  OPTIONAL { 
    ?region dbo:country dbr:Japan ;
            rdfs:label ?regionLabel .
    FILTER(langMatches(lang(?regionLabel), ""en""))
  }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
39,55,train,"Give me the professional in the alter ego of The Shadow and band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in the profession of Sam Concepcion.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?result <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v3 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?profession WHERE {
  VALUES (?alterEgo) { dbr:The_Shadow }
  ?person dbo:alterName ?alterEgo .
  OPTIONAL { ?person dbo:profession ?profession . FILTER(?profession IN (dbr:Actor, dbr:Singer, dbr:Host)) }

  VALUES (?birthName) { ""Robert Lamar Thompson""@en }
  ?artist dbo:birthName ?birthName .
  OPTIONAL { ?artist dbo:alias ?stageName . FILTER(?stageName = dbr:Lil_Wayne) }

  VALUES (?name) { ""Sam Concepcion""@en }
  ?concepcion dbo:name ?name .
  OPTIONAL { ?concepcion dbo:profession ?profession . FILTER(?profession IN (dbr:Actor, dbr:Singer, dbr:Host)) }
}
```",6,7,7,2,3,3,3,71,0,0,4,0,0.0,0
756,39,train,"Give me the native of West Germany and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://dbpedia.org/ontology/manager> ?v0 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v0 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. }","```sparql
SELECT ?person ?club ?nativeCountry WHERE {
  ?person dbo:birthDate ""1968-08-26""^^xsd:date ;
          rdf:type dbo:SportsManager .
  
  ?person foaf:nationality ?nationality .
  ?nationality rdfs:label ""West Germany""@en .

  ?managerPosition dbo:agent ?person ;
                   dbo:position ""soccer manager""@en ;
                   dbo:team ?club .
  
  ?club rdf:type dbo:SoccerClub ;
        dbo:sportsTeamSeason ?season .
  
  ?season rdf:type ?type1, ?type2, ?type3 .
  FILTER(?type1 = dbo:SoccerClubSeason && 
         ?type2 = dbo:SportsSeason &&
         ?type3 = dbo:SportsTeamSeason)
}
```",4,8,5,3,2,3,3,71,0,0,3,0,0.0,0
782,34,train,Give me the associated musical artist of Nick Curran and reference to the real name of the band of Kim Wilson.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . ?v2 <http://xmlns.com/foaf/0.1/name> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nickCurranArtist ?kimWilsonBand ?realName WHERE {
  # Find the associated musical artist of Nick Curran
  OPTIONAL { 
    dbr:Nick_Curran dbo:musicalArtist ?nickCurranArtist .
  }

  # Find the band associated with Kim Wilson and its real name
  OPTIONAL {
    dbr:Kim_Wilson dbo:musicalArtist ?kimWilsonBand .
    ?kimWilsonBand rdfs:label ?bandLabel .
    FILTER (lang(?bandLabel) = 'en')
    
    OPTIONAL { 
      ?kimWilsonBand dbo:officialName ?realName .
      FILTER(lang(?realName) = 'en') 
    }
  }
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
628,0,train,Give me the band member of Uncle Murda.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band ?member WHERE {
  VALUES ?uncleMurda { dbr:Uncle_Murda }
  ?band dbo:bandMember ?member .
  ?band dbo:associatedBand ?uncleMurda .
}
```",1,1,2,1,1,3,3,71,0,0,5,0,0.0,0
103,55,train,"Give me the professional in the alter ego of The Shadow and actor of the movie, that is a television show, with Richard E. Grant and professional in the profession of Shatrughan Sinha.",SELECT ?result WHERE { <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://dbpedia.org/property/starring> ?result . ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # The Shadow's alter ego
  ?shadowAlterEgo dbo:alterEgoName ""Lamont Cranston""@en .
  
  # Actor who played Lamont Cranston in a movie that is also a TV show with Richard E. Grant
  ?movie dbo:title ""The Mirror Has Two Faces""@en ;
         dbo:starring dbr:Alec_Baldwin, dbr:Richard_E._Grant .

  # Find the actor who played Alec Baldwin's role (Lamont Cranston)
  ?actor dbo:roleName ?shadowAlterEgo .
  
  # Profession of Shatrughan Sinha
  ?politician dbo:profession dbr:Politician ;
              rdfs:label ""Shatrughan Sinha""@en .

  FILTER(?actor != dbr:Alec_Baldwin) # Exclude Alec Baldwin himself

  # Check if the actor is also a politician
  OPTIONAL { ?actor dbo:profession dbr:Politician }
}
```",6,7,7,2,3,3,3,71,0,0,13,0,0.0,0
492,9,train,Give me the death place of Sal Mineo and death place of Carolyn Jones.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sal_Mineo> <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Carolyn_Jones> <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?name ?deathPlace WHERE {
  VALUES (?person ?name) {
    (dbo:Sal_Mineo ""Sal Mineo"")
    (dbo:Carolyn_Jones ""Carolyn Jones"")
  }
  
  ?person dbo:name ?name .
  ?person dbo:deathPlace ?deathPlace .
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
595,34,train,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and commander in Third Taiwan Strait Crisis.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/property/author> ?v1 . <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. },"```sparql
SELECT ?spouse WHERE {
  wd:Q42 wdt:P31 wd:Q5; # Hillary Clinton is a human
           wdt:P50 ?spouse. # Spouse of Hillary Clinton

  ?spouse wdt:P39 wd:Q11696; # Bill Clinton held the office of President of the United States
          wdt:P106 wd:Q82955, wd:Q82989. # Bill Clinton is a politician and an office holder

  OPTIONAL {
    ?work wdt:P50 wd:Q42; # Work authored by Hillary Clinton
          wdt:P31/wdt:P279* wd:Q215627. # The work is a book or written work
  }

  FILTER EXISTS { 
    ?crisis wdt:P1128 wd:Q42; # Bill Clinton was commander during the Third Taiwan Strait Crisis
            wdt:P361 wd:Q11424. # The crisis is related to the Third Taiwan Strait Crisis
  }
}
```",4,8,5,3,2,3,3,71,0,0,1,0,0.0,0
198,13,train,Give me the force of the awardee of Gillmore Medal.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> ?v1 . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient ?force WHERE {
  ?recipient dbo:award dbr:Gillmore_Medal .
  OPTIONAL { 
    ?recipient dbo:fieldOfStudy ?field .
    ?field rdfs:label ?fieldLabel .
    FILTER(CONTAINS(LCASE(?fieldLabel), ""geophysics"") || CONTAINS(LCASE(?fieldLabel), ""physics""))
    ?work dbo:author ?recipient ;
          dbo:abstract ?abstract .
    FILTER(CONTAINS(LCASE(?abstract), ""force"") || CONTAINS(LCASE(?abstract), ""gravitational force""))
    BIND(SUBSTR(?abstract, STRSTARTS(UCASE(?abstract), ""FORCE OF""), 100) AS ?force)
  }
}
```",2,2,3,2,1,3,3,71,0,1,5,0.0,0.0,0
293,27,train,Give me the person born as the birth name of the parent of Tisha Sterling.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . },"```sparql
SELECT DISTINCT ?person WHERE {
  # Step 1: Find Tisha Sterling's parents
  ?tisha dbo:birthName ""Tisha Sterling"" .
  
  OPTIONAL { 
    ?tisha dbo:parent ?parent . 
    ?parent dbo:birthName ?parentBirthName .
    
    # Step 2 and 3: Find a person with the same birth name as Tisha's parent
    ?person dbo:birthName ?parentBirthName .
    FILTER(?person != ?tisha)
  }
}
```",3,3,4,3,1,3,3,71,0,0,3,0,0.0,0
859,0,train,Give me the band member of Human Remains (band).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Human_Remains_(band)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?member WHERE {
  ?band a dbo:Band ;
        foaf:name ""Human Remains (band)"" .
  
  ?band dbo:member ?member .
}
```",1,1,2,1,1,3,2,20,0,0,5,0,0.0,0
668,28,train,Give me the professional in Musician and person born as Darryl Paa Kwesi Bannerman-Martin and associated musical artist of the person born as Elorm Kabu Amenyah.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?v1 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?associatedArtist WHERE {
  # Find Shaggy by his birth name
  ?shaggy a dbo:MusicalArtist ;
          foaf:name ""Shaggy"" ;
          foaf:givenName ""Darryl Paa Kwesi Bannerman-Martin"" .

  # Find associated artists with Shaggy
  ?collaboration dbo:artist ?associatedArtist .
  ?collaboration dbo:artist ?shaggy .
  
  FILTER(?associatedArtist != ?shaggy)
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
80,57,train,"Give me the professional in the alter ego of The Shadow and actor of the album of the work, that is a song and a musical work, of T.I. and actor of Shelby Oaks.",SELECT ?result WHERE { <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://dbpedia.org/ontology/album> ?v5 . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Gregory Smith as Lamont Cranston (The Shadow)
  ?shadowSeries dbo:starring dbr:Gregory_Smith .
  ?shadowSeries rdfs:label ""The Shadow""@en .

  # Gregory Smith in Shelby Oaks
  ?shelbyOaksFilm dbo:starring dbr:Gregory_Smith .
  ?shelbyOaksFilm rdfs:label ""Shelby Oaks""@en .

  # T.I.'s album and song ""Paper Trail""
  OPTIONAL {
    ?album dbo:artist dbr:T.I. ;
           dbo:title ""Paper Trail"" .
    ?song dbo:partOfAlbum ?album ;
          dbo:title ""Paper Trail"" .
  }

  BIND(dbr:Gregory_Smith AS ?actor)
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
628,22,train,"Give me the band member of Uncle Murda and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. },"```sparql
# Step 1: Find the band or group associated with Uncle Murda
SELECT ?band WHERE {
  ?person dbo:birthName ""Uncle Murda"" .
  ?person dbo:memberOfBandOrMusicalGroup ?band .
}

# Step 2: Identify members of that band and their birthplaces
SELECT DISTINCT ?member ?birthPlace WHERE {
  VALUES ?band { <URI_of_the_band> } # Replace with the actual URI found in step 1
  ?member dbo:memberOfBandOrMusicalGroup ?band .
  ?member dbo:birthPlace ?birthPlace .
  
  # Step 3: Filter for members whose birthplace is Puerto Rico
  FILTER (
    ?birthPlace rdfs:label ""Puerto Rico""@en ||
    ?birthPlace rdfs:label ""Estado Libre Asociado de Puerto Rico""@es ||
    ?birthPlace rdfs:label ""Commonwealth of Puerto Rico""@en
  )
}
```",3,7,4,2,2,3,3,71,0,0,1,0,0.0,0
472,5,train,Who is the mayor of Duchy of Schleswig?,SELECT ?result WHERE { <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?result . },"```sparql
# Query to find the mayor of Flensburg, Germany
SELECT ?mayor WHERE {
  wd:Q123456 rdfs:label ""Flensburg""@en .
  ?mayor dbo:positionTitle dbr:Mayor_of_Flensburg .
}

# Query to find the mayor of Sønderborg, Denmark
SELECT ?mayor WHERE {
  wd:Q654321 rdfs:label ""Sønderborg""@da .
  ?mayor dbo:positionTitle dbr:Mayor_of_Sønderborg .
}
```

Note: The actual DBpedia IDs (`wd:Q123456` for Flensburg and `wd:Q654321` for Sønderborg) need to be replaced with the correct identifiers from DBpedia.",1,1,2,1,1,2,3,28,0,0,2,0,0.0,0
159,26,train,Give me the reference to the writer of the work of George Ducas.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://dbpedia.org/property/writer> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?workLabel WHERE {
  ?author a dbo:Writer ;
          foaf:name ""George Ducas""@en .
  ?author dbo:work ?work .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",3,3,4,3,1,3,3,71,0,0,98450,0,0.0,0
159,5,train,Give me the work of George Ducas.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/writer> ""George Ducas""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  VALUES ?georgeDucas { dbr:George_Ducas }
  
  ?georgeDucas dbo:worksFor ?organization .
  OPTIONAL {
    ?organization dbo:filmography ?work .
  }
  UNION
  OPTIONAL {
    ?georgeDucas dbo:book ?work .
  }
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
119,6,train,"Give me the residence, that is a country, of Álvaro Quirós.",SELECT ?result WHERE { <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country WHERE {
  ?person a dbo:Person ;
          foaf:name ""Álvaro Quirós""@en .
  ?person dbo:residence ?location .
  ?location a dbo:Country ;
            rdfs:label ?country .
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
943,52,train,"Give me the child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and reference to the alter ego of The Shadow and father of Baeda Maryam I.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Identify Menelik II as commander in Siege of Mukha
  ?menelik2 dbo:occupation ""Commander""@en .
  ?siege dbo:commandedBy ?menelik2 .
  ?siege rdfs:label ""Siege of Mukha""@en .

  # Find his parent who is royalty
  ?parent dbo:child ?menelik2 .
  ?parent dbo:title ?royalTitle .
  
  # Identify the child of this royal parent
  ?child dbo:parent ?parent .

  # Ensure the child matches Ras Tafari Makonnen (Haile Selassie I)
  ?child rdfs:label ""Ras Tafari Makonnen""@en .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
103,59,train,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v0 <http://dbpedia.org/property/occupation> ?v5 . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . }","```sparql
# Step 1: Find John Cleese's birth name and profession
SELECT ?person WHERE {
  ?person foaf:name ""John Cleese""@en .
  ?person dbo:birthName ""Richard Grant Esterhuysen"" .
  ?person dbo:occupation dbp:Actor .
}

# Step 2: Identify the television show that was originally a movie he acted in
SELECT DISTINCT ?tvShow WHERE {
  ?tvShow dbo:actor ?cleese .
  ?cleese foaf:name ""John Cleese""@en .
  ?movie dbo:adaptation ?tvShow .
  ?movie dbo:genre dbc:Comedy_films .
}

# Step 3: Find the politician who played an actor in ""Ab Kya Hoga""
SELECT DISTINCT ?politician WHERE {
  ?film dbp:title ""Ab Kya Hoga""@en .
  ?actor dbo:role ?film .
  ?actor dbo:occupation dbp:Politician .
  ?actor foaf:name ""Rajiv Gandhi"" .
}

# Step 4: Find the actor of the identified television show
SELECT DISTINCT ?actor WHERE {
  ?tvShow dbo:actor ?actor .
  ?tvShow rdfs:label ?title .
  FILTER(CONTAINS(LCASE(?title), ""fawlty towers""))
}
```",6,8,7,3,2,3,3,71,0,0,28,0,0.0,0
347,2,train,"Give me the child of Ferdinand II, Holy Roman Emperor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?childLabel WHERE {
  ?parent dbp:name ""Ferdinand II, Holy Roman Emperor""@en .
  ?parent dbo:child ?child .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
609,24,train,"Give me the birth place of Cece Bell and birth place of the governor, that is a politician, of Virginia.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v2 . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query to get the birth place of Cece Bell
SELECT ?birthPlace WHERE {
  ?person a dbo:Writer ;
          foaf:name ""Cece Bell"" .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query to get the current governor of Virginia and their birthplace
SELECT ?governorBirthPlace WHERE {
  ?governor a dbo:Governor ;
            dbp:governmentRole ""Governor of Virginia""@en ;
            foaf:name ?name .
  ?governor dbo:birthPlace ?governorBirthPlace .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
905,0,train,Give me the spouse of Charles II of Naples.,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  dbr:Charles_II_of_Naples dbo:spouse ?spouse .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
78,17,train,"Give me the associated musical artist of the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack) and band member of The Alan Parsons Project.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?artist WHERE {
  # Find artists associated with the Wizards of Waverly Place soundtrack
  ?soundtrack dbo:performer ?artist .
  FILTER(CONTAINS(LCASE(STR(?soundtrack)), ""wizards of waverly place soundtrack""))

  UNION

  # Find members of The Alan Parsons Project
  ?bandMember dbo:memberOf dbr:The_Alan_Parsons_Project .

  # Ensure the artist is both an associated artist and a band member
  FILTER (?artist = ?bandMember)
}
```",3,5,4,2,2,2,3,28,0,0,1,0,0.0,0
347,7,train,"Give me the child, that is a royalty, of Maria Anna of Bavaria (born 1574).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?childLabel WHERE {
  ?child dbo:mother dbr:Maria_Anna_of_Bavaria_(1574-1616) .
  ?child a ?class .
  FILTER (
    ?class = dbo:Monarch ||
    ?class = dbo:Princess ||
    ?class = dbo:Prince ||
    ?class = dbo:RoyalFamilyMember
  )
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,2,2,1,1,3,3,71,0,0,2,0,0.0,0
871,17,train,"Who is the child, that is a politician, of the alumnus of Eton College?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?result <http://dbpedia.org/property/father> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?child WHERE {
  ?alumnus dbo:almaMater dbr:Eton_College .
  ?child foaf:parent ?alumnus .
  ?child dbo:occupation dbc:Politicians_by_country .
}
```",2,3,3,2,1,3,3,71,0,0,7,0,0.0,0
782,57,train,"Give me the reference to The Fabulous Thunderbirds and band of the band member of the person born, that is a musical artist, on 1945-03-30 and associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?result <http://dbpedia.org/ontology/bandMember> ?v5 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band ?associatedBand WHERE {
  # Identify the person Nicholas Michael Curran
  ?person a dbo:MusicalArtist ;
          foaf:name ""Nicholas Michael Curran"" ;
          dbo:birthday ""1945-03-30""^^xsd:date .

  # Find bands he was a member of
  ?person dbo:bandMember ?band .

  # Check if any of these bands are associated with The Fabulous Thunderbirds
  OPTIONAL {
    ?band dbo:associatedBand dbr:The_Fabulous_Thunderbirds .
    BIND(?band AS ?associatedBand)
  }

  # Alternatively, check if he has an association with The Fabulous Thunderbirds through another band
  OPTIONAL {
    ?person dbo:associatedBand dbr:The_Fabulous_Thunderbirds .
    ?band dbo:associatedBand dbr:The_Fabulous_Thunderbirds .
    BIND(?band AS ?associatedBand)
  }
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
288,7,train,"Give me the theme of Dikhawa and native of the figure known, that is a settlement and Pakistani, as The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/nickname> ""The Heart of Pakistan, Paris of the East, City of Gardens, City of Literature""@en . <http://dbpedia.org/resource/Dikhawa> <http://dbpedia.org/ontology/openingTheme> ?result . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Pakistan>. ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?theme WHERE {
  # Find the resource for Lahore
  ?lhr a dbo:Settlement ;
      rdfs:label ""Lahore""@en .
  
  # Look for an event or festival related to Dikhawa in Lahore
  ?event dbo:location ?lhr ;
         rdfs:label ?eventName .

  FILTER regex(?eventName, ""Dikhawa"", ""i"")

  OPTIONAL {
    ?event dbo:abstract ?theme .
  }
}
```",3,5,4,2,2,2,2,9,0,0,1,0,0.0,0
756,2,train,Give me the manager of 2020–21 SBV Vitesse season.,SELECT ?result WHERE { <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager WHERE {
    ?team a dbo:FootballClub ;
          dbp:name ""SBV Vitesse"" ;
          dbp:season ""2020–21"" .
    ?team dbo:manager ?manager .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
531,16,train,"Give me the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v1 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?commander WHERE {
  ?event dbo:type dbr:Military_conflict .
  ?event dbp:eventDate ?date .
  FILTER (CONTAINS(LCASE(?date), ""1995"")) .
  
  ?event dbo:agent ?person .
  ?person dbo:officeHolderOf ?office .
  ?person rdf:type dbo:Politician .

  OPTIONAL { 
    ?person dbo:commanderOf ?force .
    ?force dbo:participatedIn ?event .
  }

  FILTER EXISTS {
    ?person dbp:name ""Manuel Pinto da Costa"" .
  }
  
  BIND(?person AS ?commander)
}
```",2,6,3,2,1,3,3,71,0,0,179,0,0.0,0
531,42,train,"Give me the office of the leader, that is a politician, of Conservative Republican Party (Spain) and tenant of the residence of Alberto Ruiz-Gallardón and office of Mariano Rajoy.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v2 . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  # Leader of Conservative Republican Party (Spain) is linked to Partido Popular
  ?leader dbo:partyMember dbr:Partido_Popular.
  
  # Mariano Rajoy's office
  ?rajoyOffice dbo:position ""Prime Minister of Spain""@en .
  ?rajoyOffice dbo:officeHolder dbr:Mariano_Rajoy .

  # Alberto Ruiz-Gallardón's residence as Mayor of Madrid
  ?ruizGallardonResidence dbo:residenceOf dbr:Alberto_Ruiz-Gallardón .
  ?mayorOffice dbo:position ""Mayor of Madrid""@en .
  ?mayorOffice dbo:officeHolder dbr:Alberto_Ruiz-Gallardón .

  # Find the office that connects these roles
  ?office dbo:position ""Prime Minister of Spain""@en .
  FILTER EXISTS { ?leader dbo:office ?office }
  FILTER EXISTS { ?rajoyOffice rdfs:label ?officeLabel . FILTER(CONTAINS(LCASE(?officeLabel), ""prime minister"")) }
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
246,12,train,"Give me the parent of Princess Sara bint Faisal and parent of the child, that is a royalty, of Prince Faisal bin Hussein.",SELECT ?result WHERE { <http://dbpedia.org/resource/Princess_Sara_bint_Faisal> <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . },"```sparql
# Query for the parent of Princess Sara bint Faisal
SELECT ?parent WHERE {
  ?sara a dbo:Princess ;
        foaf:name ""Sara bint Faisal""@en .
  ?sara dbo:parent ?parent .
}

UNION

# Query for a royal child of Prince Faisal bin Hussein and their parent
SELECT ?childParent WHERE {
  ?faisal a dbo:Prince ;
          foaf:name ""Faisal bin Hussein""@en .
  ?royalChild dbo:parent ?faisal ;
              rdf:type ?type .
  FILTER (STRSTARTS(STR(?type), STR(dbo:))) # Ensures the child is of a royal type
  ?royalChild dbo:parent ?childParent .
}
```",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
492,10,train,Give me the death place of the actor of Color Me Dead.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/deathPlace> ?result . <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?deathPlace WHERE {
  VALUES ?actor { dbr:John_Derek }
  ?actor dbo:deathPlace ?deathPlace .
}
```",2,2,3,2,1,2,3,28,0,1,3,0.0,0.0,0
119,8,train,"Give me the entity in the residence, that is a country, of Dawid Olejniczak.",SELECT ?result WHERE { <http://dbpedia.org/resource/Dawid_Olejniczak> <http://dbpedia.org/property/residence> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/place> ?v0 . },"```sparql
SELECT ?country WHERE {
  ?person dbo:birthName ""Dawid Olejniczak"" .
  ?person dbo:residence ?residence .
  ?residence dbp:country ?country .
}
```",2,3,3,2,1,3,2,20,0,0,108,0,0.0,0
225,8,train,"Give me the birthplace of the awardee, that is Japanese, of Anita Borg Institute Women of Vision Awards.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Anita_Borg_Institute_Women_of_Vision_Awards> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?birthPlace WHERE {
  ?person dbo:nationality dbr:Japan .
  ?award dbo:recipient ?person .
  ?award rdf:type dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
```",2,3,3,2,1,3,2,20,0,0,2,0,0.0,0
943,54,train,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and child of the parent, that is a royalty, of Yeshaq I and father of Baeda Maryam I.","SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v1 <http://dbpedia.org/property/alterEgo> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
SELECT ?shadow ?eleni WHERE {
  # Find The Shadow as Lamont Cranston's alter ego
  ?shadow dbo:alterEgo dbr:Lamont_Cranston .
  
  # Find Yeshaq I and his child Baeda Maryam I
  ?yeshaq dbo:child dbr:Baeda_Maryam_I ;
          dbo:spouse ?eleni .

  # Ensure Eleni is a royalty (Empress)
  ?eleni rdf:type dbo:Empress .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
531,55,train,"Give me the office of the leader, that is a politician, of Conservative Republican Party (Spain) and tenant of the residence of Alberto Ruiz-Gallardón and office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v3 . ?v2 <http://dbpedia.org/property/office> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/ontology/headquarter> ?v3 . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v5 . ?v5 <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?officeLeader ?commanderOffice WHERE {
  # Find the leader of the Conservative Republican Party (Spain)
  ?party a dbo:PoliticalParty ;
         rdfs:label ""Conservative Republican Party (Spain)""@en .
  
  ?leader dbo:positionHeld ?officeLeader ;
          dbo:memberOf ?party .

  # Check if this leader is associated with Alberto Ruiz-Gallardón
  OPTIONAL {
    ?association dbo:tenant dbr:Alberto_Ruiz-Gallardón ;
                 dbo:associatedWith ?leader .
  }

  # Find a commander in the Central African Republic Civil War who is also an office holder and politician
  ?warEvent dbo:location dbr:Central_African_Republic_Civil_War ;
            dbo:participant ?commander .

  ?commander dbo:positionHeld ?commanderOffice ;
             a dbo:Politician .
}
```",6,9,7,2,3,3,3,71,0,0,1,0,0.0,0
905,53,train,"Give me the child of the child, that is a royalty, of Béla IV of Hungary and parent of Charles Martel of Anjou and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://dbpedia.org/property/father> ?v1 . ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . }","```sparql
SELECT ?grandchild ?spouse WHERE {
  # Béla IV of Hungary
  ?belaviv dbo:child ?child .
  
  # Child's child (Béla IV's grandchild) who is royalty and parent of Charles Martel of Anjou
  ?child dbo:child ?grandchild .
  ?grandchild rdf:type dbo:Monarch .
  ?grandchild dbo:parent ?charlesMartel .
  ?charlesMartel rdfs:label ""Charles Martel of Anjou""@en .

  # Spouse of the grandchild
  ?grandchild dbo:spouse ?spouse .

  # Spouse's child (great-grandchild) who is royalty and parent of Philip, Despot of Romania
  ?spouse dbo:child ?greatGrandchild .
  ?greatGrandchild rdf:type dbo:Monarch .
  ?greatGrandchild dbo:parent ?philipDespot .
  ?philipDespot rdfs:label ""Philip, Despot of Romania""@en .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
119,38,train,"Give me the tenant of the residence, that is a country, of Álvaro Quirós and tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?v2 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v3 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?country WHERE {
  ?person rdfs:label ""Álvaro Quirós""@en .
  ?person dbo:memberOf dbr:Spanish_Socialist_Workers'_Party .
  ?person dbo:nationality ?nationality .
  ?nationality dbo:country ?country .
}
```",4,6,5,2,2,3,3,71,0,0,23,0,0.0,0
103,12,train,Give me the professional in  and professional in Actor.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?actor a dbo:Actor .
  FILTER (lang(?actorLabel) = 'en')
}
ORDER BY ?actorLabel
LIMIT 10
```",2,2,3,1,2,3,3,71,0,0,4210,0,0.0,0
293,46,train,"Give me the spouse of the actor of 1,000 Dollars a Minute and party member of the ruling party in the landmark at elevation of 20.116800000000001347.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v4 . ?v2 <http://dbpedia.org/property/leaderParty> ?v1 . ?v4 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/party> ?v1 . }","```sparql
# Step 1: Identify the actor from ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
  ?film dbo:title ""1,000 Dollars a Minute""@en .
  ?film dbo:starring ?actor .
}

# Step 2: Find landmarks with elevation around 20.1168 meters
SELECT ?landmark ?country WHERE {
  ?landmark dbo:elevation ""20.116800000000001347""^^xsd:float ;
            dbo:locationCountry ?country .
}

# Step 3: Identify the ruling party in that country (assuming we have identified the country)
SELECT ?party WHERE {
  ?country dbo:rulingParty ?party .
}

# Step 4: Find the actor who is a member of this party
SELECT ?actor WHERE {
  ?actor dbo:memberOf ?party .
}

# Step 5: Find the spouse of the actor
SELECT ?spouse WHERE {
  ?actor dbo:spouse ?spouse .
}
```",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
78,4,train,"Give me the writer, that is a musical artist and an artist, of Wizards of Waverly Place (soundtrack).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Wizards_of_Waverly_Place_(soundtrack)> <http://dbpedia.org/property/writer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?writer WHERE {
  ?soundtrack dbo:workExample ?song .
  ?soundtrack rdfs:label ""Wizards of Waverly Place (soundtrack)""@en .
  
  ?song dbo:composer ?writer ;
        dbo:musicalArtist ?artist .

  ?writer rdf:type dbo:Musician ;
          dbo:occupation dbr:Songwriter .

  FILTER(CONTAINS(LCASE(?writer), ""musical artist"") && CONTAINS(LCASE(?writer), ""artist""))
}
```",1,3,2,1,1,2,3,28,0,0,13,0,0.0,0
782,1,train,Give me the band of Kim Wilson.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . },"```sparql
SELECT ?band WHERE {
  dbpedia:Kim_Wilson dbo:associatedBand ?band .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
249,8,train,"Give me the native of the birthplace, that is a country, of Shobhna Samarth and native of Jamshedpur.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . <http://dbpedia.org/resource/Shobhna_Samarth> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Jamshedpur> . },"```sparql
SELECT ?shobhnaBirthCountryLabel ?jamshedpurNativeLanguageLabel WHERE {
  # Query for Shobhna Samarth's birthplace that is a country
  wd:Q123456 wdt:P19 ?birthPlace .
  ?birthPlace wdt:P31/wdt:P279* wd:Q6256 . # Check if the birthplace is a country (instance of or subclass of Q6256)
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
  
  # Query for Jamshedpur's native language
  wd:Q123456 wdt:P31/wdt:P279* wd:Q12345 . # Assuming Q12345 is the identifier for Jamshedpur
  wd:Q12345 wdt:P37 ?nativeLanguage .
  
}
```

Note: Replace `wd:Q123456` with the actual DBpedia entity ID for Shobhna Samarth and `wd:Q12345` with the correct entity ID for Jamshedpur.",3,4,4,2,2,2,2,9,0,0,22,0,0.0,0
361,1,train,Give me the professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . }","```
# No valid SPARQL query can be generated due to lack of specificity in the question.
```",1,1,2,1,1,2,3,28,0,0,39640,0,0.0,0
103,40,train,"Give me the actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen and professional in Actor and professional in .","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?v1 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://dbpedia.org/property/starring> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?actor WHERE {
  # Identify Richard E. Grant
  dbr:Richard_E._Grant a dbo:Actor ;
                      foaf:name ""Richard E. Grant""@en .

  # Find movies he acted in
  ?movie dbo:starring dbr:Richard_E._Grant ;
         dbo:genre ?genre .

  # Check if the movie is associated with a TV show
  OPTIONAL { ?tvShow dbo:basedOn ?movie . }

  # Get other actors from those movies
  ?movie dbo:starring ?actor .
  
  FILTER(?tvShow != dbr:Withnail_&_I) # Exclude direct adaptations, if any

}
```",5,6,6,3,3,3,3,71,0,0,9,0,0.0,0
159,60,train,"Give me the successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://dbpedia.org/ontology/commander> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor WHERE {
  # Michał Kazimierz Pac as a commander in the Battle of Vienna
  dbr:Micha%C5%82_Kazimierz_Pac dbo:commanderOf dbr:Battle_of_Vienna .

  # The successor who is a politician and office holder
  ?successor dbo:predecessor dbr:Micha%C5%82_Kazimierz_Pac .
  ?successor a dbo:Politician ;
             dbo:officeHolder true .
}
```",6,12,7,3,2,3,3,71,0,0,1,0,0.0,0
782,18,train,Give me the band of Kim Wilson and associated musical artist of Nick Curran and reference to The Fabulous Thunderbirds.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?kimWilsonBand ?nickCurranArtist WHERE {
  # Find the band associated with Kim Wilson
  dbr:Kim_Wilson dbo:band ?kimWilsonBand .
  
  # Ensure The Fabulous Thunderbirds is mentioned
  FILTER(?kimWilsonBand = dbr:The_Fabulous_Thunderbirds)
  
  # Find any musical artist associated with Nick Curran
  OPTIONAL {
    dbr:Nick_Curran dbo:musicalArtist ?nickCurranArtist .
  }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
78,12,train,Give me the associated musical artist of Stuart Tosh and band member of The Alan Parsons Project and associated musical artist of Billy Lyall.,SELECT ?result WHERE { <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  VALUES ?person { 
    dbr:Stuart_Tosh 
    dbr:Billy_Lyall 
  }
  
  ?person dbo:musicalArtist ?artist .
  OPTIONAL { ?artist rdfs:label ?label FILTER (lang(?label) = 'en') . }

  # Filter to ensure the artist is The Alan Parsons Project
  VALUES ?project { dbr:The_Alan_Parsons_Project }
  ?artist rdfs:label ?labelProject FILTER (?labelProject IN (""The Alan Parsons Project"") && lang(?labelProject) = 'en')
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
943,53,train,"Give me the reference to  and father of the father, that is a royalty and an office holder, of Na'od and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> """"@en . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?naodsFather WHERE {
  ?siege dbo:event = dbr:Siege_of_Mukha .
  
  ?commander dbo:positionHeld ?office ;
             dbo:parent ?royalParent ;
             dbo:child ?potentialNaodFather .

  ?royalParent a dbo:Monarch ;
               dbo:child ?potentialNaodFather .

  ?potentialNaodFather dbo:child dbr:Na'od_of_Shenzha ;
                       a dbo:Monarch ;
                       dbo:positionHeld ?office2 .

  BIND(?potentialNaodFather AS ?naodsFather)
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
723,0,train,Give me the band member of Mudvayne.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mudvayne> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?member WHERE {
  ?band a dbo:MusicalGroup ;
        foaf:name ""Mudvayne""@en .
  ?band dbo:bandMember ?member .
}
```",1,1,2,1,1,3,2,20,0,0,5,0,0.0,0
119,2,train,"Give me the force, that is a television show and a military conflict, of Maria I of Portugal.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Maria_I_of_Portugal> . },"```sparql
# Query 1: Get the full name of Maria I of Portugal
SELECT ?fullName WHERE {
  dbpedia:Marie_I_of_Portugal rdfs:label ?fullName .
  FILTER (lang(?fullName) = 'en')
}

# Query 2: Find the television show titled ""The Force""
SELECT ?show WHERE {
  ?show rdf:type dbo:TelevisionShow ;
        rdfs:label ?label .
  FILTER (CONTAINS(LCASE(str(?label)), LCASE(""the force"")) && langMatches(lang(?label), 'en'))
}

# Query 3: Identify any military conflict associated with Maria I of Portugal referred to as ""the force""
SELECT DISTINCT ?conflict WHERE {
  dbpedia:Marie_I_of_Portugal dbo:spouse ?spouse .
  ?spouse dbo:occupation ?occupation .
  ?occupation rdfs:label ?label .
  FILTER (CONTAINS(LCASE(str(?label)), LCASE(""military"")) && langMatches(lang(?label), 'en'))
  
  OPTIONAL {
    ?conflict dbo:participatedIn ?person .
    ?person rdfs:label ?personLabel .
    FILTER (?person = dbpedia:Marie_I_of_Portugal || CONTAINS(LCASE(str(?personLabel)), LCASE(""maria i of portugal"")))
    ?conflict rdfs:label ?conflictLabel .
    FILTER (CONTAINS(LCASE(str(?conflictLabel)), LCASE(""force"")) && langMatches(lang(?conflictLabel), 'en'))
  }
}
```",1,3,2,1,1,3,2,20,0,0,2,0,0.0,0
353,51,train,"Give me the father of the child, that is a royalty, of William I of Sicily and child of the child of the spouse, that is a royalty, of Constance of Burgundy.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> ?v1 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v4 <http://dbpedia.org/property/father> ?result . ?v2 <http://dbpedia.org/ontology/child> ?result . },"```sparql
SELECT ?father WHERE {
  # Step 1: Identify William I of Sicily
  ?williamI dbr:William_I_of_Sicily .
  
  # Step 2: Find his children who are royalty
  ?child dbo:parent ?williamI ;
         a dbo:Monarch .

  # Step 3: Identify Constance of Burgundy and her spouse
  ?constance dbr:Constance_of_Burgundy .
  ?spouse dbo:spouse ?constance .

  # Step 4: Find the children of Constance's spouse
  ?childOfSpouse dbo:parent ?spouse ;
                a dbo:Monarch .

  # Step 5: Find their grandchildren who are royalty
  ?grandChild dbo:parent ?childOfSpouse ;
              a dbo:Monarch .

  # Step 6: Identify the father of this grandchild
  ?father dbo:parent ?grandChild .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
737,3,train,"Give me the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?spouse WHERE {
  ?helena dbo:spouse ?spouse .
  FILTER EXISTS { ?helena rdfs:label ""Helena, Archduchess of Austria""@en }
  OPTIONAL { ?spouse dbo:royalTitle ?title . }
  OPTIONAL { ?spouse dbo:positionHeld ?position . }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
628,45,train,"Give me the native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state) and person born as Ackquille Jean Pollard and band member of Uncle Murda.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v0 <http://dbpedia.org/property/awards> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awardNativeRegion WHERE {
  # Identify Ackquille Jean Pollard (2 Chainz) and his band affiliations
  ?person a dbo:Person ;
          foaf:name ""Ackquille Jean Pollard"" ;
          dbo:birthPlace dbr:Atlanta,_Georgia .

  ?band dbo:member ?person .
  ?band dbo:origin dbr:New_York_City .

  # Identify Uncle Murda's band affiliation
  ?uncleMurda a dbo:Person ;
              foaf:name ""Uncle Murda"" ;
              dbo:member ?band .

  # Find an award associated with this band
  ?award dbo:recipient ?band .
  
  # Determine the native region of the award
  ?award dbo:nativeRegion ?nativeRegion .

  # Ensure the native region is both a state and a settlement
  ?nativeRegion a dbo:State ;
                a dbo:Settlement .
}
```",5,10,6,3,3,3,3,71,0,0,1,0,0.0,0
293,24,train,"Give me the spouse of the actor of 1,000 Dollars a Minute and person born as Harriette Arlene Lake.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?spouse WHERE {
  ?actor foaf:name ""Harriet Andersson""@en .
  ?actor dbo:birthName ""Harriette Arlene Lake"" .
  ?actor dbo:spouse ?spouse .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
203,57,train,"Give me the military force of the force, that is an event and a societal event, of Robert Calder and military force of the war, that is a military conflict and an event, of the reference to William Bayne and commander in French campaign in Egypt and Syria.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v5 . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://dbpedia.org/ontology/battle> ?v5 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?calderEvent ?bayneWar WHERE {
  # Find Robert Calder's military event
  ?calderEvent a dbo:MilitaryEngagement ;
               dbo:commander dbr:Robert_Calder .

  # Ensure the event is also considered a societal event
  ?calderEvent dbo:wikiPageRedirects ?redirect .
  ?redirect rdfs:label ""Battle of Cape Finisterre""@en .

  # Find William Bayne's war during the French campaign in Egypt and Syria
  ?bayneWar a dbo:MilitaryConflict ;
            dbo:commander dbr:William_Bayne ;
            dbo:partOf dbr:French_campaign_in_Egypt_and_Syria .

}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
687,57,train,"Give me the player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and player in Juan Carlos Molina (footballer) and team of the person born, that is a soccer player and a soccer manager, on 1979-11-03.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v3 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/property/starring> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://dbpedia.org/ontology/coach> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor WHERE {
  # Step 1: Identify the person born on 1979-11-03 who is a soccer player and manager
  ?person dbo:birthDate ""1979-11-03""^^xsd:date ;
          rdf:type dbo:SoccerPlayer, dbo:SoccerManager .

  # Step 2: Find the team associated with this person
  ?team dbo:player ?person .

  # Step 3: Identify films directed by Manuel Huerga
  ?film dbo:director dbr:Manuel_Huerga ;
        rdf:type dbo:Film .

  # Step 4: Determine actors in these films who are also soccer players and athletes
  ?actor dbo:role ?film ;
         rdf:type dbo:SoccerPlayer, dbo:Athlete .

  # Step 5: Check if any of these actors have played in the same team as Juan Carlos Molina
  ?team2 dbo:player dbr:Juan_Carlos_Molina_(footballer) .
  FILTER(?team = ?team2)
}
```",6,11,7,3,3,3,3,71,0,0,1,0,0.0,0
628,28,train,"Give me the person born as Ackquille Jean Pollard and native of Florida and band member of the associated musical artist, that is a musical artist, of Bobby Shmurda.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Ackquille Jean Pollard""@en .
  ?person dbo:nationality dbr:United_States .
  ?person dbo:birthPlace dbr:Florida .
  ?association dbo:associatedBandMember ?person ;
               dbo:associatedMusicalArtist dbr:Bobby_Shmurda .
  ?person a dbo:Musician .
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
628,43,train,"Give me the band member of Uncle Murda and native of Florida and person born as the birth name of the native, that is a musical artist, of Florida.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v0 <http://dbpedia.org/property/birthName> ?v4 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?result <http://dbpedia.org/property/birthName> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthName WHERE {
  # Find band members of Uncle Murda
  ?bandMember dbo:memberOf dbr:Uncle_Murda .
  
  # Filter for those who are natives of Florida
  ?bandMember dbo:birthPlace dbr:Florida .

  # Ensure the person is a musical artist
  ?bandMember rdf:type dbo:MusicalArtist .

  # Get the birth name of the person
  ?bandMember dbp:birthdayYear ?year .
  ?person dbo:birthName ?birthName .
  
  # Link the band member to their birth name entry
  FILTER(?bandMember = ?person)
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
361,20,train,Give me the actor of Rustlers' Rhapsody and professional in Actor and professional in the alter ego of The Shadow.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v3 . }","```sparql
# Query to find the actor of ""Rustlers' Rhapsody""
SELECT ?actor WHERE {
  ?movie dbo:genre dbc:Western_films .
  ?movie dbo:title ""Rustlers' Rhapsody"" .
  ?movie dbo:starring ?actor .
}

UNION

# Query to find the person who was both an actor and The Shadow
SELECT ?person WHERE {
  ?person rdf:type dbo:Actor .
  ?person foaf:name ?name .
  OPTIONAL { 
    ?shadow dbo:alterEgo ?person .
    ?shadow rdfs:label ""The Shadow""@en .
  }
}
```",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
723,8,train,"Give me the band member of the associated musical artist, that is an organisation, of Cavalera Conspiracy.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . <http://dbpedia.org/resource/Cavalera_Conspiracy> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?member ?organization WHERE {
  # Find Cavalera Conspiracy in DBpedia
  dbr:Cavalera_Conspiracy a dbo:Band .

  # Identify band members of Cavalera Conspiracy
  dbr:Cavalera_Conspiracy dbo:bandMember ?member .

  # Check if the member is also associated with an organization
  ?member dbo:associatedMusicalArtist ?organization .
  
  FILTER (?organization != dbr:Cavalera_Conspiracy)
}
```",2,3,3,2,1,3,2,20,2,6,87,0.25,0.02247191011235955,0.041237113402061855
80,20,train,Give me the actor of Shelby Oaks and actor of the album of What You Know (T.I. song).,SELECT ?result WHERE { <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v2 . },"```sparql
# Query to find the actor who played Shelby Oaks
SELECT ?actor WHERE {
  ?film dbp:characterName ""Shelby Oaks"" .
  ?film dbo:starring ?actor .
  ?actor a dbo:Actor .
}

UNION

# Query to find the artist of the album containing ""What You Know""
SELECT ?artist WHERE {
  ?song dcterms:title ""What You Know""@en ;
        dbo:album ?album .
  ?album dbo:artist ?artist .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
668,2,train,Give me the person born as Darryl Paa Kwesi Bannerman-Martin.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?person WHERE {
  ?person foaf:name ""Darryl Paa Kwesi Bannerman-Martin"" .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
159,57,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of Yurii Khmelnytsky and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/writer> ?v5 . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?commander WHERE {
  # Find TV shows or events linked to Jean Baptist, Comte d'Arco
  ?tvShow dbo:actor ?person .
  ?person rdfs:label ""Jean Baptist, Comte d'Arco""@en .

  OPTIONAL {
    ?event dbo:organizer ?person .
  }

  # Find Yurii Khmelnytsky's successor in the same context
  ?successor dbo:succeededBy ?yuriiKhmelnytsky .
  ?yuriiKhmelnytsky rdfs:label ""Yurii Khmelnytsky""@en .

  # Link to a writer of George Ducas' work
  ?writer dbo:authorOf ?work .
  ?work dbo:subject ?georgeDucas .
  ?georgeDucas rdfs:label ""George Ducas""@en .

  # Ensure the commander is linked across these contexts
  FILTER (?tvShow = ?event)
  FILTER (?successor = ?commander)
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
412,8,train,Give me the war of the leader of National Party of Greece.,SELECT ?result WHERE { <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v1 . ?v1 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
SELECT ?leader ?war WHERE {
  ?party dbo:wikiPageRedirects db:National_Party_of_Greece .
  ?party dbo:leader ?leader .
  
  OPTIONAL {
    ?leader dbo:participatedInWar ?war .
  }
}
```",2,2,3,2,1,2,3,28,0,0,13,0,0.0,0
871,39,train,"Give me the parent of Edward Stanley, 17th Earl of Derby and father of the child, that is a politician, of the alumnus of Eton College.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v0 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/father> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent WHERE {
    # Step 1: Find children of Edward Stanley, 17th Earl of Derby who are politicians and alumni of Eton College
    ?child dbo:spouse|dbo:partner|dbo:child dbr:Edward_Stanley,_17th_Earl_of_Derby .
    ?child dbo:almaMater dbr:Eton_College .
    ?child dbo:occupation dbr:Politician .

    # Step 2: Find the parent of this child
    ?parent dbo:child ?child .

    # Step 3: Find the parent of Edward Stanley, 17th Earl of Derby
    OPTIONAL {
        ?edwardParent dbo:child dbr:Edward_Stanley,_17th_Earl_of_Derby .
        BIND(?edwardParent AS ?result)
    }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
58,1,train,Give me the producer of 12 Strong.,SELECT ?result WHERE { <http://dbpedia.org/resource/12_Strong> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  ?film rdf:type dbo:Film .
  ?film rdfs:label ""12 Strong""@en .
  ?film dbo:producer ?producer .
}
```",1,1,2,1,1,3,2,20,3,0,0,1.0,1.0,1.0
87,4,train,Who is the awardee of List of awards and nominations received by Janusz Kamiński?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  VALUES ?janusz_kaminski { dbr:Janusz_Kamiński }
  ?janusz_kaminski dbo:award ?award .
}
```",1,1,2,1,1,2,3,28,0,1,1,0.0,0.0,0
737,41,train,"Give me the child of the child of Duke Philipp of Württemberg and predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of Archduchess Margarete Sophie of Austria.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v4 . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?individual WHERE {
  # Duke Philipp of Württemberg's child
  ?philippChild dbo:child dbr:Duke_Philipp_of_W%C3%BCrttemberg .
  
  # Grandchild of Duke Philipp (child of his child)
  ?grandchild dbo:parent ?philippChild .

  # Child of Philipp Albrecht, Duke of Württemberg
  ?albrechtChild dbo:child dbr:Philipp_Albrecht,_Duke_of_W%C3%BCrttemberg .
  
  # Predecessor in the line (likely parent)
  ?predecessor dbo:parent ?albrechtChild .

  # Child of Archduchess Margarete Sophie of Austria
  ?margareteChild dbo:child dbr:Archduchess_Margarete_Sophie_of_Austria .
  
  # Find the individual who satisfies all conditions
  VALUES ?individual { ?grandchild ?predecessor ?margareteChild }
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
203,52,train,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of Battle of Cape Finisterre (1805) and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v5 . ?v3 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v5 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commander WHERE {
  # Find the war involving ""The Triple X's""
  ?tripleXsWar a dbo:MilitaryConflict ;
               dbo:participatingMilitaryUnit ?tripleXsForce .
  
  # Find the commander of this force
  ?tripleXsForce dbo:commander ?commander .

  # Confirm Admiral Robert Calder commanded in the Battle of Cape Finisterre (1805)
  dbr:Battle_of_Cape_Finisterre_1805 dbo:participatingMilitaryUnit ?calderForce .
  ?calderForce dbo:commander dbr:Admiral_Robert_Calder .

  # Find William Bayne's military force and commander
  ?bayneWar a dbo:MilitaryConflict ;
            dbo:participatingMilitaryUnit ?bayneForce .
  
  ?bayneForce dbo:commander ?bayneCommander .
  FILTER(?bayneCommander = dbr:William_Bayne) .

  # Ensure the same commander is involved in all contexts
  FILTER(?commander = dbr:Admiral_Robert_Calder && ?commander = ?bayneCommander)
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
687,34,train,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio and team of Pablo Aimar.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthDate> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v2 . },"```sparql
# Find Marty Pollio's birthday
SELECT ?martyBirthday WHERE {
  dbpedia:Marty_Polloi dbo:birthday ?martyBirthday .
}

# Find Pablo Aimar's birthday and team
SELECT ?pabloBirthday, ?team WHERE {
  dbpedia:Pablo_Aimar dbo:birthday ?pabloBirthday ;
                     dbo:playsForTeam ?team .
}

# Find athletes born on Marty Pollio's birthday
SELECT DISTINCT ?athlete WHERE {
  ?athlete a dbo:Athlete ;
           dbo:birthday ?martyBirthday .
}

# Find athletes born on Pablo Aimar's birthday
SELECT DISTINCT ?athlete WHERE {
  ?athlete a dbo:Athlete ;
           dbo:birthday ?pabloBirthday .
}

# Combine results to find an athlete who matches both criteria
SELECT DISTINCT ?athlete WHERE {
  ?athlete a dbo:Athlete ;
           dbo:birthday ?martyBirthday .
  OPTIONAL { ?athlete dbo:playsForTeam ?team . }
  FILTER EXISTS { dbpedia:Pablo_Aimar dbo:playsForTeam ?team }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
119,5,train,"Who is the citizen, that is Spanish, of Spain?",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?personLabel WHERE {
  ?person dbo:country dbr:Spain .
  ?person dbo:nationality dbr:Spanish_people .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,2,2,1,1,3,3,71,0,0,1550,0,0.0,0
816,60,train,"Give me the actor of the movie, that is a work, with the person decedent at Los Angeles and parent of the child of the spouse of Mariclare Costello.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?v1 . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v0 . ?v3 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v2 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT DISTINCT ?actor WHERE {
  # Step 1: Find Mariclare Costello
  wd:Q123456 a dbo:Person ; 
             foaf:name ""Mariclare Costello""@en .

  # Step 2: Find the spouse of Mariclare Costello
  ?spouse wdt:P26 wd:Q123456 .
  
  # Step 3: Find children of the spouse
  ?child wdt:P25 ?spouse .

  # Step 4: Identify another parent (if any) of the child
  ?parent wdt:P22 ?child .
  FILTER(?parent != ?spouse)

  # Step 5: Check if this person was decedent at Los Angeles
  ?decedent wdt:P20 wd:Q12345 ; # Q12345 is a placeholder for Los Angeles in DBpedia
             wdt:P31 wd:Q5 ;
             rdfs:label ?name .
  FILTER(?parent = ?decedent)

  # Step 6: Find works associated with this person
  ?work dbo:author ?decedent .

  # Step 7: Identify which of these works are movies
  ?movie wdt:P31 wd:Q11424 ;
         rdfs:label ?moviename .
  FILTER(?work = ?movie)

  # Step 8: Find actors involved in the movie
  ?actorRole dbo:characterName ?role ;
             dbo:actor ?actor .
  FILTER(?actorRole dbo:inMovie ?movie)
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
871,46,train,"Give me the parent of the awardee of the award of Rodney Lees and parent of the child of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v3 . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v1 . }","```sparql
# Query for Rodney Lees' Awardee's Parent
SELECT ?parent WHERE {
  ?award dbo:recipient ?lees .
  ?lees foaf:name ""Rodney Lees"" .
  ?award dbo:recipient ?awardee .
  ?awardee dbo:parent ?parent .
}

UNION

# Query for Frederick Stanley, 16th Earl of Derby's Child's Parent
SELECT ?parent WHERE {
  ?child dbo:parent ?frederickStanley .
  ?frederickStanley foaf:name ""Frederick Stanley, 16th Earl of Derby"" .
  ?frederickStanley dbo:parent ?parent .
}
```",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
361,8,train,Give me the professional in the profession of Frédéric Bouraly.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Frédéric_Bouraly> <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
SELECT ?person WHERE {
  ?frédéricBouraly dbo:profession ?profession .
  FILTER (str(?frédéricBouraly) = ""Frédéric_Bouraly"")
  
  ?person dbo:profession ?sameProfession .
  FILTER (?sameProfession = ?profession && str(?person) != ""Frédéric_Bouraly"")
}
```",2,2,3,2,1,2,3,28,0,0,21580,0,0.0,0
80,35,train,Give me the actor of the movie with  and professional in the alter ego of The Shadow.,"SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/starring> """"@en . }","```sparql
SELECT ?actor WHERE {
  ?movie dbo:starring ?actor .
  ?actor foaf:name ""Alec Baldwin""@en .
  
  OPTIONAL { 
    ?movie rdfs:label ?title .
    FILTER(CONTAINS(LCASE(?title), ""and""))
  }
  
  OPTIONAL {
    ?character dbo:portrayedBy ?actor ;
               dbo:alternateName ""The Shadow"" .
  }
}
```",4,4,5,2,2,3,3,71,1,0,7801,1.0,0.0001281722635221738,0.0002563116749967961
398,6,train,Give me the figure known as Наши парни / Nashi parni and player in Aleksandr Filimonov.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Aleksandr_Filimonov> <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/property/nickname> ""Наши парни / Nashi parni""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band ?member WHERE {
  VALUES ?band { dbr:Nashi_Parni }
  ?band dbo:musicalArtist ?member .
  OPTIONAL { 
    ?member rdfs:label ?name .
    FILTER(CONTAINS(LCASE(?name), ""aleksandr filimonov""))
  }
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
609,32,train,"Give me the birth place of the governor, that is a politician, of Virginia and birth place of the awardee of List of awards and nominations received by Vince Gilligan.",SELECT ?result WHERE { <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . },"```sparql
# Query for the birthplace of Glenn Youngkin (Governor of Virginia)
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Glenn Youngkin""@en .
  ?person dbo:officeHolderOf dbr:Office_of_the_Governor_of_Virginia .
  ?person dbo:birthPlace ?birthPlace .
}

# Query for the birthplace of Vince Gilligan using an award or nomination
SELECT DISTINCT ?birthPlace WHERE {
  ?award dbo:recipient ?person .
  ?person foaf:name ""Vince Gilligan""@en .
  ?person dbo:birthPlace ?birthPlace .
  FILTER EXISTS { 
    ?award rdf:type dbo:Award .
  }
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
905,4,train,"Give me the father of Philip I, Prince of Taranto.","SELECT ?result WHERE { <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  dbr:Philip_I,_Prince_of_Taranto dbo:father ?father .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
871,55,train,"Give me the parent of the awardee of Commander of the Royal Victorian Order and parent of the child of Frederick Stanley, 16th Earl of Derby and father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v4 . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v3 <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?commonParent WHERE {
  # Part 1: Find the parent of an awardee of Commander of the Royal Victorian Order
  ?awardee dbo:award <http://dbpedia.org/resource/Commander_of_the_Royal_Victorian_Order> .
  ?awardee foaf:parent ?parentAwardee .

  # Part 2: Find Frederick Stanley's children and their parents
  ?child dbo:father <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> ;
         foaf:parent ?parentChild .

  # Filter for the child who is a politician
  ?child dbo:occupation <http://dbpedia.org/ontology/Politician> .

  # Find the common parent
  FILTER (?parentAwardee = ?parentChild)
  BIND(?parentAwardee AS ?commonParent)
}
```",6,7,7,2,3,3,3,71,0,0,1,0,0.0,0
595,43,train,"Give me the commander in Third Taiwan Strait Crisis and author of the work, that is a written work and a book and a work, of the resident, that is a politician and an office holder, of Chappaqua, New York and spouse of Hillary Clinton.","SELECT ?result WHERE { <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Chappaqua,_New_York> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v4 <http://dbpedia.org/property/author> ?v0 . ?v4 <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?role ?work WHERE {
  ?person a dbo:Person .
  ?person foaf:name ""Bill Clinton""@en .
  
  # Commander in Third Taiwan Strait Crisis (U.S. President)
  OPTIONAL { ?person dbo:officeHolderOf dbr:President_of_the_United_States . }
  
  # Author of a written work and book
  OPTIONAL {
    ?work dbo:author ?person ;
          a dbo:Book .
    FILTER regex(str(?work), ""My Life"", ""i"")
  }

  # Resident, politician, and office holder in Chappaqua, New York
  OPTIONAL { ?person dbo:residence dbr:Chappaqua,_New_York . }
  
  # Spouse of Hillary Clinton
  OPTIONAL {
    ?spouseRelation dbo:spouse ?person ;
                    dbo:spouse dbr:Hillary_Clinton .
  }
}
```",5,10,6,3,3,3,3,71,0,0,1,0,0.0,0
347,0,train,Give me the commander in Thirty Years' War.,SELECT ?result WHERE { <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?name WHERE {
  ?war dbo:wikiPageRedirects dbr:Thirty_Years'_War .
  ?war dbo:commander ?commander .
  OPTIONAL { ?commander rdfs:label ?name FILTER (lang(?name) = 'en') }
}
```",1,1,2,1,1,3,3,71,0,0,42,0,0.0,0
203,13,train,"Give me the military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).",SELECT ?result WHERE { <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v1 . ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event ?militaryForce WHERE {
  ?person rdfs:label ""William Bayne (Royal Navy officer)""@en .
  ?person dbo:militaryConflict ?event .
  OPTIONAL { ?event dbo:participatingMilitaryUnit ?unit . }
  FILTER(LANG(?person) = 'en')
  
  # Assuming the military force is the Royal Navy
  BIND(""British Royal Navy"" AS ?militaryForce)
}
```",2,4,3,2,1,3,3,71,0,0,529,0,0.0,0
151,6,train,Give me the reference to the award of Charles Parsons (British Army officer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_Parsons_(British_Army_officer)> <http://dbpedia.org/property/awards> ?v0 . ?result <http://xmlns.com/foaf/0.1/name> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?person rdfs:label ""Charles Parsons (British Army officer)""@en .
  ?person dbo:occupation dbr:Military_officer .
  ?person dbo:honorificTitle ?award .
}
```",2,2,3,2,1,2,2,9,0,0,98450,0,0.0,0
399,0,train,Give me the band member of Emilia (Bulgarian singer).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Emilia_(Bulgarian_singer)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bandMember WHERE {
  # Find Emilia's bands
  ?emilia dbo:memberOfBand ?band .
  
  # Find other members of those bands
  ?band dbo:member ?bandMember .

  # Ensure we exclude Emilia from the results
  FILTER (?bandMember != dbr:Emilia_(Bulgarian_singer))
}
```",1,1,2,1,1,2,2,9,0,0,5,0,0.0,0
905,9,train,Give me the parent of Charles Martel of Anjou and spouse of Charles II of Naples.,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent ?spouse WHERE {
  # Find Charles Martel of Anjou's parent
  ?charlesMartel a dbo:Person ;
                 foaf:name ""Charles Martel of Anjou""@en .
  ?parent dbo:child ?charlesMartel .

  # Find Charles II of Naples' spouse
  ?charlesII a dbo:Person ;
             foaf:name ""Charles II of Naples""@en .
  ?spouse dbo:spouse ?charlesII .

  # Check if the parent and spouse are the same person
  FILTER (?parent = ?spouse)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
39,3,train,Who is the producer of Coke Studio Philippines?,SELECT ?result WHERE { <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  ?show dbr:Coke_Studio_Philippines ;
        dbo:producer ?producer .
}
```",1,1,2,1,1,3,3,71,0,0,4,0,0.0,0
119,17,train,"Give me the entity in the residence, that is a country, of the native, that is Polish and an athlete, of Łódź and war of Alexander Suvorov.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Poland>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Łódź> . ?result <http://dbpedia.org/ontology/place> ?v3 . ?v0 <http://dbpedia.org/property/residence> ?v3 . <http://dbpedia.org/resource/Alexander_Suvorov> <http://dbpedia.org/ontology/battle> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. },"```sparql
SELECT ?entity WHERE {
  # Find a notable Polish athlete from Łódź
  ?athlete dbo:nationality dbr:Poland ;
           dbo:birthPlace dbr:Łódź ;
           dbo:occupation dbr:Athlete .
  
  # Determine the country of residence (likely Poland)
  ?athlete dbo:residence dbr:Poland .

  # Find a war associated with Alexander Suvorov
  ?suvorovWar dbo:participatedIn ?war .
  ?suvorovWar rdfs:label ""Alexander Suvorov""@en .
  
  # Connect the country of residence to the war context
  ?entity dbo:country dbr:Poland ;
          dbo:relatedTo ?war .

  FILTER (lang(?entity) = 'en')
}
```",4,7,5,3,2,3,2,20,0,0,1,0,0.0,0
816,10,train,Give me the actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of Doon Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT ?actor WHERE {
  ?movie dcterms:title ""Judgment: The Trial of Julius and Ethel Rosenberg""@en .
  ?movie dbo:starring ?actor .
  
  OPTIONAL { 
    ?actor dbo:child ?doonArbus .
    ?doonArbus foaf:name ""Doon Arbus""@en .
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
531,51,train,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/leader> ?v2 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://dbpedia.org/property/office> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/property/office> ?result . },"```sparql
# Query for the office of the leader of the party associated with Miguel Maura
SELECT ?partyLeaderOffice WHERE {
  ?miguelMaura dbo:politicalParty ?party .
  ?party dbo:leader ?leader .
  ?leader dbo:office ?partyLeaderOffice .
  
  FILTER (str(?miguelMaura) = ""Miguel Maura"")
}

UNION

# Query for the office of a commander in the Central African Republic Civil War
SELECT ?commanderOffice WHERE {
  ?war dbp:name ""Central African Republic Civil War"" .
  ?war dbo:participant ?commander .
  ?commander rdf:type dbo:Politician ;
             dbo:office ?commanderOffice .
  
  FILTER (str(?commander) = ""Commander in Central African Republic Civil War"")
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
816,34,train,"Give me the parent of Doon Arbus and actor of the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/starring> ?v2 . ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent ?actor WHERE {
  # Find Doon Arbus's parent
  dbr:Doon_Arbus dbo:parent ?parent .

  # Find movies (works) associated with actors who have connections to decedents in Los Angeles
  ?movie dbo:starring ?actor .
  ?decedent dbo:deathPlace dbr:Los_Angeles_County,_California ;
            dbo:causeOfDeath ?cause .
  
  # Check if the actor is connected to a decedent in Los Angeles
  ?actor dbo:spouse|dbo:child|dbo:parent ?decedent .

  # Find any overlap between Doon Arbus's parent and the actor
  FILTER(?parent = ?actor)
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
609,53,train,Give me the birth place of the awardee of the award of Vince Gilligan and birth place of the author of El Deafo and birth place of Glenn Youngkin.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/property/awards> ?v3 . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v3 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for the birthplace of Bryan Cranston (associated with Vince Gilligan)
SELECT ?birthPlace WHERE {
  wd:Q1776 dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birthplace of Cece Bell, author of El Deafo
SELECT ?birthPlace WHERE {
  wd:Q1065182 dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birthplace of Glenn Youngkin
SELECT ?birthPlace WHERE {
  wd:Q110510570 dbo:birthPlace ?birthPlace .
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
293,42,train,"Give me the spouse of Roger Pryor (actor) and party member of the ruling party in Central, Louisiana and person born as the birth name of Ann Sothern.","SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/party> ?v2 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse ?birthName WHERE {
  # Spouse of Roger Pryor (actor)
  OPTIONAL { 
    dbr:Roger_Pryor_(actor) dbo:spouse ?spouse .
  }
  
  # Person born with the birth name Ann Sothern
  OPTIONAL {
    ?person dbo:birthName ""Ann Sothern""@en .
    ?person rdfs:label ?birthName .
  }
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
143,7,train,"Give me the actor of the show, that is a movie, with Afeez Oyetoro.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Afeez_Oyetoro> . ?v1 <http://dbpedia.org/property/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  ?work dbo:starring dbr:Afeez_Oyetoro .
  ?work dbo:starring ?actor .
  FILTER(?actor != dbr:Afeez_Oyetoro)
}
```",2,3,3,2,1,3,2,20,6,18,22,0.25,0.21428571428571427,0.23076923076923075
531,35,train,"Give me the tenant of the residence of Alberto Ruiz-Gallardón and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenant WHERE {
  # Find the residence associated with Alberto Ruiz-Gallardón
  ?residence dbo:resident dbr:Alberto_Ruiz-Gallardón .
  
  # Find the office of the leader of the Conservative Republican Party (Spain)
  ?office dbo:headquarterOf dbr:People's_Party_(Spain) .

  # Check if both are associated with the same tenant
  ?residence dbo:tenant ?tenant .
  ?office dbo:tenant ?tenant .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
668,15,train,Who is the person born as the birth name of $pacely?,SELECT ?result WHERE { <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?fullName WHERE {
  ?person dbo:birthName ""Pacely""@en .
  OPTIONAL { ?person foaf:name ?fullName }
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
609,45,train,"Give me the birth place of Vince Gilligan and birth place of the author of the reference, that is American, to El Deafo and birth place of Glenn Youngkin.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/author> ?v1 . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
# Query for Vince Gilligan's birth place
SELECT ?birthPlace WHERE {
  dbpedia:Vince_Gilligan dbo:birthPlace ?birthPlace .
}

UNION

# Query for Cece Bell's birth place
SELECT ?birthPlace WHERE {
  dbpedia:Cecily_Bell dbo:birthPlace ?birthPlace .
}

UNION

# Query for Glenn Youngkin's birth place
SELECT ?birthPlace WHERE {
  dbpedia:Glenn_Youngkin dbo:birthPlace ?birthPlace .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
140,2,train,Give me the military force of Pickett's Charge.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Pickett's_Charge> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?unit ?unitLabel WHERE {
  ?event dbo:commander dbr:George_Pickett .
  ?event rdfs:label ""Pickett's Charge""@en .
  ?event dbo:participatingUnit ?unit .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,1,2,1,1,3,2,20,0,0,4,0,0.0,0
585,16,train,"Give me the native of the award, that is American and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and child of the professional in Actress.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v2 . ?v3 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v3 <http://dbpedia.org/property/occupation> ""Actress""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?nativePlace WHERE {
  ?award dbo:awardedBy dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico .
  ?award dbo:country dbr:United_States_of_America .
  ?award dbo:location ?settlement .
  ?settlement a dbo:Settlement .
  OPTIONAL { ?actor dbo:profession dbr:Actress . ?actor dbo:awardsReceived ?award . }
}
```",4,6,5,2,2,3,2,20,0,0,10,0,0.0,0
158,8,train,"Give me the person decedent at the birthplace, that is a country, of Sandro Bertaggia.",SELECT ?result WHERE { <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/deathPlace> ?v1 . },"```sparql
SELECT ?decedent WHERE {
  # Find Sandro Bertaggia's birthplace
  ?sandro dbo:birthPlace ?birthPlace .
  
  FILTER(?sandro = dbpedia:Sandro_Bertaggia)

  # Check if the birthplace is a country
  ?birthPlace rdf:type owl:Thing ;
              rdfs:label ?countryLabel ;
              a dbo:Country .

  # Find individuals who died in this country
  ?decedent dbo:deathPlace ?birthPlace .
  
  FILTER(lang(?countryLabel) = 'en')
}
```",2,3,3,2,1,2,3,28,0,0,906,0,0.0,0
347,41,train,"Give me the commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France) and child of Ferdinand II, Holy Roman Emperor and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v4 <http://dbpedia.org/property/father> ?result . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:child dbr:Ferdinand_II,_Holy_Roman_Emperor .
  ?person dbo:parent ?descendant .
  ?descendant dbo:parent ?ferdinandIIIChild .
  ?person dbo:militaryCommanderOf dbr:2nd_Dragoon_Regiment_(France) .
  ?event dbo:name ?eventName .
  FILTER(CONTAINS(LCASE(?eventName), ""battle of vienna"") || CONTAINS(LCASE(?eventName), ""leopold i""))
}
```",5,8,6,2,3,3,3,71,0,0,1,0,0.0,0
742,15,train,Give me the birthplace of Reneta Kamberova and birthplace of the alumnus of the reference to Пловдивски университет „Паисий Хилендарски“.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/almaMater> ?v0 . <http://dbpedia.org/resource/Reneta_Kamberova> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Пловдивски университет „Паисий Хилендарски“""@en . }","```sparql
# Query to find the birthplace of Reneta Kamberova
SELECT ?birthPlace WHERE {
  dbpedia:Reneta_Kamberova dbo:birthPlace ?birthPlace .
}

UNION

# Query to find an alumnus of Plovdiv University and their birthplace
SELECT ?alumnusBirthPlace WHERE {
  ?alumnus dbo:almaMater dbpedia:Plovdiv_University_""Paisii_Hilendarski"" ;
           dbo:birthPlace ?alumnusBirthPlace .
}
```",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
246,10,train,"Give me the child, that is a royalty, of the child, that is a royalty, of Princess Muna al-Hussein.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Muna_al-Hussein> <http://dbpedia.org/ontology/child> ?v0 . ?result <http://dbpedia.org/property/father> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?grandchild WHERE {
  # Find children of Princess Muna al-Hussein
  ?princess rdf:type dbo:Person ;
            foaf:name ""Princess Muna al-Hussein""@en .
  
  ?princess dbo:spouse ?husband .
  ?husband dbo:spouse ?princess .

  ?child dbo:parent ?princess ;
         dbo:parent ?husband .

  # Filter for royalty among her children
  ?royalChild rdf:type dbo:RoyalPerson ;
              dbo:parent ?princess ;
              dbo:parent ?husband .
  
  # Find grandchildren of the royal child
  ?grandchild dbo:parent ?royalChild ;
              dbo:parent ?spouse .

  # Filter for royalty among these grandchildren
  ?grandchild rdf:type dbo:RoyalPerson .
}
```",2,4,3,2,1,3,2,20,0,0,8,0,0.0,0
513,2,train,Give me the reference to George Hamilton Cameron.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""George Hamilton Cameron""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?resource WHERE {
  ?resource a foaf:Person .
  ?resource foaf:name ""George Hamilton Cameron"" .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
595,14,train,"Give me the commander in the war, that is a disease and a societal event, of United States Navy.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  # Identify the event related to a disease and societal impact involving the U.S. Navy
  ?event dbo:wikiPageRedirects dbr:Spanish_Flu_pandemic .
  ?event dbo:location dbr:United_States_Navy .

  # Find the Chief of Naval Operations during this period (1918-1919)
  ?commander dbo:position dbr:Chief_of_Naval_Operations ;
             dbo:officeHolderOf dbr:William_S._Benson .
}
```",2,4,3,2,1,3,3,71,0,0,18,0,0.0,0
609,38,train,"Give me the birth place of the author of El Deafo and birth place of the governor, that is a politician, of Virginia.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v2 . <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v3 . },"```sparql
# Query to find the birth place of Cece Bell, author of El Deafo
SELECT ?birthPlace WHERE {
  wd:Q1234567 dbo:birthPlace ?birthPlace .
}

UNION

# Query to find the birth place of the current governor of Virginia
SELECT ?birthPlace WHERE {
  # Assuming the current governor is Glenn Youngkin (as of October 2023)
  wd:Q9876543 dbo:birthPlace ?birthPlace .
}
```

Note: The placeholders `wd:Q1234567` and `wd:Q9876543` should be replaced with the actual DBpedia QIDs for Cece Bell and Glenn Youngkin, respectively. You can find these IDs by searching their names in DBpedia or using a SPARQL endpoint to query for them.",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
742,14,train,"Give me the birthplace of the resident of the region, that is a settlement, of Eastern European Time.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Eastern_European_Time> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/property/residence> ?v2 . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  dbr:Taras_Shevchenko dbo:birthPlace ?birthPlace .
}
```",3,4,4,3,1,3,2,20,1,2,141,0.3333333333333333,0.007042253521126761,0.013793103448275864
531,58,train,"Give me the office of the commander, that is an office holder and a politician, in Central African Republic Civil War and tenant of Madrid and office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura.",SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v5 <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v5 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v2 <http://dbpedia.org/property/office> ?result . ?v1 <http://dbpedia.org/property/leader> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person ?office ?party WHERE {
  # Find individuals involved in the Central African Republic Civil War
  ?person dbo:occupation dbr:Military_person .
  ?person dbo:politicalAffiliation ?affiliation .
  
  # Ensure they are politicians and have held an office
  ?affiliation a dbo:PoliticalParty ;
               dbo:leader ?person .
  
  # Check if they have any connection to Madrid
  OPTIONAL { ?person dbo:residence dbr:Madrid . }
  
  # Find the political party associated with Miguel Maura
  ?party dbo:foundingMember dbr:Miguel_Maura .
  
  # Ensure the person is a leader of this party
  ?party dbo:leader ?person .
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
687,29,train,"Give me the team of Pablo Aimar and player in Juan Carlos Molina (footballer) and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?aimarTeam ?molinaTeam ?actorName WHERE {
  # Find Pablo Aimar's team
  ?pabloAimar a dbo:FootballPlayer ;
              dbo:nationality dbr:Argentina ;
              dbo:team ?aimarTeam .
  
  # Find Juan Carlos Molina's team
  ?juanCarlosMolina a dbo:FootballPlayer ;
                   dbo:nationality dbr:Argentina ;
                   dbo:team ?molinaTeam .

  # Find the actor from ""All or Nothing: Manchester City"" who is also a soccer player and athlete
  ?actor a dbo:Actor ;
         dbo:film dbr:All_or_Nothing:_Manchester_City ;
         dbo:sport dbr:Soccer ;
         dbo:occupation dbr:Athlete .
  
  # Get the actor's name
  ?actor foaf:name ?actorName .
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
782,41,train,Give me the associated musical artist of Nick Curran and reference to the real name of The Fabulous Thunderbirds and band of the band member of Eric Clapton.,SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v2 . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?result <http://dbpedia.org/ontology/bandMember> ?v4 . },"```sparql
# Query for associated musical artist of Nick Curran
SELECT ?artist WHERE {
  ?person foaf:name ""Nick Curran""@en .
  ?person dbo:associatedBandOrMusicalArtist ?artist .
}

UNION

# Query for real name of The Fabulous Thunderbirds members
SELECT ?realName WHERE {
  ?band dbo:name ""The Fabulous Thunderbirds""@en .
  ?member dbo:memberOf ?band ;
          foaf:name ?stageName ;
          foaf:name ?realName .
}

UNION

# Query for band of a member of Eric Clapton's bands (Cream or Derek and the Dominos)
SELECT DISTINCT ?band WHERE {
  { 
    ?claptonBand dbo:member ?member .
    ?claptonBand dbo:name ""Cream""@en .
  } UNION {
    ?dominosBand dbo:member ?member .
    ?dominosBand dbo:name ""Derek and the Dominos""@en .
  }
  ?member dbo:memberOf ?band .
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
756,28,train,"Give me the native of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season and manager of 2020–21 SBV Vitesse season.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v1 . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . },"```sparql
# Query to find the manager of VfL Bochum in 2007-08 who is a native of West Germany
SELECT ?manager WHERE {
  ?club rdf:type dbo:SportsClub .
  ?club dbo:officialWebsite ?website .
  ?club rdfs:label ""VfL Bochum""@en .
  
  ?season dbo:team ?club ;
          dbo:seasonStartYear ?startYear ;
          dbo:seasonEndYear ?endYear .

  FILTER (?startYear = 2007 && ?endYear = 2008)

  ?manager dbo:managedTeam ?club ;
           dbo:nationality dbr:Germany .
  
  OPTIONAL { 
    ?manager dbo:birthPlace ?place .
    ?place rdfs:label ?placeLabel .
    FILTER(CONTAINS(LCASE(?placeLabel), ""west germany""))
  }
}

UNION

# Query to find the manager of SBV Vitesse in 2020-21
SELECT ?manager WHERE {
  ?club rdf:type dbo:SportsClub ;
        rdfs:label ""SBV Vitesse""@en .
  
  ?season dbo:team ?club ;
          dbo:seasonStartYear ?startYear ;
          dbo:seasonEndYear ?endYear .

  FILTER (?startYear = 2020 && ?endYear = 2021)

  ?manager dbo:managedTeam ?club .
}
```",4,7,5,2,3,3,3,71,0,0,1,0,0.0,0
158,19,train,"Give me the person decedent at the birthplace, that is a country, of Sandro Bertaggia and native of Grand Duchy of Finland and native of Russian Empire.",SELECT ?result WHERE { <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Grand_Duchy_of_Finland> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . ?result <http://dbpedia.org/ontology/deathPlace> ?v2 . },"```sparql
SELECT ?decedent WHERE {
  # Find Sandro Bertaggia's birthplace that is a country
  wd:Q123456 wdt:P19 ?birthPlace .
  FILTER (wdt:P31/psv:P31 ?birthPlace ""Country""^^xsd:string) .

  # Find individuals native to both the Grand Duchy of Finland and Russian Empire
  ?person wdt:P495 wd:Q1234 ; # Native of Grand Duchy of Finland
          wdt:P495 wd:Q5678 .   # Native of Russian Empire

  # Check if any of these individuals died in Sandro Bertaggia's birthplace
  ?person wdt:P20 ?deathPlace .
  FILTER (?deathPlace = ?birthPlace)
  
  BIND(?person AS ?decedent)
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Sandro Bertaggia, `wd:Q1234` with the identifier for Grand Duchy of Finland, and `wd:Q5678` with the identifier for Russian Empire.",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
159,3,train,"Give me the force, that is an event and a military conflict, of Michał Kazimierz Pac.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?event WHERE {
  dbr:Michał_Kazimierz_Pac dbo:militaryConflict ?event .
  ?event a dbo:Event ;
         a dbo:MilitaryConflict .
}
```",1,3,2,1,1,3,3,71,0,0,3,0,0.0,0
706,13,train,Give me the birthplace of the awardee of the reference to Sangeet Natak Akademi Fellowship.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/awards> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Sangeet Natak Akademi Fellowship""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?person dbo:honoraryTitle dbr:Sangeet_Natak_Akademi_Fellowship .
  ?person foaf:name ""Ravi Shankar""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",3,3,4,3,1,3,2,20,0,0,3,0,0.0,0
19,1,train,Give me the spouse of Carrie Johnson.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Carrie_Johnson> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?spouse WHERE {
  ?person a dbo:Person ;
          foaf:name ""Carrie Johnson""@en .
  OPTIONAL { ?person dbo:spouse ?spouse . }
}
```",1,1,2,1,1,2,2,9,1,0,0,1.0,1.0,1.0
198,25,train,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and force of Quincy Adams Gillmore.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
SELECT DISTINCT ?entity WHERE {
  # For Henry Clay Lewis
  ?hcl wdt:P31 wd:Q5;             # Henry Clay Lewis is a human
       wdt:P19 ?birthPlaceHCL.    # His birthplace

  # For Quincy Adams Gillmore
  ?qag wdt:P31 wd:Q5;            # Quincy Adams Gillmore is a human
       wdt:P19 ?birthPlaceQAG.    # His birthplace

  # Ensure the birthplaces are settlements in America
  OPTIONAL { ?birthPlaceHCL wdt:P31/wdt:P279* wd:Q515; wdt:P17 wd:Q30 }.
  OPTIONAL { ?birthPlaceQAG wdt:P31/wdt:P279* wd:Q515; wdt:P17 wd:Q30 }.

  # Bind the entities that meet the criteria
  BIND(IF(BOUND(?birthPlaceHCL), ?birthPlaceHCL, IF(BOUND(?birthPlaceQAG), ?birthPlaceQAG, ())) AS ?entity)
}
```",3,5,4,2,2,3,3,71,0,0,2,0,0.0,0
293,4,train,"Give me the ruling party in Central, Louisiana.","SELECT ?result WHERE { <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party WHERE {
  # Find the DBpedia resource for Central, Louisiana
  ?city rdfs:label ""Central, Louisiana""@en .
  
  # Get the mayor's political party or city council majority party
  OPTIONAL { 
    ?city dbo:mayor ?mayor .
    ?mayor dbo:politicalParty ?party .
  }
  
  OPTIONAL {
    ?city dbo:councilMember ?councilMember .
    ?councilMember dbo:politicalParty ?party .
    
    # Count the number of council members per party
    SELECT (?party AS ?party) (COUNT(?councilMember) AS ?count)
    WHERE { 
      ?city dbo:councilMember ?councilMember .
      ?councilMember dbo:politicalParty ?party .
    }
    GROUP BY ?party
    ORDER BY DESC(?count)
  }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
412,13,train,Give me the war of the leader of National Party of Greece and entity in Athens.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v1 . },"```sparql
SELECT ?leader ?war WHERE {
  ?party dbo:type dbr:Political_party.
  ?party rdfs:label ""National Party of Greece""@en.
  
  ?leader dbo:positionHeld ?position.
  ?position dbo:organization ?party.
  ?position dbo:title ""Leader""@en.

  OPTIONAL { 
    ?leader dbo:participatedInWar ?war.
    ?war dbo:location ?location.
    FILTER(CONTAINS(LCASE(?location), ""athens""))
  }
  
  FILTER NOT EXISTS {
    ?leader dbo:participatedInWar ?otherWar.
    ?otherWar dbp:location ?otherLocation.
    FILTER(!CONTAINS(LCASE(?otherLocation), ""athens""))
  }
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
859,16,train,"Give me the associated musical artist of the associated musical artist of James Plotkin and band member of the associated musical artist, that is a band and a group and an organisation, of Burnt by the Sun (band).",SELECT ?result WHERE { <http://dbpedia.org/resource/Burnt_by_the_Sun_(band)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/James_Plotkin> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Step 1: Find a musical artist associated with James Plotkin
SELECT ?artist WHERE {
  wd:Q123456 wdt:P106 wd:Q33999 . # James Plotkin is a musician
  wd:Q123456 wdt:P175 ?artist .   # Associated artists (collaborations)
}

# Step 2: Find an associated musical artist of the artist found in step 1
SELECT ?secondArtist WHERE {
  ?artist wdt:P106 wd:Q33999 .    # The first artist is a musician
  ?artist wdt:P175 ?secondArtist . # Associated artists (collaborations)
}

# Step 3: Find band members of the second artist
SELECT ?bandMember WHERE {
  ?secondArtist wdt:P106 wd:Q33999 . # Second artist is a musician
  ?secondArtist wdt:P527 ?band .      # Bands they are part of
  ?band wdt:P127 ?bandMember .        # Members of the band
}

# Step 4: Find an associated musical artist of Burnt by the Sun
SELECT ?burntArtist WHERE {
  wd:Q789012 wdt:P106 wd:Q33999 .    # Burnt by the Sun is a band
  wd:Q789012 wdt:P175 ?burntArtist .  # Associated artists (collaborations)
}

# Step 5: Find bands, groups, or organizations associated with the artist found in step 4
SELECT ?bandGroup WHERE {
  ?burntArtist wdt:P106 wd:Q33999 .   # Burnt artist is a musician
  ?burntArtist wdt:P175 ?bandGroup .   # Associated bands/groups/organizations
}

# Step 6: Find overlap between band members from step 3 and bands/groups/organizations from step 5
SELECT DISTINCT ?commonEntity WHERE {
  VALUES ?entity1 { ?bandMember }     # From step 3
  VALUES ?entity2 { ?bandGroup }      # From step 5
  FILTER(?entity1 = ?entity2)
}
```",4,7,5,2,2,3,2,20,0,0,5,0,0.0,0
816,14,train,Give me the parent of the child of Allan Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
SELECT DISTINCT ?parent WHERE {
  ?child dbo:child dbpedia:Allan_Arbus .
  ?parent dbo:child ?child .
}
```",2,2,3,2,1,3,3,71,0,0,2,0,0.0,0
756,25,train,"Give me the native of West Germany and manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/manager> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?team ?season WHERE {
  # Thomas Letsch's nationality
  dbr:Thomas_Letsch dbo:nationality dbr:Germany .

  # Teams managed by Thomas Letsch
  ?manager a dbo:FootballManager ;
           foaf:name ""Thomas Letsch""@en .
  
  ?management dbo:managedTeam ?team ;
              dbo:manager ?manager .

  # Filter for teams that are soccer clubs and have seasons
  ?team a dbo:SoccerClub ;
        dbo:sport dbr:Football .

  OPTIONAL {
    ?season dbo:club ?team ;
            dbo:startDate ?start .
  }

  FILTER EXISTS { ?management dbo:endDate ?end . }
}
```",3,6,4,2,2,3,3,71,0,0,3,0,0.0,0
23,23,train,"Give me the party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre and party of the father of Sofía Petro.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/party> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v1 . }","```sparql
# Query to find the political party of Roy Leonardo Barreras Montealegre
SELECT ?party WHERE {
  ?person dbo:birthName ""Roy Leonardo Barreras Montealegre""@es .
  ?person dbo:politicalParty ?party .
}

UNION

# Query to find the political party of Gustavo Petro (father of Sofía Petro)
SELECT ?party WHERE {
  ?sofia dbo:parent ?gustavoPetro .
  ?gustavoPetro rdfs:label ""Sofía Petro""@en .
  ?gustavoPetro dbo:politicalParty ?party .
}
```",4,5,5,2,2,2,3,28,0,0,1,0,0.0,0
293,21,train,"Give me the person born as Harriette Arlene Lake and party member of the ruling party in Central, Louisiana.","SELECT ?result WHERE { <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v1 . ?result <http://dbpedia.org/ontology/party> ?v1 . ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?party WHERE {
  ?person dbo:birthName ""Harriette Arlene Lake""@en .
  OPTIONAL { ?person dbo:politicalParty ?party . }
  FILTER EXISTS {
    ?person dbo:residence dbr:Central,_Louisiana .
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
203,6,train,"Give me the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  ?person a dbo:MilitaryPerson ;
          foaf:name ""William Bayne"" ;
          dbo:occupation dbr:Royal_Navy_officer .
  
  ?person dbo:servedInMilitaryOrganization dbr:Royal_Navy .

  ?event dbo:agent ?person ;
         a (dbo:MilitaryConflict|dbo:Event) .

  BIND(?event AS ?war)
}
```",1,3,2,1,1,3,3,71,0,0,5,0,0.0,0
159,61,train,"Give me the commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna and reference to the writer of the work of George Ducas.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . ?result <http://xmlns.com/foaf/0.1/name> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/property/writer> ?v5 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/property/writer> ""George Ducas""@en . ?v1 <http://dbpedia.org/ontology/battle> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?tvShow ?literaryWork WHERE {
  # Find the commander of the Battle of Vienna
  ?battle dbo:commander ?commander .
  ?battle rdfs:label ""Battle of Vienna""@en .

  # Ensure the commander is Prince Eugene of Savoy
  ?commander rdfs:label ""Prince Eugene of Savoy""@en .

  # Find a television show related to military history or historical figures like Prince Eugene
  OPTIONAL {
    ?tvShow dbo:subject ?commander .
    ?tvShow rdf:type dbo:TelevisionSeries .
    ?tvShow rdfs:label ?showLabel .
  }

  # Find literary works by George Ducas that reference Prince Eugene
  OPTIONAL {
    ?literaryWork dbo:author dbr:George_Ducas .
    ?literaryWork dbo:subject ?commander .
    ?literaryWork rdf:type dbo:LiteraryWork .
  }
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
19,6,train,Give me the spouse of the person born as Caroline Louise Bevan Symonds.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ""Caroline Louise Bevan Symonds""@en . ?result <http://dbpedia.org/ontology/spouse> ?v0 . }","```sparql
SELECT ?spouse WHERE {
  ?person foaf:name ""Caroline Louise Bevan Symonds""@en .
  ?person dbo:birthName ""Caroline Louise Bevan Symonds"" .
  ?person dbo:spouse ?spouse .
}
```",2,2,3,2,1,2,2,9,0,0,1,0,0.0,0
668,50,train,"Give me the person born as the birth name of Joey B and professional in the profession of the writer, that is a musical artist, of The Live Anthology.",SELECT ?result WHERE { <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v0 <http://dbpedia.org/property/occupation> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?result <http://dbpedia.org/property/birthName> ?v3 . },"```sparql
# Step 1: Find Joey B's birth name
SELECT ?birthName WHERE {
  ?person foaf:name ""Joey B""@en .
  ?person dbo:birthName ?birthName .
}

# Step 2: Identify the writer of ""The Live Anthology"" who is a musical artist
SELECT ?writer WHERE {
  ?album dcterms:title ""The Live Anthology""@en ;
         dbo:composer ?writer .
  ?writer rdf:type dbo:MusicalArtist .
}

# Step 3: Find a person with the same birth name and profession as identified above
SELECT DISTINCT ?person WHERE {
  # Replace 'BirthName' and 'WriterName' with actual values obtained from previous queries
  ?person foaf:name ""BirthName""@en ;
          dbo:birthName ?birthName .
  FILTER(?birthName = ""ActualBirthNameFromStep1"")
  
  ?person rdf:type dbo:MusicalArtist .
  OPTIONAL { ?person dbo:profession ?writerProfession }
  FILTER(?writerProfession = ""WriterNameFromStep2"" || !bound(?writerProfession))
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
871,14,train,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?child ?politician WHERE {
  ?person rdfs:label ""Frederick Stanley, 16th Earl of Derby""@en .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  OPTIONAL { ?child dbo:occupation ?occupation . FILTER(CONTAINS(LCASE(?occupation), ""politician"")) }
  BIND(COALESCE(?child, ?person) AS ?politician)
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
361,12,train,Give me the professional in  and actor of Rustlers' Rhapsody and professional in Actor.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Rustlers'_Rhapsody> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film dbo:starring ?actor .
  FILTER(STRSTARTS(STR(?film), ""http://dbpedia.org/resource/Rustlers'_Rhapsody""))
  
  ?actor dbo:occupation ?occupation .
  VALUES ?occupation {<http://dbpedia.org/ontology/Actor>}
}
```",3,3,4,1,3,2,3,28,0,0,2,0,0.0,0
151,8,train,Give me the entity in Ottoman Empire and reference to the award of Charles Parsons (British Army officer).,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_Parsons_(British_Army_officer)> <http://dbpedia.org/property/awards> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Ottoman_Empire> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entityInOttomanEmpire ?awardReceivedByCharlesParsons WHERE {
  # Find entities related to the Ottoman Empire
  ?entityInOttomanEmpire dbo:wikiPageWikiLink* dbr:Ottoman_Empire .
  
  # Find awards received by Charles Parsons (British Army officer)
  OPTIONAL {
    ?charlesParsons a dbo:MilitaryPerson ;
                   foaf:name ""Charles Parsons"" ;
                   dbo:nationality dbr:United_Kingdom ;
                   dbo:militaryService dbr:British_Army .
    
    ?awardReceivedByCharlesParsons dbo:recipient ?charlesParsons .
  }
}
```",3,3,4,2,2,2,2,9,0,0,3,0,0.0,0
557,32,train,"Give me the professional in the alter ego of The Shadow and producer of the claim to fame, that is a work, of Cora Sue Collins.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?professional ?producer WHERE {
  # Find the professional identity of ""The Shadow""
  ?shadow dbo:alterEgoOf dbr:The_Shadow .
  ?shadow dbo:name ""Walter B. Gibson"" .

  # Find works associated with Cora Sue Collins
  ?collins dbo:profession dbr/Actress ;
           dbo:associatedWith ?work .

  # Attempt to find a producer related to the work of Cora Sue Collins
  OPTIONAL {
    ?work dbo:producer ?producer .
  }

  # Bind the professional identity and any found producer
  BIND(""Walter B. Gibson"" AS ?professional)
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
742,2,train,Give me the reference to Пловдивски университет „Паисий Хилендарски“.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Пловдивски университет „Паисий Хилендарски“""@en . }","```sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?entity WHERE {
  VALUES ?label { ""Пловдивски университет „Паисий Хилендарски“""@bg }
  
  # Match the label in Bulgarian
  ?entity rdfs:label ?label .
  
  # Optionally match other properties like foaf:name if available
  OPTIONAL { ?entity foaf:name ?label . }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
297,0,train,Give me the entity in United States.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . },"```sparql
SELECT ?entity WHERE {
  ?entity dbo:country <http://dbpedia.org/resource/United_States> .
}
LIMIT 10
```",1,1,2,1,1,2,2,9,10,0,63411,1.0,0.00015767647939956796,0.00031530324289385316
143,5,train,Give me the person born as Cynthia Ikponmwenosa Morgan.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Cynthia Ikponmwenosa Morgan""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?currentName WHERE {
  ?person a dbo:Person .
  ?person dbo:birthName ""Cynthia Ikponmwenosa Morgan"" .
  OPTIONAL { ?person foaf:name ?currentName }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
531,49,train,"Give me the office of the leader, that is a politician, of the party, that is a political party, of Miguel Maura and tenant of the residence of Alberto Ruiz-Gallardón.",SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v2 . ?result <http://dbpedia.org/ontology/headquarter> ?v2 . ?v1 <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/property/leader> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/ontology/party> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  # Find Miguel Maura's political party
  ?miguelMaura dbo:party dbr:People%27s_Party_(Spain) .
  FILTER (str(?miguelMaura) = ""Miguel_Maura"")

  # Find the leader of that party
  ?leader dbo:position dbr:Leader_of_the_People's_Party_(Spain) ;
          dbo:party dbr:People%27s_Party_(Spain) .

  # Get the office held by the leader
  ?office dbo:position ?leader .
  
  # Find Alberto Ruiz-Gallardón's residence
  ?albertoResidence dbo:resident dbr:Alberto_Ruiz-Gallardón ;
                    dbo:tenant ?tenant .

  # Ensure the tenant is a politician
  ?tenant rdf:type dbo:Politician .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
742,17,train,"Give me the birthplace of the resident of the region, that is a settlement, of Eastern European Time and birthplace of Ekaterina Zaharieva.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Eastern_European_Time> . <http://dbpedia.org/resource/Ekaterina_Zaharieva> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v3 <http://dbpedia.org/property/residence> ?v0 . },"```sparql
# Query to find the birthplace of Ekaterina Zaharieva
SELECT ?birthPlace WHERE {
  wd:Q1234568 dbo:birthPlace ?birthPlace .
}

# Query to find a settlement in a region that observes Eastern European Time (EET)
SELECT DISTINCT ?settlement WHERE {
  ?region wdt:P421 wd:Q11173 . # Q11173 is the item for Eastern European Time
  ?region wdt:P31/wdt:P279* wd:Q515 . # Q515 is the item for administrative territorial entity
  ?region wdt:P1377 ?settlement .
}
```",4,5,5,3,2,3,2,20,0,0,2,0,0.0,0
103,11,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?v0 <http://dbpedia.org/property/starring> ?result . },"```sparql
SELECT ?actor WHERE {
  ?show dbo:starring ?person .
  ?show rdf:type dbo:TelevisionSeries .
  ?person foaf:name ""Richard E. Grant"" .
  ?show dbo:starring ?actor .
  FILTER(?actor != ?person)
}
```",2,3,3,2,1,3,3,71,0,0,53,0,0.0,0
87,12,train,Give me the actor of Paradise (2013 film) and actor of Always (1989 film) and spouse of Janusz Kamiński.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT ?actor ?filmName WHERE {
  VALUES (?film ?title) { 
    (dbr:Paradise_(2013_film) ""Paradise (2013 film)"") 
    (dbr:Always_(1989_film) ""Always (1989 film)"")
  }
  
  ?film dbo:title ?title ;
        dbo:starring ?actor .
  
} UNION

SELECT ?spouse WHERE {
  dbr:Janusz_Kamiński dbo:spouse ?spouse .
}
```",3,3,4,1,3,2,3,28,0,0,1,0,0.0,0
39,41,train,Give me the professional in the profession of Sam Concepcion and professional in the alter ego of The Shadow and band of Bob Thompson (musician).,SELECT ?result WHERE { <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . },"```sparql
# Query for Sam Concepcion's profession
SELECT ?profession WHERE {
  dbpedia:Sam_Concepcion dbo:occupation ?profession .
}

UNION

# Query for The Shadow's alter ego
SELECT ?person WHERE {
  ?shadowCharacter rdfs:label ""The Shadow""@en.
  ?shadowCharacter foaf:name ?alterEgoName.
  ?person rdfs:label ?alterEgoName.
  FILTER(LANG(?alterEgoName) = 'en')
}

UNION

# Query for Bob Thompson's band
SELECT ?band WHERE {
  dbpedia:Bob_Thompson_(musician) dbo:memberOfBand ?band .
}
```",5,5,6,2,3,3,3,71,0,0,4,0,0.0,0
198,54,train,"Give me the force of the awardee of the award of Quincy Adams Gillmore and entity in Charleston, South Carolina and war of the awardee of Medal of Honor.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?result <http://dbpedia.org/ontology/commander> ?v5 . ?v3 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?v5 <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force ?entityInCharleston ?war 
WHERE {
  # Quincy Adams Gillmore and his Medal of Honor award
  dbr:Quincy_Adam_Gillmore dbo:award dbr:Medal_of_Honor .

  # Force associated with the Medal of Honor awardee (Union Army)
  ?medalOfHonorAwardee dbo:award dbr:Medal_of_Honor .
  ?medalOfHonorAwardee dbo:militaryServiceOrganization ?force .
  FILTER(?force = dbr:United_States_Army)

  # Entity in Charleston, South Carolina related to Gillmore
  ?entityInCharleston dbo:location dbr:Charleston,_South_Carolina ;
                     dbo:relatedTo dbr:Quincy_Adam_Gillmore .

  # War of the Medal of Honor awardee (American Civil War)
  ?medalOfHonorAwardee dbo:participatedInWar ?war .
  FILTER(?war = dbr:American_Civil_War)
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
816,3,train,Give me the person decedent at Los Angeles.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:deathPlace dbr:Los_Angeles .
  OPTIONAL { ?person foaf:name ?name . }
}
```",1,1,2,1,1,3,3,71,2883,2731,0,0.5135375846099038,1.0,0.6785924443921384
468,16,train,"Give me the reference to the real name of Peter IV of Aragon and child of the father, that is a royalty, of Peter IV of Aragon.",SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://xmlns.com/foaf/0.1/name> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v3 . <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://dbpedia.org/property/father> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?realName ?childName WHERE {
  ?peterIV a dbo:Monarch ;
           foaf:name ""Peter IV of Aragon""@en ;
           dbo:child ?child .
  
  ?child a dbo:Person ;
         foaf:name ?childName ;
         (dbo:title ?title) .

  FILTER EXISTS { ?title dbp:isRoyalTitle true }
  
  ?peterIV foaf:name ?realName .
}
```",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
347,20,train,"Give me the commander in Thirty Years' War and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . }","```sparql
SELECT ?commander WHERE {
  ?commander dbo:spouse ?spouse .
  ?spouse foaf:name ""Ferdinand III"" .
  ?commander dbo:occupation dbp:Military_person .
  FILTER(CONTAINS(LCASE(?commanderLabel), ""thirty years' war""))
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
943,42,train,"Give me the child of the parent, that is a royalty, of Yeshaq I and father of the father, that is a royalty and an office holder, of Na'od and reference to .","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> """"@en . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v1 . }","```sparql
SELECT ?person WHERE {
  # Find Yeshaq I's child who is royalty
  ?yeshaq dbo:child ?child .
  ?yeshaq rdfs:label ""Yeshaq I""@en .
  ?child dbo:royalty true .

  # Find the father of Na'od's father (Na'od's grandfather)
  ?father dbo:child ?naodFather .
  ?naodFather dbo:parent ?naod .
  ?naod rdfs:label ""Na'od""@en .
  
  # Ensure this person is royalty and an office holder
  ?father dbo:royalty true .
  ?father dbo:officeHolder true .

  # Link the two parts together
  FILTER(?child = ?father)
}
```",5,8,6,2,3,3,3,71,0,0,1,0,0.0,0
80,0,train,Give me the actor of Shelby Oaks.,SELECT ?result WHERE { <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
SELECT ?actor WHERE {
  ?work rdfs:label ""Shelby Oaks""@en .
  ?work dbo:starring ?actor .
  FILTER (lang(?work) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,5,0,0.0,0
80,45,train,Give me the professional in the alter ego of the series of The Golden Master and actor of ATL (film) and actor of Shelby Oaks.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v0 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find the alter ego in ""The Golden Master""
  ?character dbo:characterName ?alterEgo .
  ?character dbo:work ?goldenMasterWork .
  ?goldenMasterWork rdfs:label ""The Golden Master""@en .

  # Find an actor in ""ATL"" (film)
  ?atlFilm dbo:actor ?person .
  ?atlFilm rdfs:label ""ATL (2006 film)""@en .

  # Find an actor in ""Shelby Oaks""
  ?shelbyOaksFilm dbo:actor ?person .
  ?shelbyOaksFilm rdfs:label ""Shelby Oaks""@en .

  FILTER(?character = ?atlCharacter) 
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
353,26,train,"Give me the father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> ?v1 . ?v1 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v2 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  ?person dbo:child dbr:Henry_I_of_England .
  ?person dbo:title ?title .
  FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""prince""))
  ?person dbo:parent ?father .
  ?father dbo:spouse ?mother .
  ?father dbo:child dbr:William_II_of_England .
}
```",3,6,4,3,1,3,3,71,0,0,1,0,0.0,0
782,0,train,Give me the reference to The Fabulous Thunderbirds.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?website WHERE {
  VALUES ?band { dbr:The_Fabulous_Thunderbirds }
  OPTIONAL { ?band dbo:officialWebsite ?website . }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
595,49,train,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and spouse of the author, that is a politician and an office holder, of An Invitation to the White House.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT ?commander WHERE {
  ?event rdf:type dbo:War .
  ?event dbo:hasCommander ?commander .
  ?commander foaf:name ""John J. Pershing""@en .

  ?disease rdf:type dbo:Disease .
  ?disease rdfs:label ""Spanish Flu""@en .

  ?societalEvent rdf:type dbo:SocietalEvent .
  ?societalEvent rdfs:label ""Spanish Flu Pandemic""@en .

  FILTER EXISTS { ?event dbo:hasRelatedDisease ?disease }
  FILTER EXISTS { ?event dbo:hasRelatedSocietalEvent ?societalEvent }
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
742,3,train,"Give me the alumnus of Plovdiv University ""Paisii Hilendarski"".",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Plovdiv_University_%22Paisii_Hilendarski%22> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person foaf:name ?name .
  ?person dbo:almaMater dbr:Plovdiv_University_Paisii_Hilendarski .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
628,42,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico and person born as Ackquille Jean Pollard.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
SELECT ?bandMember WHERE {
  # Bobby Shmurda's associated musical artist
  ?bobbyShmurda dbo:associatedMusicalArtist ?artist .
  
  # Band member who is also a musical artist
  ?artist dbo:member ?bandMember .
  ?bandMember dbo:occupation ""Musician"" .

  # Award associated with Coro de la Pontificia Universidad Católica de Puerto Rico
  ?coro dbo:award ?latinGrammyAward .
  
  # Region, state, and settlement for the award
  ?latinGrammyAward dbo:location ?region .
  ?region rdf:type dbo:Region ;
           dbo:state ?state ;
           dbo:settlement ?settlement .

  # Person born as Ackquille Jean Pollard (Bobby Shmurda)
  ?bobbyShmurda foaf:name ""Ackquille Jean Pollard""^^xsd:string .
  
  # Native of the region, state, and settlement
  ?bobbyShmurda dbo:nativePlace ?settlement .

  FILTER(?region = dbpedia:Latin_America &&
         ?state = dbpedia:Florida &&
         ?settlement = dbpedia:Miami)
}
```",5,10,6,2,3,3,3,71,0,0,1,0,0.0,0
293,2,train,Give me the person born as Harriette Arlene Lake.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX schema: <http://schema.org/>

SELECT ?person ?birthName WHERE {
  ?person a foaf:Person .
  ?person schema:birthName ?birthName .
  FILTER(CONTAINS(LCASE(?birthName), ""harriette arlene lake""))
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
737,25,train,"Give me the child of Albrecht, Duke of Württemberg and child of the child, that is a royalty, of Archduke Charles Louis of Austria.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?grandchild WHERE {
  # Find children of Albrecht, Duke of Württemberg who are royalty
  ?child dbo:parent dbr:Albrecht,_Duke_of_W%C3%BCrttemberg ;
         a dbo:Person ;
         dbp:title ?title .
  
  FILTER(CONTAINS(LCASE(?title), ""royalty"") || CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""duke""))

  # Find grandchildren of Albrecht who are royalty
  ?grandchild dbo:parent ?child ;
              a dbo:Person ;
              dbp:title ?gTitle .

  FILTER(CONTAINS(LCASE(?gTitle), ""royalty"") || CONTAINS(LCASE(?gTitle), ""prince"") || CONTAINS(LCASE(?gTitle), ""duke""))

  # Filter for the specific child of Archduke Charles Louis of Austria
  OPTIONAL { ?child dbp:spouse dbr:Archduke_Charles_Louis_of_Austria }
}
```",3,4,4,2,2,3,3,71,0,0,2,0,0.0,0
399,5,train,Give me the band member of the person born as Emilia Yancheva Valeva.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Emilia Yancheva Valeva""@en . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . }","```sparql
# Step 1: Find Emilia Yancheva Valeva using her birth name
SELECT ?person WHERE {
  ?person foaf:name ""Emilia Yancheva Valeva""@en .
}

# Assuming we have identified the person URI, let's say it is <http://dbpedia.org/resource/Emilia_Yancheva>

# Step 2: Find any band she might be associated with
SELECT DISTINCT ?band WHERE {
  <http://dbpedia.org/resource/Emilia_Yancheva> dbo:memberOfBand ?band .
}

# Assuming we have identified the band URI, let's say it is <http://dbpedia.org/resource/Band_Name>

# Step 3: Query for the members of that band
SELECT DISTINCT ?member WHERE {
  <http://dbpedia.org/resource/Band_Name> dbo:member ?member .
}
```",2,2,3,2,1,2,2,9,0,0,5,0,0.0,0
225,1,train,Give me the birthplace of Chieko Asakawa.,SELECT ?result WHERE { <http://dbpedia.org/resource/Chieko_Asakawa> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Chieko Asakawa""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,2,20,2,0,0,1.0,1.0,1.0
595,11,train,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?spouse WHERE {
  dbpedia:Pat_Nixon dbo:spouse ?spouse .
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
293,43,train,"Give me the person born as Harriette Arlene Lake and party member of Republican Party (United States) and spouse of the actor of the product, that is a film, of Nat Levine.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v4 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v0 <http://dbpedia.org/property/starring> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. }","```sparql
SELECT ?person WHERE {
  ?person foaf:name ""Harriet Medin""@en .
  ?person dbo:birthName ""Harriette Arlene Lake""@en .
  ?person dbo:spouse ?actor .
  ?actor dbo:profession dbr:Actor .
  ?actor dbo:film ?film .
  ?film dbo:producer dbr:Nat_Levine .
  ?person dbo:partyMember dbr:Republican_Party_(United_States) .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
816,5,train,Give me the profession of Eugène Cattin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?occupation WHERE {
  dbr:Eugène_Cattin dbo:occupation ?occupation .
}
```",1,1,2,1,1,3,3,71,0,2,2,0.0,0.0,0
89,32,train,"Give me the spouse of the father, that is a royalty, of Myat Hpone Pyo and child of the parent of Min Hla Htut of Pyakaung.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
    # Step 1: Find Myat Hpone Pyo and his father
    ?myatHponePyo dbo:father ?father .
    FILTER(STRSTARTS(STR(?myatHponePyo), ""Myat_Hpone_Pyo""))

    # Step 2: Check if the father is royalty
    OPTIONAL { ?father dbo:title ?title . }
    FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""queen"") || CONTAINS(LCASE(STR(?title)), ""prince"") || CONTAINS(LCASE(STR(?title)), ""princess""))

    # Step 3: Find the spouse of Myat Hpone Pyo's father who is royalty
    ?father dbo:spouse ?spouse .
    
    # Step 4: Identify Min Hla Htut and his parents
    ?minHlaHtut dbo:parent ?parentMinHlaHtut .
    FILTER(STRSTARTS(STR(?minHlaHtut), ""Min_Hla_Htut""))

    # Step 5: Ensure the spouse is a child of Min Hla Htut's parent
    ?spouse dbo:childOf ?parentMinHlaHtut .
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
103,50,train,"Give me the professional in the profession of the actor, that is a politician, of Ab Kya Hoga and professional in the alter ego of The Shadow.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . },"```sparql
# Query to find actor from ""Ab Kya Hoga"" who is also a politician
SELECT ?actor WHERE {
  ?show dcterms:title ""Ab Kya Hoga""@en .
  ?show dbo:castMember ?actor .
  ?actor rdf:type dbo:Actor .
  OPTIONAL { 
    ?actor dbo:occupation dbp:Politician .
  }
  FILTER EXISTS { ?actor dbo:occupation dbp:Politician }
}

UNION

# Query to find the alter ego of The Shadow
SELECT ?alterEgo WHERE {
  ?character rdfs:label ""The Shadow""@en .
  ?character dbo:alterEgo ?alterEgo .
}
```",5,6,6,3,2,3,3,71,0,0,39640,0,0.0,0
198,53,train,"Give me the force of Quincy Adams Gillmore and war of the awardee of the show, that is an award, of United States Congress and entity in the birthplace, that is a settlement and American, of Henry Clay Lewis.",SELECT ?result WHERE { <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v2 <http://dbpedia.org/property/awards> ?v3 . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v3 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/place> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
# Query for Quincy Adams Gillmore's military role and associated war
SELECT ?role ?war WHERE {
  ?gillmore dbo:birthName ""Quincy Adams Gillmore"" .
  ?gillmore dbo:militaryService ?service .
  ?service dbo:rank ?role .
  ?service dbo:conflict ?war .
}

# Query for the award given by United States Congress related to a war
SELECT ?award WHERE {
  ?award dbo:awardingBody dbr:United_States_Congress ;
         dbo:relatedToWar ?war .
}

# Query for Henry Clay Lewis's birthplace and nationality
SELECT ?birthPlace WHERE {
  ?lewis dbo:birthName ""Henry Clay Lewis"" .
  ?lewis dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:Settlement .
  FILTER EXISTS { ?lewis dbo:nationality dbr:United_States }
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
353,35,train,"Give me the child of the parent of Roger III, Duke of Apulia and child of the child of Alfonso VI of León and Castile.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v2 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?commonIndividual WHERE {
  # Step 1: Find Roger III's parent
  ?rogerIII dbo:parent ?parentOfRogerIII .
  FILTER(STR(?rogerIII) = ""Roger_III,_Duke_of_Apulia"")

  # Step 2: Find the child of Roger III's parent (could be Roger III or a sibling)
  ?childOfParent dbo:parent ?parentOfRogerIII .

  # Step 3: Find Alfonso VI's child
  ?alfonsoVI dbo:child ?childOfAlfonsoVI .
  FILTER(STR(?alfonsoVI) = ""Alfonso_VI_of_León_and_Castile"")

  # Step 4: Find the grandchild of Alfonso VI (the child of his child)
  ?grandChildOfAlfonsoVI dbo:parent ?childOfAlfonsoVI .

  # Step 5: Find the common individual
  FILTER(?commonIndividual = ?childOfParent && ?commonIndividual = ?grandChildOfAlfonsoVI)
}
```",4,4,5,2,2,3,3,71,0,0,4,0,0.0,0
246,13,train,"Give me the parent of the child, that is a royalty, of the parent, that is a royalty, of Princess Aisha bint Faisal.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Princess_Aisha_bint_Faisal> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/parent> ?v0 . },"```sparql
SELECT ?grandParent WHERE {
  # Step 1: Find Princess Aisha bint Faisal's parent who is a royalty.
  ?princessAisha dbo:parent ?parent .
  FILTER EXISTS { ?parent rdf:type dbo:RoyalFamilyMember } .

  # Step 2: Find the child of this parent who is also a royalty.
  ?parent dbo:child ?royalChild .
  FILTER EXISTS { ?royalChild rdf:type dbo:RoyalFamilyMember } .

  # Step 3: Identify the parent of this royal child.
  ?royalChild dbo:parent ?grandParent .
}
```",3,5,4,3,1,3,2,20,0,0,2,0,0.0,0
871,26,train,"Give me the parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v0 <http://dbpedia.org/ontology/child> ?v1 . }","```sparql
SELECT DISTINCT ?politicianParent WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  ?edward dbo:title ""Edward Stanley, 17th Earl of Derby""@en .
  
  # Step 2: Find his parent
  ?parent dbo:child ?edward .

  # Step 3: Identify the child of this parent who is a politician and an office holder
  ?politicianParent dbo:child ?parent ;
                   rdf:type dbo:Politician ;
                   dbo:officeHolder true .

  # Step 4: Find the parent of this child (politician)
  ?grandparent dbo:child ?politicianParent .
}
```",3,5,4,3,1,3,3,71,0,0,1,0,0.0,0
687,15,train,"Give me the person born, that is an athlete, on the birthday of Marty Pollio.",SELECT ?result WHERE { <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v1 . ?result <http://dbpedia.org/ontology/birthDate> ?v1 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. },"```sparql
# Query to get Marty Pollio's birthday
SELECT ?birthday WHERE {
  dbpedia:Martin_Polloi dbo:birthday ?birthday .
}

# Assuming the result of the above query gives us a specific date, e.g., ""1975-03-15""
# We then use this date in the following query:

PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person a dbo:Athlete .
  ?person dbo:birthday ?birthday .
  FILTER (?birthday = ""1975-03-15""^^xsd:date) # Replace with the actual date obtained from the first query
}
```",2,3,3,2,1,3,3,71,0,0,10,0,0.0,0
159,13,train,Give me the reference to the writer of Always the Love Songs.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v1 . <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?book dbo:title ""Always the Love Songs""@en .
  ?book dbo:author ?author .
}
```",2,2,3,2,1,3,3,71,0,0,98450,0,0.0,0
871,47,train,"Give me the parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby and parent of the awardee of Commander of the Royal Victorian Order.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v3 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?politician WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  ?edward a dbr:Edward_Stanley,_17th_Earl_of_Derby .

  # Step 2: Find his child
  ?child dbo:parent ?edward .
  
  # Step 3: Determine the parent of this child (should be Edward Stanley)
  ?politician dbo:parent ?child .

  # Step 4: Identify the politician and office holder
  ?politician a dbo:Politician ;
             dbo:officeHolder true .

  # Step 5: Find the parent of the awardee of Commander of the Royal Victorian Order
  ?awardee dbo:award dbr:Commander_of_the_Royal_Victorian_Order .
  ?parent dbo:child ?awardee .

  # Step 6: Ensure the politician is also the parent of the awardee
  FILTER(?politician = ?parent)
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
531,50,train,"Give me the office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/property/office> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://dbpedia.org/ontology/commander> ?v4 . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/property/office> ?result . },"```sparql
SELECT DISTINCT ?officeManuelPintoDaCosta ?officeLeaderCRP WHERE {
  # Query for Manuel Pinto da Costa's office during the Angolan War of Independence
  ?manuelPintoDaCosta dbo:occupation dbr:Commander-in-Chief_of_the_Forces_of_the_Angolan_National_Union_for_independence_(UNITA) .
  ?manuelPintoDaCosta foaf:name ""Manuel Pinto da Costa""@en .

  # Query for the leader's office in the Conservative Republican Party (Spain)
  ?crp dbo:leader ?leader .
  ?crp foaf:name ""Conservative Republican Party (Spain)""@en .
  ?leader dbo:office ?officeLeaderCRP .
  
  BIND(""Commander-in-Chief of UNITA"" AS ?officeManuelPintoDaCosta) # Manually binding the known office
}
```",5,10,6,3,2,3,3,71,0,0,1,0,0.0,0
513,9,train,Give me the award of the reference to George Hamilton Cameron.,"SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""George Hamilton Cameron""@en . ?v0 <http://dbpedia.org/property/awards> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?awardLabel WHERE {
  VALUES ?person { dbr:George_Hamilton_Cameron }
  ?person dbo:award ?award .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,2,3,2,1,3,2,20,0,0,5,0,0.0,0
557,5,train,Give me the actor of Johnny Doughboy.,SELECT ?result WHERE { <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?character dbo:name ""Johnny Doughboy""@en .
  ?film dbo:starring ?character .
  ?film dbo:starring ?actor .
  FILTER NOT EXISTS { ?actor a dbo:Film } # Ensure the subject is an actor, not another film
}
```",1,1,2,1,1,3,3,71,0,0,14,0,0.0,0
119,4,train,Who is the leader of 2009 Galician regional election?,SELECT ?result WHERE { <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?partyLeader WHERE {
  ?election a dbo:Election .
  ?election dbo:date ""2009-09-01""^^xsd:date ;
            dbo:electionDate ""2009-09-27""^^xsd:date ;
            dbo:place dbr:Galicia, Spain ;
            dbo:result ?result .

  ?party dbo:leader ?partyLeader ;
         dbo:hasElectionResult ?result .
  
  FILTER EXISTS { ?result dbo:numberOfVotes ?votes }
  FILTER NOT EXISTS { ?otherResult dbo:numberOfVotes ?otherVotes . 
                     FILTER (?votes < ?otherVotes) }
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
595,28,train,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House and commander in Third Taiwan Strait Crisis and author of Back to Work (book).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v1 . <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
SELECT ?spouse WHERE {
  ?person foaf:name ""Lee Teng-hui""@en .
  ?person dbo:spouse ?spouse .
}
```",4,6,5,2,3,3,3,71,0,1,1,0.0,0.0,0
595,56,train,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House and author of Back to Work (book) and commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v2 . ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
SELECT ?spouse WHERE {
  ?author foaf:name ""George W. Bush""@en .
  ?author dbo:spouse ?spouse .
  ?spouse rdf:type dbo:Politician ;
          dbo:officeHolder true .
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
39,57,train,"Give me the professional in Singer and professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and band of the person born, that is a musical artist, as Robert Lamar Thompson.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?v3 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . ?v0 <http://dbpedia.org/property/alterEgo> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?creator ?creation ?alterEgo ?artist ?band 
WHERE {
  # Walter B. Gibson's creation
  dbr:The_Shadow dbo:createdBy ?creator .
  ?creator rdfs:label ""Walter B. Gibson""@en .

  # The Shadow's alter ego
  ?creation dbo:alternateName ?alterEgo .
  ?alterEgo rdfs:label ""Lamont Cranston""@en .

  # Robert Lamar Thompson (Prince) and his band
  dbr:Prince rdfs:label ""Robert Lamar Thompson""@en ;
             dbo:bandMember ?band .
  ?band rdfs:label ""The Revolution""@en .
}
```",6,9,7,3,3,3,3,71,0,0,3,0,0.0,0
203,1,train,Give me the military force of Battle of Fort Royal.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?combatant1 ?combatant2 WHERE {
  ?battle dbo:wikiPageID ""12345678"" ; # Replace with the actual WikiPageID for Battle of Fort Royal
         dbp:combatant1 ?combatant1 ;
         dbp:combatant2 ?combatant2 .
}
```

Note: The `dbo:wikiPageID` should be replaced with the correct WikiPageID for the ""Battle of Fort Royal"" in DBpedia. This ID can be found by searching DBpedia or using a SPARQL query to find it.",1,1,2,1,1,3,3,71,0,0,11,0,0.0,0
905,23,train,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v1 <http://dbpedia.org/property/father> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
SELECT ?spouse WHERE {
  # Step 1: Identify Philip, Despot of Romania
  ?philip dbo:birthName ""Philip, Despot of Romania""@en .
  
  # Step 2: Find his parents
  ?parent dbo:child ?philip .

  # Step 3: Determine the royalty among the parents
  OPTIONAL { ?parent dbo:occupation dbp:Royalty . }
  FILTER EXISTS { ?parent dbo:occupation dbp:Royalty }

  # Step 4: Identify the father of that royal parent
  OPTIONAL { ?father dbo:spouse ?parent . }
  FILTER (?father != ?parent)

  # Step 5: Find the spouse of this father
  ?spouse dbo:spouse ?father .
}
```",3,4,4,3,1,3,3,71,0,0,1,0,0.0,0
737,49,train,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and predecessor of the child of Philipp Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v0 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v1 <http://dbpedia.org/property/father> ?v0 . }","```sparql
# Step 1: Get the parent of Archduchess Margarete Sophie of Austria
SELECT ?parent WHERE {
    wd:Q123456 wdt:P22 ?parent .
}

# Step 2: Find a sibling (child) of this parent
SELECT DISTINCT ?sibling WHERE {
    ?parent wdt:P40 ?sibling .
    FILTER(?sibling != wd:Q123456)
}

# Step 3: Get the child of Philipp Albrecht, Duke of Württemberg
SELECT ?philippChild WHERE {
    wd:Q654321 wdt:P40 ?philippChild .
}

# Step 4: Find the predecessor in lineage to this child
SELECT DISTINCT ?predecessor WHERE {
    ?philippChild wdt:P1700 ?predecessor .
}

# Step 5: Check for royalty among siblings and predecessors
SELECT DISTINCT ?royalty WHERE {
    VALUES ?individual { ?sibling ?predecessor }
    ?individual wdt:P31 wd:Q215627 .
}

# Step 6: Find the child of this royal individual
SELECT ?child WHERE {
    ?royalty wdt:P40 ?child .
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Archduchess Margarete Sophie of Austria and `wd:Q654321` with the DBpedia ID for Philipp Albrecht, Duke of Württemberg. The property `P22` is used for mother, `P40` for child, `P1700` for predecessor in lineage, and `P31` for instance of (to check if someone is royalty).",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
39,47,train,"Give me the professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and professional in the profession of Sam Concepcion.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v2 . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v0 <http://dbpedia.org/property/alterEgo> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Find the fictional character ""The Shadow"" created by Walter B. Gibson
  ?character dbo:creator dbr:Walter_B._Gibson ;
             rdfs:label ""The Shadow""@en .
  
  # Find people with professions related to acting or singing
  ?person dbo:profession ?occupation .
  FILTER (
    ?occupation IN (dbr:Actor, dbr:Singer) ||
    CONTAINS(LCASE(?occupation), ""actor"") ||
    CONTAINS(LCASE(?occupation), ""singer"")
  )
  
  # Find a connection between the person and ""The Shadow""
  OPTIONAL { 
    ?person dbo:alterEgo ?character .
  }
}
```",5,7,6,3,2,3,3,71,0,0,39640,0,0.0,0
668,37,train,"Give me the person born as Darryl Paa Kwesi Bannerman-Martin and professional in the profession of the writer, that is a musical artist, of The Live Anthology.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/occupation> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Darryl Paa Kwesi Bannerman-Martin""@en .
  ?person dbo:profession ?prof1 .
  ?person dbo:profession ?prof2 .
  FILTER (
    (str(?prof1) = ""Writer""@en || str(?prof1) = ""Musical artist""@en) &&
    (str(?prof2) = ""Writer""@en || str(?prof2) = ""Musical artist""@en)
  ).
  OPTIONAL { ?person dbo:work ?work . }
  FILTER EXISTS {
    ?work rdfs:label ""The Live Anthology""@en .
  }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
531,19,train,Give me the tenant of the residence of Alberto Ruiz-Gallardón and office of Mariano Rajoy.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v0 . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v0 . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?tenant WHERE {
  # Query for Alberto Ruiz-Gallardón's residence or office
  {
    OPTIONAL { 
      dbr:Alberto_Ruiz-Gallardón dbo:residence ?location .
      ?location dbo:occupant ?tenant .
    }
    UNION
    {
      dbr:Alberto_Ruiz-Gallardón dbo:officeLocation ?location .
      ?location dbo:occupant ?tenant .
    }
  }

  # Query for Mariano Rajoy's office
  {
    OPTIONAL { 
      dbr:Mariano_Rajoy dbo:officeLocation ?location .
      ?location dbo:occupant ?tenant .
    }
  }
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
59,8,train,"Give me the native of Bristol and manager of the player, that is a sports club and a soccer club, in Jamie McCunnie.",SELECT ?result WHERE { <http://dbpedia.org/resource/Jamie_McCunnie> <http://dbpedia.org/ontology/team> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bristol> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v2 <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativeCity ?managerName ?soccerClub WHERE {
  # Find Jamie McCunnie's native city
  ?player a dbo:SoccerPlayer ;
          foaf:name ""Jamie McCunnie"" ;
          dbo:birthPlace ?nativeCity .

  # Find the manager of the team Jamie McCunnie plays for
  ?team dbo:manager ?manager .
  ?player dbo:playsFor ?team .
  ?manager foaf:name ?managerName .

  # Identify a soccer club in Bristol
  ?soccerClub a dbo:SoccerTeam ;
              dbo:location dbr:Bristol ;
              rdfs:label ?clubLabel .
  FILTER(CONTAINS(LCASE(?clubLabel), ""soccer""))
}
```",3,5,4,2,2,2,2,9,0,0,1,0,0.0,0
38,16,train,"Give me the author of the work, that is a work and a written work and American and a book, of Joe Biden and author of the work, that is a written work and a work, of Joe Biden.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v3 <http://dbpedia.org/property/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/ontology/author> ?result . },"```sparql
# Query for American book authored by Joe Biden
SELECT ?book WHERE {
  ?book a dbo:Book ;
        dbo:country dbr:United_States ;
        dbo:author dbr:Joe_Biden .
}

UNION

# Query for any written work authored by Joe Biden
SELECT ?writtenWork WHERE {
  ?writtenWork a dbo:WrittenWork ;
               dbo:author dbr:Joe_Biden .
}
```",4,10,5,2,2,3,2,20,0,0,1,0,0.0,0
59,3,train,"Give me the player, that is a sports club and a soccer club, in Jamie McCunnie.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/Jamie_McCunnie> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  ?player dbo:member dbr:Jamie_McCunnie .
  ?player a dbo:Sports_Club ;
          a dbo:Soccer_Club .
}
```",1,3,2,1,1,2,2,9,0,0,12,0,0.0,0
769,1,train,Give me the player in Lai Sun Cheung.,SELECT ?result WHERE { <http://dbpedia.org/resource/Lai_Sun_Cheung> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  ?team a dbo:SportsTeam ;
        foaf:name ""Lai Sun Cheung""@en .
  ?team dbo:player ?player .
}
```",1,1,2,1,1,3,2,20,0,0,4,0,0.0,0
347,54,train,"Give me the child of Ferdinand II, Holy Roman Emperor and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France) and father of the child of the parent of Archduke Charles Joseph of Austria.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v3 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v5 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
    # Ferdinand II's children
    VALUES ?parent { dbr:Ferdinand_II,_Holy_Roman_Emperor }
    
    # Leopold V, Archduke of Austria
    ?child dbo:father ?parent .
    ?child rdfs:label ""Leopold V, Archduke of Austria""@en .

    # Commander in war
    ?child dbo:militaryCommanderOf ?unit .
    
    # Societal event and event
    ?event dbo:place ?child ;
           a dbo:SocietalEvent ;
           a dbo:Event .

    # Television show (metaphorical)
    OPTIONAL {
        ?tvShow dbo:subject ?child ;
                a dbo:TelevisionSeries .
    }

    # 2nd Dragoon Regiment connection
    FILTER EXISTS { 
        ?unit rdfs:label ""2nd Dragoon Regiment (France)""@en .
    }
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
871,3,train,Give me the award of Rodney Lees.,SELECT ?result WHERE { <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?person a dbo:Person ;
          foaf:name ""Rodney Lees""@en .
  OPTIONAL { ?person dbo:award ?award . }
}
```",1,1,2,1,1,3,3,71,0,1,1,0.0,0.0,0
159,19,train,"Give me the reference to George Ducas and successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667).","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v0 <http://dbpedia.org/ontology/successor> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?successorName WHERE {
  ?ducas a dbo:MilitaryPerson ;
         foaf:name ""George Ducas"" ;
         dbo:associatedWith dbr:Russo-Polish_War_(1654%E2%80%931667) .
  
  ?ducas dbo:positionHeld ?position .
  
  ?successor dbo:succeededBy ?ducas ;
             a dbo:MilitaryPerson, dbo:Politician ;
             foaf:name ?successorName .

}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
609,37,train,"Give me the birth place of Cece Bell and birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/governor> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Step 1: Find Cece Bell's birth place
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
}

# Step 2: Find the governor of Cece Bell's birth place (assuming it's a U.S. state)
SELECT ?governor WHERE {
  ?state wdt:P31/wdt:P279* wd:Q222 . # Assuming ?birthPlace is a U.S. state
  ?state wdt:P6 ?governor .
}

# Step 3: Find Paulus Powell's birth place
SELECT ?birthPlace WHERE {
  wd:Q654321 wdt:P19 ?birthPlace .
}

# Step 4: Determine the region and administrative region of Paulus Powell's birth place
SELECT ?region ?adminRegion WHERE {
  ?birthPlace wdt:P17 ?country . # Region (Country)
  OPTIONAL { ?birthPlace wdt:P131 ?adminRegion } # Administrative region (State/Province)
}

# Step 5: Find the governor of that administrative region
SELECT ?governor WHERE {
  ?adminRegion wdt:P6 ?governor .
}
```

Note: Replace `wd:Q123456` with Cece Bell's DBpedia QID and `wd:Q654321` with Paulus Powell's DBpedia QID. The queries assume that the birth places are linked to administrative regions in a way that allows querying for governors.",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
609,36,train,"Give me the birth place of the author of the reference, that is American, to El Deafo and birth place of Vince Gilligan.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/author> ?v1 . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . }","```sparql
SELECT ?author ?birthPlaceLabel WHERE {
  VALUES (?author ?work) { 
    (dbpedia:Cece_Bell dbpedia:El_Deafo)
    (dbpedia:Vince_Gilligan dbpedia:Vince_Gilligan)
  }
  
  ?author dbo:nationality dbr:United_States .
  OPTIONAL { ?author dbo:birthPlace ?birthPlace . }
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
23,10,train,Give me the entity in the country of Daniel Elahi Galán.,SELECT ?result WHERE { <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v1 . ?result <http://dbpedia.org/ontology/country> ?v1 . },"```sparql
SELECT ?entity WHERE {
  ?country rdfs:label ""Colombia""@en .
  ?entity dbo:country ?country ;
          rdf:type dbo:City .
  FILTER (langMatches(lang(?entity), ""EN""))
}
```",2,2,3,2,1,2,3,28,0,0,2141,0,0.0,0
687,39,train,"Give me the player in Sergio Agüero and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v0 . ?result <http://dbpedia.org/ontology/coach> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . },"```sparql
# Step 1: Find Marcelo Sarmiento's birthday
SELECT ?birthday WHERE {
  dbpedia:MarceloSarmiento dbo:birthday ?birthday .
}

# Step 2: Find a soccer player and manager born on the same date as Marcelo Sarmiento
SELECT DISTINCT ?person WHERE {
  # Assuming we have found Marcelo Sarmiento's birthday from step 1, replace <marcelo_birthday> with that value
  ?person dbo:birthday ?birthday .
  FILTER (?birthday = <marcelo_birthday>)
  
  # Ensure the person is both a soccer player and manager
  ?person rdf:type dbpedia-owl:SoccerPlayer .
  ?person rdf:type dbpedia-owl:FootballManager .
}

# Step 3: Find Sergio Agüero's team at that time
SELECT DISTINCT ?team WHERE {
  # Assuming we have found the person from step 2, replace <person> with their URI
  dbpedia:SergioAgüero dbo:playsFor ?team .
  
  # Ensure the team is active during the birth year of the person found in step 2
  ?team dbo:founded ?foundedYear .
  FILTER (?foundedYear <= YEAR(<marcelo_birthday>))
}
```

Note: The above SPARQL queries are structured to be executed sequentially. You will need to replace `<marcelo_birthday>` and `<person>` with the actual values obtained from previous query results.",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
39,38,train,"Give me the professional in the alter ego of The Shadow and band of the person born, that is a musical artist, as Robert Lamar Thompson.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  dbr:Luke_Combs dbo:associatedBand ?band .
}
```",4,5,5,2,2,3,3,71,0,0,4,0,0.0,0
595,2,train,Give me the commander in Third Taiwan Strait Crisis.,SELECT ?result WHERE { <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?event dbo:wikiPageRedirects dbr:Third_Taiwan_Strait_Crisis .
  ?event dbo:agent ?person .
  ?person dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""admiral"") || CONTAINS(LCASE(?title), ""commander""))
}
```",1,1,2,1,1,3,3,71,0,0,18,0,0.0,0
782,9,train,Give me the reference to The Fabulous Thunderbirds and band of Kim Wilson.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . ?result <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember WHERE {
  ?band a dbo:Band ;
        rdfs:label ""The Fabulous Thunderbirds""@en .
  
  ?band dbo:bandMember ?bandMember .
  
  FILTER(CONTAINS(LCASE(?bandMember), ""kim wilson""))
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
384,5,train,"Give me the party of the successor, that is a politician and French, of Patrice Martin-Lalande.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/France>. <http://dbpedia.org/resource/Patrice_Martin-Lalande> <http://dbpedia.org/ontology/successor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/party> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successorParty WHERE {
  # Find the successor of Patrice Martin-Lalande
  ?person dbo:succeededBy ?successor .
  
  # Ensure the person is Patrice Martin-Lalande
  VALUES ?person { dbr:Patrice_Martin-Lalande }
  
  # Filter for successors who are politicians and French
  ?successor a dbo:Politician ;
            dbo:nationality dbr:France .

  # Get the political party of the successor
  ?successor dbo:party ?successorParty .
}
```",2,4,3,2,1,2,2,9,0,0,6,0,0.0,0
609,12,train,Give me the birth place of Cece Bell and birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?name ?birthPlaceLabel WHERE {
  VALUES ?person { 
    dbpedia:Cecily_Caroline_Bell 
    dbpedia:Glenn_Youngkin 
  }
  
  ?person rdfs:label ?name .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
  SERVICE <http://dbpedia.org/sparql> {
    ?birthPlace rdfs:label ?birthPlaceLabel .
    FILTER(LANG(?birthPlaceLabel) = 'en')
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
353,58,train,"Give me the child of Roger II of Sicily and child of the child of the spouse, that is a royalty, of Constance of Burgundy and father of the child, that is a royalty, of William I of Sicily.",SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v5 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/property/father> ?v1 . ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?childOfRogerII ?grandChildOfConstance ?royaltyChildOfWilliamI ?fatherOfRoyaltyChild WHERE {
  # Step 1: Find a child of Roger II of Sicily
  ?childOfRogerII dbo:parent dbr:Roger_II_of_Sicily .
  
  # Step 2: Identify Constance of Burgundy's spouse and their child
  ?spouseOfConstance dbo:spouse dbr:Constance_of_Burgundy .
  ?grandChildOfConstance dbo:parent ?spouseOfConstance .

  # Step 3: Ensure the individuals are royalty
  ?childOfRogerII a dbo:Monarch ;
                  dbo:country dbr:Sicily .
  
  ?grandChildOfConstance a dbo:Monarch ;
                         dbo:country dbr:Sicily .

  # Step 4: Find a royal child of William I of Sicily
  ?royaltyChildOfWilliamI dbo:parent dbr:William_I_of_Sicily ;
                          a dbo:Monarch ;
                          dbo:country dbr:Sicily .
  
  # Step 5: Identify the father of this royalty child
  ?fatherOfRoyaltyChild dbo:child ?royaltyChildOfWilliamI .

  # Step 6: Match individuals from steps 3 and 5
  FILTER (?childOfRogerII = ?grandChildOfConstance)
  FILTER (?fatherOfRoyaltyChild = ?childOfRogerII)
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
905,29,train,"Give me the parent of the father, that is a royalty, of Charles I of Hungary and spouse of Charles II of Naples and child of Stephen V of Hungary.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v3 . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v3 <http://dbpedia.org/ontology/parent> ?result . },"```sparql
SELECT ?parent WHERE {
  ?charlesI foaf:father ?stephenV .
  ?stephenV dbo:spouse ?elizabethCuman ;
           dbo:childOf ?parent .
  ?charlesII dbo:spouse ?mariaHungary .
  ?mariaHungary dbo:childOf ?stephenV .
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
687,2,train,Give me the team of Pablo Aimar.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . },"```sparql
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?teamName WHERE {
  ?player a dbpedia-owl:FootballPlayer ;
          foaf:name ""Pablo Aimar""@en .
  OPTIONAL { ?player dbp:team ?team . }
  ?team rdfs:label ?teamName .
  FILTER (lang(?teamName) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
103,0,train,Give me the actor of Dispatches from Elsewhere.,SELECT ?result WHERE { <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?actor WHERE {
  ?show rdfs:label ""Dispatches from Elsewhere""@en .
  ?show dbo:starring ?actor .
  FILTER (lang(?showLabel) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,6,0,0.0,0
119,4,train,"Who is the native, that is Polish and an athlete, of Łódź?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Poland>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Łódź> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person dbo:birthPlace dbr:Łódź .
  ?person dbo:nationality dbr:Poland .
  ?person dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(str(?occupation)), ""athlete""))
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,3,2,1,1,3,2,20,0,0,4,0,0.0,0
756,6,train,"Give me the administration, that is a country, of Theodor Heuss.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . },"```sparql
SELECT ?administration WHERE {
  wd:Q1234 dbo:positionHeld ?position .
  ?position dbo:country ?administration .
  FILTER (str(?administration) = ""Germany"")
}
```

Note: `wd:Q1234` should be replaced with the actual DBpedia identifier for Theodor Heuss.",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
628,25,train,"Give me the person born as Ackquille Jean Pollard and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.","SELECT ?result WHERE { <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?person dbo:name ""A.J. McCarron""@en .
  ?person dbo:birthName ""Ackquille Jean Pollard""@en .
  ?person dbo:birthPlace ?birthPlace .
  
  OPTIONAL { 
    ?award dbo:location dbr:Puerto_Rico .
    ?award dbo:associatedWith dbr:Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico .
    ?birthPlace rdfs:label ?placeLabel .
    FILTER (CONTAINS(LCASE(?placeLabel), ""puerto rico""))
  }
}
```",3,7,4,2,2,3,3,71,0,0,1,0,0.0,0
905,58,train,"Give me the spouse of Charles II of Naples and child of the child, that is a royalty, of the predecessor of Stephen V of Hungary and parent of the father, that is a royalty, of Charles I of Hungary.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v5 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v5 . ?v0 <http://dbpedia.org/property/father> ?v4 . },"```sparql
# Step 1: Get spouse of Charles II of Naples
SELECT ?spouse WHERE {
  wd:Q12345 wdt:P26 ?spouse .
}

# Step 2: Find child of that spouse who is royalty
SELECT DISTINCT ?child WHERE {
  ?spouse wdt:P40 ?child .
  ?child wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is the class for monarchs
}

# Step 3: Identify predecessor of Stephen V of Hungary
SELECT ?predecessor WHERE {
  wd:Q12346 wdt:P39 ?predecessor .
}

# Step 4: Find child of that predecessor's child who is royalty
SELECT DISTINCT ?royalChild WHERE {
  ?predecessor wdt:P40 ?child .
  ?child wdt:P40 ?grandchild .
  ?grandchild wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is the class for monarchs
}

# Step 5: Determine parent of Charles I of Hungary's father who is royalty
SELECT DISTINCT ?parent WHERE {
  wd:Q12347 wdt:P22 ?father .
  ?father wdt:P31/wdt:P279* wd:Q11850 . # Q11850 is the class for monarchs
  ?father wdt:P40 ?parent .
}

# Step 6: Combine results to find common individual
SELECT DISTINCT ?commonIndividual WHERE {
  VALUES ?individual1 { ?child }
  VALUES ?individual2 { ?royalChild }
  VALUES ?individual3 { ?parent }
  
  FILTER (?individual1 = ?individual2 && ?individual2 = ?individual3)
}
```

Note: Replace `wd:Q12345`, `wd:Q12346`, and `wd:Q12347` with the actual DBpedia IDs for Charles II of Naples, Stephen V of Hungary, and Charles I of Hungary respectively. These placeholders are used here due to lack of specific identifiers in this context.",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
756,49,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26 and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://dbpedia.org/ontology/manager> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v0 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager ?team WHERE {
  ?person a dbo:SoccerManager ;
          dbo:birthDate ""1968-08-26""^^xsd:date ;
          foaf:name ?manager .
  
  ?person dbo:managedTeam ?team .

  ?season dbo:club dbr:VfL_Bochum ;
          dbo:season ""2007–08"" ;
          dbo:manager ?person .

}
```",5,12,6,3,2,3,3,71,0,0,1,0,0.0,0
595,20,train,"Give me the spouse of Hillary Clinton and author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/property/author> ?result . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?spouse ?author WHERE {
  # Find Bill Clinton as Hillary Clinton's spouse
  dbr:Hillary_Clinton dbo:spouse ?spouse .
  
  # Ensure the spouse is Bill Clinton
  FILTER (?spouse = dbr:Bill_Clinton)
  
  # Find books about Bill Clinton and their authors
  ?work dbo:subject dbr:Bill_Clinton ;
        rdf:type dbo:Book ;
        dbo:author ?author .
}
```",3,6,4,2,2,3,3,71,0,0,1,0,0.0,0
23,16,train,Give me the party of Roy Barreras and party of the father of Sofía Petro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . ?v0 <http://dbpedia.org/ontology/party> ?result . },"```sparql
SELECT ?royPartyLabel ?andresPetroPartyLabel WHERE {
  # Roy Barreras's political party
  wd:Q1234567 dbo:party ?royParty .
  ?royParty rdfs:label ?royPartyLabel .

  # Andrés Petro Urrego (father of Sofía Petro) political party
  wd:Q2345678 dbo:party ?andresPetroParty .
  ?andresPetroParty rdfs:label ?andresPetroPartyLabel .

  FILTER(lang(?royPartyLabel) = 'en')
  FILTER(lang(?andresPetroPartyLabel) = 'en')
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia entity ID for Roy Barreras and `wd:Q2345678` with the entity ID for Andrés Petro Urrego. These IDs can be found by searching their names in DBpedia.",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
706,1,train,Give me the birthplace of Smita Patil.,SELECT ?result WHERE { <http://dbpedia.org/resource/Smita_Patil> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthPlace WHERE {
  ?person rdfs:label ""Smita Patil""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,2,20,2,0,0,1.0,1.0,1.0
531,44,train,"Give me the office of the leader, that is a politician, of Conservative Republican Party (Spain) and tenant of Madrid and office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/office> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v2 <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v4 . },"```sparql
SELECT DISTINCT ?person1 ?office1 ?person2 ?office2 WHERE {
  # Find the leader of the Conservative Republican Party (Spain) who is a tenant of Madrid
  ?party dbo:leader ?person1 .
  ?party rdf:type dbo:PoliticalParty .
  FILTER(CONTAINS(LCASE(?party), ""conservative republican party spain"")) .
  
  ?person1 dbo:officeLocation ?location .
  FILTER(CONTAINS(LCASE(STR(?location)), ""madrid"")) .

  # Find the commander in the Central African Republic Civil War who is a politician
  ?conflict dbo:commander ?person2 .
  ?conflict rdf:type dbo:MilitaryConflict .
  FILTER(CONTAINS(LCASE(?conflict), ""central african republic civil war"")) .

  ?person2 dbo:politicalAffiliation ?office2 .
  
  # Return the results
  BIND(STR(?person1) AS ?office1)
}
```",5,8,6,2,3,3,3,71,0,0,1,0,0.0,0
159,23,train,"Give me the successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://dbpedia.org/ontology/commander> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor WHERE {
  # Michał Kazimierz Pac's role in a military conflict
  dbr:Mikołaj_Kazimierz_Pac dbo:militaryConflict ?conflict .
  
  # Find the successor in this role
  ?conflict dbo:commander ?pacRole .
  ?pacRole dbo:succeededBy ?successorRole .
  
  # Ensure the successor is a politician and office holder
  ?successorRole dbo:agent ?successor .
  ?successor rdf:type dbo:Politician ;
             dbo:officeHolder true .
}
```",3,7,4,3,1,3,3,71,0,0,3,0,0.0,0
943,32,train,"Give me the reference to the alter ego of The Shadow and child of the parent, that is a royalty, of Yeshaq I.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?alterEgo WHERE {
  dbr:Yeshaq_I dbo:spouse ?parent .
  ?parent dbo:child ?child .
  OPTIONAL { ?child rdfs:label ?name . FILTER (lang(?name) = ""en"") }
  OPTIONAL { ?child dbo:alsoKnownAs ?alterEgo . FILTER (lang(?alterEgo) = ""en"") }
}
```",4,5,5,2,2,3,3,71,0,0,3,0,0.0,0
246,9,train,"Give me the child, that is a royalty, of the parent, that is a royalty, of Princess Aisha bint Faisal.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Princess_Aisha_bint_Faisal> . ?result <http://dbpedia.org/ontology/parent> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?grandchild WHERE {
  ?princess rdf:type dbo:Person ;
            foaf:name ""Princess Aisha bint Faisal""@en .
  
  ?princess dbo:parent ?parent .
  ?parent rdf:type dbo:Royalty .

  ?parent dbo:child ?grandchild .
  ?grandchild rdf:type dbo:Royalty .
}
```",2,4,3,2,1,3,2,20,0,0,4,0,0.0,0
39,59,train,"Give me the professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson and professional in the profession of the producer of Coke Studio Philippines.",SELECT ?result WHERE { <http://dbpedia.org/resource/Coke_Studio_Philippines> <http://dbpedia.org/ontology/producer> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v3 <http://dbpedia.org/property/occupation> ?v2 . ?v0 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?result <http://dbpedia.org/property/occupation> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v0 <http://dbpedia.org/property/alterEgo> ?v5 . },"```sparql
# Query to find information about The Shadow as created by Walter B. Gibson
SELECT ?character WHERE {
  ?character dbo:creator dbr:Walter_B._Gibson .
  ?character rdf:type dbo:FictionalCharacter .
  FILTER(CONTAINS(LCASE(?characterLabel), ""the shadow""))
}

# Query to find the profession of Jonathan Manalo, producer of Coke Studio Philippines
SELECT ?profession WHERE {
  ?person foaf:name ""Jonathan Manalo""@en .
  ?person dbo:occupation ?profession .
  ?program dbr:Coke_Studio_Philippines ;
           dbo:producer ?person .
}
```",6,8,7,3,2,3,3,71,0,0,39640,0,0.0,0
628,55,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and person born as the birth name of Bobby Shmurda and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v5 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?result <http://dbpedia.org/property/birthName> ?v5 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember WHERE {
  # Bobby Shmurda's associated artist
  VALUES (?associatedArtist) { dbr:Rowdy_Rebel }
  
  # Rowdy Rebel is a band member and a musical artist
  ?bandMember dbo:memberOf ?associatedArtist .
  ?bandMember a dbo:MusicalArtist .

  # Bobby Shmurda's birth name
  ?bobbyShmurda dbo:birthName ""Ackquille Jean Pollard""^^xsd:string .
  
  # Rowdy Rebel's birth name matches Bobby Shmurda's
  ?rowdyRebel dbo:birthName ?bobbyShmurdaBirthName .

  FILTER (?bandMember = ?rowdyRebel)

  # Coro de la Pontificia Universidad Católica de Puerto Rico award region
  ?award dbo:location dbr:New_York_City .
  
  # Rowdy Rebel's native place matches the award location
  ?rowdyRebel dbo:nativePlace ?awardLocation .

  FILTER (?awardLocation = ?award)
}
```",6,11,7,2,3,3,3,71,0,0,1,0,0.0,0
353,20,train,"Give me the child of Roger II of Sicily and father of the child, that is a royalty, of William I of Sicily.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Find children of Roger II of Sicily
  ?roger2 dbo:spouse ?adelaide .
  ?roger2 dbo:child ?child .

  FILTER(?roger2 = dbr:Roger_II_of_Sicily)

  # Check if the child is a father to a royal child of William I of Sicily
  ?child dbo:spouse ?spouse .
  ?child dbo:child ?tancred .
  
  ?william1 dbo:parent ?tancred .
  FILTER(?william1 = dbr:William_I_of_Sicily)

  # Ensure the child is a royalty
  ?tancred dbo:title ?title .
  FILTER(CONTAINS(LCASE(STR(?title)), ""king"") || CONTAINS(LCASE(STR(?title)), ""duke""))
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
78,13,train,"Give me the associated musical artist of the person born, that is a musical artist, as Stuart Mcbeath Tosh and associated musical artist of Billy Lyall.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
# Query for Stuart Mcbeath Tosh's associated musical artist
SELECT ?artist WHERE {
  ?person dbo:birthName ""Stuart Mcbeath Tosh""@en .
  ?person dbo:associatedBand ?band .
  ?band rdfs:label ?artist .
  FILTER(LANG(?artist) = 'en')
}

UNION

# Query for Billy Lyall's associated musical artist
SELECT ?artist WHERE {
  ?person dbo:birthName ""Billy Lyall""@en .
  ?person dbo:associatedBand ?band .
  ?band rdfs:label ?artist .
  FILTER(LANG(?artist) = 'en')
}
```",3,4,4,2,2,2,3,28,0,0,2,0,0.0,0
756,19,train,"Give me the native of West Germany and manager of the player, that is a sports club and an organisation and a soccer club, in 2007–08 VfL Bochum season.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/West_Germany> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. <http://dbpedia.org/resource/2007–08_VfL_Bochum_season> <http://dbpedia.org/ontology/team> ?v0 . ?v0 <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?manager ?nativeCountry WHERE {
  # Identify VfL Bochum as a sports club and soccer club
  dbr:VfL_Bochum dbo:type ?type .
  FILTER (CONTAINS(LCASE(STR(?type)), ""sports club"") && CONTAINS(LCASE(STR(?type)), ""soccer club""))

  # Find the manager during the 2007-08 season
  OPTIONAL {
    ?manager dbp:managedTeam dbr:VfL_Bochum .
    ?season dbo:team dbr:VfL_Bochum ;
            dbo:seasonStartYear ?startYear ;
            dbo:seasonEndYear ?endYear .
    FILTER (?startYear = 2007 && ?endYear = 2008)
  }

  # Check if the manager is from West Germany
  OPTIONAL {
    ?manager dbp:nationality dbr:West_Germany .
  }
  
  # Ensure the manager's native country matches West Germany
  OPTIONAL {
    ?manager dbo:nationality ?nativeCountry .
  }
}
```",3,6,4,2,2,3,3,71,0,0,1,0,0.0,0
905,47,train,"Give me the parent of the father, that is a royalty, of the spouse of Maria of Bytom and spouse of the father of Philip I, Prince of Taranto.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?v3 . ?v3 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Philip_I,_Prince_of_Taranto> <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
# Step 1: Find Maria of Bytom's spouse
SELECT ?spouse WHERE {
  wd:Q123456 wdt:P26 ?spouse .
}

# Step 2: Find the father of Philip I, Prince of Taranto
SELECT ?father WHERE {
  wd:Q654321 wdt:P22 ?father .
}

# Step 3: Find the spouse of this father
SELECT ?spouse WHERE {
  ?father wdt:P26 ?spouse .
}

# Step 4: Identify the common spouse
SELECT DISTINCT ?commonSpouse WHERE {
  { wd:Q123456 wdt:P26 ?commonSpouse . }
  UNION
  { ?father wdt:P22 wd:Q654321 .
    ?father wdt:P26 ?commonSpouse . 
  }
}

# Step 5: Find the father of this common spouse
SELECT ?grandFather WHERE {
  ?commonSpouse wdt:P22 ?grandFather .
}

# Step 6: Identify a royal parent of this grandfather
SELECT DISTINCT ?royalParent WHERE {
  ?grandFather wdt:P25|wdt:P22 ?royalParent .
  ?royalParent wdt:P31 wd:Q5 . # Q5 is the class for human, but we need to filter further for royalty
  FILTER EXISTS { ?royalParent wdt:P39 wd:Q11424 } # P39 is a member of an organization, and Q11424 is the class for monarchy
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
80,1,train,Give me the actor of ATL (film).,SELECT ?result WHERE { <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film dbo:title ""ATL""@en .
  ?film dbo:starring ?actor .
  FILTER (lang(?film) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,10,0,0.0,0
628,18,train,Give me the native of Florida and person born as Ackquille Jean Pollard and band member of Uncle Murda.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person WHERE {
  ?person foaf:name ""Ackquille Jean Pollard""@en .
  ?person dbo:birthName ""Ackquille Jean Pollard"" .
  ?bandMember dbo:member ?person .
  ?bandMember foaf:name ""Uncle Murda""@en .
  OPTIONAL { ?person dbo:birthPlace dbr:Florida . }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
687,48,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the person born, that is an athlete, on the birthday of Marty Pollio.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v3 . ?result <http://dbpedia.org/ontology/coach> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://dbpedia.org/ontology/birthDate> ?v3 . }","```sparql
# Step 1: Find the person born on 1979-11-03 who is both a soccer player and a soccer manager
SELECT ?person WHERE {
  ?person dbo:birthDate ""1979-11-03""^^xsd:date .
  ?person dbo:occupation dbr:Soccer_player .
  ?person dbo:occupation dbr:Soccer_manager .
}

# Step 2: Find Marty Pollio's birthday
SELECT ?birthDate WHERE {
  dbp:Marty_Pollio dbo:birthDate ?birthDate .
}

# Step 3: Find an athlete born on the same day as Marty Pollio
SELECT ?athlete WHERE {
  ?athlete dbo:birthDate ?birthDate .
  ?athlete dbo:occupation dbr:Athlete .
  FILTER(?birthDate = <Marty_Pollio_birthdate>) # Replace with actual birth date from Step 2
}

# Step 4: Find the team of the person identified in Step 1
SELECT ?team WHERE {
  ?person dbo:currentTeam ?team .
  ?person dbo:birthDate ""1979-11-03""^^xsd:date .
  ?person dbo:occupation dbr:Soccer_player .
  ?person dbo:occupation dbr:Soccer_manager .
}
```

Note: Replace `<Marty_Pollio_birthdate>` with the actual birth date obtained from Step 2.",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
158,22,train,"Give me the person decedent at the birthplace, that is a country, of Sandro Bertaggia and native of the administration of Alexander II, Grand Duke of Finland.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . <http://dbpedia.org/resource/Sandro_Bertaggia> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/deathPlace> ?v2 . }","```sparql
# Step 1: Find Sandro Bertaggia's birthplace that is a country
SELECT ?birthPlace WHERE {
    dbpedia:Sandro_Bertaggia dbo:birthPlace ?birthPlace .
    ?birthPlace rdf:type dbo:Country .
}

# Assuming the result of the above query gives us a specific country, say ""CountryX""

# Step 2: Identify Alexander II's administration region
SELECT ?nativePlace WHERE {
    dbpedia:Aleksandr_II_of_Russia dbo:nativePlace ?nativePlace .
    ?nativePlace rdfs:label ?label .
    FILTER(CONTAINS(LCASE(?label), ""finland""))
}

# Assuming the result of the above query gives us a specific place, say ""PlaceY""

# Step 3: Find a person who died in Sandro Bertaggia's birthplace and was native to Alexander II's administration
SELECT ?decedent WHERE {
    ?decedent dbo:deathPlace dbpedia:CountryX .
    ?decedent dbo:nativePlace dbpedia:PlaceY .
}
```",4,5,5,2,2,2,3,28,0,0,2,0,0.0,0
159,1,train,Give me the reference to George Ducas.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?reference WHERE {
  ?person rdfs:label ""George Ducas""@en.
  ?person dbo:wikiPageWikiLink ?reference.
}
```",1,1,2,1,1,3,3,71,0,49,2,0.0,0.0,0
769,2,train,Give me the birthday of Tony Hollings.,SELECT ?result WHERE { <http://dbpedia.org/resource/Tony_Hollings> <http://dbpedia.org/ontology/birthDate> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthday WHERE {
  VALUES ?person { dbr:Tony_Hollings }
  ?person dbo:birthDate ?birthday .
}
```",1,1,2,1,1,3,2,20,1,0,0,1.0,1.0,1.0
347,46,train,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . }","```sparql
SELECT ?commander WHERE {
  ?war dbo:participatingMilitaryForce ?militaryForce .
  ?militaryForce dbo:commander ?commander .
  
  FILTER(?war = dbpedia:Algerian_War)
  
  ?event rdfs:label ""The War""@en .
  ?televisionShow rdfs:label ""The War""@en .

  ?commander foaf:name ?name .
  ?name str:contains ""Charles de Gaulle""^^xsd:string .
  
  OPTIONAL {
    ?child dbo:father ?f .
    ?f foaf:name ""Ferdinand III, Holy Roman Emperor""@en .
    ?grandChild dbo:father ?child .
    ?grandChild foaf:name ""Leopold I, Holy Roman Emperor""@en .
  }
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
905,57,train,"Give me the spouse of Charles II of Naples and parent of the father, that is a royalty, of the spouse of Maria of Bytom and child of the child, that is a royalty, of Béla IV of Hungary.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Charles_II_of_Naples> <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://dbpedia.org/property/father> ?v4 . <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v1 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . },"```sparql
SELECT DISTINCT ?commonIndividual WHERE {
  # Step 1: Charles II of Naples' spouse
  ?charlesII dbr:Charles_II_of_Naples#spouse ?spouse .
  
  # Step 2: Parent of the father of Charles II's spouse
  ?fatherOfSpouse dbo:parent ?grandparent .
  ?spouse dbo:parent ?fatherOfSpouse .
  FILTER (isLiteral(?grandparent) && regex(str(?grandparent), ""Royal""))

  # Step 3: Maria of Bytom's spouse
  ?maria dbr:Maria_of_Bytom#spouse ?mariaSpouse .

  # Step 4: Child of Maria of Bytom's spouse
  ?childOfMariaSpouse dbo:parent ?mariaSpouse .
  
  # Step 5: Béla IV of Hungary's child
  ?belaIV dbr:Béla_IV_of_Hungary#child ?belasChild .

  # Step 6: Grandchild of Béla IV's child
  ?grandchildOfBelasChild dbo:parent ?belasChild .
  FILTER (isLiteral(?grandchildOfBelasChild) && regex(str(?grandchildOfBelasChild), ""Royal""))

  # Step 7 & 8: Find the common individual who is royalty
  VALUES ?commonIndividual { ?grandparent ?grandchildOfBelasChild }
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
38,14,train,"Give me the author of the work, that is a written work and a work, of the commander, that is an office holder, in Korean conflict.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/author> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/author> ?v2 . <http://dbpedia.org/resource/Korean_conflict> <http://dbpedia.org/ontology/commander> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?person dbo:officeHolderOf dbr:Korean_War .
  ?person foaf:name ""Douglas MacArthur""@en .
  ?work dbo:author ?author ;
        dbo:genre dbr:Autobiography .
  ?person dbo:writtenWork ?work .
}
```",3,6,4,3,1,3,2,20,0,0,24,0,0.0,0
80,48,train,Give me the actor of the movie with the author of Smartbomb (book) and professional in the alter ego of The Shadow.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?v3 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v3 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
# Step 1: Find the author of ""Smartbomb""
SELECT ?author WHERE {
  ?book dcterms:title ""Smartbomb""@en .
  ?book dbo:author ?author .
}

# Step 2: Find movies featuring this author
SELECT DISTINCT ?movie WHERE {
  ?author dbo:filmActedIn ?movie .
}

# Step 3: Identify Lamont Cranston as The Shadow's alter ego
SELECT ?lamontCranston WHERE {
  ?shadow rdfs:label ""The Shadow""@en ;
          foaf:name ""Lamont Cranston""@en .
}

# Step 4: Find a professional associated with Lamont Cranston
SELECT DISTINCT ?professional WHERE {
  ?lamontCranston dbo:profession ?professional .
}

# Step 5: Find the actor connecting these elements
SELECT DISTINCT ?actor WHERE {
  ?movie dbo:starring ?actor .
  FILTER EXISTS { 
    ?author dbo:filmActedIn ?movie .
    ?lamontCranston dbo:profession ?professional .
  }
}
```",5,5,6,3,2,3,3,71,0,0,7802,0,0.0,0
198,7,train,Give me the person deceased on 1850-08-05.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person a dbo:Person .
  ?person dbo:deathDate ?date .
  FILTER (STR(?date) = ""1850-08-05T00:00:00Z""^^xsd:dateTime)
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
859,15,train,"Give me the associated musical artist of Phantomsmasher and band member of the associated musical artist, that is a band and a group and an organisation, of the reference, that is a group, to Burnt by the Sun.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v0 <http://xmlns.com/foaf/0.1/name> ""Burnt by the Sun""@en . <http://dbpedia.org/resource/Phantomsmasher> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.ontology.org/resource/>

SELECT ?artist ?bandMember WHERE {
  # Find the album or song titled ""Phantomsmasher""
  ?album a dbo:Album ;
         rdfs:label ?title .
  
  FILTER (CONTAINS(LCASE(?title), ""phantomsmasher"")) .

  # Get the musical artist associated with this album
  ?album dbo:musicalArtist ?artist .

  # Ensure the artist is also recognized as a band, group, and organization
  ?artist a dbo:Band ;
          a dbo:MusicalGroup ;
          a dbo:Organization .

  # Find band members of this artist
  ?member dbo:bandMember ?artist .
  
  # Check for any reference to ""Burnt by the Sun""
  OPTIONAL {
    ?reference rdfs:label ?burntTitle .
    FILTER (CONTAINS(LCASE(?burntTitle), ""burnt by the sun"")) .
    ?album dbo:relatedWork ?reference .
  }
}
```",4,8,5,3,2,3,2,20,0,0,5,0,0.0,0
39,56,train,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the profession of Sam Concepcion and professional in .","SELECT ?result WHERE { <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v0 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
# Step 1: Find Bob Thompson (musician)'s birth name
SELECT ?birthName WHERE {
  ?person a dbo:MusicalArtist ;
          foaf:name ""Bob Thompson"" .
  ?person foaf:birthday ?birthday .
  ?person foaf:name ?fullName .
  OPTIONAL { ?person foaf:givenname ?givenName . }
  OPTIONAL { ?person foaf:familyName ?familyName . }
  BIND(CONCAT(?givenName, "" "", ?familyName) AS ?birthName)
} LIMIT 1

# Step 2: Identify Sam Concepcion's professions
SELECT DISTINCT ?profession WHERE {
  ?sam a dbo:Person ;
       foaf:name ""Sam Concepcion"" .
  ?sam dbo:occupation ?profession .
}

# Step 3: Find the person with Bob Thompson's birth name and same profession(s) as Sam Concepcion
SELECT DISTINCT ?person ?band WHERE {
  # Assuming we found Bob Thompson's birth name is ""John Doe""
  VALUES (?birthName) { ""John Doe"" }
  
  ?person a dbo:MusicalArtist ;
          foaf:name ?fullName .
  FILTER(CONTAINS(?fullName, ?birthName))
  
  # Check if this person has the same professions as Sam Concepcion
  ?sam a dbo:Person ;
       foaf:name ""Sam Concepcion"" .
  ?sam dbo:occupation ?profession .
  ?person dbo:occupation ?sameProfession .
  FILTER(?sameProfession = ?profession)
  
  OPTIONAL { ?person dbo:band ?band }
}
```",6,7,7,3,3,3,3,71,0,0,4,0,0.0,0
941,11,train,"Give me the child of the parent, that is a royalty, of Duke Anthony Ulrich of Brunswick and spouse of Prince Augustus William of Prussia.",SELECT ?result WHERE { <http://dbpedia.org/resource/Prince_Augustus_William_of_Prussia> <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Duke_Anthony_Ulrich_of_Brunswick> . },"```sparql
# Step 1: Find Duke Anthony Ulrich of Brunswick and his parent
SELECT ?parent WHERE {
  wd:Q123456 wdt:P22 ?parent .
}

# Step 2: Check if the parent is royalty (assuming a property like P31 for instance of or P279 for subclass)
SELECT DISTINCT ?parent WHERE {
  ?parent wdt:P31/wdt:P279* wd:Q11873 . # Q11873 represents ""royalty""
}

# Step 3: Find children of this royal parent
SELECT DISTINCT ?child WHERE {
  ?parent wdt:P40 ?child .
}

# Step 4: Identify which child married Prince Augustus William of Prussia (assuming P26 for spouse)
SELECT DISTINCT ?child WHERE {
  ?child wdt:P26 wd:Q1234567 . # Q1234567 represents ""Prince Augustus William of Prussia""
}
```

Note: Replace `wd:Q123456` with the actual DBpedia ID for Duke Anthony Ulrich of Brunswick and `wd:Q1234567` with the DBpedia ID for Prince Augustus William of Prussia. The property `P40` is used to denote children, and `P26` denotes spouse.",3,4,4,2,2,3,2,20,0,0,1,0,0.0,0
472,6,train,Give me the administration of Christian IX of Denmark and territory administered from Copenhagen.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Copenhagen> . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?king ?startYear ?endYear ?territory WHERE {
  ?king a dbo:Monarch ;
        foaf:name ""Christian IX""@en ;
        dbo:country dbr:Denmark ;
        dbo:reignStart ?startYear ;
        dbo:reignEnd ?endYear .
  
  OPTIONAL {
    ?administration dbo:administeredBy ?king ;
                    dbo:administrativeTerritory ?territory .
  }
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
472,13,train,"Give me the territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen and administration of Christian IX of Denmark.",SELECT ?result WHERE { <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v1 . ?result <http://dbpedia.org/ontology/capital> ?v1 . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?hansenDeathPlace ?christianIXAdminCenter ?territoryHansen ?territoryChristianIX
WHERE {
  # Find the death place of Christian Ditlev Ammentorp Hansen that is a settlement
  dbr:Christian_Ditlev_Ammertorp_Hansen dbo:deathPlace ?hansenDeathPlace .
  ?hansenDeathPlace rdf:type dbo:Settlement .

  # Find the administration center for Christian IX of Denmark
  dbr:Christian_IX_of_Denmark dbo:residence ?christianIXAdminCenter .
  
  # Assuming territories are administered from these places, we need to find related administrative divisions
  OPTIONAL {
    ?hansenDeathPlace dbo:administrativeTerritory ?territoryHansen .
  }
  OPTIONAL {
    ?christianIXAdminCenter dbo:administrativeTerritory ?territoryChristianIX .
  }
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
398,2,train,"Give me the player, that is a soccer club, in Denis Kolodin.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. <http://dbpedia.org/resource/Denis_Kolodin> <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?club WHERE {
  ?person a dbo:SoccerPlayer .
  ?person foaf:name ""Denis Kolodin""@en .
  ?person dbo:team ?club .
}
```",1,2,2,1,1,3,2,20,10,0,0,1.0,1.0,1.0
398,13,train,"Give me the figure known as the nickname of the player, that is a soccer club, in Denis Kolodin.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/nickname> ?v1 . <http://dbpedia.org/resource/Denis_Kolodin> <http://dbpedia.org/ontology/team> ?v0 . ?result <http://dbpedia.org/property/nickname> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nickname WHERE {
  VALUES ?kolodin { dbr:Denis_Kolodin }
  ?kolodin dbo:nickName ?nickname .
  
  # Assuming we have a list of soccer clubs in DBpedia, we can filter nicknames that match these
  OPTIONAL {
    ?club rdf:type dbo:SoccerClub ;
          rdfs:label ?nickname .
  }

  FILTER EXISTS { ?club . } # Ensures the nickname is also a club name
}
```",3,4,4,3,1,3,2,20,0,0,6,0,0.0,0
140,6,train,Give me the commander in Pickett's Charge and party member of Republican Party (United States).,SELECT ?result WHERE { <http://dbpedia.org/resource/Pickett's_Charge> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?partyAffiliation WHERE {
  ?person a dbo:MilitaryPerson ;
          foaf:name ""George E. Pickett""@en .
  
  OPTIONAL { 
    ?person dbo:politicalParty ?party .
    ?party rdfs:label ?partyAffiliation .
    FILTER (lang(?partyAffiliation) = 'en')
  }
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
737,19,train,"Give me the predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v0 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?predecessor WHERE {
  # Find children of Philipp Albrecht, Duke of Württemberg
  ?philippAlbrecht dbo:child ?child .
  FILTER(STRSTARTS(LCASE(?philippAlbrecht), ""albrecht_2,_duke_of_württemberg""))

  # Find the predecessor in title or position
  ?child dbo:predecessor ?predecessor .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
609,15,train,Who is the awardee of the award of Vince Gilligan?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> ?v1 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?awardee WHERE {
  VALUES ?person { dbr:Vince_Gilligan }
  
  ?person dbo:award ?award .
  ?award dbo:recipient ?awardee .
  FILTER(?awardee != ?person)
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
943,1,train,Give me the reference to .,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> """"@en . }","```
# No valid query can be generated due to incomplete question.
```",1,1,2,1,1,3,3,71,0,0,98447,0,0.0,0
412,14,train,"Give me the war of Napoleon Zervas and entity in the death place, that is a settlement, of Antonios Varthalitis.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v1 . },"```sparql
# Step 1: Find Antonios Varthalitis' death place that is a settlement
SELECT ?deathPlace WHERE {
    ?varthalitis dbo:deathPlace ?deathPlace .
    ?varthalitis foaf:name ""Antonios Varthalitis"" .
    ?deathPlace rdf:type dbo:Settlement .
}

# Step 2: Find the war involving Napoleon Zervas
SELECT ?war WHERE {
    ?zervas dbo:militaryConflict ?war .
    ?zervas foaf:name ""Napoleon Zervas"" .
}

# Note: The above queries are separate and need to be executed sequentially.
# You would then manually check if there's any connection between the results of these two queries.
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
159,9,train,Give me the successor of Yurii Khmelnytsky and reference to George Ducas.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?ducasMention WHERE {
  # Find the successor of Yurii Khmelnytsky
  OPTIONAL { 
    dbr:Yuri_Khmelnytskyy dbo:successor ?successor .
  }
  
  # Check for any mention or reference to George Ducas related to Yurii Khmelnytsky
  OPTIONAL {
    ?entity rdfs:label ""George Ducas""@en.
    ?entity dbo:mentionedIn ?ducasMention .
    ?ducasMention dbo:subject dbr:Yuri_Khmelnytskyy .
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
531,21,train,Give me the tenant of the residence of Alberto Ruiz-Gallardón and office of Miguel Maura.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v1 . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v1 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?tenant WHERE {
  # Query for Alberto Ruiz-Gallardón's residence
  OPTIONAL {
    ?residence dbo:resident dbr:Alberto_Ruiz-Gallardón .
    ?residence dbo:occupant ?tenant .
  }
  
  # Query for Miguel Maura's office
  OPTIONAL {
    ?office dbo:employee dbr:Miguel_Maura .
    ?office dbo:occupant ?tenant .
  }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
531,31,train,"Give me the office of Mariano Rajoy and tenant of the residence of the leader, that is an office holder, of 2003 Madrid City Council election.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/residence> ?v0 . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/headquarter> ?v0 . <http://dbpedia.org/resource/2003_Madrid_City_Council_election> <http://dbpedia.org/property/leader> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office ?residence WHERE {
  # Find Mariano Rajoy's office around 2003
  ?person a dbo:Politician ;
          foaf:name ""Mariano Rajoy""@en .
  
  OPTIONAL { 
    ?person dbo:positionHeld ?office . 
    ?office dbo:endDate ?endDate .
    FILTER (YEAR(?endDate) >= 2003 || ?endDate = """" ) # Ensure the office is relevant to or after 2003
  }
  
  OPTIONAL {
    ?office dbo:residence ?residence .
  }

  # Filter for Madrid City Council election context if possible
  ?office dbo:city dbr:Madrid .

  FILTER (regex(str(?person), ""Mariano Rajoy""))
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
414,6,train,Give me the show of Royal Swedish Academy of Sciences and award of Max Born.,SELECT ?result WHERE { <http://dbpedia.org/resource/Max_Born> <http://dbpedia.org/property/awards> ?result . ?result <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Royal_Swedish_Academy_of_Sciences> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?award WHERE {
  # Identify the Royal Swedish Academy of Sciences
  VALUES ?academy { dbr:Royal_Swedish_Academy_of_Sciences }
  
  # Find awards presented by the academy, focusing on Nobel Prizes
  ?academy dbo:awards ?award .
  
  # Filter for Nobel Prize in Physics
  FILTER(CONTAINS(LCASE(STR(?award)), ""nobel prize in physics""))
  
  # Identify Max Born and link him to the award
  ?person dbr:Max_Born .
  ?person dbo:receivedAward ?award .

  # Retrieve the name of the show or event (Nobel Prize)
  BIND(""Nobel Prize"" AS ?show)
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
80,47,train,"Give me the actor of the movie with  and actor of the album of the work, that is a song and a musical work, of T.I..","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/album> ?v4 . ?v4 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>. ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v2 <http://dbpedia.org/property/starring> """"@en . ?v0 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/T.I.> . }","```sparql
SELECT DISTINCT ?song ?album ?movie ?actor1 ?actor2 WHERE {
  # Step 1: Identify T.I.'s song which is also a musical work
  ?song dbo:artist dbr:T.I. ;
        rdf:type dbo:Songs .
  
  # Step 2: Find the album of this song
  ?album dbo:song ?song .

  # Step 3: Find a movie with the same name as the album
  ?movie rdfs:label ?albumLabel ;
         rdf:type dbo:Film .
  
  FILTER (lang(?albumLabel) = 'en')

  # Step 4: Get an actor from that movie
  ?movie dbo:starring ?actor1 .

  # Step 5: Find a notable figure associated with the album, typically another artist or producer
  OPTIONAL {
    ?album dbo:performer ?artist .
    ?artist rdfs:label ?artistLabel .
    FILTER (lang(?artistLabel) = 'en')
    BIND(?artist AS ?actor2)
  }
  
  # Ensure we get distinct results
  FILTER (?actor1 != ?actor2)
}
```",5,7,6,3,2,3,3,71,0,0,10,0,0.0,0
159,42,train,"Give me the successor of the commander, that is a politician and an office holder, in Russo-Polish War (1654–1667) and reference to George Ducas and commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/Russo-Polish_War_(1654–1667)> <http://dbpedia.org/ontology/commander> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/successor> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?successor WHERE {
  ?war dbo:wikiPageRedirects dbr:Russo-Polish_War_(1654%E2%80%931667) .
  ?war dbo:participatingCommander ?commander .
  ?commander a dbo:Politician ;
             dbo:officeHolder ?office .

  OPTIONAL {
    ?successor dbo:succeededBy ?commander .
    ?successor a dbo:Politician ;
               dbo:officeHolder ?office2 .
  }
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
203,48,train,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of the force, that is an event and a societal event, of Robert Calder.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v3 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  # Identify Robert Calder and his associated military event
  ?calderEvent a dbo:MilitaryConflict ;
               dbo:participant dbr:Robert_Calder .

  # Identify ""The Triple X's"" as an entity involved in the same military conflict
  ?tripleXs a dbo:Organization ; 
            rdfs:label ""Triple X's""@en .
  
  ?calderEvent dbo:participant ?tripleXs .

  # Find the commander of this specific war
  ?calderEvent dbo:commander ?commander .
}
```",5,9,6,3,2,3,3,71,0,0,1,0,0.0,0
392,2,train,Give me the figure known as Der Blau.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/nickname> ""Der Blau""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?painting ?artist ?creationDate WHERE {
  ?painting a dbo:Painting ;
           rdfs:label ""Der Blau""@en ;
           dbo:creator ?artist ;
           dbo:created ?creationDate .
}
```",1,1,2,1,1,2,2,9,0,0,3,0,0.0,0
633,12,train,Give me the spouse of Renée of Bourbon and parent of the father of Dorothea of Lorraine.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Renée_of_Bourbon> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Dorothea_of_Lorraine> <http://dbpedia.org/property/father> ?v0 . },"```sparql
SELECT ?spouse WHERE {
  # Find Renée of Bourbon's spouse
  ?renée dbr:Renée_of_Bourbon .
  ?renée dbo:spouse ?spouse .

  # Find Dorothea of Lorraine and her father
  ?dorothea dbr:Dorothea_of_Lorraine .
  ?dorothea dbo:father ?father .

  # Find the parent (grandfather) of Dorothea's father
  ?father dbo:parent ?grandfather .

  # Check if Renée's spouse is the same as Dorothea's grandfather
  FILTER(?spouse = ?grandfather)
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
203,10,train,Give me the commander in French campaign in Egypt and Syria and military force of Battle of Cape Finisterre (1805).,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
# Query for the commander of the French Campaign in Egypt and Syria
SELECT ?commander WHERE {
  ?campaign dbo:wikiPageRedirects db:Campaign_in_Egypt_and_Syria.
  ?campaign dbo:commander ?commander.
}

UNION

# Query for military forces involved in the Battle of Cape Finisterre (1805)
SELECT DISTINCT ?force WHERE {
  ?battle dbo:wikiPageRedirects db:Battle_of_Cape_Finisterre_(1805).
  ?battle dbo:militaryForce ?force.
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
103,3,train,Give me the person born as Richard Grant Esterhuysen.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?officialName WHERE {
  ?person dbo:birthName ""Richard Grant Esterhuysen"" .
  OPTIONAL { ?person foaf:name ?officialName }
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
58,17,train,Give me the producer of the movie with the award of Ian Gregson (poet) and spouse of Linda Bruckheimer.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ian_Gregson_(poet)> <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Linda_Bruckheimer> . ?v3 <http://dbpedia.org/property/starring> ?v0 . ?v3 <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  ?movie dbo:awardRecipient dbr:Ian_Gregson ;
         dbo:producer ?producer .
  ?producer foaf:name ""Don Bruckheimer""@en .
}
```",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
412,19,train,Give me the war of Konstantinos Ventiris and war of the leader of National Party of Greece and entity in Athens.,SELECT ?result WHERE { <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . ?v1 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war1Label ?war2Label ?entityInAthensLabel WHERE {
  # War of Konstantinos Ventiris (Greek Civil War)
  VALUES (?ventirisWar) { 
    dbr:Greek_Civil_War
  }
  ?ventirisWar rdfs:label ?war1Label .

  # World War II related to Ioannis Metaxas and the National Party of Greece
  VALUES (?metaxasWar) {
    dbr:World_War_II
  }
  ?metaxasWar rdfs:label ?war2Label .

  # Entity in Athens (Acropolis)
  VALUES (?entityInAthens) {
    dbr:Acropolis_of_Athens
  }
  ?entityInAthens rdfs:label ?entityInAthensLabel .
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
89,28,train,Give me the spouse of Saw Shwe Khet and child of the parent of Min Hla Htut of Pyakaung and predecessor of Myat Hpone Pyo.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Min_Hla_Htut_of_Pyakaung> . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse ?child WHERE {
  # Find Min Hla Htut and his parent
  ?minHlaHtut a dbo:Person ;
              foaf:name ""Min Hla Htut""@en ;
              dbo:birthPlace dbr:Pyakaung .
  
  ?parent dbo:child ?minHlaHtut .

  # Find the spouse of Saw Shwe Khet
  ?sawShweKhet a dbo:Person ;
               foaf:name ""Saw Shwe Khet""@en .
  
  ?sawShweKhet dbo:spouse ?spouse .

  # Find the predecessor of Myat Hpone Pyo
  ?myatHponePyo a dbo:Person ;
                foaf:name ""Myat Hpone Pyo""@en .
  
  ?predecessor dbo:succeededBy ?myatHponePyo .

  # Match the spouse with the child and predecessor
  FILTER (?spouse = ?child && ?spouse = ?predecessor)
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
816,25,train,Give me the parent of the child of Allan Arbus and parent of Amy Arbus.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
SELECT DISTINCT ?child ?parent WHERE {
  # Find children of Allan Arbus
  ?allan dbo:spouse dbr:Amy_Arbus ;
         dbo:child ?child .
  
  # Find children of Amy Arbus
  ?amy dbo:spouse dbr:Allan_Arbus ;
        dbo:child ?child .

  # Determine the parent(s) of that child
  OPTIONAL { ?child dbo:parent ?parent . }
}
```",3,3,4,2,2,3,3,71,0,0,2,0,0.0,0
353,17,train,"Who is the child of the spouse, that is a royalty, of Constance of Burgundy?",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?result <http://dbpedia.org/property/father> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?child WHERE {
  # Step 1: Identify Constance of Burgundy
  ?constance a dbo:Person ;
             foaf:name ""Constance of Burgundy""@en .
  
  # Step 2: Find her spouse(s)
  ?constance dbo:spouse ?spouse .

  # Step 3: Determine if the spouse is royalty
  ?spouse a ?royalClass .
  FILTER (
    ?royalClass IN (dbo:Monarch, dbo:RoyalFamilyMember) ||
    EXISTS { ?spouse dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Princess"", ""i"") }
  )

  # Step 4: Identify the children of this royal spouse
  ?spouse dbo:child ?child .
}
```",2,3,3,2,1,3,3,71,0,0,3,0,0.0,0
782,2,train,Give me the associated musical artist of Nick Curran.,SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  dbr:Nick_Curran dbo:associatedMusicalArtist ?artist .
}
```",1,1,2,1,1,3,3,71,3,0,0,1.0,1.0,1.0
38,13,train,"Give me the author of the work, that is a work and a written work and American and a book, of the commander, that is an office holder and a politician, in North Carolina Air National Guard.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/property/author> ?v0 . ?v1 <http://dbpedia.org/ontology/author> ?result . <http://dbpedia.org/resource/North_Carolina_Air_National_Guard> <http://dbpedia.org/ontology/commander> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?book WHERE {
  ?person a dbo:OfficeHolder ;
          a dbo:Politician ;
          dbo:commanderOf dbr:North_Carolina_Air_National_Guard .
  
  ?work dbo:author ?person ;
        a dbo:Book, dbo:WrittenWork ;
        dbo:country dbr:United_States .

  BIND(?person AS ?author)
  BIND(?work AS ?book)
}
```",3,9,4,3,1,3,2,20,0,0,1,0,0.0,0
943,44,train,"Give me the reference to the alter ego of The Shadow and father of the father, that is a royalty and an office holder, of Na'od and child of Dawit I.",SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . },"```sparql
SELECT ?person WHERE {
  ?person dbo:spouse ?dawitI .
  ?dawitI foaf:name ""Dawit I""@en .
  ?person dbo:child ?naod .
  ?naod foaf:name ""Na'od""@en .
  ?naod dbo:title dbr:King_of_Ethiopia .
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
468,8,train,"Give me the child of the father, that is a royalty, of Peter IV of Aragon.",SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?title WHERE {
  # Identify Peter IV of Aragon
  dbr:Peter_IV_of_Aragon dbo:child ?child .
  
  # Check if the child has a royal title
  OPTIONAL { ?child dbo:title ?title . FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"")) }
}
```",2,3,3,2,1,3,2,20,0,7,3,0.0,0.0,0
347,55,train,"Give me the child of the father of Cecilia Renata of Austria and father of the child of Ferdinand III, Holy Roman Emperor and commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).","SELECT ?result WHERE { <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v2 . ?v3 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v3 . ?v5 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?child ?event WHERE {
  ?ferdinand3 rdf:type dbo:Person ;
              foaf:name ""Ferdinand III, Holy Roman Emperor"" .
  
  ?ferdinand3 dbo:spouse ?ceciliaRenata .
  ?ceciliaRenata foaf:name ""Cecilia Renata of Austria"" .

  ?ferdinatChild dbo:parent ?ferdinand3 ;
                 rdf:type dbo:Person .

  OPTIONAL {
    ?event dbo:relatedTo ?dragoonRegiment ;
           rdf:type dbo:Event ;
           dbo:wikiPageRedirects ?televisionShow .
    
    ?dragoonRegiment foaf:name ""2nd Dragoon Regiment (France)"" .
  }

  FILTER EXISTS { ?ferdinatChild foaf:name ?childName }
}
```",6,9,7,2,3,3,3,71,0,0,1,0,0.0,0
595,1,train,Give me the author of Back to Work (book).,SELECT ?result WHERE { <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . },"```sparql
SELECT ?author WHERE {
  ?book dcterms:title ""Back to Work""@en .
  ?book dbo:author ?author .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
609,25,train,Give me the birth place of the author of El Deafo and birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . },"```sparql
# Query for the birth place of Cece Bell, author of El Deafo
SELECT ?birthPlace WHERE {
  ?author foaf:name ""Cece Bell""@en .
  ?author dbo:work ?work .
  ?work rdfs:label ""El Deafo""@en .
  ?author dbo:birthPlace ?birthPlace .
} LIMIT 1

UNION

# Query for the birth place of Glenn Youngkin
SELECT ?birthPlace WHERE {
  ?person foaf:name ""Glenn Youngkin""@en .
  ?person dbo:birthPlace ?birthPlace .
} LIMIT 1
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
687,22,train,"Give me the player in Juan Carlos Molina (footballer) and team of the person born, that is a soccer player and a soccer manager, on 1979-11-03.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> ?v1 . <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. }","```sparql
SELECT ?person ?team WHERE {
  # Find the person born on November 3, 1979, who is both a soccer player and manager
  ?person dbo:birthDate ""1979-11-03""^^xsd:date ;
          rdf:type dbo:SoccerPlayer ;
          rdf:type dbo:SoccerManager .
  
  # Get Juan Carlos Molina's team during that time
  ?molina dbo:birthDate ?birthDateMolina ;
          rdf:type dbo:SoccerPlayer .
  
  FILTER(?birthDateMolina <= ""1979-11-03""^^xsd:date)
  
  OPTIONAL {
    ?molina dbo:team ?team .
  }
}
```",3,5,4,2,2,3,3,71,1,30475,0,3.281270507940675e-05,1.0,6.562325688223906e-05
384,6,train,"Give me the party of the person born, that is an office holder and a politician, as Bruno Daniel Marie Paul Retailleau.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/property/birthName> ""Bruno Daniel Marie Paul Retailleau""@en . ?v1 <http://dbpedia.org/ontology/party> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?party WHERE {
  ?person rdfs:label ""Bruno Daniel Marie Paul Retailleau""@en .
  FILTER (CONTAINS(LCASE(str(?person)), LCASE(""bruno retailleau"")))
  
  # Ensure the person is a politician
  ?person dbo:occupation dbr:Politician .

  # Ensure the person is an office holder
  ?person dbo:officeHolderOf ?office .

  # Retrieve political party information
  ?person dbo:party ?party .
}
```",2,4,3,2,1,2,2,9,0,0,1,0,0.0,0
531,4,train,Give me the residence of Alberto Ruiz-Gallardón.,SELECT ?result WHERE { <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?residence WHERE {
  ?person a dbo:Politician ;
          foaf:name ""Alberto Ruiz-Gallardón""@en .
  OPTIONAL { ?person dbo:residence ?residence . }
}
```",1,1,2,1,1,3,3,71,2,0,0,1.0,1.0,1.0
119,25,train,"Give me the tenant of the administration, that is Spanish, of Spanish Socialist Workers' Party and tenant of Spain.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://dbpedia.org/property/leaderParty> <http://dbpedia.org/resource/Spanish_Socialist_Workers'_Party> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:party dbr:Spanish_Socialist_Workers'_Party .
  ?person dbo:officeTitle dbr:Prime_Minister_of_Spain .
  ?person dbo:country dbr:Spain .
}
```",3,4,4,2,2,3,3,71,0,0,23,0,0.0,0
609,21,train,Give me the birth place of Cece Bell and birth place of the awardee of List of awards and nominations received by Vince Gilligan.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Vince_Gilligan> . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for Cece Bell's birthplace
SELECT ?birthPlace WHERE {
  dbpedia:Cece_Bell dbo:birthPlace ?birthPlace .
}

# Query for Bryan Cranston's birthplace (related to Vince Gilligan through ""Breaking Bad"")
SELECT ?birthPlace WHERE {
  dbpedia:Bryan_Cranston dbo:birthPlace ?birthPlace .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
782,43,train,"Give me the reference to The Fabulous Thunderbirds and associated musical artist of Nick Curran and band of the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/bandMember> ?v4 . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember WHERE {
    # Step 1: Identify The Fabulous Thunderbirds
    dbr:The_Fabulous_Thunderbirds a dbo:Band .

    # Step 2: Find Nick Curran's association with The Fabulous Thunderbirds
    OPTIONAL { 
        ?association dbo:associatedMusicalArtist dbr:Nick_Curran .
        ?association dbo:musicalArtist dbr:The_Fabulous_Thunderbirds .
    }

    # Step 3: Identify band members of Nick Curran
    ?curranBandMember dbo:bandMemberOf dbr:Nick_Curran .

    # Step 4: Filter for the person born on March 30, 1945
    ?curranBandMember dbo:birthday ""1945-03-30""^^xsd:date .
    
    # Ensure this person is recognized as a musical artist
    ?curranBandMember a dbo:MusicalArtist .

    # Step 5: Return the band member who matches all criteria
    BIND(?curranBandMember AS ?bandMember)
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
557,36,train,"Give me the producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues and professional in .","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v0 . }","```sparql
SELECT ?producer WHERE {
  ?movie dcterms:title ""Natural Born Killers""@en .
  ?movie dbo:director ?director .
  ?director foaf:name ""Oliver Stone""@en .
  ?movie dbo:productionCompany ?company .
  ?company dbo:founder ?producer .
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
89,16,train,"Give me the father, that is a royalty, of the child, that is a royalty, of Saw Shwe Khet.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/property/father> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT DISTINCT ?father WHERE {
  # Identify Saw Shwe Khet
  ?sawShweKhet dbo:wikiPageID ""Saw_Shwe_Khet"" .
  
  # Find children of Saw Shwe Khet who are royalty
  ?child dbo:parent ?sawShweKhet ;
         dbo:royalTitle ?title .

  # For each royal child, find their father who is also a royalty
  ?father dbo:child ?child ;
          dbo:royalTitle ?fatherTitle .
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
816,47,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of the professional in the profession of Eugène Cattin.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v4 . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v4 <http://dbpedia.org/property/occupation> ?v0 . ?v2 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Step 1: Find movies with Herschel Bernardi
SELECT ?movie WHERE {
    ?movie dbo:starring dbpedia:Herschel_Bernardi .
}

# Step 2: Determine Eugène Cattin's profession and its parent category
SELECT DISTINCT ?parentProfession WHERE {
    ?eugeneCattin foaf:profession ?profession .
    ?profession rdfs:subClassOf+ ?parentProfession .
    FILTER(STRSTARTS(LCASE(?eugeneCattin), ""eugène_cattin""))
}

# Step 3: Find the actor from the movie who has a profession matching the parent category
SELECT DISTINCT ?actor WHERE {
    # Assuming we have identified a specific movie and parentProfession from previous steps
    ?movie dbo:starring ?actor .
    ?actor foaf:profession ?actorProfession .
    ?actorProfession rdfs:subClassOf* ?parentProfession .
}
```

Note: The above SPARQL queries are structured to be executed in sequence, with the results of each step feeding into the next. You may need to manually adjust or combine these steps based on actual query execution and intermediate results.",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
68,13,train,"Give me the father of the parent of Dorothea of Denmark, Electress Palatine and child of Maximilian I, Holy Roman Emperor.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Maximilian_I,_Holy_Roman_Emperor> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v0 . }","```sparql
SELECT ?father WHERE {
  wd:Q123456 wdt:P22 ?mother . # Dorothea of Denmark's mother
  ?mother wdt:P31 wd:Q5 .     # Ensure the parent is a human
  ?mother wdt:P25 wd:Q78910 . # Maria of Jülich-Berg (Dorothea's mother)
  
  wd:Q78910 wdt:P22 ?fatherOfMaria . # Father of Maria of Jülich-Berg
  
  wd:Q123456 wdt:P22 ?fatherOfDorothea . # Dorothea's father
  ?fatherOfDorothea wdt:P31 wd:Q5 .
  
  ?fatherOfDorothea wdt:P25 ?adolf . # John II, Duke of Schleswig-Holstein-Sonderburg
  
  ?adolf wdt:P22 ?adolfFather . # Father of Adolf
  ?adolfFather rdfs:label ""Adolf""@en .
  
  FILTER(CONTAINS(LANG(?adolfFatherLabel), ""en""))
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
782,11,train,Give me the reference to the real name of The Fabulous Thunderbirds.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v0 . <http://dbpedia.org/resource/The_Fabulous_Thunderbirds> <http://xmlns.com/foaf/0.1/name> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?realName WHERE {
  ?band foaf:name ""The Fabulous Thunderbirds""@en .
  OPTIONAL { ?band dbo:officialName ?realName . }
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
668,55,train,Give me the professional in the profession of Rod Argent and person born as the birth name of Joey B and associated musical artist of the person born as Elorm Kabu Amenyah.,"SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/birthName> ""Elorm Kabu Amenyah""@en . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person WHERE {
  # Rod Argent's profession
  ?argent dbo:profession dbr:Keyboardist ;
          foaf:name ""Rod Argent"" .
  
  # Joey B's birth name
  ?joeyB foaf:name ""Joseph Benjamin Adu Boaitey""@en .

  # Stonebwoy (Elorm Kabu Amenyah)
  ?stonebwoy dbo:birthName dbr:Stonebwoy ;
             foaf:name ""Stonebwoy"" .
  
  # Find a person matching all criteria
  ?person dbo:profession ?argentProfession ;
          foaf:name ?joeyBName ;
          dbo:associatedMusicalArtist ?stonebwoy .

  FILTER (?argentProfession = dbr:Keyboardist && 
          ?joeyBName = ""Joseph Benjamin Adu Boaitey""@en)
}
```",6,6,7,2,3,3,3,71,0,0,1,0,0.0,0
816,38,train,Give me the parent of the child of Allan Arbus and parent of the professional in Photographer.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v3 . ?v2 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Allan_Arbus> <http://dbpedia.org/ontology/child> ?v2 . ?v3 <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?parent1 ?parent2 WHERE {
  # Find Allan Arbus's child
  ?child dbo:parent dbr:Allan_Arbus .
  
  # Find the parent of that child
  ?child dbo:parent ?parent1 .

  # Find a professional in Photography
  ?photographer dbp:occupation ""Photographer""@en .
  
  # Find the parent of that photographer
  ?photographer dbo:parent ?parent2 .
}
```",4,4,5,2,2,3,3,71,2,40,0,0.047619047619047616,1.0,0.0909090909090909
246,14,train,"Give me the parent of the child, that is a royalty, of the child, that is a royalty, of Princess Muna al-Hussein.",SELECT ?result WHERE { <http://dbpedia.org/resource/Princess_Muna_al-Hussein> <http://dbpedia.org/ontology/child> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v2 . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?parent WHERE {
  # Step 1: Identify Princess Muna al-Hussein
  wd:Q1234567 wdt:P40 ?child . # Q1234567 is a placeholder for the DBpedia ID of Princess Muna al-Hussein

  # Step 2: Find her children who are royalty
  ?child wdt:P31/wdt:P279* wd:Q11850 . # P31 (instance of) with subclass hierarchy to find royalty (Q11850)

  # Step 3: Select one child and identify their parent
  ?child wdt:P22 ?parent .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia ID for Princess Muna al-Hussein. The query assumes that the property `P40` is used to denote children, `P31` denotes instance of (with subclass hierarchy), and `P22` denotes parent.",3,5,4,3,1,3,2,20,0,0,5,0,0.0,0
295,3,train,"Give me the work, that is a musical work, of Apache Indian.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Apache_Indian> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  VALUES ?artist { dbr:Apache_Indian }
  ?artist dbo:work ?work .
}
```",1,2,2,1,1,3,2,20,0,0,1,0,0.0,0
557,50,train,"Give me the producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v3 . ?v0 <http://dbpedia.org/ontology/knownFor> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v4 <http://dbpedia.org/ontology/producer> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
# Step 1: Find the actor for ""Johnny Doughboy""
SELECT ?actor WHERE {
  ?film dbp:title ""Johnny Doughboy""@en .
  ?film dbo:starring ?actor .
}

# Step 2: Find the claim to fame of that actor and its producer
SELECT ?work ?producer WHERE {
  # Assuming we found the actor from step 1, replace <Actor> with actual URI
  ?actor dbo:knownFor ?work .
  ?work dbo:productionCompany ?company .
  ?company dbo:founder ?producer .
}

# Step 3: Find Janet Gaynor's notable movie where she was a producer
SELECT ?movie WHERE {
  wd:Q12345 dbo:produced ?movie . # Replace Q12345 with Janet Gaynor's DBpedia URI
  ?movie rdf:type dbo:Film .
}

# Step 4: Find the producer of that movie
SELECT ?producer WHERE {
  # Assuming we found the movie from step 3, replace <Movie> with actual URI
  <Movie> dbo:productionCompany ?company .
  ?company dbo:founder ?producer .
}

# Final Step: Find common producer between both works
SELECT DISTINCT ?commonProducer WHERE {
  { 
    # Replace <Work1> and <Work2> with URIs from previous queries
    <Work1> dbo:productionCompany ?company1 .
    ?company1 dbo:founder ?commonProducer .
  }
  UNION
  {
    <Work2> dbo:productionCompany ?company2 .
    ?company2 dbo:founder ?commonProducer .
  }
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
103,56,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant and professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and professional in Actor.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v0 . ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?v2 <http://dbpedia.org/property/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Richard E. Grant in a movie that became a TV show
  ?movie dbo:starring dbr:Richard_E._Grant .
  
  # The Princess Bride as the movie/show
  ?movie rdfs:label ""The Princess Bride""@en .

  # Cary Elwes co-starred with Richard E. Grant
  ?movie dbo:starring ?actor .
  
  # Cary Elwes played Lamont Cranston/The Shadow in video games
  OPTIONAL {
    ?actor dbo:profession dbr:Actor .
    ?videoGame dbo:character dbr:Lamont_Cranston ;
               dbo:voiceActing ?actor .
  }
  
  FILTER(?actor != dbr:Richard_E._Grant)
}
```",6,8,7,3,3,3,3,71,0,0,9,0,0.0,0
414,4,train,Give me the reference to Nobel Prize in Physics.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Nobel Prize in Physics""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?entity ?label ?awardedBy ?firstAwarded WHERE {
  ?entity a dbo:NobelPrizeInPhysics .
  ?entity rdfs:label ?label .
  FILTER (lang(?label) = 'en')
  
  OPTIONAL { ?entity dbo:awardedBy ?awardedBy . }
  OPTIONAL { ?entity dbo:firstAwarded ?firstAwarded . }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
687,58,train,"Give me the player in Juan Carlos Molina (footballer) and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v5 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://dbpedia.org/ontology/coach> ?v2 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. },"```sparql
# Query to get Juan Carlos Molina's team
SELECT ?team WHERE {
  dbpedia:Juan_Carlos_Molina_(footballer) dbo:playsFor ?team .
}

# Query to find actors in ""All or Nothing: Manchester City"" who are also soccer players and athletes
SELECT DISTINCT ?actor WHERE {
  ?series dbo:subject dbpedia:All_or_Nothing:_Manchester_City .
  ?series dbo:starring ?actor .
  ?actor rdf:type dbo:SoccerPlayer .
  ?actor rdf:type dbo:Athlete .
}

# Query to get Marcelo Sarmiento's birthday and teams
SELECT DISTINCT ?birthday ?team WHERE {
  dbpedia:Marcelo_Sarmiento dbo:birthday ?birthday .
  OPTIONAL { dbpedia:Marcelo_Sarmiento dbo:playsFor ?team . }
  OPTIONAL { dbpedia:Marcelo_Sarmiento dbo:managedBy ?team . }
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
203,44,train,"Give me the commander in French campaign in Egypt and Syria and military force of the force, that is an event and a societal event, of Robert Calder and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v4 . ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?militaryForce1 ?militaryForce2 WHERE {
  # Find the commander of the French campaign in Egypt and Syria
  ?campaign dbo:commander ?commander .
  ?campaign rdfs:label ""French Expedition to Egypt and Syria""@en .

  # Find Robert Calder's military force involved in a war
  ?calder dbr:Robert_Calder .
  ?calder dbo:militaryConflict ?militaryForce1 .
  ?militaryForce1 rdf:type dbo:MilitaryConflict .

  # Ensure the military conflict is also an event
  ?militaryForce1 rdf:type dbo:Event .

  # Find William Bayne's military force involved in a war
  ?bayne dbr:William_Bayne_(Royal_Navy_officer) .
  ?bayne dbo:militaryConflict ?militaryForce2 .
  ?militaryForce2 rdf:type dbo:MilitaryConflict .

  # Ensure the military conflict is also an event
  ?militaryForce2 rdf:type dbo:Event .
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
859,6,train,Give me the associated musical artist of Phantomsmasher and band member of Human Remains (band).,SELECT ?result WHERE { <http://dbpedia.org/resource/Phantomsmasher> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Human_Remains_(band)> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person WHERE {
  ?person a dbo:MusicalArtist .
  OPTIONAL { ?person foaf:name ""Phantomsmasher"" . }
  OPTIONAL { 
    ?band a dbo:Band ;
          dbo:member ?person .
    FILTER (str(?band) = str(dbr:Human_Remains_(band)))
  }
}
```",2,2,3,1,2,3,2,20,0,0,3,0,0.0,0
468,0,train,Give me the reference to Peter IV.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Peter IV""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?description WHERE {
  ?person a dbo:Monarch .
  ?person rdfs:label ?name .
  FILTER(CONTAINS(LCASE(?name), ""peter iv"") && CONTAINS(LCASE(STR(?person)), ""aragon""))
  OPTIONAL { ?person dbo:description ?description }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
159,27,train,"Give me the commander in the war, that is a television show and a societal event, of the military force of Battle of Vienna.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?v2 . ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Vienna> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  ?tvShow dbo:title ""Vikings""@en .
  ?tvShow dbo:genre dbr:Television_drama_series .
  ?character dbo:portrayedBy ?actor .
  ?character dbo:roleName ?role .
  ?role dbo:inMediaWork ?tvShow .
  ?tvShow dbo:subject dbr:Battle_of_Vienna .
  ?character rdfs:label ?commander .
  FILTER (lang(?commander) = 'en')
}
```",3,5,4,3,1,3,3,71,0,0,40,0,0.0,0
628,12,train,Give me the native of Florida and person born as Ackquille Jean Pollard.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . }","```sparql
SELECT ?nativeOfFlorida ?personName WHERE {
  ?s dbpedia-owl:birthPlace dbr:Florida .
  ?s rdfs:label ?nativeOfFlorida .
  FILTER (lang(?nativeOfFlorida) = 'en')
  
  OPTIONAL {
    ?ackquille dbp:birthName ""Ackquille Jean Pollard""@en .
    ?ackquille rdfs:label ?personName .
    FILTER (lang(?personName) = 'en')
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
347,51,train,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v1 . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/property/father> ?v2 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?royalChildOfMariaAnna ?childOfFerdinandIII WHERE {
  # Maria Anna of Bavaria's children who are royalty
  ?child a dbo:Monarch ;
        dbo:mother dbr:Maria_Anna_of_Bavaria_(1574-1616) .
  
  # Ferdinand III's children
  ?ferdinandChild a dbo:Person ;
                  dbo:father dbr:Ferdinand_III,_Holy_Roman_Emperor .

  # Return the results
  BIND(?child AS ?royalChildOfMariaAnna)
  BIND(?ferdinandChild AS ?childOfFerdinandIII)
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
39,11,train,Give me the professional in the profession of Sam Concepcion.,SELECT ?result WHERE { <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  # Find Sam Concepcion's profession as an actor
  dbr:Sam_Concepcion dbo:profession dbr:Actor .
  
  # Find other individuals with the same profession
  ?person dbo:profession dbr:Actor .
  
  # Exclude Sam Concepcion from the results
  FILTER (?person != dbr:Sam_Concepcion)
  
  # Get the name of these individuals
  ?person rdfs:label ?name .
  
  # Filter to ensure we get English labels only
  FILTER (LANG(?name) = 'en')
}
ORDER BY ?name
```",2,2,3,2,1,3,3,71,0,0,45131,0,0.0,0
119,37,train,"Give me the tenant of Santiago de Compostela and tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v3 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v0 <http://dbpedia.org/property/residence> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . },"```sparql
# Query for the tenant (mayor) of Santiago de Compostela
SELECT ?mayor WHERE {
  wd:Q1204 dbo:mayor ?person .
  ?person foaf:name ?mayor .
}

UNION

# Confirming Spain as a country where Spanish citizens reside
SELECT ""Spain"" AS ?country WHERE {
  # This is a static selection since the question implies Spain itself.
}
```",4,6,5,3,2,3,3,71,0,0,4,0,0.0,0
361,14,train,Give me the professional in the alter ego of The Shadow and professional in Actor.,"SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?result <http://dbpedia.org/property/occupation> ?v1 . }","```sparql
SELECT ?person WHERE {
  # Find Orson Welles who is associated with ""The Shadow""
  ?shadowCharacter rdfs:label ""The Shadow""@en .
  ?radioShow dbo:character ?shadowCharacter ;
             dbo:actor ?person .
  
  # Ensure the person has a professional career as an actor
  ?person rdf:type dbo:Actor .
}
```",3,3,4,2,2,2,3,28,0,0,4210,0,0.0,0
297,6,train,Give me the institution in the administration of Brian Kemp.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/state> ?v1 . ?v1 <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Brian_Kemp> . },"```sparql
SELECT ?institution WHERE {
  ?governor foaf:name ""Brian Kemp""@en .
  ?governor dbo:positionTitle dbr:Governor_of_Georgia .
  ?governor dbo:officeLocation ?location .
  ?location dbo:administrativeArea dbr:Georgia_(U.S._state) .
  ?governor dbo:affiliation ?institution .
  FILTER(?institution != """")
}
```",2,2,3,2,1,2,2,9,0,0,941,0,0.0,0
246,7,train,"Give me the parent of the child, that is a royalty, of Prince Faisal bin Hussein.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child ?parentLabel WHERE {
  ?person rdfs:label ""Prince Faisal bin Hussein""@en .
  ?person dbo:child ?child .
  ?child dbo:parent ?parent .
  ?parent rdfs:label ?parentLabel .
}
```",2,3,3,2,1,3,2,20,0,6,2,0.0,0.0,0
737,18,train,"Give me the child of Archduchess Margarete Sophie of Austria and predecessor of Carl, Duke of Württemberg and child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Carl,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:parent dbr:Archduchess_Margarete_Sophie_of_Austria .
  ?person dbo:parent dbr:Albrecht,_Duke_of_Württemberg .
  ?person dbo:successor dbr:Claude_Frederick_Carl,_Duke_of_Württemberg .
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
143,13,train,"Give me the actor of the show, that is a movie, with the reference to Afeez Oyetoro.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""Afeez Oyetoro""@en . ?v1 <http://dbpedia.org/ontology/starring> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://dbpedia.org/property/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?actor WHERE {
  ?person a dbo:Actor ;
          foaf:name ""Afeez Oyetoro""@en .
  
  ?film dbo:starring ?person ;
        a ?type1 .

  ?show dbo:starring ?person ;
        a ?type2 .

  FILTER(?type1 = dbo:Film || ?type1 = dbo:Movie)
  FILTER(?type2 = dbo:TVSeries || ?type2 = dbo:TelevisionShow)

  BIND(CONCAT(STR(?film), STR(?show)) AS ?work)

  OPTIONAL {
    ?film dbo:starring ?actor .
  }

  OPTIONAL {
    ?show dbo:starring ?actor .
  }
}
```",3,4,4,3,1,3,2,20,0,0,28,0,0.0,0
905,12,train,Give me the child of Stephen V of Hungary and parent of Charles Martel of Anjou.,SELECT ?result WHERE { <http://dbpedia.org/resource/Charles_Martel_of_Anjou> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  ?stephenV dbo:spouse ?mother .
  ?stephenV dbo:child ?child .
  
  ?child dbo:parent dbr:Charles_Martel_of_Anjou .

  FILTER(?stephenV = dbr:Stephen_V_of_Hungary)
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
687,52,train,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and team of Pablo Aimar and player in the person born, that is an athlete, on the birthday of Marty Pollio.",SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v3 . ?v2 <http://dbpedia.org/ontology/birthDate> ?v3 . ?v5 <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://dbpedia.org/ontology/team> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?player WHERE {
  # Find actors in ""All or Nothing: Manchester City""
  ?actor dbo:spouse ?person .
  ?person dbo:birthDate ?birthday .
  
  # Ensure the actor is a soccer player and athlete
  ?actor dbo:occupation dbr:Soccer_player ;
         dbo:occupation dbr:Athlete .

  # Check if they played for a team with Pablo Aimar
  ?team dbo:member ?pabloAimar .
  ?pabloAimar rdfs:label ""Pablo Aimar""@en .
  ?actor dbo:playsForTeam ?team .

  # Ensure the actor shares a birthday with Marty Pollio and is an athlete
  ?martyPollio dbo:birthDate ?birthday ;
               rdfs:label ""Marty Pollio""@en .
  
  FILTER(CONTAINS(LCASE(?actor), ""all or nothing: manchester city""))
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
628,10,train,Give me the native of Florida and band member of Uncle Murda.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . },"```sparql
SELECT ?member ?birthPlace WHERE {
  ?band dcterms:subject dbc:Musical_groups_from_New_York_City .
  ?band dbo:musicalArtist ?artist .
  ?artist foaf:name ""Uncle Murda"" .
  ?artist dbo:member ?member .
  
  OPTIONAL { 
    ?member dbo:birthPlace ?birthPlace .
    FILTER (CONTAINS(LCASE(str(?birthPlace)), ""florida""))
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
353,23,train,"Give me the child of the parent of the child, that is a royalty, of Roger II of Sicily.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?v2 . ?v0 <http://dbpedia.org/ontology/child> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . },"```sparql
SELECT DISTINCT ?grandchild WHERE {
  # Step 1: Identify Roger II of Sicily
  wd:Q1234 dbo:spouse ?parent . # Assuming Q1234 is the DBpedia ID for Roger II

  # Step 2: Find a child of Roger II
  ?child dbo:parent wd:Q1234 .

  # Step 3: Determine the parent of that child (grandchild of Roger II)
  ?grandchild dbo:parent ?child .

  # Step 4: Check if the grandchild is royalty
  ?grandchild wdt:P31/wdt:P279* wd:Q215627 . # Q215627 represents ""royalty""
}
```",3,4,4,3,1,3,3,71,0,0,7,0,0.0,0
39,49,train,"Give me the professional in the profession of Sam Concepcion and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v0 . <http://dbpedia.org/resource/Sam_Concepcion> <http://dbpedia.org/property/occupation> ?v2 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
# Step 1: Find Sam Concepcion's profession
SELECT ?profession WHERE {
  dbpedia:Sam_Concepcion dbo:occupation ?profession .
}

# Step 2: Find the band associated with Sam Concepcion
SELECT ?band WHERE {
  ?band dbo:member dbpedia:Sam_Concepcion .
}

# Step 3: Get Bob Thompson's birth name
SELECT ?birthName WHERE {
  dbpedia:Bob_Thompson_musical_artist foaf:name ?birthName .
  FILTER(CONTAINS(LCASE(?birthName), ""born""))
}

# Step 4: Find a musical artist with the same birth name as Bob Thompson
SELECT DISTINCT ?artist WHERE {
  ?artist dbo:birthName ?birthName .
  ?person foaf:name ?birthName .
  FILTER(CONTAINS(LCASE(STR(?person)), ""bob thompson""))
}
```",5,6,6,3,2,3,3,71,0,0,4,0,0.0,0
103,48,train,"Give me the professional in the alter ego of The Shadow and actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?v2 <http://dbpedia.org/property/starring> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
    ?movie dbo:starring dbr:Orson_Welles .
    ?movie dbo:title ""The Shadow"" .
    
    OPTIONAL { 
        ?tvShow dbo:basedOn ?movie .
        ?tvShow dbo:starring dbr:Orson_Welles .
    }
}
```",5,6,6,3,2,3,3,71,0,0,13,0,0.0,0
78,1,train,Give me the associated musical artist of Billy Lyall.,SELECT ?result WHERE { <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  VALUES ?lyall { dbr:Billy_Lyall }
  ?lyall dbo:associatedBand ?artist .
}
```",1,1,2,1,1,2,3,28,3,0,0,1.0,1.0,1.0
871,32,train,"Give me the parent of the child of Frederick Stanley, 16th Earl of Derby and parent of the awardee of Commander of the Royal Victorian Order.","SELECT ?result WHERE { <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?result <http://dbpedia.org/ontology/child> ?v0 . }","```sparql
SELECT ?grandparent WHERE {
  # Frederick Stanley, 16th Earl of Derby
  wd:Q1234567 wdt:P31 wd:Q5; # Assuming Q1234567 is the DBpedia ID for Frederick Stanley

  # His child
  wd:Q1234567 wdt:P40 ?child. 

  # The child's parent (Frederick Stanley)
  ?child wdt:P22 wd:Q1234567.

  # The child of that child (grandchild of Frederick Stanley)
  ?child wdt:P40 ?grandchild.

  # Check if the grandchild has received the CVO
  ?grandchild wdt:P166 wd:Q1234568. # Assuming Q1234568 is the DBpedia ID for Commander of the Royal Victorian Order

  # The parent of this grandchild (the child's child)
  ?grandchild wdt:P22 ?parent.

  # Finally, find the parent of that parent
  ?parent wdt:P22 ?grandparent.
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
375,9,train,"Give me the movie, that is a work and a television show, with the person deceased, that is an artist and a musical artist, on 2020-06-18.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/deathDate> ""2020-06-18""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/property/starring> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?movie WHERE {
  ?artist a dbo:Artist ;
          dbo:deathDate ""2020-06-18""^^xsd:date ;
          dbo:musicalArtist true .
  
  ?work dbo:creator ?artist ;
        a (dbo:Film|dbo:TelevisionShow) .

  ?movie dbo:title ?title ;
         dbo:wikiPageRedirects ?work .

  FILTER EXISTS { ?work dbo:abstract ?abstract . }
}
```",2,6,3,2,1,3,2,20,0,0,1,0,0.0,0
59,6,train,"Give me the manager of the player, that is a sports club and a soccer club, in Jamie McCunnie.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. <http://dbpedia.org/resource/Jamie_McCunnie> <http://dbpedia.org/ontology/team> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v0 <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX wd: <http://www.wikidata.org/entity/>

SELECT ?manager WHERE {
  ?player wdt:P31 wd:Q33999; # Jamie McCunnie is a football player
          wdt:P106 wd:Q82955. # Occupation as a footballer

  ?player dbo:playsFor ?club.
  
  ?club rdf:type/rdfs:subClassOf* dbo:SoccerClub, dbo:SportsTeam.

  ?club dbo:manager ?manager.
}
```",2,4,3,2,1,2,2,9,0,0,7,0,0.0,0
513,13,train,Give me the entity in the award of the reference to George Hamilton Cameron.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v0 <http://xmlns.com/foaf/0.1/name> ""George Hamilton Cameron""@en . ?result <http://dbpedia.org/ontology/country> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award ?entity WHERE {
  ?person a dbo:Person ;
          foaf:name ""George Hamilton Cameron""@en .
  
  ?person dbo:honoraryTitle ?award .

  OPTIONAL { 
    ?award dbo:recipient ?entity .
  }
}
```",3,3,4,3,1,3,2,20,0,0,87241,0,0.0,0
687,5,train,"Give me the film, that is a work, of Manuel Huerga.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?film WHERE {
  ?film a dbo:Film .
  ?film dbo:director ?person .
  ?person foaf:name ""Manuel Huerga""@en .
}
```",1,2,2,1,1,3,3,71,2,0,1,1.0,0.6666666666666666,0.8
119,34,train,"Give me the tenant of Santiago de Compostela and office of the leader of the administration, that is an event, of Anxo Quintana.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/property/leader> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . ?v1 <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?tenant ?officeEvent WHERE {
  # Find Anxo Quintana's role as a leader of an administration
  ?person dbo:givenName ""Anxo"" ;
          dbo:familyName ""Quintana"" ;
          dbo:positionHeld ?office .
  
  # Filter for the specific office related to Santiago de Compostela
  ?office dbp:location dbr:Santiago_de_Compostela ;
          dbo:endDate ?endDate .

  # Find events related to his office or tenure
  OPTIONAL { ?officeEvent dbo:agent ?person . }

  # Identify the political party (tenant) during his leadership
  ?party dbo:member ?person .
  
  # Filter for relevant time period and location
  FILTER (?endDate > ""2005-01-01""^^xsd:date && ?endDate < ""2011-12-31""^^xsd:date)
  
  BIND(?party AS ?tenant)
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
633,2,train,"Give me the child, that is a royalty, of Antoine, Duke of Lorraine.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Antoine,_Duke_of_Lorraine> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?title WHERE {
  # Identify Antoine, Duke of Lorraine
  VALUES ?parent { dbr:Antoine,_Duke_of_Lorraine }
  
  # Find children of Antoine
  ?child dbo:parent ?parent .
  
  # Check if the child has a royalty-related title
  OPTIONAL { ?child dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Princess|Duke|Duchess"", ""i"") }
  
  # Ensure that we only get children with a relevant title
  FILTER EXISTS { ?child dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Princess|Duke|Duchess"", ""i"") }
}
```",1,2,2,1,1,3,2,20,0,0,2,0,0.0,0
628,11,train,"Give me the band member of the associated musical artist, that is a musical artist, of Bobby Shmurda.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . },"```sparql
SELECT ?member ?memberLabel WHERE {
  # Find the band associated with Bobby Shmurda
  ?band dbo:associatedMusicalArtist dbr:Bobby_Shmurda .
  
  # Get the members of that band
  ?band dbo:bandMember ?member .

  # Check if any member is also a musical artist
  ?member dbo:occupation dbr:Musical_artist .

  # Return the member and their label
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,3,3,2,1,3,3,71,0,0,7,0,0.0,0
609,43,train,"Give me the birth place of the governor, that is a politician, of the birth place, that is a region and an administrative region, of Paulus Powell and birth place of Vince Gilligan and birth place of Cece Bell.",SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/governor> ?v4 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. },"```sparql
# Step 1: Get birth places of Paulus Powell, Vince Gilligan, and Cece Bell
SELECT ?person ?birthPlace WHERE {
  VALUES (?person ?name) { 
    (dbpedia:Paulus_Powell ""Paulus Powell"")
    (dbpedia:Vince_Gilligan ""Vince Gilligan"")
    (dbpedia:Cecily_Bell ""Cece Bell"") 
  }
  ?person foaf:name ?name .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}

# Step 2: Identify common region from the birth places
SELECT DISTINCT ?region WHERE {
  VALUES (?birthPlace) { 
    # Replace with actual URIs obtained from step 1 results
    (dbpedia:Pittsburgh ""Pittsburgh"")
    (dbpedia:Flagstaff ""Flagstaff"")
    (dbpedia:Washington_D.C. ""Washington D.C."") 
  }
  ?birthPlace dbo:partOfRegion ?region .
}

# Step 3: Find the governor of the identified region
SELECT DISTINCT ?governor WHERE {
  # Replace with actual URI obtained from step 2 results
  VALUES (?region) { (dbpedia:Pennsylvania ""Pennsylvania"") } 
  ?governor dbo:governmentRole dbpedia:Governor_of_Pennsylvania .
}

# Step 4: Get the birth place of the governor
SELECT ?birthPlace WHERE {
  # Replace with actual URI obtained from step 3 results
  VALUES (?governor) { (dbpedia:Tom_Wolf ""Tom Wolf"") }
  ?governor dbo:birthPlace ?birthPlace .
}
```",5,8,6,3,3,3,3,71,0,0,1,0,0.0,0
414,8,train,Give me the award of the awardee of Nobel Prize in Physics.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Nobel_Prize_in_Physics> . ?v0 <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name WHERE {
  ?person dbo:award dbo:NobelPrizeInPhysics .
  ?person foaf:name ?name .
}
```",2,2,3,2,1,3,2,20,0,0,87,0,0.0,0
737,34,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria and child of Archduchess Margarete Sophie of Austria.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/property/father> ?v2 . <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v2 . ?result <http://dbpedia.org/ontology/successor> ?v1 . },"```sparql
# Step 1: Find Archduchess Helena of Austria's spouse
SELECT ?spouse WHERE {
  wd:Q123456 wdt:P26 ?spouse .
}

# Step 2: Identify children of the spouse
SELECT DISTINCT ?child WHERE {
  ?spouse wdt:P40 ?child .
  FILTER EXISTS { ?child wdt:P31 wd:Q5 } # Ensure it's a person
}

# Step 3: Filter for royalty status among these children
SELECT DISTINCT ?royalChild WHERE {
  ?child wdt:P106 wd:Q215627 . # Has occupation of monarch
  ?child rdfs:label ?name .
  FILTER (LANG(?name) = ""en"")
}

# Step 4: Find the predecessor of this royal child
SELECT DISTINCT ?predecessor WHERE {
  ?royalChild wdt:P136 ?position .
  OPTIONAL { ?position wdt:P137 ?predecessor . }
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Archduchess Helena of Austria. The queries assume that the spouse, children, and royalty status can be found using specific properties (`P26`, `P40`, `P106`). Adjustments may be needed based on available data.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
249,7,train,"Give me the native of India and native of the work, that is Indian, of Jamsetji Tata.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Jamsetji_Tata> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/India> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativePlace ?notableWork WHERE {
  # Find Jamsetji Tata's birthplace
  dbr:Jamsetji_Nusserwanji_Tata dbo:birthPlace ?nativePlace .
  
  # Find a notable work founded by him that is Indian
  OPTIONAL {
    ?work dbo:foundingDate ?date ;
          dbo:founder dbr:Jamsetji_Nusserwanji_Tata ;
          dbo:country dbr:India .
    BIND(?work AS ?notableWork)
  }
}
```",3,4,4,2,2,2,2,9,0,0,21,0,0.0,0
871,8,train,"Who is the child, that is a politician, of Frederick Stanley, 16th Earl of Derby?","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child WHERE {
  ?person dbo:child ?child .
  ?person foaf:name ""Frederick Stanley, 16th Earl of Derby""@en .
  ?child dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""politician""))
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
687,32,train,"Give me the player in the person born, that is an athlete, on 1955-02-22 and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.","SELECT ?result WHERE { <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v3 . ?v1 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://dbpedia.org/ontology/team> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person ;
          dbo:birthDate ""1955-02-22""^^xsd:date ;
          dbo:occupation ?occupation .
  
  FILTER (
    EXISTS { ?occupation rdfs:label ?label1 . FILTER (CONTAINS(LCASE(?label1), ""athlete"")) }
    && EXISTS { ?person dbo:spouseOrPartner ?actor . 
                ?actor dbo:profession dbr:Soccer_player ;
                       dbo:profession dbr:Actor .
              }
  )
  
  OPTIONAL {
    ?person dbo:work ?work .
    ?work rdfs:label ""All or Nothing: Manchester City""@en
  }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",4,7,5,2,2,3,3,71,0,0,1,0,0.0,0
78,3,train,"Give me the person born, that is a musical artist, as Stuart Mcbeath Tosh.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Stuart Mcbeath Tosh""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person ?birthDate WHERE {
  ?person rdfs:label ""Stuart Mcbeath Tosh""@en .
  ?person rdf:type dbo:MusicalArtist .
  OPTIONAL { ?person dbo:birthDate ?birthDate . }
  FILTER (LANG(?person) = 'en')
}
```",1,2,2,1,1,2,3,28,0,0,1,0,0.0,0
347,24,train,"Give me the child of Ferdinand II, Holy Roman Emperor and father of the child of Ferdinand III, Holy Roman Emperor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor> . ?v2 <http://dbpedia.org/property/father> ?result . }","```sparql
SELECT ?person WHERE {
  ?f2 dbo:child ?person .
  FILTER(?f2 = dbpedia:Ferdinand_II,_Holy_Roman_Emperor) .

  ?person dbo:parent ?f3 .
  FILTER(?f3 = dbpedia:Ferdinand_III,_Holy_Roman_Emperor) .

  ?f3 dbo:child ?c .
  ?c dbo:parent ?person .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
585,1,train,Give me the child of Linda Miller (actress).,SELECT ?result WHERE { <http://dbpedia.org/resource/Linda_Miller_(actress)> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?person dbo:birthName ""Linda Miller""@en .
  ?person a dbo:Actor .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
39,58,train,"Give me the professional in Singer and professional in the alter ego of The Shadow and band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician).","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Singer""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v5 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
# Step 1: Find Bob Thompson's birth name
SELECT ?birthName WHERE {
  ?person dbo:name ""Bob Thompson (musician)""@en .
  ?person foaf:name ?name .
  ?person dbp:birthName ?birthName .
}

# Step 2: Identify The Shadow's alter ego and their band
SELECT ?alterEgo ?band WHERE {
  ?shadowAlterEgo rdfs:label ""The Shadow (radio)""@en ;
                  dbo:profession ""Radio personality""@en ;
                  foaf:name ?alterEgo .
  ?alterEgo dbo:memberOfBand ?band .
}

# Step 3: Identify a professional singer
SELECT ?singer WHERE {
  ?person dbo:occupation ""Singer""@en ;
          foaf:name ?singer .
}
```",6,7,7,3,3,3,3,71,0,0,3,0,0.0,0
119,52,train,"Give me the office of the leader of the administration, that is an event, of Anxo Quintana and tenant of the residence, that is a country, of Álvaro Quirós and tenant of Santiago de Compostela.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Anxo_Quintana> . <http://dbpedia.org/resource/Álvaro_Quirós> <http://dbpedia.org/property/residence> ?v5 . ?v3 <http://dbpedia.org/property/leader> ?v2 . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . ?result <http://dbpedia.org/ontology/headquarter> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://dbpedia.org/property/office> ?result . },"```sparql
# Query for Anxo Quintana's office in an administration event
SELECT ?office WHERE {
  ?person foaf:name ""Anxo Quintana""@en .
  ?event dbo:agent ?person ;
         dbo:positionHeld ?office .
}

UNION

# Query for Álvaro Quirós' country of residence
SELECT ?country WHERE {
  ?person foaf:name ""Álvaro Quirós""@en .
  ?person dbo:nationality ?nationality .
  ?nationality dbo:country ?country .
}

UNION

# Query for Santiago de Compostela's tenant (likely a region or administrative division)
SELECT ?tenant WHERE {
  ?place foaf:name ""Santiago de Compostela""@en ;
         dbo:partOf ?region .
  ?region rdfs:label ?tenant .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
89,39,train,"Give me the spouse of Saw Shwe Khet and predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . ?v1 <http://dbpedia.org/property/father> ?v0 . },"```sparql
# Step 1: Find the spouse of Saw Shwe Khet
SELECT ?spouse WHERE {
    wd:Q123456 dbo:spouse ?spouse .
}

# Step 2: Find the child of the spouse from step 1
SELECT ?child WHERE {
    ?spouse dbo:child ?child .
}

# Step 3: Find the predecessor of that child if they are royalty
SELECT ?predecessor WHERE {
    ?child a dbo:Monarch ;
           dbo:predecessor ?predecessor .
}

# Step 4: Find the spouse of Saw Min Phyu
SELECT ?spouse2 WHERE {
    wd:Q654321 dbo:spouse ?spouse2 .
}

# Step 5: Find the child of this spouse and check if they are royalty
SELECT ?child2 WHERE {
    ?spouse2 dbo:child ?child2 .
    ?child2 a dbo:Monarch .
}

# Step 6: Find the predecessor of that royal child
SELECT ?predecessor2 WHERE {
    ?child2 dbo:predecessor ?predecessor2 .
}
```

Note: Replace `wd:Q123456` and `wd:Q654321` with the actual DBpedia identifiers for Saw Shwe Khet and Saw Min Phyu, respectively. These identifiers need to be looked up in DBpedia.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
585,3,train,"Give me the award, that is American and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?award a dbo:Award .
  ?award dbo:name ?name .
  ?settlement dbo:country dbr:United_States ;
              rdfs:label ?settlementLabel .
  FILTER(CONTAINS(LCASE(?name), LCASE(?settlementLabel)))
  OPTIONAL { 
    ?award dbo:wikiPageWikiLink ?coroResource .
    ?coroResource rdfs:label ""Coro de la Pontificia Universidad Católica de Puerto Rico""@en
  }
}
```",1,3,2,1,1,3,2,20,0,0,3,0,0.0,0
119,43,train,"Give me the tenant of the residence, that is a country, of the citizen, that is Spanish, of Spain and tenant of Santiago de Compostela and office of Alberto Núñez Feijóo.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> ?v4 . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain> . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Spain>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v0 <http://dbpedia.org/property/residence> ?v4 . },"```sparql
SELECT ?country WHERE {
  ?person dbo:nationality dbr:Spanish_people .
  ?person dbo:birthPlace dbr:Spain .
  ?office dbo:location dbr:Santiago_de_Compostela .
  ?office dbo:head ?person .
  ?person foaf:name ""Alberto Núñez Feijóo""@en .
  ?office dbo:country ?country .
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
687,45,train,"Give me the player in Juan Carlos Molina (footballer) and player in Sergio Agüero and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> ?v1 . ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v0 . <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. },"```sparql
# Query to get Juan Carlos Molina's team
SELECT ?team WHERE {
  ?player foaf:name ""Juan Carlos Molina""@en .
  ?player dbo:playsFor ?team .
}

UNION

# Query to get Sergio Agüero's team
SELECT ?team WHERE {
  ?player foaf:name ""Sergio Agüero""@en .
  ?player dbo:playsFor ?team .
}

UNION

# Query to find Marcelo Sarmiento's birthday
SELECT ?birthday WHERE {
  ?person foaf:name ""Marcelo Sarmiento""@en ;
          dbo:birthday ?birthday .
}

UNION

# Query to find a soccer player and manager born on the same date as Marcelo Sarmiento
SELECT ?team WHERE {
  ?person foaf:name ?name ;
          dbo:birthDate ?birthday ;
          dbo:occupation ?occupation1, ?occupation2 .
  FILTER (?occupation1 = dbc:Soccer_players && ?occupation2 = dbc:Soccer_managers)
  ?player dbo:birthday ?birthday .
  ?player dbo:playsFor ?team .
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
293,39,train,Give me the spouse of Roger Pryor (actor) and person born as the birth name of the parent of Tisha Sterling.,SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/property/birthName> ?v1 . },"```sparql
# Query 1: Find the spouse of Roger Pryor (actor)
SELECT ?spouse WHERE {
  ?person dbo:name ""Roger Pryor""@en .
  ?person dbo:occupation dbr/Actor .
  ?person foaf:surname ""Pryor"" .
  ?person dbo:spouse ?spouse .
}

UNION

# Query 2: Find a person born with the birth name of the parent of Tisha Sterling
SELECT DISTINCT ?person WHERE {
  # Find Tisha Sterling's parents
  ?tisha dbo:name ""Tisha Sterling""@en ;
         dbo:parent ?parent .

  # Get the birth name of each parent
  ?parent foaf:name ?birthName .

  # Find a person born with that birth name
  ?person foaf:name ?birthName .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
687,13,train,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  ?show dbo:subject dbr:Manchester_City_F.C.
  ?show dbo:title ""All or Nothing: Manchester City""@en .
  
  ?player dbo:portrayal ?show .
  ?player dbo:occupation dbr:Soccer_player .
  ?player dbo:occupation dbr:Athlete .

  FILTER (lang(?title) = 'en')
}
```",2,4,3,2,1,3,3,71,0,0,7,0,0.0,0
68,15,train,"Give me the father of Catherine of Austria, Queen of Portugal and father of the parent of Dorothea of Denmark, Electress Palatine.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v1 . }","```sparql
SELECT DISTINCT ?commonAncestor WHERE {
  # Find the father of Catherine of Austria, Queen of Portugal
  ?catherine dbo:father ?candidateFather .
  ?catherine rdfs:label ""Catherine of Austria, Queen of Portugal""@en .

  # Find Dorothea of Denmark's parent and then that parent's father
  ?dorothea dbo:motherOrFather ?parent .
  ?parent dbo:father ?candidateGrandfather .
  ?dorothea rdfs:label ""Dorothea of Denmark, Electress Palatine""@en .

  # Check if the candidate father and candidate grandfather are the same
  FILTER (?candidateFather = ?candidateGrandfather)
  
  # Bind the common ancestor to the result
  BIND(?candidateFather AS ?commonAncestor)
}
```",3,3,4,2,2,2,3,28,0,0,1,0,0.0,0
80,22,train,Give me the actor of Shelby Oaks and professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Query to find the actor who played Shelby Oaks
SELECT ?actor WHERE {
  ?work dbo:character ?character .
  ?character rdfs:label ""Shelby Oaks""@en .
  ?work dbo:starring ?actor .
  FILTER(LANG(?character) = 'en')
}

UNION

# Query to find the actor who portrayed The Shadow's alter ego
SELECT ?actor WHERE {
  ?work dbo:character ?character .
  ?character rdfs:label ""Lamont Cranston""@en .
  ?work dbo:starring ?actor .
  FILTER(LANG(?character) = 'en')
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
353,49,train,"Give me the child of the child of the spouse, that is a royalty, of Constance of Burgundy and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v1 <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?grandchild WHERE {
    # Step 1: Identify Constance of Burgundy's spouse
    ?consortia a dbo:Spouse; 
               dbo:spouse ?constance .
    
    FILTER(?constance = dbr:Constance_of_Burgundy)

    # Step 2: Find the child of that spouse
    ?child dbo:parent ?consortia .

    # Step 3: Determine the child of this child (grandchild)
    ?grandchild dbo:parent ?child .
    
    # Step 4: Identify royalty among these grandchildren
    ?grandchild a ?royaltyClass .
    FILTER(STRSTARTS(STR(?royaltyClass), ""http://dbpedia.org/ontology/RoyalFamilyMember""))

    # Step 5: Find Roger III, Duke of Apulia's parent
    ?rogerIII dbo:parent ?parentOfRoger .

    FILTER(?rogerIII = dbr:Roger_III,_Duke_of_Apulia)

    # Step 6: Determine the child of this parent
    ?child2 dbo:parent ?parentOfRoger .
    
    # Step 7: Match the grandchildren from step 3 with the children from step 6
    FILTER(?grandchild = ?child2)
}
```",5,6,6,3,2,3,3,71,0,0,4,0,0.0,0
347,30,train,"Give me the child of the father of Cecilia Renata of Austria and father of Eleonore of Austria, Queen of Poland and commander in Thirty Years' War.","SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?v1 . }","```sparql
SELECT ?commonFather ?child WHERE {
  # Find Cecilia Renata of Austria and her father
  ?cecilia dbo:parent ?father1 .
  ?cecilia rdfs:label ""Cecilia Renata of Austria""@en .

  # Find Eleonore of Austria, Queen of Poland and her father
  ?eleonore dbo:parent ?father2 .
  ?eleonore rdfs:label ""Eleonore of Austria, Queen of Poland""@en .

  # Ensure both fathers are the same person
  FILTER (?father1 = ?father2)
  BIND(?father1 AS ?commonFather)

  # Check if this common father was a commander in the Thirty Years' War
  ?commonFather dbo:occupation ""Commander""@en .
  ?commonFather dbo:participatedIn dbpedia:The_Thirty_Years_War .

  # Find a child of this common father
  ?commonFather dbo:child ?child .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
628,54,train,"Give me the native of Florida and person born as the birth name of the native, that is a musical artist, of Florida and band member of the associated musical artist, that is a musical artist, of Bobby Shmurda.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . ?v0 <http://dbpedia.org/property/birthName> ?v5 . ?result <http://dbpedia.org/property/birthName> ?v5 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist ?birthName ?associatedArtist WHERE {
  # Step 1: Find a musical artist native of Florida
  ?artist dbo:nationality dbr:United_States ;
          dbo:birthPlace dbr:Florida ;
          dbo:occupation dbr/Musical_artist .

  # Step 2: Get the birth name of that artist
  ?artist foaf:name ?birthName .

  # Step 3: Find another musical artist with the same birth name and from Florida
  ?otherArtist dbo:nationality dbr:United_States ;
               dbo:birthPlace dbr:Florida ;
               dbo:occupation dbr/Musical_artist ;
               foaf:name ?birthName .

  # Step 4: Check if this other artist is associated with Bobby Shmurda
  OPTIONAL {
    ?association dbo:associatedBandMember ?otherArtist .
    ?association dbo:associatedBandMember dbr:Bobby_Shmurda .
  }

  FILTER(?artist != ?otherArtist)
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
80,39,train,Give me the actor of ATL (film) and professional in the alter ego of the series of The Golden Master.,SELECT ?result WHERE { <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v0 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . },"```sparql
SELECT ?actor ?filmRole ?alterEgoSeries WHERE {
  # Find actor in film ATL
  ?film dbo:starring ?actor .
  ?film rdfs:label ""ATL""@en .

  OPTIONAL {
    # Check if the actor has a professional alter ego in The Golden Master series
    ?actor dbo:profession ?profession .
    ?alterEgoSeries dbo:title ""The Golden Master""@en .
    ?alterEgoSeries dbo:starring ?actor .
    ?alterEgoSeries dbo:characterName ?alterEgo .
  }
  
  # Filter to ensure we get actors from ATL
  FILTER(CONTAINS(LCASE(?film), ""atl""))
}
```",4,4,5,3,2,3,3,71,0,0,4,0,0.0,0
737,39,train,"Give me the child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria and child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> ?v0 . ?v1 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
# Step 1: Find the parent of Archduchess Margarete Sophie of Austria
SELECT ?parent WHERE {
    wd:Q1234567 wdt:P40 ?parent .
}

# Step 2: Confirm this person is also a child of Albrecht, Duke of Württemberg
SELECT ?child WHERE {
    ?child wdt:P31/wdt:P279* wd:Q1234567 . # Ensure the type is a human or subclass
    ?child wdt:P22 wd:Q9876543 .
}

# Step 3: Find all children of this confirmed individual
SELECT ?grandchild WHERE {
    ?confirmedChild wdt:P40 ?grandchild .
    FILTER(?confirmedChild IN (?child)) # Use the result from step 2
}

# Step 4: Filter these grandchildren to find one who has a royal title
SELECT DISTINCT ?royalGrandchild WHERE {
    ?grandchild wdt:P31/wdt:P279* wd:Q5 . # Ensure the type is a human or subclass
    OPTIONAL { ?grandchild wdt:P39 ?title . FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") || CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""duke"")) }
    FILTER(BOUND(?title)) # Ensure a title is found
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia ID for Archduchess Margarete Sophie of Austria and `wd:Q9876543` with the DBpedia ID for Albrecht, Duke of Württemberg.",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
531,5,train,"Give me the force, that is a military conflict and a societal event, of Manuel Pinto da Costa.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?conflict ?event WHERE {
  ?person dbo:president dbr:São_Tomé_and_Príncipe .
  ?person rdfs:label ""Manuel Pinto da Costa""@en .

  OPTIONAL { 
    ?conflict dbo:location dbr:São_Tomé_and_Príncipe ;
              dbo:participant ?person ;
              rdf:type dbo:MilitaryConflict .
    BIND(""Military Conflict"" AS ?conflictType)
  }

  OPTIONAL {
    ?event dbo:place dbr:São_Tomé_and_Príncipe ;
           dbo:agent ?person ;
           rdf:type dbo:SocietalEvent .
    BIND(""Societal Event"" AS ?eventType)
  }
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
595,22,train,"Give me the commander in the war, that is a disease and a societal event, of United States Navy and spouse of Hillary Clinton.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. },"```sparql
SELECT ?person WHERE {
  ?person dbo:spouse dbr:Hillary_Clinton .
  ?person dbo:serviceInMilitaryOrganization dbr:United_States_Navy .
  ?event dbo:commander ?person ;
         rdfs:label ""AIDS epidemic""@en .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
737,47,train,"Give me the child of the child of the child of Alexander of Württemberg (1804-1881) and predecessor of the child of Philipp Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Alexander_of_Württemberg_(1804-1881)> . ?v4 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v4 . ?result <http://dbpedia.org/ontology/successor> ?v2 . }","```sparql
# Step 1: Find a child of Alexander of Württemberg
SELECT ?child WHERE {
    dbpedia:Alexander_of_W%C3%BCrttemberg dbo:child ?child .
}

# Step 2: Find a grandchild (child of the child)
SELECT ?grandchild WHERE {
    ?child dbo:child ?grandchild .
    FILTER(?child IN (<result_from_step_1>))
}

# Step 3: Find a great-grandchild (child of the grandchild)
SELECT ?greatGrandChild WHERE {
    ?grandchild dbo:child ?greatGrandChild .
    FILTER(?grandchild IN (<result_from_step_2>))
}

# Step 4: Find a child of Philipp Albrecht, Duke of Württemberg
SELECT ?philippChild WHERE {
    dbpedia:Philipp_Albrecht,_Duke_of_W%C3%BCrttemberg dbo:child ?philippChild .
}

# Step 5: Determine the predecessor (older sibling) of the child found in step 4
SELECT ?predecessor WHERE {
    ?parent dbo:child ?sibling1 .
    ?parent dbo:child ?sibling2 .
    FILTER(?sibling1 = <result_from_step_4> && ?sibling2 != ?sibling1)
    FILTER(STR(?sibling2) < STR(?sibling1)) # Assuming names or identifiers can be ordered
}

# Step 6: Check if the great-grandchild from step 3 is related to the predecessor found in step 5
SELECT ?greatGrandChild WHERE {
    ?greatGrandChild dbo:parent ?predecessor .
    FILTER(?greatGrandChild IN (<result_from_step_3>))
    FILTER(?predecessor IN (<result_from_step_5>))
}
```

Note: The placeholders `<result_from_step_X>` need to be replaced with actual results from each step, which would typically involve running the queries sequentially and using their outputs as inputs for subsequent queries.",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
816,26,train,Give me the parent of the professional in the profession of Eugène Cattin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/ontology/child> ?v2 . },"```sparql
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parent WHERE {
  ?profession rdfs:label ""Politician""@en .
  ?profession rdfs:subClassOf ?parent .
}
```",3,3,4,3,1,3,3,71,0,0,30,0,0.0,0
143,3,train,"Give me the show, that is a movie, with Afeez Oyetoro.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Afeez_Oyetoro> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  ?actor a dbo:Actor ;
         foaf:name ""Afeez Oyetoro""@en .
  
  ?film dbo:starring ?actor ;
        a ?type .

  FILTER (?type IN (dbr:Film, dbr:TV_Series)).

  OPTIONAL { 
    ?film dbo:genre ?genre .
    FILTER(CONTAINS(LCASE(STR(?genre)), ""movie"") || CONTAINS(LCASE(STR(?genre)), ""tv series""))
  }

  BIND(IF(EXISTS{?film a dbr:Film}, true, false) AS ?isMovie)
  BIND(IF(EXISTS{?film a dbr:TV_Series}, true, false) AS ?isTvSeries)

  FILTER (?isMovie = true && ?isTvSeries = true)
  
  BIND(?film AS ?show)
}
```",1,2,2,1,1,3,2,20,0,0,4,0,0.0,0
905,48,train,"Give me the spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania and child of the child, that is a royalty, of Béla IV of Hungary.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?v1 . ?result <http://dbpedia.org/property/father> ?v0 . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse WHERE {
  # Identify Philip, Despot of Romania
  ?philip a dbo:Person ;
          foaf:name ""Philip, Despot of Romania""@en .

  # Find his parent who is royalty
  ?parent dbo:child ?philip .
  ?parent dbo:title ?title .
  FILTER(CONTAINS(LCASE(str(?title)), ""king"") || CONTAINS(LCASE(str(?title)), ""queen"") || 
         CONTAINS(LCASE(str(?title)), ""prince"") || CONTAINS(LCASE(str(?title)), ""princess""))

  # Determine the spouse of this royal parent
  ?parent dbo:spouse ?spouse .

  # Identify Béla IV of Hungary
  ?bela a dbo:Person ;
        foaf:name ""Béla IV of Hungary""@en .

  # Find his child who is royalty
  ?child dbo:child ?bela .
  ?child dbo:title ?title2 .
  FILTER(CONTAINS(LCASE(str(?title2)), ""king"") || CONTAINS(LCASE(str(?title2)), ""queen"") || 
         CONTAINS(LCASE(str(?title2)), ""prince"") || CONTAINS(LCASE(str(?title2)), ""princess""))

  # Determine the child of this royal child
  ?grandchild dbo:child ?child .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
531,24,train,"Give me the office of the commander, that is an office holder and a politician, in Central African Republic Civil War and office of Miguel Maura.",SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?v2 <http://dbpedia.org/property/office> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commanderOffice ?miguelMauraOffice WHERE {
  # Part 1: Office of the commander in Central African Republic Civil War
  {
    ?person a dbo:Person ;
            dbo:officeHolderOf ?office ;
            dbo:occupation dbr:Military_commander ;
            dbo:wikiPageRedirects ?war .
    ?war rdfs:label ""Central_African_Republic_Civil_War""@en .
    FILTER(CONTAINS(LCASE(?office), ""politician""))
    BIND(STRAFTER(STR(?office), ""Office of the "") AS ?commanderOffice)
  }
  
  # Part 2: Office of Miguel Maura
  {
    dbr:Miguel_Maura dbo:officeHolderOf ?miguelMauraOffice .
    FILTER NOT EXISTS { ?miguelMauraOffice a dbo:Position . } # Exclude generic positions
  }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
737,23,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria.",SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v2 . ?result <http://dbpedia.org/ontology/successor> ?v0 . ?v0 <http://dbpedia.org/property/father> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT DISTINCT ?predecessor WHERE {
  ?helena dbo:spouse ?spouse .
  FILTER (str(?helena) = ""Archduchess_Helena_of_Austria"") .

  ?spouse dbo:child ?child .
  
  ?child rdf:type ?type .
  FILTER (
    ?type IN (dbpedia-owl:Monarch, dbpedia-owl:RoyalFamilyMember)
  ) .

  ?child dbo:predecessor ?predecessor .
}
LIMIT 1
```",3,4,4,3,1,3,3,71,0,0,1,0,0.0,0
905,52,train,"Give me the child of Stephen V of Hungary and parent of the father, that is a royalty, of Charles I of Hungary and spouse of the father of the parent, that is a royalty, of Philip, Despot of Romania.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Philip,_Despot_of_Romania> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://dbpedia.org/property/father> ?v1 . ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v4 . }","```sparql
# Step 1: Find Charles I of Hungary's father
SELECT ?charlesIFather WHERE {
  wd:Q1234 wdt:P22 ?charlesIFather .
}

# Step 2: Find Charles I's grandfather and his spouse
SELECT ?charlesIGrandfather ?spouse WHERE {
  ?charlesIFather wdt:P22 ?charlesIGrandfather .
  OPTIONAL { ?charlesIGrandfather wdt:P26 ?spouse . }
}

# Step 3: Find Stephen V of Hungary's child
SELECT ?stephenVChild WHERE {
  wd:Q5678 wdt:P40 ?stephenVChild .
}

# Step 4: Find the parent of Stephen V's child
SELECT ?parent WHERE {
  ?stephenVChild wdt:P22 ?parent .
}

# Step 5: Find Philip, Despot of Romania's grandparent and his spouse
SELECT ?philipGrandparent ?spouse WHERE {
  wd:Q91011 wdt:P22 ?philipParent .
  ?philipParent wdt:P22 ?philipGrandparent .
  OPTIONAL { ?philipGrandparent wdt:P26 ?spouse . }
}

# Step 6: Find the common individual
SELECT DISTINCT ?commonIndividual WHERE {
  VALUES ?individual1 { ?charlesIGrandfather ?stephenVChild }
  VALUES ?individual2 { ?parent ?spouse }
  ?individual1 = ?individual2 .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
68,23,train,"Give me the father of the child, that is a royalty, of Philip I of Castile and father of the parent of Dorothea of Denmark, Electress Palatine.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . ?v1 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Dorothea_of_Denmark,_Electress_Palatine> <http://dbpedia.org/ontology/parent> ?v3 . }","```sparql
SELECT ?father WHERE {
  wd:Q1198 wdt:P22 ?mother .
  ?mother wdt:P25 wd:Q1184 .
  ?parent wdt:P40 wd:Q1198 .
  ?parent wdt:P31/wdt:P279* wd:Q5 .
  ?dorotheaParent wdt:P22 ?parent .
  wd:Q1200 wdt:P22 ?dorotheaParent .
  ?father wdt:P25 wd:Q1184 .
}
```",4,5,5,2,2,2,3,28,0,0,1,0,0.0,0
263,3,train,"Give me the birthplace, that is a region and a country, of William Gayner.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  dbr:William_Gayner dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:Country ;
              a dbo:Region .
}
```",1,3,2,1,1,2,3,28,1,0,0,1.0,1.0,1.0
103,39,train,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and professional in Actor.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Actor""@en . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v0 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo ?actorProfession WHERE {
  # Find The Shadow character and its alter ego
  dbr:The_Shadow dbo:alterEgo ?alterEgo .
  
  # Check if the alter ego is associated with the profession of an actor
  OPTIONAL { 
    ?alterEgo dbo:profession ?occupation .
    FILTER(CONTAINS(LCASE(?occupation), ""actor""))
    BIND(""Actor"" AS ?actorProfession)
  }
}
```",4,5,5,3,2,3,3,71,0,0,4210,0,0.0,0
225,12,train,"Give me the entity in Japan and birthplace of the awardee, that is Japanese, of Anita Borg Institute Women of Vision Awards.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Japan> . ?v0 <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Japan>. ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Anita_Borg_Institute_Women_of_Vision_Awards> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?birthPlace WHERE {
  ?person dbo:award dbr:Anita_Borg_Institute_Women_of_Vision_Awards .
  ?person dbo:nationality dbr:Japan .
  ?person dbo:birthPlace ?birthPlace .
  FILTER (strstarts(str(?birthPlace), str(dbr:)))
}
```",3,4,4,2,2,3,2,20,1,2,0,0.3333333333333333,1.0,0.5
295,16,train,"Give me the writer of the work, that is a musical work, of Apache Indian and native of the birth place of Victor Saville.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/writer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v2 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Apache_Indian> . <http://dbpedia.org/resource/Victor_Saville> <http://dbpedia.org/ontology/birthPlace> ?v3 . ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?writer WHERE {
  # Find a musical work by Apache Indian
  ?work dbo:artist dbr:Apache_Indian ;
        a dbo:MusicalWork .

  # Get the writer of that musical work
  ?work dbo:composerOrLyricist ?writer .

  # Find Victor Saville's birthplace
  dbr:Victor_Saville dbo:birthPlace ?birthPlace .

  # Ensure the writer is from Victor Saville's birthplace
  ?writer dbo:birthPlace ?birthPlace .
}
```",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
263,10,train,Give me the parent of the person born as Hon. Mary Frances Bowes-Lyon.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . ?result <http://dbpedia.org/ontology/child> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?parent WHERE {
  ?person dbo:birthName ""Mary Frances Bowes-Lyon""@en .
  ?person dbo:parent ?parent .
}
```",2,2,3,2,1,2,3,28,0,0,2,0,0.0,0
203,18,train,Give me the commander in French campaign in Egypt and Syria and military force of Battle of Fort Royal and military force of Battle of Cape Finisterre (1805).,SELECT ?result WHERE { <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . },"```sparql
# Query for the commander of the French campaign in Egypt and Syria
SELECT ?commander WHERE {
  ?campaign dcterms:subject dbc:French_Egyptian_Campaign.
  ?campaign dbo:commander ?commander.
}

UNION

# Query for military forces involved in the Battle of Fort Royal (1806)
SELECT ?militaryForce WHERE {
  ?battle dbp:title ""Battle of Fort Royal (1806)""@en.
  ?battle dbo:militaryConflicts ?conflict.
  ?conflict dbo:participatingMilitaryUnit ?militaryForce.
}

UNION

# Query for military forces involved in the Battle of Cape Finisterre (1805)
SELECT ?militaryForce WHERE {
  ?battle dbp:title ""Battle of Cape Finisterre (1805)""@en.
  ?battle dbo:militaryConflicts ?conflict.
  ?conflict dbo:participatingMilitaryUnit ?militaryForce.
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
816,39,train,Give me the parent of the child of the spouse of Mariclare Costello and parent of Amy Arbus.,SELECT ?result WHERE { <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v0 . ?v1 <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v0 <http://dbpedia.org/ontology/child> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?commonParent WHERE {
  # Step 1: Find Mariclare Costello's spouse
  ?mariclare a dbo:Person ;
             foaf:name ""Mariclare Costello""@en .
  
  ?mariclare dbo:spouse ?spouse .

  # Step 2: Find the child of Mariclare Costello's spouse
  ?child dbo:parent ?spouse .

  # Step 3: Determine the parent of this child (which is likely the spouse)
  ?child dbo:parent ?parent1 .
  
  # Step 4: Identify Amy Arbus's parent
  ?amy a dbo:Person ;
       foaf:name ""Amy Arbus""@en .
  
  ?amy dbo:parent ?parent2 .

  # Step 5: Find the common parent
  FILTER (?parent1 = ?parent2)
  BIND(?parent1 AS ?commonParent)
}
```",4,4,5,3,2,3,3,71,2,0,0,1.0,1.0,1.0
159,2,train,Give me the commander in Great Turkish War.,SELECT ?result WHERE { <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  VALUES ?event { 
    dbr:Great_Turkish_War 
    dbr:War_of_the_Holy_League_(1683–1699)
  }
  
  ?person dbo:commanderOf ?event .
  OPTIONAL { ?person rdfs:label ?name FILTER (lang(?name) = 'en') . }
}
ORDER BY ?name
```",1,1,2,1,1,3,3,71,0,0,40,0,0.0,0
103,14,train,Give me the professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
SELECT ?person WHERE {
  ?character dbo:alterEgoOf ?profession .
  ?character rdfs:label ""The Shadow""@en .
  ?profession dbo:agent ?person .
  ?person rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
```",2,2,3,2,1,3,3,71,0,0,39640,0,0.0,0
737,56,train,"Give me the child of Albrecht, Duke of Württemberg and predecessor of the child of Philipp Albrecht, Duke of Württemberg and child of the child, that is a royalty, of the parent of Archduchess Margarete Sophie of Austria.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?v0 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/property/father> ?v0 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childAlbrecht ?grandchildPhilippAlbrecht ?parentMargareteSophie WHERE {
  # Albrecht, Duke of Württemberg's child
  dbr:Albrecht,_Duke_of_W%C3%BCrttemberg dbo:child ?childAlbrecht .
  
  # Philipp Albrecht, Duke of Württemberg's grandchild
  dbr:Philipp_Albrecht,_Duke_of_W%C3%BCrttemberg dbo:child ?childPhilippAlbrecht .
  ?childPhilippAlbrecht dbo:child ?grandchildPhilippAlbrecht .

  # Archduchess Margarete Sophie of Austria's parent
  dbr:Margarete_Sophie,_Archduchess_of_Austria dbo:parent ?parentMargareteSophie .

  FILTER (isLiteral(?childAlbrecht) && isLiteral(?grandchildPhilippAlbrecht) && isLiteral(?parentMargareteSophie))
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
756,17,train,"Give me the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?result <http://dbpedia.org/ontology/manager> ?v1 . ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?team WHERE {
  ?person a dbo:SportsManager ;
          dbo:birthDate ""1968-08-26""^^xsd:date ;
          dbo:managesTeam ?team .
  
  ?team a dbo:SoccerClub ;
        dbo:sportSeason ?season .

  FILTER EXISTS { 
    ?season a dbo:SportsSeason .
  }
}
```",2,6,3,2,1,3,3,71,0,0,5,0,0.0,0
412,18,train,Give me the war of the awardee of 30 and entity in Athens.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Athens> . ?v0 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?war WHERE {
  ?person dbo:dateOfBirth ?birthDate .
  FILTER (YEAR(?birthDate) <= 30 && YEAR(?birthDate) >= -50) # Considering a range around 30 AD
  OPTIONAL { ?person dbo:placeOfBirth dbr:Athens . }
  OPTIONAL { ?person dbo:residence dbr:Athens . }
  OPTIONAL {
    ?event dbo:agent ?person ;
           a dbo:MilitaryConflict .
    ?event dbo:name ?war .
  }
}
ORDER BY ?person
LIMIT 10
```",3,3,4,2,2,2,3,28,0,0,3,0,0.0,0
353,6,train,"Who is the child, that is a royalty, of William I of Sicily?",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?child ?title WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse foaf:name ""William I of Sicily""@en .
  
  ?person dbo:child ?child .
  ?child dbo:title ?title .

  FILTER(CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") || 
         CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess""))
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
557,22,train,"Give me the professional in  and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?role ?work WHERE {
  # Identify Janet Gaynor's resource in DBpedia
  VALUES ?janetGaynor { dbr:Janet_Gaynor }

  # Find her roles and productions related to ""7th Heaven""
  OPTIONAL {
    ?film dbo:starring ?janetGaynor .
    ?film rdfs:label ?workLabel .
    FILTER (CONTAINS(LCASE(?workLabel), ""7th heaven""))
    BIND(""Actress"" AS ?role)
  }

  # Find her roles and productions related to other notable works
  OPTIONAL {
    ?production dbo:producer ?janetGaynor .
    ?production rdfs:label ?workLabel .
    FILTER (CONTAINS(LCASE(?workLabel), ""7th heaven"") || CONTAINS(LCASE(?workLabel), ""another notable work""))
    BIND(""Producer"" AS ?role)
  }
  
  # Filter out empty results
  FILTER (?workLabel != """")
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
347,36,train,"Give me the child of the father of the child, that is a royalty, of Maria Anna of Bavaria (born 1574) and commander in Thirty Years' War.",SELECT ?result WHERE { <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://dbpedia.org/property/father> ?v1 . <http://dbpedia.org/resource/Maria_Anna_of_Bavaria_(born_1574)> <http://dbpedia.org/ontology/child> ?v0 . ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
SELECT ?child WHERE {
  # Step 1: Identify Maria Anna of Bavaria
  ?mariaAnna a dbo:Person ;
             foaf:name ""Maria Anna of Bavaria""@en ;
             dbo:birthYear ""1574""^^xsd:gYear ;
             dbo:spouse ?husband .

  # Step 2: Find one of her children
  ?child1 dbo:parent ?mariaAnna ;
          dbo:parent ?husband .

  # Step 3: Identify the father (husband)
  ?husband a dbo:Person ;
           foaf:name ?husbandName .

  # Step 4: Find another child of this husband
  ?child2 dbo:parent ?husband ;
          FILTER(?child1 != ?child2) .

  # Step 5: Check for royalty and commander in the Thirty Years' War
  ?child2 a dbo:RoyalFamilyMember ;
          dbo:occupation ?occupation .
  
  VALUES ?occupation { 
    ""Commander""@en 
  }
  
  ?thirtyYearsWar dbo:name ""Thirty Years' War""@en ;
                  dbo:commander ?child2 .

}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
263,5,train,"Give me the child of Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Claude_Bowes-Lyon,_14th_Earl_of_Strathmore_and_Kinghorne> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child WHERE {
  ?person a dbo:Person ;
          foaf:name ""Claude Bowes-Lyon, 14th Earl of Strathmore and Kinghorne""@en .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,2,3,28,0,0,3,0,0.0,0
769,7,train,"Give me the player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on 1981-12-01.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/birthDate> ""1981-12-01""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:birthDate ?date .
  FILTER (YEAR(?date) = 1981 && MONTH(?date) = 12 && DAY(?date) = 01)
  
  ?person dbo:occupation ?occupation .
  VALUES ?occupation { 
    dbr:Athlete
    dbr:Soccer_player
    dbr:Sports_manager
    dbr:Soccer_manager
  }
  
  # Ensure the person has all four occupations
  {
    SELECT ?person WHERE {
      ?person dbo:occupation dbr:Athlete .
    } GROUP BY ?person HAVING (COUNT(DISTINCT ?occupation) = 4)
  }
}
```",2,6,3,2,1,3,2,20,0,0,6,0,0.0,0
203,27,train,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v2 <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://dbpedia.org/ontology/battle> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?militaryForce WHERE {
  ?person a dbo:Person ;
          dbo:award ?award .
  
  FILTER regex(str(?award), ""Knight Commander of the Order of the Bath"", ""i"") .

  OPTIONAL { ?person dbo:event ?event . }
  OPTIONAL { ?person dbo:socialEvent ?socialEvent . }

  ?person dbo:militaryForce ?militaryForce .

  FILTER EXISTS { ?person dbo:event ?event } .
  FILTER EXISTS { ?person dbo:socialEvent ?socialEvent } .
}
```",3,5,4,3,1,3,3,71,0,0,4831,0,0.0,0
628,27,train,"Give me the native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
SELECT DISTINCT ?band ?award ?nativePlace WHERE {
  # Find bands from New York (state)
  ?band dbo:originLocation dbr:New_York_(state) .
  ?band a dbo:MusicalGroup .

  # Find awards won by these bands
  ?band dbo:award ?award .

  # Filter awards that are also regions, American states, and settlements
  ?award a dbo:Region ;
         a dbo:AmericanState ;
         a dbo:Settlement .

  # Get the native place of these awards
  ?award dbo:nativePlace ?nativePlace .
}
```",3,8,4,3,1,3,3,71,0,0,8569,0,0.0,0
159,40,train,"Give me the successor of the commander, that is a politician and an office holder, in the force, that is an event and a military conflict, of Michał Kazimierz Pac and commander in Great Turkish War and reference to George Ducas.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Michał_Kazimierz_Pac> . <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?successor ?successorName WHERE {
  # Find Michał Kazimierz Pac's role in the Great Turkish War
  dbr:Mikołaj_Kazimierz_Pac dbo:militaryConflict dbr:Great_Turkish_War .
  
  # Look for successors who are politicians and office holders
  ?successor dbo:roleSuccessorOf dbr:Mikołaj_Kazimierz_Pac ;
            a dbo:Politician ;
            dbo:officeHolder true .

  # Bind the successor's name
  ?successor rdfs:label ?successorName .
  
  FILTER (lang(?successorName) = 'en')
}
```",5,9,6,3,3,3,3,71,0,0,1,0,0.0,0
628,56,train,"Give me the person born as Ackquille Jean Pollard and band member of the associated musical artist, that is a musical artist, of Bobby Shmurda and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v0 <http://dbpedia.org/property/awards> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. }","```sparql
SELECT ?person WHERE {
  ?person foaf:name ""A$AP Rocky""@en .
  ?person dbo:birthPlace dbr:Harlem .
  ?person dbo:genre dbr:Hip_hop_music .
  ?person dbo:memberOf dbr:Shmoney_Entertainment .
  FILTER EXISTS { ?award dbo:recipient ?band . ?band dbo:origin dbr:New_York_City . }
}
```",6,12,7,3,3,3,3,71,0,0,1,0,0.0,0
756,38,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and native of the administration, that is a country, of Theodor Heuss.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v2 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . },"```sparql
# Find soccer club managed by Thomas Letsch
SELECT ?club WHERE {
  ?person foaf:name ""Thomas Letsch""@en .
  ?person dbo:managerOf ?team .
  ?team a dbo:SoccerClub .
}

# Find country related to Theodor Heuss
SELECT ?country WHERE {
  ?person foaf:name ""Theodor Heuss""@en .
  ?person dbo:nationality ?nationality .
  ?nationality dbp:countryName ?country .
}

# Combine results to find the manager of the team
SELECT ?manager WHERE {
  # Assuming we have identified a club from the first query
  VALUES (?club) { <http://dbpedia.org/resource/Club_Thomas_Letsch> } # Replace with actual URI

  ?team dbo:manager ?manager .
  ?team dbp:countryName ?country .

  # Assuming we have identified a country from the second query
  VALUES (?country) { ""Germany""@en } # Replace with actual country name if different

}
```",4,8,5,2,2,3,3,71,0,0,3,0,0.0,0
203,61,train,"Give me the military force of the war, that is a military conflict and an event, of the reference to William Bayne and military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v0 <http://dbpedia.org/ontology/battle> ?v5 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v5 . }","```sparql
# Step 1: Find wars involving William Bayne
SELECT ?war WHERE {
  wd:Q123456 wdt:P31/wdt:P279* wd:Q11850; # Assuming Q123456 is the DBpedia ID for William Bayne and Q11850 is the class for war
  wdt:P625 ?location.
}

# Step 2: Find military force associated with the identified war
SELECT ?militaryForce WHERE {
  ?war wdt:P31/wdt:P279* wd:Q11850; # Assuming Q11850 is the class for war
  wdt:P175 ?militaryForce. # P175 is the property for military forces involved in a conflict
}

# Step 3: Find awardee of Knight Commander of the Order of the Bath and related societal event
SELECT ?person ?event WHERE {
  ?person wdt:P166 wd:Q1234567; # Assuming Q1234567 is the DBpedia ID for Knight Commander of the Order of the Bath
  wdt:P921 ?parent. # P921 is the property for parent (to find related events)
  ?event wdt:P31/wdt:P279* wd:Q11850; # Assuming societal event can be classified under Q11850 or similar
  wdt:P921 ?person.
}

# Step 4: Find military force associated with the identified societal event
SELECT ?militaryForce WHERE {
  ?event wdt:P31/wdt:P279* wd:Q11850; # Assuming societal event can be classified under Q11850 or similar
  wdt:P175 ?militaryForce. # P175 is the property for military forces involved in an event
}
```",6,10,7,3,2,3,3,71,0,0,24,0,0.0,0
87,20,train,Give me the actor of Always (1989 film) and actor of Paradise (2013 film) and spouse of the awardee of List of awards and nominations received by Janusz Kamiński.,SELECT ?result WHERE { <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . ?result <http://dbpedia.org/ontology/spouse> ?v1 . },"```sparql
# Query to find an actor from ""Always"" (1989 film)
SELECT ?actor WHERE {
  ?film dbo:title ""Always""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1989) .
  ?film dbo:starring ?actor .
}

UNION

# Query to find an actor from ""Paradise"" (2013 film)
SELECT ?actor WHERE {
  ?film dbo:title ""Paradise""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 2013) .
  ?film dbo:starring ?actor .
}

UNION

# Query to find the spouse of an awardee from Janusz Kamiński's awards list
SELECT DISTINCT ?spouse WHERE {
  ?person dbo:award ?award .
  ?person rdfs:label ""Janusz Kamiński""@en .
  ?awardee dbo:award ?award .
  ?awardee dbo:spouse ?spouse .
}
```",4,4,5,2,3,2,3,28,0,0,1,0,0.0,0
871,4,train,Who is the awardee of Commander of the Royal Victorian Order?,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:award dbr:Commander_of_the_Royal_Victorian_Order .
}
```",1,1,2,1,1,3,3,71,0,122,14,0.0,0.0,0
871,38,train,"Give me the parent of the child of Frederick Stanley, 16th Earl of Derby and father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v2 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v2 . ?v1 <http://dbpedia.org/property/father> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?father WHERE {
  wd:Q123456 wdt:P22 ?child . # Frederick Stanley, 16th Earl of Derby's child who is a politician
  ?child wdt:P31/wdt:P279* wd:Q11424 . # The child is an instance of a politician
  ?child wdt:P25 wd:Q123456 . # The child has Frederick Stanley as parent

  wd:Q123456 wdt:P22 ?father . # Frederick Stanley's father
}
```

Note: Replace `wd:Q123456` with the actual DBpedia identifier for Frederick Stanley, 16th Earl of Derby.",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
87,11,train,"Give me the actor of the movie, that is a work and a film, with Audrey Hepburn.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  ?movie a dbo:Film ;
         dbo:starring dbr:Audrey_Hepburn .
  
  ?movie dbo:starring ?actor .
  
  FILTER(?actor != dbr:Audrey_Hepburn)
}
```",2,4,3,2,1,2,3,28,61,11,1,0.8472222222222222,0.9838709677419355,0.9104477611940298
816,54,train,"Give me the parent of Doon Arbus and actor of the movie, that is a work, with Herschel Bernardi and parent of the professional in the profession of Eugène Cattin.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v5 . ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . ?v5 <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Eugène_Cattin> <http://dbpedia.org/property/occupation> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
# Step 1: Get the parent of Doon Arbus
SELECT ?parent WHERE {
    wd:Q1234567 dbo:parent ?parent .
}

# Step 2: Find movies with both the actor from step 1 and Herschel Bernardi
SELECT DISTINCT ?movie WHERE {
    ?actor dbo:parent ?parent . # Replace ?parent with result from step 1
    ?movie dbo:starring ?actor ;
           dbo:starring wd:Q9876543 . # Herschel Bernardi's DBpedia ID
}

# Step 3: Find Eugène Cattin's profession and a parent of someone in that field
SELECT DISTINCT ?parent WHERE {
    wd:Q2345678 dbo:profession ?profession .
    ?person dbo:profession ?profession ;
            dbo:parent ?parent .
}
```

Note: Replace `wd:Q1234567` with Doon Arbus' DBpedia ID and `wd:Q9876543` with Herschel Bernardi's DBpedia ID. Similarly, replace `wd:Q2345678` with Eugène Cattin's DBpedia ID.",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
353,52,train,"Give me the child of the parent of the child, that is a royalty, of Roger II of Sicily and father of the child, that is a royalty, of William I of Sicily and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { ?v5 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v5 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v3 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commonLink WHERE {
  # Step 1: Find a child of Roger II who is royalty
  ?childRogerII dbo:parent dbr:Roger_II_of_Sicily ;
               dbo:title ?royalTitle .

  FILTER EXISTS { ?royalTitle dbo:wikiPageRedirects ?redirect . }
  
  # Step 2: Find the parent of that child
  ?commonLink dbo:child ?childRogerII .
  
  # Step 3: Find a child of William I who is royalty and also a child of Elvira
  ?childWilliamI dbo:parent dbr:William_I_of_Sicily ;
                dbo:title ?royalTitle2 ;
                dbo:parent dbr:Elvira_of_Castile .

  FILTER EXISTS { ?royalTitle2 dbo:wikiPageRedirects ?redirect2 . }
  
  # Step 4: Find the father of that child
  ?commonLink dbo:child ?childWilliamI .
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
782,48,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and reference to the real name of the band of Kim Wilson.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v3 <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Kim_Wilson> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nickCurranBand ?kimWilsonBandName WHERE {
  # Find Nick Curran's associated musical artist or band
  OPTIONAL {
    dbr:Nick_Curran dbo:musicalArtist ?nickCurranBand .
  }
  
  # Find the real name of Kim Wilson's band
  OPTIONAL {
    dbr:Kim_Wilson dbo:associatedBand ?fabulousThunderbirds .
    ?fabulousThunderbirds rdfs:label ?kimWilsonBandName .
    FILTER (lang(?kimWilsonBandName) = 'en')
  }
}
```",5,6,6,3,2,3,3,71,0,5,1,0.0,0.0,0
103,32,train,"Give me the professional in the profession of Shatrughan Sinha and actor of the movie, that is a television show, with Richard E. Grant.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v3 . ?v1 <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?profession ?tvShow WHERE {
  # Find Shatrughan Sinha's profession
  dbr:Shatrughan_Sinha dbo:occupation ?profession .
  
  # Find a television show featuring both Richard E. Grant and Shatrughan Sinha
  ?tvShow dbo:starring dbr:Richard_E._Grant ;
         dbo:starring dbr:Shatrughan_Sinha .
}
```",4,5,5,2,2,3,3,71,0,0,28,0,0.0,0
782,61,train,"Give me the band of the band member of the person born, that is a musical artist, on 1945-03-30 and associated musical artist of the person born, that is a musical artist, as the persona of Nick Curran.","SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?v1 . ?v5 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v3 <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/bandMember> ?v5 . }","```sparql
# Step 1: Find the person born on March 30, 1945, who is a musical artist
SELECT ?person WHERE {
    ?person dbo:birthday ""1945-03-30""^^xsd:date .
    ?person rdf:type dbo:MusicalArtist .
}

# Assuming the result of step 1 gives us a variable ?person

# Step 2: Find the band of which this person was a member
SELECT ?band WHERE {
    ?person dbo:member ?membership .
    ?membership dbo:band ?band .
}

# Assuming the result of step 2 gives us a variable ?band

# Step 3: Identify Nick Curran and his associated musical artists
SELECT ?nickCurran ?associatedArtist WHERE {
    ?nickCurran rdfs:label ""Nick Curran""@en .
    ?nickCurran dbo:associatedMusicalArtist ?association .
    ?association dbo:musicalArtist ?associatedArtist .
}

# Step 4: Find any connection between the band from step 2 and the associated artists from step 3
SELECT DISTINCT ?band ?associatedArtist WHERE {
    # Reuse results from steps 2 and 3
    VALUES (?person) { <http://dbpedia.org/resource/Person_Born_1945-03-30> } # Replace with actual URI from step 1
    VALUES (?nickCurran) { <http://dbpedia.org/resource/Nick_Curran> }

    ?person dbo:member ?membership .
    ?membership dbo:band ?band .

    ?nickCurran dbo:associatedMusicalArtist ?association .
    ?association dbo:musicalArtist ?associatedArtist .

    FILTER(?band = ?associatedArtist)
}
```",6,8,7,3,2,3,3,71,0,0,1,0,0.0,0
472,3,train,"Give me the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen.",SELECT ?result WHERE { <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?deathPlace WHERE {
  ?person a dbo:Person ;
          foaf:name ""Christian Ditlev Ammentorp Hansen""@en .
  ?person dbo:deathPlace ?deathPlace .
  FILTER EXISTS { ?deathPlace a dbpedia-owl:Settlement }
}
```",1,2,2,1,1,2,3,28,0,0,1,0,0.0,0
687,26,train,"Give me the player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://dbpedia.org/property/starring> ?v2 . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?film dbo:director dbr:Manuel_Huerga .
  ?film dbo:starring ?actor .
  
  ?actor dbo:occupation ?occupation1 .
  ?actor dbo:occupation ?occupation2 .

  FILTER (
    (str(?occupation1) = ""soccer player"" || str(?occupation1) = ""Athlete"") &&
    (str(?occupation2) = ""soccer player"" || str(?occupation2) = ""Athlete"")
  )
}
```",3,6,4,3,1,3,3,71,0,0,7,0,0.0,0
756,51,train,"Give me the native of the administration, that is a country, of Theodor Heuss and manager of the team, that is a soccer club season and a sports season and a sports team season, of the person born, that is a sports manager, on 1968-08-26.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?result <http://dbpedia.org/ontology/birthPlace> ?v4 . ?v1 <http://dbpedia.org/ontology/birthDate> ""1968-08-26""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://dbpedia.org/ontology/manager> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?nativeCountry ?soccerClub ?season
WHERE {
    # Theodor Heuss's native country
    dbr:Theodor_Heuss dbo:nationality dbr:Germany .
    
    # Sports manager born on 1968-08-26
    ?manager a dbo:SportsManager ;
            dbo:birthDate ""1968-08-26""^^xsd:date .

    # Soccer club managed by the sports manager
    ?management dbo:agent ?manager ;
                dbo:team dbr:Soccer_Club ;
                dbo:season ?season .
    
    # Linking soccer club to a specific season
    ?soccerClub dbo:sportTeamSeason ?season .
}
```",5,10,6,3,2,3,3,71,0,0,3,0,0.0,0
531,25,train,"Give me the office of Mariano Rajoy and office of the leader, that is a politician, of Conservative Republican Party (Spain).",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Conservative_Republican_Party_(Spain)> <http://dbpedia.org/property/leader> ?v1 . ?v1 <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?marianoRajoyOffice ?partyLeader ?leaderOffice
WHERE {
  # Mariano Rajoy's office
  dbr:Mariano_Rajoy dbo:position ?marianoRajoyOffice .

  # Conservative Republican Party (Partido Popular) leader and their office
  dbr:People's_Party_(Spain) dbo:leader ?partyLeader .
  OPTIONAL { ?partyLeader dbo:position ?leaderOffice . }
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
347,8,train,Give me the father of Cecilia Renata of Austria.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cecilia_Renata_of_Austria> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?ceciliaRenata dbo:mother dbr:Cecilia_Renata_of_Austria .
  ?ceciliaRenata dbo:father ?father .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
198,33,train,Give me the force of the awardee of the award of Quincy Adams Gillmore and war of Amasa Tracy.,SELECT ?result WHERE { <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> ?v3 . <http://dbpedia.org/resource/Quincy_Adams_Gillmore> <http://dbpedia.org/property/awards> ?v0 . ?v3 <http://dbpedia.org/property/awards> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force WHERE {
  # Quincy Adams Gillmore's award
  ?gillmore dbo:award dbr:Military_Medal_of_Honor .
  
  # Amasa Tracy's war service
  ?tracy dbo:servedIn dbr:American_Civil_War .

  # Both served in the Union Army during the American Civil War
  ?unionForce dbo:partOf dbr:Union_Army_(American_Civil_War) ;
              dbo:member ?gillmore ;
              dbo:member ?tracy .
  
  BIND(?unionForce AS ?force)
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
80,3,train,Give me the author of Smartbomb (book).,SELECT ?result WHERE { <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?book a dbo:Book ;
        rdfs:label ""Smartbomb""@en .
  OPTIONAL { ?book dbo:author ?author . }
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
816,46,train,"Give me the actor of the movie, that is a work, with the person decedent at Los Angeles and parent of the professional in Photographer.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/starring> ?v2 . ?v2 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/ontology/child> ?v4 . ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v4 <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor WHERE {
  ?decedent dbo:deathPlace dbr:Los_Angeles ;
            dbo:parent ?parent .
  
  ?parent a dbo:Photographer .

  ?work dbo:creator ?parent ;
        a dbo:CreativeWork .

  ?movie dbo:work ?work ;
         a dbo:Film .

  ?actor dbo:film ?movie ;
         a dbo:Actor .
}
```",5,6,6,3,2,3,3,71,0,0,3,0,0.0,0
263,8,train,"Give me the native of the birthplace, that is a region and a country, of William Gayner.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. <http://dbpedia.org/resource/William_Gayner> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. },"```sparql
SELECT ?nativeName WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace rdf:type dbo:Region ;
              dbo:country dbr:United_Kingdom ;
              rdfs:label ""Scotland""@en .
  OPTIONAL { ?birthPlace foaf:name ?nativeName . }
  FILTER (lang(?nativeName) = 'gd' || lang(?nativeName) = 'sco') # Assuming Gaelic or Scots
  VALUES ?person { dbr:William_Gayner }
}
```",2,4,3,2,1,2,3,28,0,0,935,0,0.0,0
769,9,train,"Give me the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on the birthday of Tony Hollings.",SELECT ?result WHERE { <http://dbpedia.org/resource/Tony_Hollings> <http://dbpedia.org/ontology/birthDate> ?v0 . ?result <http://dbpedia.org/ontology/birthDate> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. },"```sparql
# Part 1: Get the birth date of Tony Hollings
SELECT ?birthDate WHERE {
    dbpedia:Tony_Hollings dbo:birthDate ?birthDate .
}

# Part 2: Find a person matching all criteria using the retrieved birthdate
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person WHERE {
    # Replace 'YYYY-MM-DD' with the actual date obtained from part 1
    ?person dbo:birthDate ""YYYY-MM-DD""^^xsd:date .
    
    ?person a dbo:Athlete ;
            a dbo:SoccerPlayer ;
            a dbo:SportsManager ;
            a dbo:SoccerManager .
}
```

Note: Replace `""YYYY-MM-DD""` in the second query with the actual birthdate obtained from the first query.",2,6,3,2,1,3,2,20,0,0,1,0,0.0,0
609,5,train,"Give me the birth place, that is a region and an administrative region, of Paulus Powell.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. <http://dbpedia.org/resource/Paulus_Powell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?birthPlace WHERE {
  ?person dbo:birthName ""Paulus Powell"" .
  ?person dbo:birthPlace ?birthPlace .
  FILTER EXISTS { ?birthPlace rdf:type dbp:Region . }
  FILTER EXISTS { ?birthPlace rdf:type dbo:AdministrativeRegion . }
}
```",1,3,2,1,1,3,3,71,0,0,2,0,0.0,0
198,52,train,"Give me the war of the awardee of the show, that is an award, of United States Congress and entity in Charleston, South Carolina and force of the awardee of Gillmore Medal.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?v5 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?result <http://dbpedia.org/ontology/commander> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v3 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v2 <http://dbpedia.org/property/awards> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?war ?entity ?force WHERE {
  # Find awards given by the United States Congress
  ?award dbo:awardingBody dbr:United_States_Congress ;
         dbo:recipient ?entity .

  # Filter for entities in Charleston, South Carolina
  ?entity dbp:location dbr:Charleston,_South_Carolina .

  # Find forces or individuals associated with the Gillmore Medal
  ?gillmoreRecipient dbo:award dbr:Gillmore_Medal ;
                    dbo:memberOf ?force .
  
  # Link the entity to the force that received the Gillmore Medal
  ?entity dbo:memberOf ?force .

  # Find wars related to these entities or forces
  ?war dbo:participatingMilitaryUnit ?force .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
353,37,train,"Give me the child of Elvira of Castile, Queen of Sicily and father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?v0 . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?manfred WHERE {
  ?elvira dbo:spouse dbr:Friedrich_II._of_Sicily .
  ?elvira rdfs:label ""Elvira of Castile""@en .
  
  ?manfred dbo:childOf ?elvira ;
           dbo:parent ?federick ;
           dbo:spouse ?beatrice ;
           dbo:officeHolder true ;
           dbo:royalty true .

  ?conradin dbo:childOf ?manfred ;
            dbo:royalty true .
  
  ?federick rdfs:label ""Friedrich II of Sicily""@en .
  ?beatrice rdfs:label ""Beatrice of Savoy""@en .
  ?conradin rdfs:label ""Conradin, King of Jerusalem and Sicily""@en .

  FILTER(CONTAINS(LCASE(?manfred), ""manfred""))
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
311,12,train,Give me the associated musical artist of Filthy Friends and band member of the writer of No Alternative.,SELECT ?result WHERE { <http://dbpedia.org/resource/Filthy_Friends> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . <http://dbpedia.org/resource/No_Alternative> <http://dbpedia.org/property/writer> ?v0 . },"```sparql
SELECT ?person WHERE {
  # Find Corin Tucker's association with Filthy Friends
  ?filthyFriends dbo:member ?corinTucker .
  ?corinTucker foaf:name ""Corin Tucker"" .

  # Find Kurt Cobain as a member of Nirvana, the band associated with Dave Grohl (No Alternative)
  ?nirvana dbo:leadMember ?kurtCobain .
  ?kurtCobain foaf:name ""Kurt Cobain"" .

  # Check if Corin Tucker is also connected to Nirvana
  OPTIONAL { 
    ?sleaterKinney dbo:member ?corinTucker .
    ?nirvana dbo:associatedBandMember ?corinTucker .
  }

  FILTER(?corinTucker = ?person)
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
103,38,train,Give me the professional in the alter ego of The Shadow and professional in the profession of Shatrughan Sinha.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgoName ?profession
WHERE {
  # Find the alter ego (real name) of The Shadow
  OPTIONAL { 
    dbr:The_Shadow dbo:alias dbr:Lamont_Cranston .
    dbr:Lamont_Cranston rdfs:label ?alterEgoName .
    FILTER(LANG(?alterEgoName) = ""en"")
  }

  # Find the profession of Shatrughan Sinha
  OPTIONAL {
    dbr:Shatrughan_Sinha dbo:profession ?profession .
    FILTER(LANG(?profession) = ""en"")
  }
}
```",4,4,5,2,2,3,3,71,0,0,39640,0,0.0,0
198,49,train,"Give me the entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05 and war of the awardee of Medal of Honor.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v0 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/place> ?v1 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?birthplace ?war WHERE {
  # Find the person who died on 1850-08-05
  ?person dbo:dateOfDeath ?deathDate .
  FILTER (STR(?deathDate) = ""1850-08-05"") .

  # Get their birthplace, ensuring it's an American settlement
  ?person dbo:birthPlace ?birthplace .
  ?birthplace a dbo:Settlement ;
              dbo:country dbr:United_States_of_America .

  # Find Medal of Honor awardees related to wars
  ?awardee dbo:award ?medalOfHonor .
  ?medalOfHonor rdfs:label ""Medal of Honor""@en .
  ?awardee dbo:war ?war .

  # Ensure the war is connected to the birthplace in some way (common entity)
  OPTIONAL { ?birthplace dbo:relatedTo ?war }
}
```",5,7,6,3,2,3,3,71,0,0,2,0,0.0,0
375,0,train,Give me the entity in Japan.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Japan> . },"```sparql
SELECT ?entity WHERE {
  ?entity dbo:country dbr:Japan .
}
```",1,1,2,1,1,2,3,28,0,8916,104,0.0,0.0,0
311,7,train,"Give me the associated musical artist of the associated musical artist, that is an artist, of R.E.M..",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/R.E.M.> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . },"```sparql
SELECT ?finalArtist WHERE {
  # Find an associated artist of R.E.M.
  ?artist1 dbo:associatedMusicalArtist dbr:R.E.M. .
  
  # Find an associated artist of the first artist
  ?artist2 dbo:associatedMusicalArtist ?artist1 .

  # Ensure the final artist is known as a musical artist
  ?finalArtist rdfs:label ?label .
  FILTER(CONTAINS(LCASE(?label), ""musician"") || CONTAINS(LCASE(?label), ""band"") || CONTAINS(LCASE(?label), ""singer""))

  # Bind the second artist to the final artist if they are the same entity
  BIND(IF(STR(?artist2) = STR(?finalArtist), ?finalArtist, NULL) AS ?finalArtist)
}
LIMIT 1
```",2,3,3,2,1,3,2,20,0,0,28,0,0.0,0
782,50,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and band of the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?result <http://dbpedia.org/ontology/bandMember> ?v4 . ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?associatedArtist ?band 
WHERE {
  ?person a dbo:MusicalArtist ;
          dbo:birthDate ?date .
  FILTER (YEAR(?date) = 1945 && MONTH(?date) = 3 && DAY(?date) = 30)
  
  OPTIONAL { ?person dbo:musicalArtist ?associatedArtist . }
  OPTIONAL {
    ?bandMember a dbo:Band ;
                dbo:member ?person .
    ?bandMember rdfs:label ?band .
  }
}
```",5,7,6,3,2,3,3,71,0,2,1,0.0,0.0,0
816,40,train,"Give me the parent of Amy Arbus and parent of Doon Arbus and actor of the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/property/starring> ?v2 . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?amyParent ?doonParent ?actor ?movie WHERE {
  # Amy Arbus's parent
  OPTIONAL { 
    dbr:Amy_Arbus dbo:parent ?amyParent .
  }

  # Doon Arbus's parent
  OPTIONAL { 
    dbr:Doon_Arbus dbo:parent ?doonParent .
  }

  # Find a person who died in Los Angeles and acted in a movie
  {
    SELECT DISTINCT ?decedent ?movie WHERE {
      ?decedent dbo:deathPlace dbr:Los_Angeles ;
                dbo:actor ?actor .
      ?actor dbo:work ?movie .
    }
  } UNION {
    SELECT DISTINCT ?decedent ?movie WHERE {
      ?decedent dbo:deathPlace dbr:Los_Angeles ;
                dbo:filmRole ?role .
      ?role dbo:film ?movie .
    }
  }

  # Bind the actor and movie to variables
  OPTIONAL { 
    ?actor a dbo:Actor ;
           dbo:work ?movie .
  }
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
37,8,train,"Give me the birthplace of Bob Crewe and birthplace of the work, that is an artist and a musical artist, of Ethan Iverson.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v2 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Ethan_Iverson> . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Bob_Crewe> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query to find the birthplace of Bob Crewe
SELECT ?birthPlace WHERE {
  ?person dbo:name ""Bob Crewe""@en .
  ?person dbo:birthPlace ?birthPlace .
}

UNION

# Query to find the birthplace associated with Ethan Iverson's work, specifically ""The Bad Plus""
SELECT ?birthPlace WHERE {
  ?work dbo:artist ?person .
  ?person rdfs:label ""Ethan Iverson""@en .
  ?work dbo:name ""The Bad Plus""@en .
  ?work dbo:birthPlace ?birthPlace .
}
```",3,5,4,2,2,2,2,9,0,0,1,0,0.0,0
203,33,train,"Give me the military force of the war, that is a military conflict and an event, of the reference to William Bayne and commander in French campaign in Egypt and Syria.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v0 <http://dbpedia.org/ontology/battle> ?v3 . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""William Bayne""@en . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
  ?campaign dbo:partOf ?war .
  ?campaign dbo:location ?location .
  ?campaign dbo:commander ?commander .
  
  FILTER(CONTAINS(LCASE(?campaign), ""egypt and syria""))
  FILTER(CONTAINS(LCASE(?commander), ""napoleon bonaparte""))

  ?opposingForce dbo:participatedIn ?campaign .
  ?opposingForce dbo:country dbr:United_Kingdom .

  ?militaryForce dbo:partOf ?opposingForce .
  
  OPTIONAL { ?militaryForce rdfs:label ?label FILTER(LANG(?label) = ""en"") }
}
```",4,6,5,3,2,3,3,71,0,0,2,0,0.0,0
293,47,train,"Give me the party member of the ruling party in Central, Louisiana and spouse of the actor of the product, that is a film, of Nat Levine.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v4 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/ontology/party> ?v2 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/property/starring> ?v4 . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v2 . }","```sparql
SELECT DISTINCT ?partyMember ?spouse WHERE {
  # Step 1: Identify Nat Levine's film
  ?film dbo:producer dbr:Nat_Levine .
  
  # Step 2: Find an actor from that film
  ?film dbo:starring ?actor .

  # Step 3: Determine the spouse of the actor
  ?actor dbo:spouse ?spouse .

  # Step 4: Identify the ruling party in Central, Louisiana
  ?location dbr:Central,_Louisiana .
  ?location dbo:government ?government .
  ?government dbo:rulingParty ?rulingParty .

  # Step 5: Find a member of that ruling party
  ?partyMember dbo:memberOf ?rulingParty .
  
  FILTER(?spouse != null)
}
```",5,6,6,3,2,3,3,71,0,0,2,0,0.0,0
595,46,train,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v4 <http://dbpedia.org/property/author> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v4 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://dbpedia.org/property/author> ?v1 . },"```sparql
SELECT ?spouse WHERE {
  ?hillary dbo:spouse ?bill .
  ?bill foaf:name ""Bill Clinton""@en .
  ?bill dbo:occupation dbo:Politician .
  ?bill dbo:officeHolderOf ?office .
  ?book dbo:author ?hillary ;
        dbo:author ?bill .
  ?book rdf:type dbo:Book .
}
```",5,12,6,3,2,3,3,71,0,0,1,0,0.0,0
628,30,train,"Give me the person born as Ackquille Jean Pollard and band member of Uncle Murda and native of the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.","SELECT ?result WHERE { <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?v1 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?result <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/property/birthName> ""Ackquille Jean Pollard""@en . }","```sparql
SELECT ?person WHERE {
  ?person foaf:name ""French Montana""@en .
  ?person dbo:birthName ""Ackquille Jean Pollard"" .
  ?band dbo:member ?person ;
        rdfs:label ""Uncle Murda""@en .
  OPTIONAL { 
    ?award dbo:location ?place .
    ?place rdfs:label ""Coro de la Pontificia Universidad Católica de Puerto Rico""@es ;
           rdf:type dbo:Region ;
           dbo:country dbr:United_States .
  }
}
```",4,8,5,2,3,3,3,71,0,0,1,0,0.0,0
203,14,train,"Give me the military force of the force, that is an event and a societal event, of Robert Calder.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
  ?calder a dbo:MilitaryPerson ;
         foaf:name ""Robert Calder""@en ;
         dbo:militaryBranch ?branch .
  
  ?branch dbo:country dbr:United_Kingdom ;
          dbo:rankedUnit ?unit .

  ?unit rdfs:label ?militaryForce ;
        FILTER (lang(?militaryForce) = 'en') .

  OPTIONAL {
    ?calder dbo:participatedInEvent ?event .
    ?event dbo:eventType dbr:Societal_event ;
           dbo:eventType dbr:Military_conflict .
  }
}
```",2,4,3,2,1,3,3,71,0,0,34,0,0.0,0
595,55,train,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House and commander in the war, that is a disease and a societal event, of United States Navy and author of the work, that is a written work and a book and a work, of Bill Clinton.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v5 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v3 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v3 . ?v5 <http://dbpedia.org/property/author> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
SELECT ?spouse WHERE {
  ?book dcterms:title ""An Invitation to the White House""@en .
  ?book dbo:author <http://dbpedia.org/resource/Hillary_Clinton> .
  ?harry dbo:spouse ?spouse .
  ?spouse rdf:type dbo:Politician ;
          dbo:officeHolder <http://dbpedia.org/resource/President_of_the_United_States> .
  FILTER (?spouse = <http://dbpedia.org/resource/Bill_Clinton>)
}
```",6,13,7,2,3,3,3,71,0,0,1,0,0.0,0
158,24,train,"Give me the native of the administration, that is a country, of Nicholas II of Russia and native of the administration of Alexander II, Grand Duke of Finland.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v0 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Nicholas_II_of_Russia> . ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Alexander_II,_Grand_Duke_of_Finland> . }","```sparql
SELECT ?person ?name ?birthPlace WHERE {
  VALUES ?person { 
    dbr:Nicholas_II_of_Russia 
    dbr:Alexander_II,_Grand_Duke_of_Finland 
  }
  ?person rdfs:label ?name .
  FILTER (lang(?name) = 'en')
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
```",4,5,5,2,2,2,3,28,0,0,126,0,0.0,0
119,14,train,"Give me the entity in the residence, that is a country, of the native, that is Polish and an athlete, of Łódź.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Poland>. ?result <http://dbpedia.org/ontology/place> ?v0 . ?v2 <http://dbpedia.org/property/residence> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Łódź> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. },"```sparql
SELECT ?athlete ?residence WHERE {
  ?athlete dbo:birthPlace dbr:Łódź .
  ?athlete dbo:nationality dbr:Poland .
  ?athlete dbo:occupation dbr:Athlete .
  
  OPTIONAL { ?athlete dbo:residence ?residence . }
  
  FILTER (isLiteral(?residence) && langMatches(lang(?residence), ""en""))
}
```",3,6,4,3,1,3,2,20,0,0,108,0,0.0,0
668,25,train,Give me the person born as the birth name of Joey B and professional in Musician.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . <http://dbpedia.org/resource/Joey_B> <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  # Assuming Joey B's birth name is Joseph Benjamin Akuffo (based on external knowledge)
  VALUES ?birthName { ""Joseph Benjamin Akuffo"" }

  ?person dbo:birthName ?birthName .
  ?person a dbo:MusicArtist .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
737,38,train,"Give me the child of the child of Duke Philipp of Württemberg and child of the child, that is a royalty, of Archduke Charles Louis of Austria.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> ?v3 . },"```sparql
# Query to find the child of the child of Duke Philipp of Württemberg
SELECT ?grandchild WHERE {
  ?philipp dbo:spouse ?spouse .
  ?philipp foaf:name ""Philipp Ludwig, Duke of Württemberg""@en .
  ?philipp dbo:child ?child1 .
  ?child1 dbo:child ?grandchild .
}

UNION

# Query to find the child of the child of Archduke Charles Louis of Austria who is royalty
SELECT ?royalGrandchild WHERE {
  ?charlesLudwig dbo:spouse ?spouse .
  ?charlesLudwig foaf:name ""Charles Louis, Archduke of Austria""@en .
  ?charlesLudwig dbo:child ?child2 .
  ?child2 dbo:child ?grandchild2 .
  ?grandchild2 rdf:type dbo:RoyalPerson .
  BIND(?grandchild2 AS ?royalGrandchild)
}
```",4,5,5,2,2,3,3,71,0,0,2,0,0.0,0
347,16,train,Give me the child of the parent of Archduke Charles Joseph of Austria.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . },"```sparql
SELECT ?child WHERE {
  ?archduke dbo:parent ?parent .
  FILTER(STR(?archduke) = ""Archduke_Charles_Joseph_of_Austria"")
  
  ?parent dbo:child ?child .
  FILTER(?child != ?archduke)
}
```",2,2,3,2,1,3,3,71,0,0,4,0,0.0,0
871,57,train,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v3 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/child> ?v4 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . ?v4 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?father WHERE {
  # Frederick Stanley, 16th Earl of Derby
  ?frederick rdf:type dbo:Person ;
             foaf:name ""Frederick Stanley"" ;
             dbo:title ""16th Earl of Derby""@en .
  
  # His child who is a politician
  ?child1 dbo:parent ?frederick ;
          dbo:occupation dbo:Politician .

  # Edward Stanley, 17th Earl of Derby
  ?edward rdf:type dbo:Person ;
           foaf:name ""Edward Stanley"" ;
           dbo:title ""17th Earl of Derby""@en .
  
  # His parent who is a politician and an office holder
  ?parent1 dbo:child ?edward ;
           dbo:occupation dbo:Politician, dbo:OfficeHolder .

  # Victor Stanley (Royal Navy officer)
  ?victor rdf:type dbo:Person ;
           foaf:name ""Victor Stanley"" ;
           dbo:occupation dbo:RoyalNavyOfficer .
  
  # His parent
  ?parent2 dbo:child ?victor .

  # Linking the relationships
  FILTER(?parent1 = ?parent2)
  ?child1 dbo:parent ?parent1 .
  
  # The father of the child who is a politician from Frederick Stanley's lineage
  ?father dbo:child ?child1 .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
392,4,train,Give me the member of 1. FC Magdeburg and reference to .,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/1._FC_Magdeburg> . ?result <http://xmlns.com/foaf/0.1/name> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player ?playerLabel WHERE {
  ?player dbo:team dbr:1._FC_Magdeburg .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,2,3,1,2,2,2,9,0,0,2,0,0.0,0
293,33,train,"Give me the spouse of the actor of the product, that is a film, of Nat Levine and party member of Republican Party (United States).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v0 <http://dbpedia.org/property/starring> ?v3 . },"```sparql
SELECT DISTINCT ?actor ?spouse WHERE {
  # Step 1: Find films produced by Nat Levine
  ?film dbo:producer dbpedia:Nat_Levine .
  
  # Step 2: Find actors in those films
  ?film dbo:starring ?actor .

  # Step 3: Check if the actor is a member of the Republican Party
  ?actor dbo:partyMemberOf <http://dbpedia.org/resource/Republican_Party_(United_States)> .
  
  # Step 4: Find the spouse of the actor
  OPTIONAL { ?actor dbo:spouse ?spouse . }
}
```",4,5,5,3,2,3,3,71,0,0,2,0,0.0,0
198,30,train,"Give me the force of Quincy Adams Gillmore and war of Amasa Tracy and entity in the birthplace, that is a settlement and American, of Henry Clay Lewis.",SELECT ?result WHERE { <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/place> ?v1 . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?gillmoreForce ?tracyWar ?lewisBirthplace WHERE {
  # Quincy Adams Gillmore's military force
  OPTIONAL { 
    dbr:Quincy_A._Gillmore dbo:militaryUnit ?gillmoreForce .
  }

  # Amasa Tracy's war involvement
  OPTIONAL { 
    dbr:Amasa_Tracy dbo:servedInMilitaryConflict ?tracyWar .
  }
  
  # Henry Clay Lewis's birthplace, ensuring it is a settlement and American
  OPTIONAL {
    dbr:Henry_Clay_Lewis dbo:birthPlace ?lewisBirthplace ;
                        rdf:type dbo:American .
    ?lewisBirthplace rdf:type dbo:Settlement .
  }
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
198,32,train,Give me the force of the awardee of Gillmore Medal and war of the awardee of Medal of Honor.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?v3 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?result <http://dbpedia.org/ontology/commander> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient ?force ?war WHERE {
  ?recipient dbo:awarded (dbr:Gillmore_Medal OR dbr:Medal_of_Honor) .
  OPTIONAL { ?recipient dbo:militaryForce ?force . }
  OPTIONAL { ?recipient dbo:participatedInWar ?war . }
  FILTER(?force != """" && ?war != """")
}
```",4,4,5,2,2,3,3,71,0,0,3,0,0.0,0
943,17,train,"Who is the father, that is a royalty and an office holder, of the child of Baeda Maryam I?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
SELECT ?father WHERE {
  ?child dbo:parent ?father .
  ?father rdf:type dbo:Monarch ;
          dbo:country dbr/Ethiopia .
  ?baedaMaryam dbo:child ?child .
  FILTER(?baedaMaryam = dbp:Baeda_Maryam_I)
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
668,18,train,Give me the professional in Musician and person born as Darryl Paa Kwesi Bannerman-Martin and associated musical artist of $pacely.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?stevieWonder ?associatedArtist WHERE {
  ?stevieWonder a dbo:MusicalArtist ;
                foaf:name ""Stevie Wonder"" ;
                dbo:birthName ""Darryl Paa Kwesi Bannerman-Martin""@en .
  
  OPTIONAL { 
    ?association dbo:artist ?stevieWonder ;
                 dbo:associatedBandOrMusician ?associatedArtist .
    
    FILTER regex(?associatedArtist, ""Michael Jackson"", ""i"")
  }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
769,17,train,"Give me the player in Ye Jia and player in the manager, that is a sports manager and a soccer manager, of the reference, that is an organisation and a sports club and a sports team and a soccer club, to Hong Kong C.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Hong Kong C""@en . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. <http://dbpedia.org/resource/Ye_Jia> <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/ontology/manager> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
  # Identify Hong Kong C as an organization, sports club, sports team, and soccer club
  dbr:Hong_Kong_C a dbo:SportsClub ;
                  a dbo:SportsTeam ;
                  a dbo:SoccerClub ;
                  a dbo:Organization .

  # Find the player associated with Ye Jia who is also a manager
  ?player dbo:managerOf dbr:Hong_Kong_C .
  ?player dbo:member dbr:Ye_Jia .

  # Ensure this person has roles both as a sports manager and a soccer manager
  ?player a dbo:SportsManager ;
          a dbo:SoccerManager .
}
```",4,10,5,3,2,3,2,20,0,0,2,0,0.0,0
557,46,train,"Give me the professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of the claim to fame, that is a work, of Cora Sue Collins.","SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . ?v2 <http://dbpedia.org/property/alterEgo> ?v1 . ?v4 <http://dbpedia.org/ontology/producer> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?professional ?fictionalCharacter WHERE {
  # Find the occupation of Kent Allard
  dbr:Kent_Allard (dbo:occupation) ?professional .

  # Find the notable work of Cora Sue Collins
  dbr:Cora_Sue_Collins dbo:notableWork ?work .

  # Check if there's a fictional character associated with the professional identity
  ?professional dbo:fictionalCharacter ?fictionalCharacter .
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
687,24,train,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and team of Pablo Aimar.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v2 . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?player WHERE {
    ?series dbo:subject dbr:Manchester_City_F.C.
              ; dbo:actor ?player .
    
    ?player a dbo:SoccerPlayer ;
            dbo:athleteOfSport dbr:Soccer .

    OPTIONAL { 
        ?transfer dbo:fromClub dbr:Liverpool_F.C. ;
                  dbo:toClub dbr:Manchester_City_F.C. ;
                  dbo:player ?player .
    }

    OPTIONAL {
        ?valenciaTeam dbo:member ?player .
        ?valenciaTeam dbo:name ""Valencia CF""^^xsd:string .
    }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
398,14,train,Give me the player in the writer of the work of Aleksandr Filimonov.,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://dbpedia.org/property/writer> ?v0 . ?v2 <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Aleksandr_Filimonov> . },"```sparql
SELECT ?work WHERE {
  ?author foaf:name ""Aleksandr Filimonov""@en .
  ?author dbo:creatorOf ?work .
}
```

This query retrieves works created by Aleksandr Filimonov. Once we have a specific work, we can further query to find the main character:

```sparql
SELECT ?player WHERE {
  <http://dbpedia.org/resource/Specific_Work> dbo:mainCharacter ?player .
}
```
Replace `<http://dbpedia.org/resource/Specific_Work>` with the actual URI of the work identified from the first query.",3,3,4,3,1,3,2,20,0,0,17,0,0.0,0
140,15,train,"Give me the commander in the war, that is a societal event, of the military force of Pickett's Charge and party member of Republican Party (United States).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Pickett's_Charge> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:MilitaryPerson .
  ?person dbo:participatedInBattle ?battle .
  ?battle rdfs:label ""Pickett's Charge""@en .
  FILTER(CONTAINS(LCASE(?battle), ""pickett's charge""))
  
  ?person dbo:memberOfPoliticalParty ?party .
  ?party rdfs:label ""Republican Party (United States)""@en .

  OPTIONAL { ?person foaf:name ?name . }
}
```",4,5,5,3,2,3,2,20,0,0,4,0,0.0,0
557,19,train,Give me the producer of The Adventures of Tom Sawyer (1938 film) and professional in the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
# Query for the producer of ""The Adventures of Tom Sawyer"" (1938 film)
SELECT ?producer WHERE {
  dbpedia:Adventures_of_Tom_Sawyer_(1938_film) dbo:producer ?producer .
}

# Query for the profession of Lamont Cranston, alter ego of The Shadow
SELECT ?profession WHERE {
  dbpedia:The_Shadow dbo:alterEgo dbpedia:Lamont_Cranston .
  dbpedia:Lamont_Cranston dbo:occupation ?profession .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
557,48,train,"Give me the professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print) and producer of the claim to fame, that is a movie and a work, of Janet Gaynor.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://dbpedia.org/property/alterEgo> ?v2 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v3 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . }","```sparql
# Step 1: Identify the author of the fictional character ""Kent Allard""
SELECT ?author WHERE {
  ?character dbo:wikiPageRedirects db:Q1234567; # Assuming Q1234567 is the DBpedia ID for Kent Allard
             dbo:creator ?author.
}

# Step 2: Find a notable film associated with Janet Gaynor
SELECT ?film WHERE {
  wd:Q12345 dbo:starring ?actor . # Assuming Q12345 is the DBpedia ID for Janet Gaynor
  ?actor rdfs:label ""Janet Gaynor""@en .
  ?film dbo:starring ?actor.
}

# Step 3: Find a common professional link between the author and the producer of the film
SELECT DISTINCT ?professional WHERE {
  # Assuming we found the author from step 1 as ?author and the film from step 2 as ?film
  VALUES (?author) { <http://dbpedia.org/resource/Author_Name> } # Replace with actual author URI
  VALUES (?film) { <http://dbpedia.org/resource/Film_Title> } # Replace with actual film URI

  OPTIONAL {
    ?professional dbo:profession ""Writer""@en .
    ?professional dbo:wikiPageRedirects ?author.
  }
  
  OPTIONAL {
    ?professional dbo:profession ""Film producer""@en .
    ?film dbo:producer ?professional.
  }

  FILTER (?professional != wd:Q12345) # Ensure it's not Janet Gaynor herself
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
595,44,train,"Give me the author of the work, that is a written work and a book and a work, of Bill Clinton and commander in the war, that is a disease and a societal event, of United States Navy and spouse of Hillary Clinton.",SELECT ?result WHERE { <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v4 <http://dbpedia.org/property/author> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v4 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?book a dbo:Book .
  ?book dbo:author dbr:Bill_Clinton .
  ?book dbo:title ""My Life""@en .
  OPTIONAL { ?book dbo:subject ?subject . FILTER(CONTAINS(LCASE(?subject), ""gulf war"")) }
}
```",5,10,6,2,3,3,3,71,0,0,1,0,0.0,0
198,1,train,Give me the force of Quincy Adams Gillmore.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?rank WHERE {
  ?person a dbo:MilitaryPerson ;
          foaf:name ""Quincy Adams Gillmore""@en .
  
  OPTIONAL { 
    ?person dbo:militaryRank ?rank .
  }
}
```",1,1,2,1,1,3,3,71,0,0,5,0,0.0,0
557,53,train,"Give me the producer of the claim to fame, that is a movie and a work, of Janet Gaynor and producer of The Adventures of Tom Sawyer (1938 film) and professional in the alter ego of the reference, that is a fictional character, to Kent Allard (print).","SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/alterEgo> ?v2 . ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://xmlns.com/foaf/0.1/name> ""Kent Allard (print)""@en . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?result <http://dbpedia.org/property/occupation> ?v2 . }","```sparql
SELECT ?producer WHERE {
  # Janet Gaynor's claim to fame: ""Seventh Heaven"" (1927)
  ?seventhHeaven dcterms:title ""Seventh Heaven""@en .
  ?seventhHeaven dbo:starring Janet_Gaynor .
  
  # Producer of ""The Adventures of Tom Sawyer"" (1938 film)
  ?tomSawyerFilm dcterms:title ""The Adventures of Tom Sawyer""@en .
  ?tomSawyerFilm dbo:producer ?producer .

  # Hal Roach as a producer
  ?halRoach foaf:name ""Hal Roach""@en .
  ?halRoach dbo:worksFor ?studio .
  
  # Linking the producer to both films
  FILTER EXISTS { ?seventhHeaven dbo:producer ?halRoach }
  FILTER EXISTS { ?tomSawyerFilm dbo:producer ?halRoach }

  # Kent Allard's alter ego is Superman, created by Jerry Siegel
  ?superman dbo:alterEgo ""Kent Allard""@en .
  ?superman dbo:creator ?jerrySiegel .

  # Professional connection through Warner Bros.
  ?warnerBros foaf:name ""Warner Bros.""@en .
  ?jerrySiegel dbo:worksFor ?warnerBros .
  
  # Hal Roach's professional connections
  FILTER EXISTS { ?halRoach dbo:worksFor ?studio }
  FILTER EXISTS { ?studio foaf:name ?name . OPTIONAL { ?name = ""Warner Bros.""@en } }

  BIND(?producer AS ?result)
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
609,23,train,Give me the birth place of the awardee of the award of Vince Gilligan.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v2 . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/awards> ?v2 . },"```sparql
SELECT ?awardee ?birthPlace WHERE {
  ?award dcterms:creator <http://dbpedia.org/resource/Vince_Gilligan> .
  ?award dbo:recipient ?person .
  ?person foaf:name ?awardee .
  OPTIONAL { ?person dbp:birthPlace ?birthPlace . }
}
LIMIT 1
```",3,3,4,3,1,3,3,71,0,0,1,0,0.0,0
782,37,train,"Give me the associated musical artist of Nick Curran and band of the band member of the person born, that is a musical artist, on 1945-03-30.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/birthDate> ""1945-03-30""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?result <http://dbpedia.org/ontology/bandMember> ?v3 . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?bandMemberArtist WHERE {
  # Find Nick Curran's associated musical artist or band
  ?nickCurran a dbo:MusicalArtist ;
              foaf:name ""Nick Curran""@en .
  
  ?associatedBand dbo:member ?bandMember .

  # Check if the band member is also an individual musical artist
  ?bandMember a dbo:MusicalArtist ;
              dbp:birthdayYear ?year ;
              dbp:birthdayMonth ?month ;
              dbp:birthdayDay ?day .

  FILTER (?year = ""1945""^^xsd:gYear && 
          ?month = ""03""^^xsd:gMonth &&
          ?day = ""30""^^xsd:gDay)

}
```",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
943,33,train,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and child of Dawit I.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://xmlns.com/foaf/0.1/name> ?v2 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . ?v0 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgo ?child 
WHERE {
  # Find the alter ego of Lamont Cranston, known as The Shadow
  dbr:The_Shadow dbo:aliasName ""Lamont_Cranston""@en .
  dbr:Lamont_Cranston dbo:alsoKnownAs ?alterEgo .

  # Find the child of Dawit I
  dbr:Dawit_I dbo:child ?child .
  FILTER (str(?child) = str(dbr:Zara_Yaqob))
}
```",4,4,5,3,2,3,3,71,0,0,3,0,0.0,0
687,14,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/coach> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?team WHERE {
  ?person a dbo:SoccerPlayer ;
          dbo:birthDate ""1979-11-03""^^xsd:date ;
          dbo:occupation [a dbo:SoccerManager] .
  
  OPTIONAL { 
    ?person dbo:currentTeam ?team .
  }
}
```",2,4,3,2,1,3,3,71,0,0,1,0,0.0,0
941,2,train,"Give me the child of Ferdinand Albert II, Duke of Brunswick-Lüneburg.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Ferdinand_Albert_II,_Duke_of_Brunswick-Lüneburg> . }","```sparql
SELECT ?child WHERE {
  ?person dbo:spouse ?spouse .
  ?person foaf:name ""Ferdinand Albert II, Duke of Brunswick-Lüneburg""@en .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,3,2,20,0,0,2,0,0.0,0
859,11,train,"Give me the associated musical artist of Phantomsmasher and band member of the associated musical artist, that is a band and a group and an organisation, of Burnt by the Sun (band).",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. <http://dbpedia.org/resource/Phantomsmasher> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . <http://dbpedia.org/resource/Burnt_by_the_Sun_(band)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
SELECT DISTINCT ?artist ?bandMember WHERE {
  # Step 1: Identify Phantomsmasher and its associated musical artist
  ?phantomsmasher dbo:title ""Phantomsmasher"" .
  ?phantomsmasher dbo:artist ?artist .

  # Step 2: Find band members of the associated artist who are also a band/group/organization
  ?bandMember dbo:memberOf ?artist ;
              rdf:type dbpedia-owl:Band ;
              rdf:type dbpedia-owl:Organization .
  
  # Step 3: Ensure these members are linked to Burnt by the Sun (band)
  ?burntByTheSun dbo:title ""Burnt by the Sun"" ;
                 dbo:member ?bandMember .

}
```",3,6,4,2,2,3,2,20,0,0,5,0,0.0,0
756,52,train,"Give me the native of the administration, that is a country, of Theodor Heuss and manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season and manager of 2020–21 SBV Vitesse season.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/team> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v5 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?result <http://dbpedia.org/ontology/birthPlace> ?v5 . ?v2 <http://dbpedia.org/ontology/manager> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?nativeCountryLabel WHERE {
  # Theodor Heuss's native country
  dbr:Theodor_Heuss dbo:nationality dbr:Germany .

  # VfL Bochum manager in the 2006–07 season
  ?manager dbo:managedTeam dbr:VfL_Bochum ;
           dbo:position ""Manager"" ;
           dbo:teamSeasonStartYear ?startYear ;
           dbo:teamSeasonEndYear ?endYear .
  
  FILTER (?startYear <= 2006 && ?endYear >= 2007)

  # Successor league of VfL Bochum in the 2006–07 season
  ?successorLeague dbo:sport dbr:Soccer ;
                   dbo:memberTeam ?team .

  ?team dbo:seasonStartYear ?sStartYear ;
        dbo:seasonEndYear ?sEndYear .
  
  FILTER (?sStartYear > 2007)

  # SBV Vitesse manager in the 2020–21 season
  ?vitesseManager dbo:managedTeam dbr:SBV_Vitesse ;
                  dbo:position ""Manager"" ;
                  dbo:teamSeasonStartYear 2020 ;
                  dbo:teamSeasonEndYear 2021 .

  # Find the native country of this manager
  ?vitesseManager dbo:nationality ?nativeCountry .
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",6,13,7,3,3,3,3,71,0,0,1,0,0.0,0
706,16,train,Give me the birthplace of the awardee of Sangeet Natak Akademi Fellowship and birthplace of the actor of Akaler Shandhaney.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Sangeet_Natak_Akademi_Fellowship> . ?v3 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Akaler_Shandhaney> <http://dbpedia.org/property/starring> ?v3 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query to get the birthplace of Ustad Bismillah Khan (Sangeet Natak Akademi Fellowship awardee)
SELECT ?birthPlace WHERE {
  ?person dbo:award ""Sangeet_Natak_Akademi_Fellowship""@en.
  ?person foaf:name ""Ustad Bismillah Khan""@en.
  ?person dbo:birthPlace ?birthPlace.
}

UNION

# Query to get the birthplace of Soumitra Chatterjee (actor in Akaler Shandhaney)
SELECT ?birthPlace WHERE {
  ?film dbo:starring ?actor.
  ?actor foaf:name ""Soumitra Chatterjee""@en.
  ?film rdfs:label ""Akaler Shandhaney""@en.
  ?actor dbo:birthPlace ?birthPlace.
}
```",4,4,5,2,2,3,2,20,0,0,2,0,0.0,0
203,32,train,"Give me the military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v3 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bayneWar ?bayneOpponent ?regimentWar ?regimentOpponent WHERE {
  # Find the war or event involving William Bayne
  ?bayneEvent a dbo:MilitaryConflict ;
              dbo:commander dbr:William_Bayne_(Royal_Navy_officer) .
  
  OPTIONAL { 
    ?bayneEvent dbo:opposingForce ?bayneOpponent .
  }
  
  # Find the war or event involving the 30th (Cambridgeshire) Regiment of Foot
  ?regimentEvent a dbo:MilitaryConflict ;
                 dbo:commander dbr:30th_(Cambridgeshire)_Regiment_of_Foot .
  
  OPTIONAL { 
    ?regimentEvent dbo:opposingForce ?regimentOpponent .
  }
}
```",4,8,5,2,2,3,3,71,0,0,2,0,0.0,0
419,4,train,Give me the alma mater of Chennupati Jagadish and entity in Andhra Pradesh.,SELECT ?result WHERE { <http://dbpedia.org/resource/Chennupati_Jagadish> <http://dbpedia.org/ontology/almaMater> ?result . ?result <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Andhra_Pradesh> . },"```sparql
# Query to find the alma mater of Chennupati Jagadish
SELECT ?university WHERE {
  wd:Q123456 dbp:almaMater ?university .
}
```

```sparql
# Query to find an entity in Andhra Pradesh
SELECT DISTINCT ?entity ?label WHERE {
  ?entity wdt:P131 wd:Q1116 . # P131 is the property for ""located in the administrative territorial entity""
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",2,2,3,1,2,2,2,9,0,0,2,0,0.0,0
103,8,train,Give me the alter ego of The Shadow.,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?result . },"```sparql
SELECT ?alterEgo WHERE {
  ?shadow dbo:wikiPageRedirects db:The_Shadow .
  ?shadow dbo:alterEgo ?alterEgo .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
270,2,train,"Who is the person born, that is a politician, as Ada Jane Low?","SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/property/birthName> ""Ada Jane Low""@en . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person WHERE {
  ?person foaf:givenName ""Ada"" .
  ?person foaf:surname ""Low"" .
  ?person dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""politician""))
}
```",1,2,2,1,1,2,2,9,0,0,1,0,0.0,0
687,54,train,"Give me the player in the person born, that is an athlete, on 1955-02-22 and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and team of Pablo Aimar.","SELECT ?result WHERE { ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/property/starring> ?v5 . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . ?v3 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person dbo:birthDate ""1955-02-22""^^xsd:date .
  ?person dbo:occupation dbr:Athlete .
  ?film dbo:director dbr:Manuel_Huerga ;
        dbo:actor ?person .
  ?team dbo:member ?person .
  ?team dbo:member dbr:Pablo_Aimar .
}
```",6,10,7,3,3,3,3,71,0,0,1,0,0.0,0
557,54,train,"Give me the producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and professional in the alter ego of The Shadow and producer of A Star Is Born (1937 film).",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/knownFor> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> ?v3 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . },"```sparql
SELECT ?producer WHERE {
  ?film dbpedia-owl:starring <http://dbpedia.org/resource/Spencer_Tracy> .
  ?film dbpedia-owl:productionCompany ?company .
  ?company dbo:founder ?producer .
  FILTER EXISTS { 
    ?producer foaf:name ""David O. Selznick""@en
  }
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
19,2,train,Give me the birth name of John Boxer.,SELECT ?result WHERE { <http://dbpedia.org/resource/John_Boxer> <http://dbpedia.org/property/birthName> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?birthName WHERE {
  ?person a dbo:Person ;
          foaf:name ""John Boxer""@en .
  OPTIONAL { 
    ?person foaf:name ?birthName .
  }
}
```",1,1,2,1,1,2,2,9,1,0,1,1.0,0.5,0.6666666666666666
609,7,train,"Give me the reference, that is American, to El Deafo.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?nationality WHERE {
  ?author dbo:nationality dbr:United_States .
  ?author rdfs:label ""Cece Bell""@en .
  FILTER (LANG(?author) = 'en')
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
213,16,train,"Give me the country of the work of Lao She and birth place of the child, that is a politician, of Chiang Ching-kuo.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v3 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Lao_She> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Chiang_Ching-kuo> . ?v3 <http://dbpedia.org/ontology/country> ?result . },"```sparql
# Query for Lao She's work and its associated country
SELECT ?work ?country WHERE {
  ?author foaf:name ""Lao She""@zh .
  ?author dbo:work ?work .
  ?work dbo:country ?country .
}

UNION

# Query for Chiang Wei-kuo's birthplace
SELECT ?child ?birthPlace WHERE {
  ?parent foaf:name ""Chiang Ching-kuo"" .
  ?parent dbo:child ?child .
  ?child foaf:name ""Chiang Wei-kuo""@zh .
  ?child dbo:birthPlace ?birthPlace .
}
```",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
246,16,train,"Give me the parent of the child, that is a royalty, of Prince Faisal bin Hussein and parent of the child, that is a royalty, of Prince Faisal bin Hussein.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/parent> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Prince_Faisal_bin_Hussein> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?parent
WHERE {
  # Find Prince Faisal bin Hussein
  ?person a dbo:Person ;
          foaf:name ""Faisal bin Hussein""@en .
  
  # Identify his children who are royalty
  ?child dbo:spouseOrPartner ?person ;
         a dbo:Royalty .

  # Get the parent of these royal children (which should be Prince Faisal bin Hussein)
  ?child dbo:parent ?parent .
}
```",4,6,5,2,2,3,2,20,0,0,1,0,0.0,0
345,6,train,Give me the region of the time zone of Japan.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/timeZone> ?v1 . <http://dbpedia.org/resource/Japan> <http://dbpedia.org/property/timeZone> ?v1 . },"```sparql
SELECT ?region WHERE {
  dbpedia:Japan dbo:timeZone ?timeZone .
  ?timeZone dbo:region ?region .
}
```",2,2,3,2,1,2,2,9,0,0,2255,0,0.0,0
687,61,train,"Give me the player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/property/starring> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v3 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v5 <http://dbpedia.org/ontology/team> ?result . ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://dbpedia.org/ontology/coach> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?actor WHERE {
  # Find Marcelo Sarmiento's birthdate
  ?marceloSarmiento a dbo:SoccerPlayer ;
                   dbo:sportManagerTeam ?team ;
                   dbp:birthday ?birthdate .

  # Ensure Marcelo Sarmiento is also a soccer manager
  ?marceloSarmiento dbo:occupation dbr:Soccer_manager .

  # Find films by Manuel Huerga
  ?film dbo:director ?manuelHuerga .
  ?manuelHuerga rdfs:label ""Manuel Huerga""@en .

  # Find actors in these films who are also soccer players and athletes
  ?film dbo:actor ?actor .
  ?actor a dbo:SoccerPlayer ;
         a dbo:Athlete .

  # Ensure the actor's birthdate matches Marcelo Sarmiento's birthdate
  ?actor dbp:birthday ?birthdate .
}
```",6,11,7,3,2,3,3,71,0,0,1,0,0.0,0
293,38,train,"Give me the person born as the birth name of Ann Sothern and spouse of the actor of 1,000 Dollars a Minute.","SELECT ?result WHERE { <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v2 . ?v3 <http://dbpedia.org/ontology/spouse> ?result . ?result <http://dbpedia.org/property/birthName> ?v2 . <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v3 . }","```sparql
# Step 1: Find Ann Sothern's birth name
SELECT ?birthName WHERE {
    dbpedia:Ann_Sothern dbo:birthName ?birthName .
}

# Step 2: Identify the actor of ""1,000 Dollars a Minute""
SELECT ?actor WHERE {
    ?film dct:subject dbc:""1000_Dollars_a_Minute"" ;
           dbo:starring ?actor .
}

# Step 3: Find Ann Sothern's spouse
SELECT ?spouse WHERE {
    dbpedia:Ann_Sothern dbo:spouse ?spouse .
}

# Final step: Combine the results to find the person who matches both criteria
SELECT ?person WHERE {
    # Assuming we have found the birth name and actor from previous queries
    VALUES (?birthName) { ""Mary Ann Sothern"" }  # Example value, replace with actual result
    VALUES (?actorSpouse) { dbpedia:Actor_Spouse }  # Replace with actual DBpedia resource of the spouse

    ?person dbo:birthName ?birthName .
    ?person dbo:spouse ?actorSpouse .
}
```",4,4,5,2,2,3,3,71,0,0,1,0,0.0,0
353,10,train,"Give me the child of Elvira of Castile, Queen of Sicily and child of Roger II of Sicily.","SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?elvira dbo:spouse ?roger .
  ?elvira dbo:child ?child .
  ?roger dbo:child ?child .
  
  FILTER (str(?elvira) = ""Elvira_of_Castile,_Queen_of_Sicily""^^xsd:string)
  FILTER (str(?roger) = ""Roger_II_of_Sicily""^^xsd:string)
}
```",2,2,3,1,2,3,3,71,0,0,3,0,0.0,0
103,60,train,"Give me the professional in the alter ego of the series, that is a comics character, of The Shadow (video game) and actor of the movie, that is a television show, with the person born as Richard Grant Esterhuysen.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . ?v2 <http://dbpedia.org/property/starring> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v3 <http://dbpedia.org/property/birthName> ""Richard Grant Esterhuysen""@en . <http://dbpedia.org/resource/The_Shadow_(video_game)> <http://dbpedia.org/ontology/series> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?character ?actor WHERE {
  # Find the alter ego of The Shadow from comics
  VALUES ?shadowCharacter { dbr:Lamont_Cranston }
  
  # Find Richard E. Grant's involvement in a movie adapted into a TV show
  ?movie dbo:starring dbr:Richard_E._Grant .
  ?movie dbo:adaptationOf ?tvShow .

  # Ensure the character is connected to The Shadow and Richard E. Grant
  ?character dbo:alterEgo ?shadowCharacter .
  ?actor dbo:name ""Richard E. Grant""^^xsd:string .
  
  FILTER(?character = ?shadowCharacter)
}
```",6,8,7,3,2,3,3,71,0,0,13,0,0.0,0
557,21,train,Give me the professional in the alter ego of The Shadow and producer of A Star Is Born (1937 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
# Query to find the producer of A Star Is Born (1937)
SELECT ?producer WHERE {
  ?film dcterms:title ""A Star Is Born""@en .
  ?film dbo:productionYear ""1937""^^xsd:gYear .
  ?film dbo:producer ?producer .
}

UNION

# Query to find information about The Shadow
SELECT ?person WHERE {
  ?person rdfs:label ""The Shadow (pulp magazine character)""@en .
  OPTIONAL { ?person foaf:name ?name . }
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
353,29,train,"Give me the child of Roger II of Sicily and child of Elvira of Castile, Queen of Sicily and father of the child, that is a royalty, of William I of Sicily.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?result . ?v3 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Roger II and Elvira's child who is also a parent of William I
  ?child dbo:parent dbr:Roger_II_of_Sicily .
  ?child dbo:parent dbr:Elvira_of_Castile .
  ?child dbo:spouse ?spouse . # To ensure the person is royalty, they should have a spouse entry
  ?william dbo:parent ?child .
  ?william dbr:William_I_of_Sicily .

  FILTER EXISTS { ?child dbo:royaltyStatus ?status } # Ensuring the child is of royal status
}
```",4,5,5,2,3,3,3,71,0,0,1,0,0.0,0
742,4,train,"Give me the region, that is a settlement, of Eastern European Time.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Eastern_European_Time> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?settlement WHERE {
  ?settlement a dbo:Settlement .
  ?settlement dbo:timeZone dbr:Eastern_European_Time .
}
```",1,2,2,1,1,3,2,20,20665,0,0,1.0,1.0,1.0
198,60,train,"Give me the war of the awardee of the show, that is an award, of United States Congress and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/place> ?v1 . ?v2 <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v0 <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v2 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
SELECT ?person ?birthPlace ?award ?war WHERE {
  ?person dbo:deathDate ""1850-08-05""^^xsd:date .
  ?person dbo:birthPlace ?birthPlace .
  FILTER EXISTS { ?birthPlace a dbo:Settlement . }
  FILTER EXISTS { ?birthPlace dbo:country dbr:United_States . }
  
  OPTIONAL {
    ?award dbo:recipient ?person ;
           dbo:awardingBody dbr:United_States_Congress .
    ?war dbo:associatedAward ?award .
  }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",6,9,7,3,2,3,3,71,0,0,2,0,0.0,0
347,31,train,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War and father of Eleonore of Austria, Queen of Poland.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person a dbo:Person .
  ?person dbo:spouse ?spouse .
  ?spouse rdfs:label ""Eleonore of Austria""@en .
  
  OPTIONAL { ?person dbo:occupation ?occupation . FILTER(CONTAINS(LCASE(?occupation), ""commander"")) }
  OPTIONAL { ?event dbo:name ?eventName . 
             ?event dbo:relatedEvent ?relatedEvent .
             ?relatedEvent dbo:wikiPageRedirects dbr:Algerian_War .
             FILTER(CONTAINS(LCASE(?eventName), ""henri iv"") || CONTAINS(LCASE(?eventName), ""henri de la tour d'auvergne"")) }
  OPTIONAL { ?tvShow dbo:name ?showName . 
             FILTER(CONTAINS(LCASE(?showName), ""henri iv"") || CONTAINS(LCASE(?showName), ""henri de la tour d'auvergne"")) }
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
633,11,train,"Give me the parent of Francis I, Duke of Lorraine and spouse of the parent, that is a royalty and a noble, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Noble>. <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?parent ?spouse WHERE {
  ?francis1 dbo:father ?parent .
  ?parent foaf:name ""Leopold, Duke of Lorraine""@en .
  ?parent dbo:spouse ?spouse .
  ?spouse dbo:title ?title .
  FILTER(CONTAINS(LCASE(?title), ""duchess"") || CONTAINS(LCASE(?title), ""princess""))
}
```",3,5,4,2,2,3,2,20,0,0,1,0,0.0,0
386,7,train,Give me the war of Alexander Lvovich Davydov and entity in Russian Empire.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?description WHERE {
  ?davydov dbo:birthPlace dbr:Russia .
  ?davydov rdfs:label ""Alexander Lvovich Davydov""@en .
  
  OPTIONAL { 
    ?davydov dbo:participatedIn ?event .
    ?event dbo:wikiPageRedirects ?war .
    ?war dbo:description ?description .
  }
}
```",2,2,3,1,2,2,3,28,0,0,2,0,0.0,0
943,7,train,Who is the child of Baeda Maryam I?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Baeda_Maryam_I> . },"```sparql
SELECT ?child WHERE {
  ?s dbo:child ?child .
  ?s foaf:name ""Baeda Maryam I""@en .
}
```",1,1,2,1,1,3,3,71,2,0,0,1.0,1.0,1.0
23,15,train,"Give me the party of Gustavo Petro and party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . ?v1 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . }","```sparql
SELECT ?gustavoPetroParty ?royBarrerasBirthPlace ?royBarrerasParty WHERE {
  # Query for Gustavo Petro's political party
  dbpedia:Gustavo_Petro dbo:party ?gustavoPetroParty .

  # Query for Roy Leonardo Barreras Montealegre's birthplace and political party
  dbpedia:Roy_Leonardo_Barreras_Montealegre dbo:birthPlace ?royBarrerasBirthPlace .
  dbpedia:Roy_Leonardo_Barreras_Montealegre dbo:party ?royBarrerasParty .
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
905,16,train,"Give me the father, that is a royalty, of the spouse of Maria of Bytom.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Maria_of_Bytom> <http://dbpedia.org/ontology/spouse> ?v0 . ?v0 <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?maria dbo:spouse ?spouse .
  ?maria rdfs:label ""Maria of Bytom""@en .

  ?spouse dbo:parent ?father .
  
  OPTIONAL { 
    ?father dbo:occupation dbr:Monarch . # Assuming 'Monarch' is a class for royalty
  }
  
  FILTER(LANG(?maria) = 'en')
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
38,8,train,"Give me the author of the work, that is a written work and a work, of Joe Biden.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/author> ?result . ?v0 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Joe_Biden> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work ?title WHERE {
  ?author a dbo:Person ;
          foaf:name ""Joe Biden""@en .
  
  ?work dbo:author ?author ;
        rdf:type ?type .

  FILTER (
    (CONTAINS(LCASE(STR(?type)), 'book') || 
     CONTAINS(LCASE(STR(?type)), 'written work'))
  )

  OPTIONAL { ?work rdfs:label ?title . }
}
ORDER BY ?title
```",2,4,3,2,1,3,2,20,0,0,1,0,0.0,0
87,8,train,"Give me the actor of the movie, that is a work and a film, with Iliza Shlesinger.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/ontology/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  ?film a dbo:Film ;
        a dbo:CreativeWork .
  ?film dbo:starring dbr:Iliza_Schlesinger .
  ?film dbo:starring ?actor .
}
```",2,4,3,2,1,2,3,28,0,0,7,0,0.0,0
412,23,train,Give me the war of the awardee of 30 and war of the leader of National Party of Greece.,"SELECT ?result WHERE { <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v1 . ?v2 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
# Query to find the leader of the National Party of Greece and their associated war
SELECT ?leader ?war WHERE {
  ?party rdf:type dbo:PoliticalParty .
  ?party rdfs:label ""National Party of Greece""@en .
  ?leader dbo:leaderOf ?party .
  ?leader dbo:occupation ""politician""@en .
  ?event dbo:agent ?leader ;
         rdf:type dbo:MilitaryConflict .
  ?event dbo:name ?war .
}

# Query to find the awardee of the 1930 Nobel Peace Prize and their associated context
SELECT ?awardee ?context WHERE {
  ?award dbo:year ""1930""^^xsd:gYear ;
         dbo:category ""Peace""@en ;
         dbo:laureate ?awardee .
  OPTIONAL { 
    ?event dbo:relatedTo ?awardee ;
           rdf:type dbo:MilitaryConflict .
    ?event dbo:name ?context .
  }
}
```",4,4,5,2,2,2,3,28,0,0,11,0,0.0,0
943,40,train,"Give me the reference to  and child of the parent, that is a royalty, of the commander, that is a royalty, in Siege of Mukha and father of Baeda Maryam I.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://xmlns.com/foaf/0.1/name> """"@en . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Siege_of_Mukha> <http://dbpedia.org/ontology/commander> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?parent ?child WHERE {
  # Baeda Maryam I's father
  ?baedaMaryamI dbo:father dbr:Amda_Seyon_I .
  
  # Amda Seyon I as a commander in the Siege of Mukha and royalty
  ?amdaseyonI dbo:occupation ""Commander""@en ;
             dbo:spouse ?parent ;
             dbo:child ?baedaMaryamI .

  # Parent who is royalty
  ?parent rdf:type dbo:Monarch .
  
  # Baeda Maryam I's father (Amda Seyon I) and his parent (Empress Eleni)
  ?amdaseyonI dbo:father dbr:Amda_Seyon_I ;
             dbo:mother ?empressEleni .

  # Empress Eleni as the royal parent
  ?empressEleni rdf:type dbo:Monarch .
  
  # Linking child and parent
  ?amdaseyonI dbo:mother ?parent .
}
```",5,7,6,3,3,3,3,71,0,0,1,0,0.0,0
347,26,train,Give me the father of the child of the parent of Archduke Charles Joseph of Austria.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?result . ?v1 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . ?v2 <http://dbpedia.org/property/father> ?v1 . },"```sparql
SELECT DISTINCT ?father WHERE {
    ?archduke dbo:wikiPageID ""Archduke_Charles_Joseph_of_Austria"" .
    ?archduke dbo:parent ?parent .

    ?parent dbo:child ?child .
    
    ?child dbo:father ?father .
}
```",3,3,4,3,1,3,3,71,0,0,1,0,0.0,0
871,13,train,"Give me the parent of the child of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/ontology/parent> ?result . }","```sparql
SELECT ?grandparent WHERE {
  # Identify Frederick Stanley, 16th Earl of Derby
  ?frederick a dbo:Person ;
             rdfs:label ""Frederick Stanley, 16th Earl of Derby""@en .
  
  # Find his children
  ?child dbo:childOf ?frederick .

  # For each child, find their parent(s)
  ?parent dbo:parentOf ?child .

  # Return the grandparent (which could be Frederick himself or another parent)
  VALUES (?grandparent) { ?frederick ?parent }
}
```",2,2,3,2,1,3,3,71,0,0,1,0,0.0,0
159,25,train,"Give me the reference to George Ducas and commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> ?result . ?result <http://xmlns.com/foaf/0.1/name> ""George Ducas""@en . <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. }","```sparql
# Query for information about George Ducas
SELECT ?subject ?label WHERE {
  ?subject rdfs:label ""George Ducas""@en .
  ?subject rdfs:label ?label .
} LIMIT 10

# Query for information about Jean Baptist, Comte d'Arco
SELECT ?subject ?label WHERE {
  ?subject rdfs:label ""Jean Baptist, Comte d'Arco""@en .
  ?subject rdfs:label ?label .
} LIMIT 10

# Query for wars or military roles involving George Ducas
SELECT DISTINCT ?war ?role WHERE {
  ?subject rdfs:label ""George Ducas""@en .
  ?subject dbo:militaryConflict ?war .
  ?subject dbo:positionHeld ?role .
}

# Query for television shows related to Jean Baptist, Comte d'Arco
SELECT DISTINCT ?tvShow WHERE {
  ?subject rdfs:label ""Jean Baptist, Comte d'Arco""@en .
  ?subject dbo:depicts ?tvShow .
  ?tvShow a dbo:TelevisionSeries .
}

# Query for societal events related to Jean Baptist, Comte d'Arco
SELECT DISTINCT ?event WHERE {
  ?subject rdfs:label ""Jean Baptist, Comte d'Arco""@en .
  ?subject dbo:depicts ?event .
  ?event a dbo:SocietalEvent .
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
392,0,train,Give me the member of 1. FC Magdeburg.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/1._FC_Magdeburg> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?member ?role WHERE {
    VALUES ?club {<http://dbpedia.org/resource/1._FC_Magdeburg>}

    OPTIONAL {
        ?club dbo:player ?member .
        BIND(""Player"" AS ?role)
    }
    
    OPTIONAL {
        ?club dbo:coach ?member .
        BIND(""Coach"" AS ?role)
    }

    FILTER(?member != ?club) # Ensure we don't include the club itself
}
ORDER BY ?role ?member
```",1,1,2,1,1,2,2,9,0,0,616,0,0.0,0
198,0,train,Give me the war of Amasa Tracy.,SELECT ?result WHERE { <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?description WHERE {
  ?person a dbo:MilitaryPerson ;
          foaf:name ""Amasa Tracy""@en .
  
  OPTIONAL { ?person dbo:participatedIn ?war . }
  
  ?war a dbo:Battle ;
      rdfs:label ?label ;
      dbo:description ?description .

  FILTER (lang(?label) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,18,0,0.0,0
353,31,train,"Give me the child of the parent of the child, that is a royalty, of Roger II of Sicily and father of William II of Sicily.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?v1 . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . },"```sparql
SELECT ?child WHERE {
  # Step 1: Identify Roger II of Sicily
  wd:Q12345 wdt:P31/wdt:P279* wd:Q5; # Roger II of Sicily is a human

  # Step 2: Find his child who is royalty and father of William II of Sicily
  ?child wdt:P25 wd:Q12345; # Child of Roger II of Sicily
         wdt:P31/wdt:P279* wd:Q5; # This child is a human (royalty)
         wdt:P22 wd:Q67890. # This child is the father of William II of Sicily

  # Step 3: Identify the parent of this child
  ?parent wdt:P25 ?child.

  # Step 4: Find the child of this parent
  ?grandChild wdt:P25 ?parent.
}
```

Note: Replace `wd:Q12345` with the actual DBpedia ID for Roger II of Sicily and `wd:Q67890` with the DBpedia ID for William II of Sicily. These IDs can be found in DBpedia.",4,5,5,3,2,3,3,71,0,0,1,0,0.0,0
557,35,train,"Give me the producer of the claim to fame, that is a movie and a work, of Janet Gaynor and professional in the alter ego of The Shadow.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v1 . ?v1 <http://dbpedia.org/ontology/producer> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
# Query to find the producer of Janet Gaynor's ""7th Heaven""
SELECT ?producer WHERE {
  ?movie dcterms:title ""7th Heaven""@en .
  ?movie dbo:starring <http://dbpedia.org/resource/Janet_Gaynor> .
  ?movie dbo:productionCompany ?company .
  ?company dbo:ceoOrChairman ?producer .
}

UNION

# Query to find any known work of Lamont Cranston (The Shadow's alter ego)
SELECT ?producer WHERE {
  ?work dcterms:title ?title .
  ?work dbo:starring <http://dbpedia.org/resource/Lamont_Cranston> .
  ?work dbo:productionCompany ?company .
  ?company dbo:ceoOrChairman ?producer .
}
```",4,6,5,2,2,3,3,71,0,0,1,0,0.0,0
258,11,train,Give me the alma mater of Eleonora Menicucci and establishment of the founding date of Federal University of Paraíba.,SELECT ?result WHERE { <http://dbpedia.org/resource/Federal_University_of_Paraíba> <http://dbpedia.org/ontology/foundingDate> ?v2 . ?result <http://dbpedia.org/ontology/foundingDate> ?v2 . <http://dbpedia.org/resource/Eleonora_Menicucci> <http://dbpedia.org/ontology/almaMater> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?almaMater ?establishmentDate WHERE {
  # Query for Eleonora Menicucci's alma mater
  OPTIONAL { 
    dbr:Eleonora_Menicucci dbo:almaMater ?almaMater .
  }
  
  # Query for the establishment date of Federal University of Paraíba
  OPTIONAL {
    dbr:Federal_University_of_Paraíba dbo:foundingDate ?establishmentDate .
  }
}
```",3,3,4,2,2,3,2,20,1,3,0,0.25,1.0,0.4
513,16,train,Give me the entity in the award of George H. Cameron and residence of the leader of Ulster Unionist Party.,SELECT ?result WHERE { <http://dbpedia.org/resource/George_H._Cameron> <http://dbpedia.org/property/awards> ?v2 . ?result <http://dbpedia.org/ontology/country> ?v2 . <http://dbpedia.org/resource/Ulster_Unionist_Party> <http://dbpedia.org/ontology/leader> ?v3 . ?v3 <http://dbpedia.org/ontology/residence> ?result . },"```sparql
# Query to get the entity associated with George H. Cameron's award
SELECT ?awardEntity WHERE {
  ?person dbo:givenName ""George"" .
  ?person dbo:familyName ""H. Cameron"" .
  ?person dbo:honoraryTitle ?award .
  ?award dbo:recipient ?person .
  ?award dbo:entity ?awardEntity .
}

UNION

# Query to get the residence of the leader of the Ulster Unionist Party
SELECT ?residence WHERE {
  ?party dbo:name ""Ulster Unionist Party"" .
  ?party dbo:leader ?leader .
  ?leader foaf:currentHomeLocation ?residence .
}
```",4,4,5,2,2,3,2,20,0,0,2,0,0.0,0
859,13,train,"Give me the band member of the associated musical artist, that is a band and a group and an organisation, of the reference, that is a group, to Burnt by the Sun.","SELECT ?result WHERE { ?v0 <http://xmlns.com/foaf/0.1/name> ""Burnt by the Sun""@en . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?bandMember WHERE {
  # Step 1: Identify ""Burnt by the Sun"" and its associated musical artist (Eduard Artemyev)
  dbr:Burnt_by_the_Sun_1994 dbo:musicBy dbr:Eduard_Artemyev .

  # Step 2: Check if Eduard Artemyev is part of any band/group/organization
  OPTIONAL {
    dbr:Eduard_Artemyev dbo:memberOf ?band .
    FILTER EXISTS { ?band a ?type . 
                   VALUES ?type { dbo:Band dbo:MusicalGroup dbo:Organization } }
  }

  # Step 3: Retrieve members of the identified band/group
  ?band dbo:member ?bandMember .
}
```",3,7,4,3,1,3,2,20,0,0,18,0,0.0,0
80,25,train,Give me the professional in the alter ego of The Shadow and actor of ATL (film).,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v1 . },"```sparql
SELECT ?actor WHERE {
  # Find the actor who played ""The Shadow""
  ?film dbpedia-owl:starring ?character .
  ?character rdfs:label ""The Shadow""@en .
  ?film dbpedia-owl:starring ?actor .
  
  # Ensure the film is related to ""The Shadow"" character
  ?film rdfs:label ?filmLabel .
  FILTER(CONTAINS(LCASE(?filmLabel), ""shadow""))

  # Find the actor who acted in the film ""ATL""
  OPTIONAL {
    ?atlFilm dbpedia-owl:starring ?actor .
    ?atlFilm rdfs:label ""ATL""@en .
  }
  
  # Return actors who match both criteria
  FILTER(EXISTS { ?film dbpedia-owl:starring ?character . ?character rdfs:label ""The Shadow""@en })
  FILTER(EXISTS { ?atlFilm dbpedia-owl:starring ?actor . ?atlFilm rdfs:label ""ATL""@en })
}
```",3,3,4,2,2,3,3,71,0,0,4,0,0.0,0
143,8,train,Give me the associated musical artist of the person born as Cynthia Ikponmwenosa Morgan.,"SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/birthName> ""Cynthia Ikponmwenosa Morgan""@en . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?person rdfs:label ""Iggy Azalea""@en .
  ?person dbo:musicalArtist ?artist .
}
```",2,2,3,2,1,3,2,20,0,0,6,0,0.0,0
353,25,train,Give me the child of the child of Alfonso VI of León and Castile and father of William II of Sicily.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v1 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/William_II_of_Sicily> <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alfonsoII WHERE {
  # Alfonso VI's child (Constance)
  ?constance dbo:spouse ?raymondBerengarIII .
  ?constance dbo:father dbr:Alfonso_VI_of_León_and_Castile .

  # Raymond Berengar III and Constance's son
  ?ramonBerenguerIV dbo:parent ?constance ;
                   dbo:parent ?raymondBerengarIII .

  # Ramon Berengar IV's child (Alfonso II of Aragon)
  ?alfonsoII dbo:parent ?ramonBerengarIV .

  # Alfonso II of Aragon is the father of William II of Sicily
  ?williamII dbo:father ?alfonsoII .
  ?williamII rdfs:label ""William II of Sicily""@en .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
353,14,train,Give me the child of the child of Alfonso VI of León and Castile.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Alfonso_VI_of_León_and_Castile> . ?v1 <http://dbpedia.org/ontology/child> ?result . },"```sparql
SELECT DISTINCT ?grandchild ?grandchildLabel WHERE {
  # Find Alfonso VI of León and Castile
  wd:Q123456 dbo:child ?child . 

  # For each child, find their children (Alfonso VI's grandchildren)
  ?child dbo:child ?grandchild .

  # Get labels for the grandchildren to make results more readable
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```

Note: Replace `wd:Q123456` with the actual DBpedia entity ID for Alfonso VI of León and Castile. You can find this by searching DBpedia or using a SPARQL query to identify his unique identifier.",2,2,3,2,1,3,3,71,0,0,8,0,0.0,0
943,35,train,"Give me the child of the parent, that is a royalty, of Yeshaq I and father of the father, that is a royalty and an office holder, of Na'od.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . <http://dbpedia.org/resource/Yeshaq_I> <http://dbpedia.org/ontology/parent> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Na'od> <http://dbpedia.org/property/father> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Yeshaq I's children who are royalty
  ?yeshaqI a dbo:Monarch ;
           foaf:name ""Yeshaq I""@en .
  
  ?yeshaqI dbo:spouse ?spouse .
  ?yeshaqI dbo:child ?child .

  FILTER EXISTS { ?child a dbo:Monarch } .

  # Na'od's parent who is royalty and an office holder
  ?naodParent a dbo:Monarch ;
              foaf:name ""Na'od""@en ;
              dbo:officeHolder ?office .
  
  ?yeshaqI dbo:child ?parentOfNaod .
  ?parentOfNaod dbo:child ?naodParent .

  # Find the child of Yeshaq I who is also parent of Na'od's parent
  FILTER (?child = ?parentOfNaod)
}
```",4,7,5,2,2,3,3,71,0,0,1,0,0.0,0
513,0,train,Give me the entity in United Kingdom.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_Kingdom> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?entity WHERE {
  ?entity dbo:country <http://dbpedia.org/resource/United_Kingdom> .
}
LIMIT 10
```",1,1,2,1,1,3,2,20,10,0,42989,1.0,0.00023256354798948813,0.00046501894952219306
140,0,train,Give me the commander in Pickett's Charge.,SELECT ?result WHERE { <http://dbpedia.org/resource/Pickett's_Charge> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT ?commander WHERE {
  ?event rdf:type dbo:MilitaryOperation .
  ?event rdfs:label ""Pickett's Charge""@en .
  ?event dbp:commander ?commander .
}
```",1,1,2,1,1,3,2,20,0,0,9,0,0.0,0
347,3,train,Give me the military force of Algerian War.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . },"```sparql
SELECT ?militaryForce WHERE {
  VALUES ?event { dbpedia:Algerian_War }
  ?event dbo:militaryConflictOf ?conflict.
  ?conflict dbo:participatingMilitaryUnit ?unit.
  ?unit rdfs:label ?militaryForce.
  FILTER (lang(?militaryForce) = 'en')
}
```",1,1,2,1,1,3,3,71,0,0,119,0,0.0,0
414,17,train,Give me the show of Royal Swedish Academy of Sciences and award of the awardee of the reference to Nobel Prize in Physics.,"SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/awards> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""Nobel Prize in Physics""@en . ?v3 <http://dbpedia.org/property/awards> ?v0 . ?result <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Royal_Swedish_Academy_of_Sciences> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?awardee ?awardYear WHERE {
  # Find shows associated with the Royal Swedish Academy of Sciences related to Nobel Prize in Physics
  ?show dbo:organizer dbr:Royal_Swedish_Academy_of_Sciences .
  ?show dbo:subject dbr:Nobel_Prize_in_Physics .

  OPTIONAL {
    # Retrieve details about a specific awardee and their award year
    ?awardee dbo:nobelPrizeInPhysicsYear ?awardYear .
    FILTER EXISTS { ?awardee dbo:award dbr:Nobel_Prize_in_Physics }
  }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",4,4,5,3,2,3,2,20,0,0,2,0,0.0,0
816,45,train,Give me the parent of the child of the spouse of Mariclare Costello and actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of Amy Arbus.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Mariclare_Costello> <http://dbpedia.org/ontology/spouse> ?v0 . },"```sparql
SELECT ?parent WHERE {
  # Step 1: Identify Mariclare Costello's spouse
  ?mariclare dbo:spouse ?spouse .
  FILTER (str(?mariclare) = ""Mariclare_Costello"") .

  # Step 2: Find the child of Mariclare Costello's spouse
  ?child dbo:parent ?spouse ;
         a dbo:Person .

  # Step 3: Determine the parent of this child
  OPTIONAL { ?child dbo:parent ?mariclare } .
  
  # Step 4: Identify the actor of ""Judgment: The Trial of Julius and Ethel Rosenberg""
  ?actor dbo:actedIn <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> ;
         a dbo:Person .

  # Step 5: Find the parent of Amy Arbus
  ?amyArbusParent dbo:child ?amyArbus .
  FILTER (str(?amyArbus) = ""Amy_Arbus"") .

  # Step 6: Match the results from steps 3, 4, and 5
  FILTER (?parent = ?spouse && ?parent = ?actor && ?parent = ?amyArbusParent)
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
472,8,train,"Give me the territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/capital> ?v1 . <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
SELECT ?deathPlace ?administeringTerritory WHERE {
  ?person dbo:birthName ""Christian Ditlev Ammentorp Hansen""@en .
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace a dbo:Settlement .
  OPTIONAL { ?deathPlace dbp:country ?administeringTerritory . }
}
```",2,3,3,2,1,2,3,28,0,0,4,0,0.0,0
609,9,train,Give me the birth place of Vince Gilligan and birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
SELECT DISTINCT ?person ?name ?birthPlace WHERE {
  VALUES (?name) { (""Vince Gilligan""@en ""Glenn Youngkin""@en) }
  
  ?person foaf:name ?name .
  OPTIONAL { ?person dbo:birthPlace ?birthPlace . }
}
ORDER BY ?name
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
246,15,train,"Give me the parent of Prince Omar bin Faisal and parent of the child, that is a royalty, of the parent, that is a royalty, of Princess Aisha bint Faisal.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/parent> ?v0 . ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Princess_Aisha_bint_Faisal> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Prince_Omar_bin_Faisal> . },"```sparql
# Step 1: Find the parent of Prince Omar bin Faisal
SELECT ?parent WHERE {
  wd:Q1234567 wdt:P22 ?parent .
}

# Step 2: Find a child that is royalty from this parent
SELECT ?royalChild WHERE {
  ?parent wdt:P40 ?royalChild .
  ?royalChild wdt:P31 wd:Q11424 . # Instance of Royalty
}

# Step 3: Identify the parent of this royal child
SELECT ?secondParent WHERE {
  ?royalChild wdt:P22 ?secondParent .
}

# Step 4: Find a child that is royalty from this second identified parent
SELECT ?finalRoyalChild WHERE {
  ?secondParent wdt:P40 ?finalRoyalChild .
  ?finalRoyalChild wdt:P31 wd:Q11424 . # Instance of Royalty
}

# Step 5: Identify the parent of this final royal child
SELECT ?finalParent WHERE {
  ?finalRoyalChild wdt:P22 ?finalParent .
}
```

Note: Replace `wd:Q1234567` with the actual DBpedia identifier for Prince Omar bin Faisal. The query assumes that `P22` is used for ""parent"" and `P40` for ""child"". Adjustments may be needed based on the exact schema in DBpedia.",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
756,24,train,"Give me the native of the administration, that is a country, of Theodor Heuss and manager of 2020–21 SBV Vitesse season.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?v2 <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Theodor_Heuss> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>. <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
# Query to find Theodor Heuss' native country
SELECT ?nativeCountry WHERE {
  wd:Q12345 wdt:P19 ?nativePlace .
  ?nativePlace wdt:P17 ?nativeCountry .
}

UNION

# Query to find the manager of SBV Vitesse for the 2020–21 season and their native country
SELECT ?managerNativeCountry WHERE {
  # Assuming we have a property or way to identify the manager of SBV Vitesse for the 2020-21 season
  wd:Q67890 wdt:P39 ?manager .
  
  # Get the manager's native place
  ?manager wdt:P19 ?nativePlace .
  ?nativePlace wdt:P17 ?managerNativeCountry .
}
```

Note: `wd:Q12345` should be replaced with Theodor Heuss' actual DBpedia identifier, and `wd:Q67890` should be replaced with the identifier for SBV Vitesse or a way to identify the manager of that season.",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
293,44,train,"Give me the spouse of the actor of 1,000 Dollars a Minute and party member of Republican Party (United States) and person born as the birth name of Ann Sothern.","SELECT ?result WHERE { <http://dbpedia.org/resource/1,000_Dollars_a_Minute> <http://dbpedia.org/property/starring> ?v4 . ?result <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . ?v4 <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v2 . }","```sparql
SELECT ?spouse WHERE {
  ?person foaf:name ""John Wayne""@en .
  ?person dbo:actorIn dbr:_1,_000_Dollars_a_Minute .
  ?person dbo:partyMemberOf dbr:Republican_Party_(United_States) .
  ?person dbo:spouse ?spouse .
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
723,6,train,Give me the band member of Stone Sour and band member of Mudvayne.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Stone_Sour> . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Mudvayne> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?personName WHERE {
  # Find members of Stone Sour
  ?stoneSourMember dbo:memberOf dbr:Stone_Sour .
  
  # Find members of Mudvayne
  ?mudvayneMember dbo:memberOf dbr:Mudvayne .

  # Ensure the person is a member of both bands
  FILTER (?stoneSourMember = ?mudvayneMember)

  # Get the name of the person
  ?personName rdfs:label ?name .
  FILTER (lang(?name) = 'en')
  
  # Link the person to their membership in either band
  {
    ?stoneSourMember dbp:name ?name ;
                    dbo:memberOf dbr:Stone_Sour .
  }
  UNION
  {
    ?mudvayneMember dbp:name ?name ;
                    dbo:memberOf dbr:Mudvayne .
  }
}
```",2,2,3,1,2,3,2,20,0,0,1,0,0.0,0
23,17,train,Give me the entity in the country of Daniel Elahi Galán and party of Gustavo Petro.,SELECT ?result WHERE { <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . ?result <http://dbpedia.org/ontology/country> ?v2 . <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity WHERE {
  ?entity dbo:country dbr:Colombia .
  OPTIONAL { ?entity dbo:party dbr:Colombia_Humana . }
}
```",3,3,4,2,2,2,3,28,2,2139,0,0.0009341429238673517,1.0,0.0018665422305179653
39,51,train,"Give me the band of the person born, that is a musical artist, as the birth name of Bob Thompson (musician) and professional in the alter ego of The Shadow.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v4 . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v4 . ?v2 <http://dbpedia.org/property/birthName> ?v1 . <http://dbpedia.org/resource/Bob_Thompson_(musician)> <http://dbpedia.org/property/birthName> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  # Identify Bob Thompson's birth name and his alter ego The Shadow
  ?person a dbo:MusicalArtist ;
          foaf:name ""Bob Thompson"" ;
          dbo:birthName ?birthName .
  
  OPTIONAL { 
    ?person foaf:name ""The Shadow""@en .
  }
  
  # Find bands associated with the person's birth name
  ?band dbo:member ?person .
}
```",5,6,6,3,2,3,3,71,0,0,4,0,0.0,0
737,4,train,"Give me the child of Philipp Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philipp_Albrecht,_Duke_of_Württemberg> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?person a dbo:Duke ;
          foaf:name ""Philipp Albrecht, Duke of Württemberg""@en .
  
  OPTIONAL { ?person dbo:child ?child . }
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
198,28,train,"Give me the force of Quincy Adams Gillmore and entity in Charleston, South Carolina and war of the awardee of Medal of Honor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force ?charlestonEntity ?war
WHERE {
  # Identify Quincy Adams Gillmore
  VALUES ?gillmore { dbr:Quincy_A._Gillmore }

  # Retrieve the military force he was part of
  ?gillmore dbo:militaryService ?service .
  ?service dbo:organizationName ?force .

  # Find entities related to Charleston, South Carolina during his time
  ?charlestonEntity a dbo:Place ;
                   rdfs:label ""Charleston""@en ;
                   dbo:location ?location .
  FILTER(?location = dbr:Charleston,_South_Carolina)

  # Determine the war for which he received the Medal of Honor
  ?gillmore dbo:award ?medalOfHonor .
  ?medalOfHonor dbo:awardedFor ?war .
  FILTER(CONTAINS(LCASE(STR(?war)), ""civil war""))
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
293,7,train,Give me the parent of Tisha Sterling.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . },"```sparql
SELECT ?parent WHERE {
  ?person dbo:birthName ""Tisha Sterling"" .
  ?person dbo:child ?tishaSterling .
  ?tishaSterling dbo:parent ?parent .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
557,55,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins and producer of the claim to fame, that is a movie and a work, of Janet Gaynor and professional in the alter ego of The Shadow.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Janet_Gaynor> <http://dbpedia.org/ontology/knownFor> ?v2 . <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v3 . ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/occupation> ?v3 . ?v5 <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?collinsProducer ?gaynorMovie ?gaynorWork ?shadowProfessional
WHERE {
  # Cora Sue Collins' claim to fame (work)
  ?collins dbr:Cora_Sue_Collins ;
           dbo:creator ?collinsProducer .

  # Janet Gaynor's claim to fame (movie and work)
  ?gaynor dbr:Janet_Gaynor ;
          dbo:film ?gaynorMovie .
  OPTIONAL { ?gaynor dbo:work ?gaynorWork . }

  # The Shadow's professional alter ego
  ?shadow dbr:The_Shadow ;
          dbo:alterEgoOf ?shadowProfessional .
}
```",6,9,7,2,3,3,3,71,0,0,1,0,0.0,0
198,42,train,"Give me the force of Quincy Adams Gillmore and entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and war of the awardee of Medal of Honor.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/place> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?gillmoreForce ?lewisBirthplace ?war 
WHERE {
  # Quincy Adams Gillmore's military force
  dbr:Quincy_A._Gillmore dbo:militaryService ?gillmoreForce .
  
  # Henry Clay Lewis' birthplace that is an American settlement
  dbr:Henry_Clay_Lewis dbo:birthPlace ?lewisBirthplace ;
                      dbp:nationality ""American"" .
  ?lewisBirthplace a dbo:Settlement .

  # War of the awardee of Medal of Honor related to these contexts
  ?medalOfHonorAwardee dbo:awardedBy dbr:United_States_Medal_of_Honor ;
                      dbo:servedInMilitaryConflict ?war .
  
  FILTER EXISTS {
    ?gillmoreForce dbo:participatedIn ?war .
    ?lewisBirthplace dbo:locatedInCountry dbr:United_States .
  }
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
103,29,train,Give me the actor of Dispatches from Elsewhere and professional in  and professional in the profession of Shatrughan Sinha.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v3 . <http://dbpedia.org/resource/Dispatches_from_Elsewhere> <http://dbpedia.org/property/starring> ?result . }","```sparql
# Find the actor of Dispatches from Elsewhere
SELECT ?actor WHERE {
  ?series dbo:title ""Dispatches from Elsewhere""@en .
  ?series dbo:starring ?actor .
}

UNION

# Find actors who are professionals in the same profession as Shatrughan Sinha (Actor)
SELECT ?actor WHERE {
  ?sinha foaf:name ""Shatrughan Sinha"" .
  ?sinha dbo:occupation dbc:Indian_actors .
  
  ?actor dbo:occupation dbc:Indian_actors .
}
```",4,4,5,2,3,3,3,71,0,0,2,0,0.0,0
23,3,train,"Who is the person born, that is a politician, as Roy Leonardo Barreras Montealegre?","SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person ?name ?description WHERE {
  ?person a dbo:Politician .
  ?person foaf:name ?name .
  FILTER(CONTAINS(LCASE(?name), ""roy leonardo barreras montealegre"")) .
  OPTIONAL { ?person dbo:description ?description . }
}
```",1,2,2,1,1,2,3,28,0,0,1,0,0.0,0
293,12,train,Give me the person born as Harriette Arlene Lake and spouse of Roger Pryor (actor).,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Harriette Arlene Lake""@en . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . }","```sparql
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?spouseName WHERE {
  ?person foaf:givenName ""Harriette"" .
  ?person foaf:familyName ""Lake"" .
  ?person dbo:birthName ""Harriette Arlene Lake"" .
  ?person dbo:spouse ?spouse .
  ?spouse foaf:name ?spouseName .
  FILTER(CONTAINS(?spouseName, ""Roger Pryor""))
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
89,24,train,"Give me the predecessor of Myat Hpone Pyo and spouse of the father, that is a royalty, of Myat Hpone Pyo.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v2 . ?result <http://dbpedia.org/ontology/spouse> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?predecessor ?spouse WHERE {
  # Find the predecessor of Myat Hpone Pyo
  ?myatHponePyo dbo:successor ?predecessor .
  FILTER (str(?myatHponePyo) = ""Myat_Hpone_Pyo"")

  # Find the father of Myat Hpone Pyo
  ?father dbo:child ?myatHponePyo .

  # Find the spouse of the father who is royalty
  ?spouse dbo:spouse ?father .
  ?spouse a dbo:Monarch .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
159,20,train,Give me the successor of Yurii Khmelnytsky and reference to the writer of Always the Love Songs.,SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v2 . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v2 . },"```sparql
# Query to find the successor of Yurii Khmelnytsky
SELECT ?successor WHERE {
  ?yuriikhmelnytsky dbo:office dbr:President_of_Ukraine.
  ?yuriikhmelnytsky foaf:name ""Yurii Khmelnytsky""@en.
  ?yuriikhmelnytsky dbo:successor ?successor.
}

# Query to find the writer of Always the Love Songs
SELECT ?author WHERE {
  ?book dbo:title ""Always the Love Songs""@en .
  ?book dbo:author ?author .
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
198,14,train,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/place> ?v1 . },"```sparql
SELECT ?entity WHERE {
  wd:Q12345 wdt:P19 ?birthPlace .
  ?birthPlace wdt:P31/wdt:P279* wd:Q515 . # Settlement
  ?birthPlace wdt:P17 wd:Q30 .           # Located in the United States of America
  ?birthPlace wdt:P31 ?entity .
}
```

In this query:
- `wd:Q12345` should be replaced with the DBpedia identifier for Henry Clay Lewis.
- The property `P19` is used to find his place of birth.
- The property `P31/wdt:P279* wd:Q515` ensures that the birthplace is a settlement.
- The property `P17 wd:Q30` confirms that the location is in the United States.
- Finally, we select entities related to this specific birthplace.",2,4,3,2,1,3,3,71,0,0,12,0,0.0,0
609,52,train,"Give me the birth place of the awardee of the award of Vince Gilligan and birth place of Cece Bell and birth place of the governor, that is a politician, of Virginia.",SELECT ?result WHERE { ?v5 <http://dbpedia.org/ontology/birthPlace> ?result . ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v5 . ?v2 <http://dbpedia.org/property/awards> ?v3 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v3 . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for Vince Gilligan's award awardee's birthplace
SELECT ?birthPlace WHERE {
  ?award dbo:recipient dbr:Vince_Gilligan .
  ?award dbo:awardee ?person .
  ?person foaf:birthPlace ?birthPlace .
}

UNION

# Query for Cece Bell's birthplace
SELECT ?birthPlace WHERE {
  dbr:Cecilie_Bell dbo:birthPlace ?birthPlace .
}

UNION

# Query for the Governor of Virginia's birthplace
SELECT ?birthPlace WHERE {
  ?governor foaf:name ""Glenn Youngkin""@en ;
           dbo:officeHolderOf dbr:Governor_of_Virginia ;
           dbo:birthPlace ?birthPlace .
}
```",6,7,7,3,3,3,3,71,0,0,1,0,0.0,0
347,23,train,"Give me the commander in the war, that is a societal event and an event and a television show, of the military force of Algerian War.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/battle> ?v0 . ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Algerian_War> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?event ?tvShow WHERE {
  # Find a commander associated with the Algerian War
  ?commander dbo:occupation dbr:Military_person .
  ?commander dbo:nationality dbr:France .
  ?commander dbo:almaMater ?university .
  
  # Link to societal event (Algerian War)
  ?event dbo:relatedEvent dbr:Algerian_War .
  ?commander dbo:associatedWith ?event .

  # Find a television show related to the commander
  OPTIONAL {
    ?tvShow dbo:starring ?actor .
    ?actor dbo:birthPlace ?place .
    ?actor dbo:spouse ?spouse .
    ?spouse dbo:spouse ?commander .
    FILTER EXISTS { ?tvShow dbo:title ?title . }
  }

  # Filter for Charles de Gaulle
  FILTER (?commander = dbr:Charles_de_Gaulle)
}
```",3,6,4,3,1,3,3,71,0,0,124,0,0.0,0
871,61,train,"Give me the parent of the child of the parent, that is a politician and an office holder, of Edward Stanley, 17th Earl of Derby and father of the child, that is a politician, of the alumnus of Eton College.","SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v4 <http://dbpedia.org/ontology/parent> ?result . ?v0 <http://dbpedia.org/ontology/child> ?v4 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> . ?v2 <http://dbpedia.org/property/father> ?v1 . ?v2 <http://dbpedia.org/property/father> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Eton_College> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. }","```sparql
SELECT DISTINCT ?grandparent WHERE {
  # Step 1: Identify Edward Stanley, 17th Earl of Derby
  ?edward a dbo:Person ;
          foaf:name ""Edward Stanley, 17th Earl of Derby""@en .

  # Step 2: Find his child who is a politician
  ?child dbp:parent ?edward ;
         a dbo:Politician .

  # Step 3: Identify the alumnus of Eton College
  ?alumnus dbp:almaMater dbr:Eton_College ;
           a dbo:Person .

  # Step 4: Find the child of this alumnus who is a politician
  ?child2 dbp:parent ?alumnus ;
          a dbo:Politician .

  # Step 5: Determine if this parent is both a politician and an office holder
  ?parent dbp:parent ?child2 ;
          a dbo:Politician, dbo:OfficeHolder .

  # Step 6: Find the grandparent of Edward Stanley's child (politician)
  ?grandparent dbp:parent ?parent .
}
```",6,9,7,3,2,3,3,71,0,0,1,0,0.0,0
706,2,train,Give me the reference to Sangeet Natak Akademi Fellowship.,"SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ""Sangeet Natak Akademi Fellowship""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?fellowship WHERE {
  ?fellowship a dbo:Award .
  FILTER(CONTAINS(LCASE(?fellowshipLabel), ""sangeet natak akademi fellowship""))
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
158,2,train,Give me the native of Russian Empire.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Russian_Empire> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:birthPlace ?place .
  FILTER (
    strstarts(str(?place), ""Russia"") ||
    strstarts(str(?place), ""Ukraine"") ||
    strstarts(str(?place), ""Belarus"") ||
    strstarts(str(?place), ""Poland"") ||
    strstarts(str(?place), ""Lithuania"") ||
    strstarts(str(?place), ""Latvia"") ||
    strstarts(str(?place), ""Estonia"") ||
    strstarts(str(?place), ""Kazakhstan"") ||
    strstarts(str(?place), ""Uzbekistan"") ||
    strstarts(str(?place), ""Turkmenistan"") ||
    strstarts(str(?place), ""Kyrgyzstan"") ||
    strstarts(str(?place), ""Tajikistan"") ||
    strstarts(str(?place), ""Armenia"") ||
    strstarts(str(?place), ""Azerbaijan"")
  )
  ?person rdfs:label ?name .
  FILTER (lang(?name) = 'en')
}
ORDER BY ?name
LIMIT 100
```",1,1,2,1,1,2,3,28,0,0,5475,0,0.0,0
295,1,train,Give me the native of Birmingham.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Birmingham> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:birthPlace dbr:Birmingham .
  OPTIONAL { ?person foaf:name ?name . }
}
ORDER BY ?name
LIMIT 10
```",1,1,2,1,1,3,2,20,10,2,1521,0.8333333333333334,0.006531678641410843,0.012961762799740765
531,41,train,"Give me the office of Miguel Maura and tenant of the residence of Alberto Ruiz-Gallardón and office of the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?result <http://dbpedia.org/ontology/headquarter> ?v2 . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v2 . <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?v4 . <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?v4 <http://dbpedia.org/property/office> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?person ?officeMaura ?tenantRuizGallardon ?commanderOffice
WHERE {
  # Find Miguel Maura's office
  OPTIONAL { 
    dbr:Miguel_Maura dbo:positionHeld ?officeMaura .
  }

  # Find tenant of Alberto Ruiz-Gallardón's residence
  OPTIONAL {
    ?tenantRuizGallardon dbo:residence dbr:Residence_of_Alberto_Ruiz-Gallardón .
  }

  # Find commander involved in Central African Republic Civil War
  OPTIONAL {
    ?person dbo:office ?commanderOffice ;
            a dbo:Politician ;
            dbo:occupation dbo:Commander ;
            dbo:memberOf dbr:Central_African_Republic_Civil_War .
  }

  # Attempt to link these individuals
  FILTER (?person = ?tenantRuizGallardon && ?person = ?officeMaura)
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
288,3,train,Give me the show with Anumta Qureshi.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Anumta_Qureshi> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show WHERE {
  ?person a dbo:Actor ;
          foaf:name ""Anumta Qureshi""@en .
  ?performance dbo:performer ?person ;
               dbo:title ?show .
}
```",1,1,2,1,1,2,2,9,0,0,2,0,0.0,0
595,36,train,"Give me the commander in the war, that is a disease and a societal event, of the owner of USS Arcadia (ID-1605) and spouse of Hillary Clinton.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/USS_Arcadia_(ID-1605)> <http://dbpedia.org/ontology/owner> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. <http://dbpedia.org/resource/Hillary_Clinton> <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
SELECT ?owner WHERE {
  ?ship dcterms:identifier ""USS Arcadia (ID-1605)"" .
  ?ship dbo:ownedBy ?owner .
}

SELECT ?spouse WHERE {
  wd:Q230 wdt:P26 ?spouse .
}

SELECT ?commander WHERE {
  wd:Q230 wdt:P39 ?role .
  ?role schema:description ""AIDS crisis"" .
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
628,17,train,"Give me the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band ?award WHERE {
  ?band dbo:originPlace dbr:New_York_(state) .
  ?band dbo:awardReceived ?award .
  ?award rdfs:label ?awardLabel .
  FILTER(CONTAINS(LCASE(?awardLabel), ""bridge"") && CONTAINS(LCASE(?awardLabel), ""port""))
}
```",2,7,3,2,1,3,3,71,0,0,3,0,0.0,0
412,16,train,Give me the war of the awardee of 30 and war of Napoleon Zervas.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://dbpedia.org/property/awards> ""30""^^<http://www.w3.org/2001/XMLSchema#integer> . }","```sparql
# Query for the war involving Napoleon Zervas (Greek Civil War)
SELECT ?war WHERE {
  ?war dbo:wikiPageRedirects dbpedia-el:Εμφύλιο_πόλεμος.
}

# Note: The query for ""War of the Awardee of 30"" is not possible without additional context or assumptions.
```",3,3,4,2,2,2,3,28,0,0,11,0,0.0,0
628,61,train,"Give me the person born as the birth name of the native, that is a musical artist, of Florida and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> ?v3 . ?v3 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. ?result <http://dbpedia.org/property/birthName> ?v5 . ?v0 <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v1 <http://dbpedia.org/property/awards> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/property/birthName> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
SELECT ?person WHERE {
  ?person dbo:birthPlace dbr:Florida .
  ?person foaf:name ?name .
  FILTER regex(?name, ""Peter Gene Hernandez"", ""i"") .
}
```",6,12,7,3,2,3,3,71,0,0,59,0,0.0,0
859,12,train,Give me the associated musical artist of the associated musical artist of James Plotkin and band member of Human Remains (band).,SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Human_Remains_(band)> . <http://dbpedia.org/resource/James_Plotkin> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . },"```sparql
SELECT DISTINCT ?artist2 WHERE {
  # Step 1: Find an associated musical artist of James Plotkin
  dbpedia:James_Plotkin dbo:musicalArtist ?artist1 .
  
  # Step 2: For each artist found in step 1, find their associated musical artists
  ?artist1 dbo:musicalArtist ?artist2 .

  # Step 3: Check if the second artist is a member of Human Remains
  ?artist2 dbo:memberOf dbpedia:Human_Remains .
}
```",3,3,4,2,2,3,2,20,0,0,3,0,0.0,0
375,19,train,Give me the entity in the birth place of Yamaza Enjirō and war of Toyotomi Hidenaga and war of Hashiba Hidekatsu.,SELECT ?result WHERE { <http://dbpedia.org/resource/Hashiba_Hidekatsu> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Yamaza_Enjirō> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Toyotomi_Hidenaga> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
# Find the birthplace of Yamaza Enjirō
SELECT ?birthPlace WHERE {
  dbpedia:Yamaza_Enjirō dbo:birthPlace ?birthPlace .
}

# Find wars involving Toyotomi Hidenaga and Hashiba Hidekatsu
SELECT DISTINCT ?war WHERE {
  { 
    dbpedia:Toyotomi_Hidenaga dbo:participatedInMilitaryConflict ?war .
  }
  UNION
  {
    dbpedia:Hashiba_Hidekatsu dbo:participatedInMilitaryConflict ?war .
  }
}

# Find entities related to the birthplace and wars
SELECT DISTINCT ?entity WHERE {
  VALUES (?birthPlace) { 
    # Replace with actual URI of Yamaza Enjirō's birthplace after first query
  }
  
  VALUES (?war) { 
    # Replace with URIs of wars from second query
  }

  {
    ?entity dbo:location ?birthPlace .
  }
  UNION
  {
    ?entity dbo:participatedInMilitaryConflict ?war .
  }
}
```",4,4,5,2,3,2,3,28,0,0,2,0,0.0,0
203,31,train,"Give me the commander in the war, that is a military conflict and an event, of the figure known as The Triple X's and military force of Battle of Fort Royal.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/battle> ?v0 . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://dbpedia.org/property/nickname> ""The Triple X's""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander WHERE {
  # Find the military force involved in the Battle of Fort Royal
  ?battle dbo:militaryForce ?militaryForce .
  
  # Ensure we are looking at the correct battle
  FILTER(STR(?battle) = ""Battle_of_Fort_Royal"")

  # Get the commander of that military force
  ?militaryForce dbo:commander ?commander .

  # Link to The Triple X's if applicable (assuming it is a known entity)
  OPTIONAL {
    ?commander rdfs:label ?label .
    FILTER(CONTAINS(LCASE(?label), ""the triple x's""))
  }
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
687,56,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento and player in Sergio Agüero and player in the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v0 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?result <http://dbpedia.org/ontology/coach> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. <http://dbpedia.org/resource/Sergio_Agüero> <http://dbpedia.org/ontology/team> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?team WHERE {
    # Step 1: Get Marcelo Sarmiento's birthdate
    ?marceloSarmiento dbo:birthDate ?birthdate .
    FILTER (str(?marceloSarmiento) = ""Marcelo_Sarmiento"")

    # Step 2: Find a soccer player and manager born on that date
    ?person dbo:birthDate ?birthdate ;
            dbo:sport dbr:Soccer ;
            dbo:occupation dbr:Soccer_manager .
    
    # Step 3: Get Sergio Agüero's team(s)
    ?aguero dbo:team ?team .

    FILTER (str(?aguero) = ""Sergio_Ag%C3%BCero"")

    # Step 4: Identify an athlete born on February 22, 1955
    ?athlete dbo:birthDate ?athleteBirthdate .
    FILTER (?athleteBirthdate = ""1955-02-22T00:00:00Z""^^xsd:dateTime)

    # Step 5: Return the team of the soccer player and manager found in step 2
    ?person dbo:team ?team .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
472,9,train,Give me the administration of Christian IX of Denmark and administration of Olaf I of Denmark.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?monarch ?reignStart ?reignEnd WHERE {
  VALUES ?monarch { 
    dbr:Christian_IX_of_Denmark 
    dbr:Olaf_I_of_Denmark 
  }
  
  OPTIONAL {
    ?monarch dbo:reign ?reign.
    ?reign dbo:startYear ?reignStart;
           dbo:endYear ?reignEnd.
  }
}
```",2,2,3,1,2,2,3,28,0,2,1,0.0,0.0,0
140,9,train,"Give me the war, that is a societal event, of the military force of Pickett's Charge.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Pickett's_Charge> . ?v0 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war WHERE {
  dbr:Pickett's_Charge dbo:militaryForce dbr:Army_of_North_Virginia .
  dbr:Army_of_North_Virginia dbo:partOf dbr:American_Civil_War .
  dbr:American_Civil_War a dbo:SocietalEvent ;
                       rdfs:label ?war .
}
```",2,3,3,2,1,3,2,20,0,0,19,0,0.0,0
816,29,train,Give me the parent of the professional in Photographer and actor of Judgment: The Trial of Julius and Ethel Rosenberg and parent of Doon Arbus.,"SELECT ?result WHERE { <http://dbpedia.org/resource/Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/Doon_Arbus> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v3 . ?v3 <http://dbpedia.org/property/occupation> ""Photographer""@en . }","```sparql
SELECT DISTINCT ?person1 ?person2 ?parent WHERE {
  # Find Arlo Guthrie's parent who is a photographer and actor in ""Judgment""
  ?guthrie dbo:profession dbr:Photographer ;
           dbo:profession dbr:Actor ;
           dbo:actedInFilm dbr:Judgment:_The_Trial_of_Julius_and_Ethel_Rosenberg .
  
  # Find Doon Arbus
  ?arbus a dbo:Person ; rdfs:label ""Doon Arbus""@en .

  # Get the parent of both individuals
  ?guthrie dbo:parent ?parent .
  ?arbus dbo:parent ?parent .

  # Ensure the parent is Diane Arbus
  ?parent rdfs:label ""Diane Arbus""@en .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
816,19,train,"Give me the actor of the movie, that is a work, with Herschel Bernardi and parent of Amy Arbus.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/starring> ?result . ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Amy_Arbus> . ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Herschel_Bernardi> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Find the parent of Amy Arbus
  dbr:Amy_Arbus dbo:parent ?parent .

  # Find movies with Herschel Bernardi
  ?movie dbo:starring dbr:Herschel_Bernardi .
  
  # Check if the movie is related to the parent of Amy Arbus
  ?movie dbo:starring ?actor .
  FILTER(?actor != dbr:Herschel_Bernardi)
  OPTIONAL { ?parent dbo:work ?relatedWork . }
  FILTER EXISTS { ?relatedWork = ?movie }
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
68,14,train,"Give me the father of Isabella of Austria and child of the commander, that is a royalty, in Siege of Padua.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v2 . ?v2 <http://dbpedia.org/ontology/child> ?result . <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father ?commander WHERE {
  # Isabella of Austria's father
  dbr:Isabella_of_Austria dbo:father ?father .
  
  # Commander in the Siege of Padua
  ?commander dbo:occupation ""Commander""@en ;
             dbo:participatedInBattle dbr:Siege_of_Padua_1509 .

  # Ensure the commander is royalty
  ?commander a dbo:Monarch .

  # Check if the father and commander are connected through royalty
  ?father dbo:child ?royalty .
  ?royalty dbo:spouse ?commander .
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
198,35,train,"Give me the war of the awardee of Medal of Honor and entity in the birthplace, that is a settlement and American, of Henry Clay Lewis.",SELECT ?result WHERE { <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v1 . ?v2 <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Medal_of_Honor> . ?result <http://dbpedia.org/ontology/place> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?war WHERE {
  # Step 1: Find Henry Clay Lewis's birthplace
  dbr:Henry_Clay_Lewis dbo:birthPlace ?birthPlace .
  
  # Ensure the birthplace is a settlement in America
  ?birthPlace a dbo:Settlement ;
             dbp:country ""United States"" .

  # Step 2: Find Medal of Honor awardees and their associated wars
  ?medalOfHonorAwardee dbo:award ?medalOfHonor .
  ?medalOfHonor rdfs:label ""Medal of Honor""@en .
  
  ?medalOfHonorAwardee dbo:militaryConflict ?militaryEvent .
  ?militaryEvent a dbo:MilitaryConflict ;
                 dbo:name ?war .

  # Step 3: Match the birthplace with the wars
  FILTER(?birthPlace = dbr:Henry_Clay_Lewis_birth_place)
}
```",4,6,5,2,2,3,3,71,0,0,2,0,0.0,0
246,17,train,"Give me the parent of the child, that is a royalty, of the child, that is a royalty, of Princess Muna al-Hussein and parent of Princess Sara bint Faisal.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v3 <http://dbpedia.org/property/father> ?v0 . <http://dbpedia.org/resource/Princess_Muna_al-Hussein> <http://dbpedia.org/ontology/child> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Princess_Sara_bint_Faisal> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?parent WHERE {
  # Step 1: Find a child of Princess Muna al-Hussein who is royalty
  ?child dbo:spouse|dbo:childOf+ dbp:PrincessMunaAlHussein ;
         a dbo:Monarch .

  # Step 2: Identify the parent of this royal child
  ?parent dbo:child ?child .

  # Step 3: Find Princess Sara bint Faisal's parent
  ?saraParent dbo:child dbp:SaraBintFaisal .
  
  # Step 4: Ensure the parent is common to both relationships
  FILTER(?parent = ?saraParent)
}
```",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
668,40,train,Give me the professional in Musician and associated musical artist of the person born as the birth name of $pacely and person born as Darryl Paa Kwesi Bannerman-Martin.,"SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v2 . ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/occupation> ""Musician""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person ?associatedArtist WHERE {
  VALUES ?birthName { ""Tupac Shakur"" ""Darryl Paa Kwesi Bannerman-Martin"" }
  
  ?person dbo:birthName ?birthName .
  ?person a dbo:Musician .

  OPTIONAL {
    ?association dbo:artist ?person ;
                 dbo:associatedArtist ?associatedArtist .
  }

  FILTER(?associatedArtist != ?person)
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
87,5,train,"Give me the movie, that is a work and a film, with Audrey Hepburn.","SELECT ?result WHERE { ?result <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?filmTitle WHERE {
  ?film a dbo:Film .
  ?film dbo:starring dbr:Audrey_Hepburn .
  ?film rdfs:label ?filmTitle .
  FILTER (lang(?filmTitle) = 'en')
}
```",1,3,2,1,1,2,3,28,0,20,15,0.0,0.0,0
293,56,train,"Give me the party member of the ruling party in Central, Louisiana and person born as the birth name of the parent of Tisha Sterling and spouse of Roger Pryor (actor).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/party> ?v2 . <http://dbpedia.org/resource/Roger_Pryor_(actor)> <http://dbpedia.org/ontology/spouse> ?result . <http://dbpedia.org/resource/Central,_Louisiana> <http://dbpedia.org/property/leaderParty> ?v2 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Tisha_Sterling> . ?v0 <http://dbpedia.org/property/birthName> ?v1 . }","```sparql
# Step 1: Identify the ruling party in Central, Louisiana
SELECT ?party WHERE {
  ?location rdf:type dbo:PopulatedPlace .
  ?location dbo:country dbr:United_States .
  ?location rdfs:label ""Central, Louisiana""@en .
  ?government dbo:governmentType ?type .
  ?government dbo:location ?location .
  ?partyMember dbo:memberOf ?party .
  ?partyMember dbo:officeHolderOf ?government .
  FILTER(CONTAINS(LCASE(?partyMember), ""central louisiana""))
}

# Step 2: Find the birth name of Tisha Sterling's parent
SELECT ?birthName WHERE {
  ?tisha foaf:name ""Tisha Sterling""@en .
  ?parent dbo:child ?tisha .
  ?parent foaf:name ?birthName .
}

# Step 3: Identify Roger Pryor's spouse
SELECT ?spouse WHERE {
  ?roger foaf:name ""Roger Pryor (actor)""@en .
  ?marriage dbo:spouse ?roger .
  ?marriage dbo:spouse ?spouse .
}

# Combine the results to find a match
SELECT DISTINCT ?person WHERE {
  # Assuming we have identified the ruling party and its member
  VALUES (?party) { <http://dbpedia.org/resource/Party_X> } # Replace with actual URI

  # Assuming we have identified the birth name of Tisha Sterling's parent
  VALUES (?birthName) { ""Parent_Birth_Name""@en } # Replace with actual value

  # Assuming we have identified Roger Pryor's spouse
  VALUES (?spouse) { <http://dbpedia.org/resource/Spouse_URI> } # Replace with actual URI

  ?person dbo:memberOf ?party .
  ?person foaf:name ?birthName .
  ?person = ?spouse .
}
```",6,6,7,3,3,3,3,71,0,0,1,0,0.0,0
557,51,train,"Give me the producer of the claim to fame, that is a work, of Cora Sue Collins and producer of the claim to fame, that is a movie and a work, of the actor of High Society Blues.",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://dbpedia.org/ontology/producer> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v4 <http://dbpedia.org/ontology/producer> ?result . <http://dbpedia.org/resource/High_Society_Blues> <http://dbpedia.org/property/starring> ?v1 . <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?v4 . ?v1 <http://dbpedia.org/ontology/knownFor> ?v2 . },"```sparql
# Query to find the producer of Cora Sue Collins' claim to fame (work)
SELECT ?producer WHERE {
  ?collins dbo:birthName ""Cora Sue Collins""@en .
  ?collins dbo:profession dbr:Writer . # Assuming she is a writer; adjust if necessary
  ?collins dbo:notableWork ?work .
  ?work dbo:producer ?producer .
}

UNION

# Query to find the producer of the movie and work by the actor from ""High Society Blues""
SELECT ?producer WHERE {
  ?movie dcterms:title ""High Society Blues""@en ;
         dbo:actor ?actor .
  ?actor dbo:notableWork ?work .
  ?work a dbo:Film ; # Assuming it's a film; adjust if necessary
        dbo:producer ?producer .
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
293,50,train,"Give me the spouse of the actor of the product, that is a film, of Nat Levine and person born as the birth name of Ann Sothern.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/starring> ?v4 . ?result <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v3 . ?v0 <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Nat_Levine> . ?v4 <http://dbpedia.org/ontology/spouse> ?result . },"```sparql
# Step 1: Find a film produced by Nat Levine
SELECT ?film WHERE {
  ?film dbo:producer dbr:Nat_Levine .
}

# Step 2: Get Ann Sothern's birth name
SELECT ?birthName WHERE {
  dbr:Ann_Sothern foaf:name ?realName .
  ?realName rdfs:label ?birthName .
  FILTER (LANG(?birthName) = ""en"")
}

# Assuming we have identified a film and an actor from the film, replace <Film> and <Actor> with actual values
# Step 3: Find an actor of the film
SELECT ?actor WHERE {
  <Film> dbo:starring ?actor .
}

# Step 4: Find the spouse of the actor
SELECT ?spouse WHERE {
  ?actor dbo:spouse ?spouse .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
595,19,train,"Give me the spouse of the author, that is a politician and an office holder, of An Invitation to the White House and author of Back to Work (book).",SELECT ?result WHERE { <http://dbpedia.org/resource/An_Invitation_to_the_White_House> <http://dbpedia.org/property/author> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Back_to_Work_(book)> <http://dbpedia.org/property/author> ?result . ?v0 <http://dbpedia.org/ontology/spouse> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. },"```sparql
SELECT ?spouse WHERE {
  ?author foaf:name ""Paul Ryan""@en .
  ?author dbo:spouse ?spouse .
  OPTIONAL { ?spouse dbo:officeHolderOf ?office . }
  FILTER EXISTS { ?spouse dbo:politicalParty ?party } # Ensures the spouse is linked to a political party
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
80,60,train,Give me the professional in the alter ego of the series of The Golden Master and actor of the movie with the author of Smartbomb (book).,SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/property/starring> ?v3 . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v0 . <http://dbpedia.org/resource/Smartbomb_(book)> <http://dbpedia.org/property/author> ?v3 . },"```sparql
# Step 1: Identify ""The Golden Master"" series
SELECT ?goldenMaster WHERE {
  ?goldenMaster rdfs:label ""The Golden Master""@en .
}

# Step 2: Find the alter ego in ""The Golden Master""
SELECT ?alterEgo ?profession WHERE {
  ?goldenMaster dbo:character ?alterEgo .
  ?alterEgo dbo:occupation ?profession .
}

# Step 3: Identify the author of ""Smartbomb""
SELECT ?author WHERE {
  ?smartbomb dbo:author ?author .
  ?smartbomb rdfs:label ""Smartbomb""@en .
}

# Step 4: Find a movie featuring both the actor and the author
SELECT ?movie WHERE {
  ?actor dbo:professionActor ?role .
  ?role dbo:character ?alterEgo .
  ?movie dbo:starring ?actor .
  ?movie dbo:starring ?author .
}

# Step 5: Determine the professional identity of the alter ego
SELECT ?profession WHERE {
  ?alterEgo dbo:occupation ?profession .
}
```",6,6,7,3,2,3,3,71,0,0,7802,0,0.0,0
871,24,train,"Give me the father of Arthur Stanley (politician) and parent of the child of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/ontology/parent> ?result . <http://dbpedia.org/resource/Arthur_Stanley_(politician)> <http://dbpedia.org/property/father> ?result . }","```sparql
# Find the father of Arthur Stanley (politician)
SELECT ?father WHERE {
  ?person rdfs:label ""Arthur Stanley""@en .
  ?person dbo:parent ?father .
  FILTER(LANG(?person) = 'en')
}

UNION

# Find a child of Frederick Stanley, 16th Earl of Derby and their parent
SELECT ?parent WHERE {
  ?child dbo:parent ?parent .
  ?parent rdfs:label ""Frederick Stanley, 16th Earl of Derby""@en .
  FILTER(LANG(?parent) = 'en')
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
89,17,train,"Give me the child of the spouse, that is a royalty, of Saw Min Phyu.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v1 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?child WHERE {
  ?sawMinPhyu rdfs:label ""Saw Min Phyu""@en .
  
  ?spouse dbo:spouse ?sawMinPhyu ;
          dbo:child ?child .

  OPTIONAL { ?child dbo:royaltyStatus ?status . }
  
  FILTER EXISTS { ?child dbo:royaltyStatus ?status } 
}
```",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
941,10,train,"Who is the spouse of the child, that is a royalty, of Princess Antoinette of Brunswick-Wolfenbüttel?",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> ?v0 . <http://dbpedia.org/resource/Princess_Antoinette_of_Brunswick-Wolfenbüttel> <http://dbpedia.org/ontology/child> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?child ?spouse WHERE {
  ?princess a dbo:Person ;
           foaf:name ""Antoinette of Brunswick-Wolfenbüttel""@en .
  
  ?princess dbo:child ?child .
  
  OPTIONAL { ?child dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Princess"", ""i"") }
  
  OPTIONAL { ?child dbp:spouse ?spouse . }
}
```",2,3,3,2,1,3,2,20,2,14,2,0.125,0.5,0.2
39,25,train,"Give me the band of the person born, that is a musical artist, as Robert Lamar Thompson and professional in .","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v1 <http://dbpedia.org/property/birthName> ""Robert Lamar Thompson""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?band WHERE {
  ?person foaf:name ""Robert Lamar Thompson""@en .
  ?person a dbo:MusicalArtist .
  OPTIONAL { ?person dbo:associatedBand ?band . }
}
```",3,4,4,2,2,3,3,71,0,0,4,0,0.0,0
103,2,train,Give me the professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . }","```
# No valid SPARQL query can be generated due to lack of specificity in the question.
```",1,1,2,1,1,3,3,71,0,0,39640,0,0.0,0
68,5,train,"Who is the child, that is a royalty, of Philip I of Castile?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Philip_I_of_Castile> . },"```sparql
SELECT ?child ?title WHERE {
  ?philip dbo:child ?child .
  FILTER(STRSTARTS(LCASE(?philip), ""philip i of castile""))
  
  OPTIONAL { ?child dbo:royaltyTitle ?title . }
  FILTER EXISTS { ?child dbo:royaltyTitle ?title }
}
```",1,2,2,1,1,2,3,28,0,0,5,0,0.0,0
412,17,train,"Give me the entity in the death place, that is a settlement, of Antonios Varthalitis and war of Konstantinos Ventiris.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?v1 . },"```sparql
# Step 1: Get the death place of Antonios Varthalitis that is a settlement
SELECT ?deathPlace WHERE {
    ?varthalitis dbo:deathPlace ?deathPlace .
    ?varthalitis foaf:name ""Antonios Varthalitis"" .
    ?deathPlace rdf:type dbo:Settlement .
}

# Step 2: Get the wars associated with Konstantinos Ventiris
SELECT ?war WHERE {
    ?ventiris dbo:militaryConflict ?war .
    ?ventiris foaf:name ""Konstantinos Ventiris"" .
}

# Step 3: Find common settlements between Antonios Varthalitis' death place and Konstantinos Ventiris' wars
SELECT DISTINCT ?commonSettlement WHERE {
    # Death place of Antonios Varthalitis that is a settlement
    ?varthalitis dbo:deathPlace ?deathPlace .
    ?varthalitis foaf:name ""Antonios Varthalitis"" .
    ?deathPlace rdf:type dbo:Settlement .

    # Wars associated with Konstantinos Ventiris
    ?ventiris dbo:militaryConflict ?war .
    ?ventiris foaf:name ""Konstantinos Ventiris"" .

    # Check if the death place is related to any of the wars
    ?war dbo:location ?commonSettlement .
    FILTER (?deathPlace = ?commonSettlement)
}
```",3,4,4,2,2,2,3,28,0,0,1,0,0.0,0
687,41,train,"Give me the player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City and team of Pablo Aimar and player in the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v4 <http://dbpedia.org/ontology/team> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v4 . ?v2 <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Pablo_Aimar> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?player WHERE {
  # Find actors in ""All or Nothing: Manchester City"" who are soccer players and athletes
  ?actor dbo:starringIn dbr:All_or_Nothing:_Manchester_City;
         a dbo:SoccerPlayer;
         a dbo:Athlete.
  
  # Ensure the actor is part of a team that Pablo Aimar played for
  ?team dbp:player ?actor.
  ?aimarTeam dbp:player dbr:Pablo_Aimar.
  FILTER(?team = ?aimarTeam)
  
  # Check if the player was born on February 22, 1955
  ?actor dbo:birthday ""1955-02-22""^^xsd:date.

}
```",5,8,6,2,3,3,3,71,0,0,1,0,0.0,0
531,43,train,"Give me the tenant of Madrid and office of the commander, that is an office holder and a politician, in the force, that is a military conflict and a societal event, of Manuel Pinto da Costa and office of Miguel Maura.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Manuel_Pinto_da_Costa> . ?v4 <http://dbpedia.org/property/office> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Madrid> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?tenantOfMadrid ?officeOfCommander ?militaryConflict ?societalEvent
WHERE {
  # Manuel Pinto da Costa's involvement in military conflict and societal event
  ?manuelPinto a dbo:OfficeHolder ;
               dbo:politicalPartyMember ?party ;
               dbo:militaryConflict ?militaryConflict ;
               dbo:societalEvent ?societalEvent .

  # Miguel Maura's office or role
  ?miguelMaura a dbo:OfficeHolder ;
               dbo:office ?officeOfCommander .

  # Tenant of Madrid
  ?tenantOfMadrid a dbo:OfficeHolder ;
                  dbo:office dbr:Mayor_of_Madrid .

  # Linking the elements
  FILTER(?manuelPinto = dbr:Manuel_Pinto_da_Costa)
  FILTER(?miguelMaura = dbr:Miguel_Maura)
}
```",5,9,6,3,3,3,3,71,0,0,1,0,0.0,0
78,16,train,Give me the associated musical artist of Stuart Tosh and band member of the associated musical artist of David Paton.,SELECT ?result WHERE { <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/David_Paton> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . },"```sparql
# Query to get the musical artist associated with Stuart Tosh
SELECT ?artist WHERE {
  wd:Q123456 wdt:P106 wd:Q33999; # Assuming Q123456 is the DBpedia item for Stuart Tosh and P106 represents ""occupation""
  wdt:P175 ?artist. # P175 represents ""member of band or musical group""
}

# Query to get a band member of the musical artist associated with David Paton
SELECT ?bandMember WHERE {
  wd:Q654321 wdt:P106 wd:Q33999; # Assuming Q654321 is the DBpedia item for David Paton and P106 represents ""occupation""
  wdt:P175 wd:Q98765; # Assuming Q98765 is the DBpedia item for Supertramp
  ?bandMember wdt:P175 wd:Q98765. # Find a band member of Supertramp
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
23,6,train,Give me the entity in Colombia and party of Roy Barreras.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . <http://dbpedia.org/resource/Roy_Barreras> <http://dbpedia.org/ontology/party> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entityInColombia ?politicalParty WHERE {
  VALUES ?person { dbr:Roy_Barreras }
  
  OPTIONAL {
    ?person dbo:positionHeld ?entityInColombia .
  }

  OPTIONAL {
    ?person dbo:partyAffiliation ?politicalParty .
  }
}
```",2,2,3,1,2,2,3,28,0,0,5,0,0.0,0
263,17,train,"Give me the parent of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne and parent of the person born as Hon. Mary Frances Bowes-Lyon.","SELECT ?result WHERE { <http://dbpedia.org/resource/Patrick_Bowes-Lyon,_15th_Earl_of_Strathmore_and_Kinghorne> <http://dbpedia.org/ontology/parent> ?result . ?result <http://dbpedia.org/ontology/child> ?v1 . ?v1 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . }","```sparql
# Query to get parents of Patrick Bowes-Lyon, 15th Earl of Strathmore and Kinghorne
SELECT ?parent WHERE {
    ?person dbo:givenName ""Patrick""@en .
    ?person dbo:familyName ""Bowes-Lyon""@en .
    ?person dbo:title ""15th Earl of Strathmore and Kinghorne""@en .
    OPTIONAL { ?person dbo:father ?parent . }
    OPTIONAL { ?person dbo:mother ?parent . }
}

UNION

# Query to get parents of Hon. Mary Frances Bowes-Lyon
SELECT ?parent WHERE {
    ?person dbo:givenName ""Mary Frances""@en .
    ?person dbo:familyName ""Bowes-Lyon""@en .
    ?person dbo:honorificPrefix ""Hon.""@en .
    OPTIONAL { ?person dbo:father ?parent . }
    OPTIONAL { ?person dbo:mother ?parent . }
}

# Find common parent
SELECT DISTINCT ?commonParent WHERE {
    VALUES (?parent1) {
        # Results from the first query for Patrick Bowes-Lyon's parents
    }
    VALUES (?parent2) {
        # Results from the second query for Mary Frances Bowes-Lyon's parents
    }
    FILTER(?parent1 = ?parent2)
    BIND(?parent1 AS ?commonParent)
}
```

Note: The `VALUES` clauses in the final query should be replaced with actual results obtained from running the first two queries separately.",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
782,44,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and reference to The Fabulous Thunderbirds and band of the band member of Eric Clapton.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . ?result <http://dbpedia.org/ontology/bandMember> ?v4 . ?v2 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  # Identify Nick Curran
  ?nickCurran a dbo:MusicalArtist ;
              foaf:name ""Nick Curran""@en .

  # Find his association with any bands or artists
  ?nickCurlan dbo:associatedBandOrArtist ?bandOrArtist .

  # Identify members of The Fabulous Thunderbirds
  ?fabulousThunderbirdMember dbo:memberOf dbr:The_Fabulous_Thunderbirds ;
                             a dbo:MusicalArtist .

  # Cross-reference with Eric Clapton's band members
  ?claptonsBandMember dbo:bandMemberOf dbr:Eric_Claptom ;
                      a dbo:MusicalArtist .

  # Find the intersection of The Fabulous Thunderbirds and Eric Clapton's band members
  FILTER (?fabulousThunderbirdMember = ?claptonsBandMember)

  # Return the artist associated with Nick Curran
  ?bandOrArtist foaf:name ?artist .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
871,1,train,"Give me the parent of Edward Stanley, 17th Earl of Derby.","SELECT ?result WHERE { <http://dbpedia.org/resource/Edward_Stanley,_17th_Earl_of_Derby> <http://dbpedia.org/ontology/parent> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?fatherLabel WHERE {
  ?person rdfs:label ""Edward Stanley, 17th Earl of Derby""@en .
  ?person dbo:father ?father .
  ?father rdfs:label ?fatherLabel .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
769,16,train,"Give me the player in the person born, that is an athlete and a soccer player and a sports manager and a soccer manager, on 1981-12-01 and player in the manager, that is a sports manager and a soccer manager, of Hong Kong C Team.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthDate> ""1981-12-01""^^<http://www.w3.org/2001/XMLSchema#date> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>. <http://dbpedia.org/resource/Hong_Kong_C_Team> <http://dbpedia.org/ontology/manager> ?v3 . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://dbpedia.org/ontology/team> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person a dbo:SoccerPlayer .
  ?person dbo:birthDate ?date .
  FILTER (YEAR(?date) = 1981 && MONTH(?date) = 12 && DAY(?date) = 1)
  
  ?person dbo:occupation ?occupation .
  VALUES ?occupation { 
    dbr:Athlete 
    dbr:SoccerPlayer 
    dbr:SportsManager 
    dbr:SoccerManager
  }
  
  ?team a dbo:SoccerTeam ;
        dbo:manager ?person ;
        rdfs:label ""Hong Kong C Team""@en .
  
  ?player a dbo:SoccerPlayer ;
          dbo:playsFor ?team ;
          ?p ?o .
  FILTER (?p = dbo:player && ?o = ?person)
}
```",4,10,5,2,2,3,2,20,0,0,2,0,0.0,0
119,49,train,"Give me the tenant of the administration, that is Spanish, of the reference to Spanish Socialist Workers' Party and office of the leader of 2009 Galician regional election.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Spain>. ?result <http://dbpedia.org/ontology/headquarter> ?v1 . ?v1 <http://dbpedia.org/property/leaderParty> ?v0 . <http://dbpedia.org/resource/2009_Galician_regional_election> <http://dbpedia.org/property/leader> ?v2 . ?v0 <http://xmlns.com/foaf/0.1/name> ""Spanish Socialist Workers' Party""@en . ?v2 <http://dbpedia.org/property/office> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?position WHERE {
    ?election dbo:winner dbr:José_Luis_Rodríguez_Zapatero .
    ?election dbo:electionDate ?date .
    FILTER(YEAR(?date) = 2009 && CONTAINS(LCASE(STR(?election)), ""galicia"")) .

    ?person dbo:positionHeld ?position .
    ?person rdfs:label ""José Luis Rodríguez Zapatero""@en .
    
    OPTIONAL {
        ?party dbo:leader ?person .
        ?party rdfs:label ""Spanish Socialist Workers' Party""@en .
    }
}
```",5,6,6,3,2,3,3,71,0,0,2,0,0.0,0
398,5,train,Who is the writer of The First Glove?,SELECT ?result WHERE { <http://dbpedia.org/resource/The_First_Glove> <http://dbpedia.org/property/writer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author WHERE {
  ?book a dbo:Book .
  ?book dbo:title ""The First Glove""@en .
  ?book dbo:author ?author .
}
```",1,1,2,1,1,3,2,20,0,0,1,0,0.0,0
203,24,train,"Give me the military force of Battle of Cape Finisterre (1805) and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
# Query for the Battle of Cape Finisterre (1805)
SELECT ?battle ?involvedMilitaryForce WHERE {
  ?battle dcterms:subject dbc:Battles_of_the_Napoleonic_Wars ;
         foaf:name ""Battle of Cape Finisterre (1805)"" .
  OPTIONAL { ?battle dbo:militaryConflictParticipant ?participant . }
  OPTIONAL { ?participant dbo:participatesInMilitaryForce ?involvedMilitaryForce . }
}

UNION

# Query for military conflicts involving William Bayne
SELECT ?event ?militaryForce WHERE {
  ?officer foaf:name ""William Bayne (Royal Navy officer)"" .
  ?officer dbo:militaryConflictParticipant ?participant .
  ?participant dbo:participatesInMilitaryForce ?militaryForce .
  OPTIONAL { ?participant dbo:participatesInEvent ?event . }
}
```",3,5,4,2,2,3,3,71,0,0,4,0,0.0,0
103,13,train,Give me the professional in the profession of Shatrughan Sinha.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ?v1 . <http://dbpedia.org/resource/Shatrughan_Sinha> <http://dbpedia.org/property/occupation> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?occupation WHERE {
  dbr:Shatrughan_Sinha dbo:occupation ?occupation .
}
```",2,2,3,2,1,3,3,71,0,0,58032,0,0.0,0
706,11,train,Give me the birthplace of the awardee of Sangeet Natak Akademi Fellowship and birthplace of Smita Patil.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Sangeet_Natak_Akademi_Fellowship> . <http://dbpedia.org/resource/Smita_Patil> <http://dbpedia.org/ontology/birthPlace> ?result . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for an awardee of Sangeet Natak Akademi Fellowship (example: Ustad Bismillah Khan)
SELECT ?person ?birthPlace WHERE {
  ?person dbo:award ""Sangeet_Natak_Akademi_Fellowship""@en .
  ?person dbp:birthPlace ?birthPlace .
}

# Query for Smita Patil
SELECT ?person ?birthPlace WHERE {
  ?person rdfs:label ""Smita Patil""@en .
  ?person dbp:birthPlace ?birthPlace .
}
```",3,3,4,2,2,3,2,20,0,0,1,0,0.0,0
687,27,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.",SELECT ?result WHERE { <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v1 . ?v2 <http://dbpedia.org/ontology/birthDate> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?result <http://dbpedia.org/ontology/coach> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT ?person ?team WHERE {
  # Get Marcelo Sarmiento's date of birth
  VALUES ?marceloSarmiento (dbr:Marcelo_Sarmiento) .
  
  ?marceloSarmiento dbo:birthday ?birthday .

  # Find individuals who are both soccer players and managers
  ?person a dbo:SoccerPlayer ;
          a dbo:SoccerManager ;
          dbo:birthday ?sameBirthday .

  FILTER (?sameBirthday = ?birthday)

  OPTIONAL {
    ?person dbo:team ?team .
  }
}
```",3,5,4,3,1,3,3,71,0,0,1,0,0.0,0
375,5,train,"Give me the native, that is an artist and a musical artist, of London.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/London> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?artist a dbo:MusicalArtist .
  ?artist dbo:birthPlace dbr:London ;
         dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""music"") || CONTAINS(LCASE(?occupation), ""singer"") || CONTAINS(LCASE(?occupation), ""songwriter""))
}
LIMIT 10
```",1,3,2,1,1,3,2,20,0,0,657,0,0.0,0
782,24,train,Give me the associated musical artist of Nick Curran and band of the band member of Eric Clapton.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/bandMember> ?v2 . <http://dbpedia.org/resource/Nick_Curran> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Eric_Clapton> . },"```sparql
# Query 1: Associated musical artist of Nick Curran
SELECT ?artist WHERE {
  dbpedia:Nick_Curran dbo:musicalArtist ?artist .
}

# Query 2: Band of a band member of Eric Clapton
SELECT DISTINCT ?band WHERE {
  ?member dbo:memberOf dbpedia:Eric_Claptontemp; # Temporarily bind to avoid confusion with other entities
  ?member dbo:memberOf ?band.
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
23,24,train,Give me the party of the father of Sofía Petro and entity in the country of Daniel Elahi Galán.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/country> ?v2 . <http://dbpedia.org/resource/Sofía_Petro> <http://dbpedia.org/property/father> ?v1 . ?v1 <http://dbpedia.org/ontology/party> ?result . <http://dbpedia.org/resource/Daniel_Elahi_Galán> <http://dbpedia.org/ontology/country> ?v2 . },"```sparql
SELECT ?party ?entity WHERE {
  # Find the political party of Gustavo Petro
  dbpedia:Gustavo_Petro dbo:party ?party .
  
  # Find an entity in Colombia related to Daniel Elahi Galán
  dbpedia:Dani_Elahi_Galán dbo:nationality dbpedia:Colombia ;
                           dbo:country ?colombianEntity .
  OPTIONAL { ?colombianEntity rdfs:label ?entity . FILTER (lang(?entity) = 'en') }
}
```",4,4,5,2,2,2,3,28,0,0,2,0,0.0,0
87,22,train,"Give me the actor of the movie, that is a work and a film, with Iliza Shlesinger and spouse of the awardee of List of awards and nominations received by Janusz Kamiński.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . ?result <http://dbpedia.org/ontology/spouse> ?v0 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/List_of_awards_and_nominations_received_by_Janusz_Kamiński> . ?v3 <http://dbpedia.org/ontology/starring> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. },"```sparql
# Step 1: Find Janusz Kamiński's spouse
SELECT ?spouse WHERE {
  dbpedia:Janusz_Kami%C5%84ski dbo:spouse ?spouse .
}

# Assuming the result of the above query gives us a specific person, let's call them ?spouse

# Step 2: Find movies featuring Iliza Shlesinger
SELECT DISTINCT ?film WHERE {
  dbpedia:Iliza_Shlesinger dbo:actedIn ?film .
  FILTER (isLiteral(?film))
}

# Assuming we have the list of films from above, let's find a common film with ?spouse

# Step 3: Find a common film featuring both Iliza Shlesinger and Janusz Kamiński's spouse
SELECT DISTINCT ?commonFilm WHERE {
  dbpedia:Iliza_Shlesinger dbo:actedIn ?commonFilm .
  ?spouse dbo:actedIn ?commonFilm .
  FILTER (isLiteral(?commonFilm))
}

# Assuming we have identified the common film, let's find other actors in this film

# Step 4: Find all actors in the identified common film
SELECT DISTINCT ?actor WHERE {
  ?commonFilm dbo:starring ?actor .
  FILTER (!sameTerm(?actor, dbpedia:Iliza_Shlesinger) && !sameTerm(?actor, ?spouse))
}
```",4,6,5,2,2,2,3,28,0,0,1,0,0.0,0
203,38,train,"Give me the military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and military force of the force, that is an event and a societal event, of Robert Calder.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> ?v2 . ?result <http://dbpedia.org/ontology/battle> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?bayneConflict ?calderEvent ?bayneForce ?calderForce WHERE {
  # Find military conflicts involving William Bayne and the Royal Navy
  ?bayneConflict a dbo:MilitaryConflict ;
                 dbo:participatingMilitaryUnit dbr:Royal_Navy ;
                 dbo:participant dbr:William_Bayne_(Royal_Navy_officer) .
  
  # Get the military force associated with William Bayne's conflict
  ?bayneForce dbo:participatingMilitaryUnit ?bayneConflict .

  # Find events involving Robert Calder, specifically naval engagements
  ?calderEvent a dbo:MilitaryEngagement ;
               dbo:participant dbr:Robert_Calder .
  
  # Get the military force associated with Robert Calder's event
  ?calderForce dbo:participatingMilitaryUnit ?calderEvent .

}
```",4,8,5,2,2,3,3,71,0,0,5,0,0.0,0
412,7,train,Give me the war of Konstantinos Ventiris and war of Napoleon Zervas.,SELECT ?result WHERE { <http://dbpedia.org/resource/Napoleon_Zervas> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?war WHERE {
  VALUES ?person { 
    dbr:Konstantinos_Ventiris 
    dbr:Napoleon_Zervas 
  }
  
  ?person dbo:participatedIn ?event .
  ?event a dbo:MilitaryConflict ;
         rdfs:label ?war .
}
```",2,2,3,1,2,2,3,28,0,0,9,0,0.0,0
871,35,train,"Give me the parent of the awardee of Commander of the Royal Victorian Order and father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v0 <http://dbpedia.org/property/awards> ""Commander of the Royal Victorian Order""@en . ?result <http://dbpedia.org/ontology/child> ?v0 . ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . }","```sparql
SELECT ?person WHERE {
  # Identify Frederick Stanley, 16th Earl of Derby
  wd:Q1234567 dbo:spouse ?spouse .  # Assuming Q1234567 is the DBpedia ID for Frederick Stanley

  # Find his children who are politicians
  ?child dbo:parent wd:Q1234567 .
  ?child dbo:occupation wd:Q11424 .  # Q11424 represents 'politician' in DBpedia

  # Identify the awardee of Commander of the Royal Victorian Order among his children
  ?awardee dbo:parent wd:Q1234567 .
  ?awardee dbo:awardReceived wd:Q9876543 .  # Assuming Q9876543 is the DBpedia ID for Commander of the Royal Victorian Order

  # Confirm Frederick Stanley as the parent of both
  FILTER (?child = ?awardee)
}
```",4,5,5,2,2,3,3,71,0,0,1,0,0.0,0
103,47,train,"Give me the actor of the movie, that is a television show, with Richard E. Grant and professional in the profession of the actor, that is a politician, of Ab Kya Hoga.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Richard_E._Grant> . ?v0 <http://dbpedia.org/property/occupation> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v4 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v2 <http://dbpedia.org/property/starring> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  # Step 1: Find movies or TV shows featuring Richard E. Grant
  ?movie dbo:starring dbr:Richard_E._Grant .
  
  # Step 2: Identify actors from ""Ab Kya Hoga"" who are also politicians
  ?abKyaHogaActor dbo:starring dbr:Ab_Kya_Hoga ;
                  a dbo:Actor ;
                  dbo:profession dbr:Politician .

  # Step 3: Find the actor from the movie/TV show with Richard E. Grant who is an actor and politician
  ?actor dbo:starring ?movie ;
         a dbo:Actor ;
         dbo:profession dbr:Politician .
}
```",5,7,6,3,2,3,3,71,0,0,28,0,0.0,0
472,24,train,"Give me the administration of the person born, that is a royalty, as Prince Christian of Schleswig-Holstein-Sonderburg-Beck and administration of the mayor of Duchy of Schleswig.","SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/property/leader> ?v2 . <http://dbpedia.org/resource/Duchy_of_Schleswig> <http://dbpedia.org/property/leader> ?v1 . ?v2 <http://dbpedia.org/property/birthName> ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en . ?result <http://dbpedia.org/property/leader> ?v1 . }","```sparql
# Query for Prince Christian of Schleswig-Holstein-Sonderburg-Beck's administration or role
SELECT ?title WHERE {
  ?person rdfs:label ""Prince Christian of Schleswig-Holstein-Sonderburg-Beck""@en .
  ?person dbo:title ?title .
  FILTER(LANG(?title) = 'en')
}

# Query for the mayor or administrative structure of the Duchy of Schleswig
SELECT ?role WHERE {
  ?duchy rdfs:label ""Duchy of Schleswig""@en .
  ?duchy dbo:governmentRole ?role .
  FILTER(LANG(?role) = 'en')
}
```",4,5,5,2,2,2,3,28,0,0,2,0,0.0,0
347,37,train,"Give me the father of the child of the parent of Archduke Charles Joseph of Austria and child of Ferdinand II, Holy Roman Emperor.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . ?v3 <http://dbpedia.org/property/father> ?v0 . ?v3 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> . }","```sparql
# Step 1: Identify Archduke Charles Joseph of Austria
SELECT ?archduke WHERE {
  ?archduke dbo:wikiPageRedirects db:Q123456 . # Replace Q123456 with the actual DBpedia ID for Archduke Charles Joseph of Austria
}

# Step 2: Find his parent
SELECT ?parent WHERE {
  VALUES ?archduke { <http://dbpedia.org/resource/Archduke_Charles_Joseph_of_Austria> } # Use the correct URI from step 1
  ?archduke dbo:fatherOrMother ?parent .
}

# Step 3: Determine the children of this parent
SELECT DISTINCT ?child WHERE {
  VALUES ?parent { <URI_FROM_STEP_2> } # Replace with actual URI from step 2
  ?parent dbo:child ?child .
}

# Step 4: Identify Ferdinand II, Holy Roman Emperor
SELECT ?ferdinand WHERE {
  ?ferdinand dbo:wikiPageRedirects db:Q654321 . # Replace Q654321 with the actual DBpedia ID for Ferdinand II, Holy Roman Emperor
}

# Step 5: Find the children of Ferdinand II
SELECT DISTINCT ?child WHERE {
  VALUES ?ferdinand { <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> } # Use the correct URI from step 4
  ?ferdinand dbo:child ?child .
}

# Step 6: Cross-reference the children to find a common child
SELECT DISTINCT ?commonChild WHERE {
  VALUES ?parent { <URI_FROM_STEP_2> }
  ?parent dbo:child ?commonChild .
  VALUES ?ferdinand { <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> }
  ?ferdinand dbo:child ?commonChild .
}

# Step 7: Identify the father of this common child
SELECT DISTINCT ?father WHERE {
  VALUES ?commonChild { <URI_FROM_STEP_6> } # Replace with actual URI from step 6
  ?commonChild dbo:fatherOrMother ?father .
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
68,0,train,Give me the father of Isabella of Austria.,SELECT ?result WHERE { <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . },"```sparql
SELECT ?father WHERE {
  ?isabella dbo:givenName ""Isabella""@en .
  ?isabella dbo:birthPlace dbr:Austria .
  ?isabella dbo:father ?father .
}
```",1,1,2,1,1,2,3,28,0,0,1,0,0.0,0
258,16,train,"Give me the alma mater of the person born, that is a politician, as Eleonora Menicucci de Oliveira and establishment of the founding date of Federal University of Paraíba.","SELECT ?result WHERE { <http://dbpedia.org/resource/Federal_University_of_Paraíba> <http://dbpedia.org/ontology/foundingDate> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/almaMater> ?result . ?result <http://dbpedia.org/ontology/foundingDate> ?v2 . ?v3 <http://dbpedia.org/property/birthName> ""Eleonora Menicucci de Oliveira""@en . }","```sparql
# Query to find the alma mater of Eleonora Menicucci de Oliveira
SELECT ?almaMater WHERE {
  ?person foaf:name ""Eleonora Menicucci de Oliveira""@pt .
  ?person dbo:occupation dbr:Politician .
  ?person dbo:almaMater ?almaMater .
}

# Query to find the founding date of Federal University of Paraíba
SELECT ?foundingDate WHERE {
  ?university rdfs:label ""Federal University of Paraíba""@en ;
             dbo:foundingDate ?foundingDate .
}
```",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
249,4,train,Give me the native of Jamshedpur and native of India.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/India> . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Jamshedpur> . },"```sparql
# Query to get the native or official language of Jamshedpur
SELECT ?language WHERE {
  wd:Q11088 dbo:officialLanguage ?language .
}

UNION

# Query to get the native or official languages of India
SELECT DISTINCT ?language WHERE {
  wd:Q60 dbo:officialLanguage ?language .
}
```",2,2,3,1,2,2,2,9,0,0,21,0,0.0,0
399,8,train,Give me the band member of Emilia (Bulgarian singer) and professional in the profession of Jamie T.,SELECT ?result WHERE { <http://dbpedia.org/resource/Jamie_T> <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/property/occupation> ?v0 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Emilia_(Bulgarian_singer)> . },"```sparql
# Query to find band members associated with Emilia (Bulgarian singer)
SELECT ?bandMember WHERE {
  ?emilia dbo:birthName ""Emilia Nikolova"" .
  ?emilia dbo:associatedBand ?band .
  ?band dbo:member ?bandMember .
}

UNION

# Query to check if any of the band members are musicians like Jamie T
SELECT DISTINCT ?bandMember WHERE {
  ?bandMember dbo:occupation dbc:Musicians_from_England .
}
```",3,3,4,2,2,2,2,9,0,0,4,0,0.0,0
198,12,train,"Give me the force of Quincy Adams Gillmore and entity in Charleston, South Carolina.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Charleston,_South_Carolina> . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Quincy_Adams_Gillmore> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force ?entity WHERE {
  # Find Quincy Adams Gillmore's command
  ?gillmore a dbo:MilitaryPerson ;
            foaf:name ""Quincy Adams Gillmore""@en .
  
  ?command dbo:commander ?gillmore ;
           dbo:location dbr:Charleston,_South_Carolina ;
           dbo:timePeriod ?period .

  # Filter for the Civil War period
  FILTER(CONTAINS(LCASE(STR(?period)), ""civil war""))

  # Get the force commanded by Gillmore
  ?command dbo:force ?force .
  
  # Find relevant entities in Charleston during the Civil War
  OPTIONAL {
    ?entity dbo:location dbr:Charleston,_South_Carolina ;
            dbo:timePeriod ?period .
  }
}
```",2,2,3,1,2,3,3,71,0,0,2,0,0.0,0
859,8,train,Give me the associated musical artist of the associated musical artist of James Plotkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/James_Plotkin> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
SELECT DISTINCT ?finalArtist WHERE {
  # First level association with James Plotkin
  ?artist dbo:associatedMusicians dbr:James_Plotkin .
  
  # Second level association from the first artist found
  ?secondLevelArtist dbo:associatedMusicians ?artist .
  
  # Selecting distinct final artists associated in the second step
  ?finalArtist dbo:associatedMusicians ?secondLevelArtist .
}
```",2,2,3,2,1,3,2,20,0,0,13,0,0.0,0
687,35,train,"Give me the team of the person born, that is a soccer player and a soccer manager, on 1979-11-03 and player in the person born, that is an athlete, on 1955-02-22.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v2 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://dbpedia.org/ontology/birthDate> ""1979-11-03""^^<http://www.w3.org/2001/XMLSchema#date> . ?result <http://dbpedia.org/ontology/coach> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?team WHERE {
  ?person dbo:birthDate ""1979-11-03""^^xsd:date ;
          a dbo:SoccerPlayer, dbo:SoccerManager .
  
  ?person dbo:playsForTeam ?team .

  OPTIONAL { 
    ?athlete dbo:birthDate ""1955-02-22""^^xsd:date ;
             a dbo:Athlete .
  }
}
```",4,7,5,2,2,3,3,71,0,0,1,0,0.0,0
687,6,train,"Give me the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.",SELECT ?result WHERE { <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?doc a dbo:TelevisionSeries .
  ?doc dbo:title ""All or Nothing: Manchester City""@en .
  
  ?person dbo:appearance ?doc .
  ?person dbo:occupation dbr:Soccer_player .
  ?person dbo:occupation dbr:Actor .

  BIND(?person AS ?actor)
}
```",1,3,2,1,1,3,3,71,0,0,1,0,0.0,0
871,15,train,Who is the awardee of the award of Rodney Lees?,SELECT ?result WHERE { ?result <http://dbpedia.org/property/awards> ?v0 . <http://dbpedia.org/resource/Rodney_Lees> <http://dbpedia.org/property/awards> ?v0 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?awarder WHERE {
  ?award dbo:recipient dbr:Rodney_Lees .
  ?award dbo:awardee dbr:Rodney_Lees .
  ?award dbo:awarder ?awarder .
}
```",2,2,3,2,1,3,3,71,0,0,14,0,0.0,0
557,6,train,"Give me the claim to fame, that is a work, of Cora Sue Collins.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Cora_Sue_Collins> <http://dbpedia.org/ontology/knownFor> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?person a dbo:Person ;
          foaf:name ""Cora Sue Collins""@en .
  OPTIONAL { ?person dbo:work ?work . }
}
```",1,2,2,1,1,3,3,71,0,0,2,0,0.0,0
353,0,train,Give me the child of Roger II of Sicily.,SELECT ?result WHERE { <http://dbpedia.org/resource/Roger_II_of_Sicily> <http://dbpedia.org/ontology/child> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?childLabel WHERE {
  VALUES ?rogerII { dbr:Roger_II_of_Sicily }
  ?rogerII dbo:child ?child .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```",1,1,2,1,1,3,3,71,0,0,6,0,0.0,0
468,12,train,"Give me the child of the father, that is a royalty, of Peter IV of Aragon and reference to Peter IV.","SELECT ?result WHERE { <http://dbpedia.org/resource/Peter_IV_of_Aragon> <http://dbpedia.org/property/father> ?v0 . ?result <http://xmlns.com/foaf/0.1/name> ""Peter IV""@en . ?result <http://dbpedia.org/ontology/parent> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?childName ?title WHERE {
  # Resource for Peter IV of Aragon
  VALUES ?peterIV { dbr:Peter_IV_of_Aragon }

  # Find children who are royalty
  ?peterIV dbo:child ?child .
  ?child rdfs:label ?childName .
  OPTIONAL { ?child dbo:title ?title . FILTER (CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"")) }
  
  # Filter out non-English labels
  FILTER (LANG(?childName) = 'en')
}
ORDER BY ?childName
```",3,4,4,2,2,3,2,20,0,6,1,0.0,0.0,0
58,6,train,Give me the spouse of Linda Bruckheimer and producer of 12 Strong.,SELECT ?result WHERE { <http://dbpedia.org/resource/12_Strong> <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Linda_Bruckheimer> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?spouse ?producer WHERE {
  # Find spouse of Linda Bruckheimer
  OPTIONAL { 
    dbr:Linda_Bruckheimer dbo:spouse ?spouse .
  }
  
  # Find producer of the movie ""12 Strong""
  OPTIONAL {
    dbr:12_Strong dbo:producer ?producer .
  }

  FILTER(?spouse = ?producer)
}
```",2,2,3,1,2,3,2,20,1,0,0,1.0,1.0,1.0
905,8,train,"Give me the child, that is a royalty, of Béla IV of Hungary.",SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Béla_IV_of_Hungary> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?child ?title WHERE {
  ?belav4 a dbo:Monarch ;
          foaf:name ""Béla IV of Hungary""@en .
  
  ?belav4 dbo:child ?child .

  OPTIONAL { 
    ?child dbo:title ?title .
  }

  FILTER (CONTAINS(LCASE(?title), ""king"") || CONTAINS(LCASE(?title), ""queen"") || CONTAINS(LCASE(?title), ""prince"") || CONTAINS(LCASE(?title), ""princess""))
}
```",1,2,2,1,1,3,3,71,0,0,3,0,0.0,0
609,30,train,Give me the birth place of Vince Gilligan and birth place of the author of El Deafo and birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/El_Deafo> <http://dbpedia.org/property/author> ?v1 . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query for Vince Gilligan's birth place
SELECT ?birthPlace WHERE {
  wd:Q123456 wdt:P19 ?birthPlace .
}

UNION

# Query for Cece Bell's birth place
SELECT ?birthPlace WHERE {
  wd:Q654321 wdt:P19 ?birthPlace .
}

UNION

# Query for Glenn Youngkin's birth place
SELECT ?birthPlace WHERE {
  wd:Q789012 wdt:P19 ?birthPlace .
}
```

Note: The `wd:Q123456`, `wd:Q654321`, and `wd:Q789012` are placeholders for the actual DBpedia resource identifiers (QIDs) of Vince Gilligan, Cece Bell, and Glenn Youngkin, respectively. You would need to replace these with their correct QIDs from DBpedia.",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
80,56,train,Give me the professional in the alter ego of the series of The Golden Master and actor of ATL (film) and actor of the movie with .,"SELECT ?result WHERE { <http://dbpedia.org/resource/The_Golden_Master> <http://dbpedia.org/ontology/series> ?v0 . <http://dbpedia.org/resource/ATL_(film)> <http://dbpedia.org/ontology/starring> ?result . ?v0 <http://dbpedia.org/property/alterEgo> ?v1 . ?result <http://dbpedia.org/property/occupation> ?v1 . ?v2 <http://dbpedia.org/ontology/starring> ?result . ?v2 <http://dbpedia.org/property/starring> """"@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?actor dbo:film dbr:ATL_(2006) .
  ?actor dbo:birthName ""Clifford Joseph Harris Jr.""@en . # T.I.'s birth name
  OPTIONAL { 
    ?actor dbo:film ?otherFilm .
    FILTER(?otherFilm != dbr:ATL_(2006))
  }
}
```",6,6,7,3,3,3,3,71,0,0,4,0,0.0,0
288,4,train,Give me the theme of Dikhawa and native of Lahore.,SELECT ?result WHERE { <http://dbpedia.org/resource/Dikhawa> <http://dbpedia.org/ontology/openingTheme> ?result . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Lahore> . },"```sparql
# Query to get the theme/genre of the movie ""Dikhawa""
SELECT ?theme WHERE {
  ?movie dcterms:title ""Dikhawa""@en .
  OPTIONAL { ?movie dbo:genre ?theme . }
}

# Query to find a notable native of Lahore
SELECT DISTINCT ?person ?name WHERE {
  ?person dbo:nationality dbc:Lahore .
  ?person foaf:name ?name .
}
```",2,2,3,1,2,2,2,9,0,0,1,0,0.0,0
225,15,train,Give me the entity in the region of the time zone in Kiyosu and birthplace of Chieko Asakawa.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/timeZone> ?v0 . ?result <http://dbpedia.org/ontology/country> ?v1 . <http://dbpedia.org/resource/Chieko_Asakawa> <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Kiyosu> <http://dbpedia.org/ontology/timeZone> ?v0 . },"```sparql
# Query for the region in the Japan Standard Time zone (Kiyosu)
SELECT ?region WHERE {
  ?timeZone dcterms:isPartOf ?country .
  ?country dbp:officialName ""Japan"" .
  ?timeZone rdfs:label ""Japan Standard Time""@en .
  ?region dbp:country ?country .
  FILTER EXISTS { ?region dbp:timezone ?timeZone }
}

UNION

# Query for the region associated with Tokyo (Chieko Asakawa's birthplace)
SELECT ?region WHERE {
  ?person dbo:birthPlace ?location .
  ?location rdfs:label ""Tokyo""@en .
  ?person foaf:name ""Chieko Asakawa"" .
  ?region dbp:capital ?location
}
```",4,4,5,3,2,3,2,20,0,0,1,0,0.0,0
203,22,train,"Give me the military force of the force, that is an event and a societal event, of Robert Calder and commander in French campaign in Egypt and Syria.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?result <http://dbpedia.org/ontology/battle> ?v1 . <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?militaryForce WHERE {
  ?calder dbo:nationality dbr:United_Kingdom ;
          dbo:militaryService ?service .
  ?service dbo:branch dbr:Royal_Navy .
  OPTIONAL { ?event dbo:participant ?calder . }
  FILTER EXISTS { 
    ?campaign dbo:opposingForce dbr:French_Imperial_Army ;
              dbo:participatingMilitaryUnit ?militaryForce .
    ?militaryForce dbo:branch dbr:Royal_Navy .
  }
}
```",3,5,4,2,2,3,3,71,0,0,1,0,0.0,0
412,15,train,Give me the war of Konstantinos Ventiris and war of the leader of National Party of Greece.,SELECT ?result WHERE { <http://dbpedia.org/resource/Konstantinos_Ventiris> <http://dbpedia.org/ontology/battle> ?result . ?v1 <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/National_Party_of_Greece> <http://dbpedia.org/property/leader> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?description WHERE {
  # Query for wars involving Ioannis Rallis (leader of the National Party of Greece)
  OPTIONAL {
    ?person dbo:spouse|dbo:child|dbo:parent|dbo:memberOf dbr:Ioannis_Rallis .
    ?person dbo:participatedIn ?war .
    ?war rdfs:label ?description .
    FILTER(LANG(?description) = 'en')
  }
  
  # Query for wars involving Konstantinos Ventiris
  OPTIONAL {
    ?person rdfs:label ""Konstantinos Ventiris""@en .
    ?person dbo:participatedIn ?war .
    ?war rdfs:label ?description .
    FILTER(LANG(?description) = 'en')
  }
}
```",3,3,4,2,2,2,3,28,0,0,9,0,0.0,0
78,7,train,Give me the band member of The Alan Parsons Project and associated musical artist of Stuart Tosh.,SELECT ?result WHERE { <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Alan_Parsons_Project> . },"```sparql
# Query to get a band member of The Alan Parsons Project
SELECT ?member WHERE {
  ?band dbr:Alan_Parsons_Project ;
        dbo:bandMember ?member .
}

# Query to get an associated musical artist of Stuart Tosh
SELECT DISTINCT ?associatedArtist WHERE {
  ?tosh foaf:name ""Stuart Tosh""@en ;
        dbo:associatedMusicalArtist ?associatedArtist .
}
```",2,2,3,1,2,2,3,28,0,0,1,0,0.0,0
347,18,train,"Give me the commander in Thirty Years' War and child of Ferdinand II, Holy Roman Emperor and father of Eleonore of Austria, Queen of Poland.","SELECT ?result WHERE { <http://dbpedia.org/resource/Eleonore_of_Austria,_Queen_of_Poland> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . }","```sparql
SELECT ?person WHERE {
  ?person dbo:spouse ?parent1 .
  ?parent1 foaf:name ""Ferdinand II""@en .
  ?person dbo:child ?child .
  ?child foaf:name ""Eleonore of Austria, Queen of Poland""@en .
  OPTIONAL { 
    ?person dbo:occupation ""Commander""@en .
    FILTER(CONTAINS(LCASE(?personLabel), ""thirty years' war""))
  }
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
23,19,train,"Give me the party of the person born, that is a politician, as Roy Leonardo Barreras Montealegre and party of Gustavo Petro and entity in Colombia.","SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/party> ?result . ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Colombia> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Gustavo_Petro> <http://dbpedia.org/ontology/party> ?result . ?v3 <http://dbpedia.org/property/birthName> ""Roy Leonardo Barreras Montealegre""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?partyName ?colombianPartyName WHERE {
  VALUES (?person ?label) { 
    (dbr:Roy_Leonardo_Barreras_Montealegre ""Roy Leonardo Barreras Montealegre"")
    (dbr:Gustavo_Petro ""Gustavo Petro"")
  }
  
  ?person dbo:politicalParty ?party .
  ?party rdfs:label ?partyName .

  OPTIONAL {
    ?colombianParty a dbo:PoliticalParty ;
                   dbo:country dbr:Colombia ;
                   rdfs:label ?colombianPartyName .
  }

  FILTER (lang(?partyName) = ""en"" && lang(?colombianPartyName) = ""en"")
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
203,30,train,"Give me the military force of Battle of Fort Royal and commander in French campaign in Egypt and Syria and military force of the force, that is an event and a societal event, of Robert Calder.",SELECT ?result WHERE { <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . },"```sparql
# Query for Battle of Fort Royal participants and commanders
SELECT ?force ?commander WHERE {
  ?battle dcterms:isPartOf <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> .
  ?battle dbo:wikiPageRedirects ?redirect .
  FILTER(CONTAINS(LCASE(str(?redirect)), ""battle of fort royal"")) .
  
  ?battle dbo:militaryCommander ?commander .
  OPTIONAL { ?battle dbo:participatingMilitaryUnit ?force . }
}

# Query for French campaign in Egypt and Syria commanders
SELECT DISTINCT ?commander WHERE {
  <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> dbo:militaryCommander ?commander .
}

# Query for Robert Calder's event that is both military and societal, and his force
SELECT ?event ?force WHERE {
  ?calder foaf:name ""Robert Calder""@en .
  ?calder dbo:wikiPageDisambiguates ?disambiguation .
  
  ?disambiguation dbo:event ?event .
  ?event rdf:type ?eventType .
  FILTER(CONTAINS(LCASE(str(?eventType)), ""battle"") && CONTAINS(LCASE(str(?eventType)), ""societal event"")) .

  OPTIONAL { ?calder dbo:militaryCommanderOf ?commander . }
  OPTIONAL { ?commander dbo:participatingMilitaryUnit ?force . }
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
905,27,train,"Give me the child of the child, that is a royalty, of the predecessor of Stephen V of Hungary.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Stephen_V_of_Hungary> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://dbpedia.org/property/father> ?v1 . ?result <http://dbpedia.org/property/father> ?v0 . },"```sparql
SELECT ?grandchild WHERE {
  # Find Stephen V of Hungary's predecessor
  ?predecessor dbo:successor dbr:Stephen_V_of_Hungary .
  
  # Find a child of the predecessor who is royalty
  ?predecessorChild dbo:child ?predecessor ;
                    rdf:type dbo:Monarch .

  # Find a grandchild (child of the predecessor's child) who is royalty
  ?grandchild dbo:parent ?predecessorChild ;
              rdf:type dbo:Monarch .
}
```",3,4,4,3,1,3,3,71,0,0,5,0,0.0,0
311,14,train,"Give me the band member of the writer of the album, that is a musical work and a work and an album, of Sappy.",SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/writer> ?v0 . <http://dbpedia.org/resource/Sappy> <http://dbpedia.org/ontology/album> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v0 . },"```sparql
SELECT ?bandMember WHERE {
  # Step 1: Find the album ""Sappy"" and its associated artist/composer
  ?album dcterms:title ""Sappy""@en .
  ?album dbo:artist ?artist .

  # Step 2: Identify if this artist is part of a band
  OPTIONAL { 
    ?band dbo:member ?artist .
    ?bandMember dbo:member ?artist .
    
    # Ensure the band member is not the same as the artist
    FILTER(?bandMember != ?artist)
  }
  
  # Return one band member if available
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
LIMIT 1
```",3,6,4,3,1,3,2,20,0,0,123,0,0.0,0
37,7,train,"Give me the birthplace of Scott LaFaro and birthplace of the writer, that is an artist, of The Miseducation of Lauryn Hill.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Miseducation_of_Lauryn_Hill> <http://dbpedia.org/property/writer> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Scott_LaFaro> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
# Query to find the birthplace of Scott LaFaro
SELECT ?birthPlace WHERE {
  wd:Q1234568 dbo:birthPlace ?birthPlace .
}

UNION

# Query to find the birthplace of Lauryn Hill
SELECT ?birthPlace WHERE {
  wd:Q7890123 dbo:birthPlace ?birthPlace .
}
```

Note: `wd:Q1234568` and `wd:Q7890123` are placeholders for the actual DBpedia resource identifiers for Scott LaFaro and Lauryn Hill, respectively. You would need to replace these with the correct QIDs from DBpedia.",3,4,4,2,2,2,2,9,0,0,1,0,0.0,0
731,17,train,"Give me the force of William Tennant (Royal Navy officer) and war of the commander in the reference, that is a societal event and a military conflict, to Sinking of Prince of Wales and Repulse.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v0 <http://xmlns.com/foaf/0.1/name> ""Sinking of Prince of Wales and Repulse""@en . ?result <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/William_Tennant_(Royal_Navy_officer)> . ?v3 <http://dbpedia.org/ontology/battle> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?force ?war WHERE {
  # Find William Tennant's naval force
  ?tennant a dbo:NavyOfficer ;
           foaf:name ""William Tennant"" ;
           dbo:commandedForce ?force .

  # Identify the war he was involved in as a commander
  ?tennant dbo:participatedInWar ?war .

  # Filter for World War II, which includes the sinking of Prince of Wales and Repulse
  FILTER(?war = dbr:World_War_II)
}
```",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
609,2,train,Give me the birth place of Cece Bell.,SELECT ?result WHERE { <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?birthPlace WHERE {
  ?person a dbo:Writer ;
          foaf:name ""Cece Bell""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
595,48,train,"Give me the spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton and commander in the war, that is a disease and a societal event, of United States Navy.",SELECT ?result WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/ontology/battle> ?v1 . ?v3 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v3 <http://dbpedia.org/property/author> ?v2 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>. ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v1 <http://dbpedia.org/ontology/commander> ?result . },"```sparql
SELECT ?spouse WHERE {
  wd:Q42 wdt:P31 wd:Q5;       # Hillary Rodham Clinton is a human
  wdt:P50 ?spouse.           # Spouse of Hillary Rodham Clinton
  FILTER EXISTS { ?spouse wdt:P39 wd:Q11696 } .  # Filter for office holders (politicians)
}
```",5,11,6,3,2,3,3,71,0,0,1,0,0.0,0
361,6,train,Give me the professional in Actor and professional in .,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Actor""@en . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
SELECT ?person ?name WHERE {
  ?person dbo:occupation dbr:Actor .
  ?person foaf:name ?name .
  FILTER (LANG(?name) = 'en')
}
LIMIT 10
```",2,2,3,1,2,2,3,28,0,20,4210,0.0,0.0,0
628,58,train,"Give me the band member of Uncle Murda and person born as the birth name of Bobby Shmurda and native of the award, that is a region and American and a state and a settlement, of the awardee, that is a band, of New York (state).",SELECT ?result WHERE { ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://dbpedia.org/property/birthName> ?v5 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v5 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Uncle_Murda> . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/New_York_(state)> . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
# Step 1: Find Uncle Murda's band members
SELECT ?bandMember WHERE {
  ?uncleMurda dbo:member ?bandMember .
  ?uncleMurda rdfs:label ""Uncle Murda""@en .
}

UNION

# Step 2: Check if any member has the birth name Joaquin Andre Quiles-Neblett
SELECT ?person WHERE {
  ?person foaf:name ""Joaquin Andre Quiles-Neblett"" .
  ?person dbo:birthName ""Joaquin Andre Quiles-Neblett"" .
}

UNION

# Step 3: Identify awards named after regions/states/settlements and find bands from New York that won them
SELECT ?award ?band WHERE {
  ?award rdfs:label ?awardLabel .
  FILTER regex(?awardLabel, ""region|state|settlement"", ""i"") .
  ?award dbo:recipient ?band .
  ?band dbo:originLocation ?location .
  ?location rdfs:label ?locationLabel .
  FILTER regex(?locationLabel, ""New York"", ""i"") .
}

# Step 4: Combine information to find the person fitting all criteria
SELECT DISTINCT ?person WHERE {
  VALUES ?bandMember { ?bandMember1 ?bandMember2 } # Replace with actual results from step 1
  VALUES ?personName { ""Joaquin Andre Quiles-Neblett"" }
  ?person foaf:name ?personName .
  ?person dbo:birthName ?personName .
  ?award rdfs:label ?awardLabel .
  FILTER regex(?awardLabel, ""region|state|settlement"", ""i"") .
  ?award dbo:recipient ?band .
  ?band dbo:originLocation ?location .
  ?location rdfs:label ?locationLabel .
  FILTER regex(?locationLabel, ""New York"", ""i"") .
  ?person ?p ?o .
  VALUES ?p { dbo:member } # Assuming the person is a member of the band
  ?o ?bandMember .
}
```",6,11,7,3,3,3,3,71,0,0,1,0,0.0,0
198,23,train,"Give me the war of the awardee of the show, that is an award, of United States Congress.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/battle> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>. ?v0 <http://dbpedia.org/property/awards> ?v2 . ?v2 <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/United_States_Congress> . },"```sparql
SELECT ?war WHERE {
  ?award dcterms:isPartOf <http://dbpedia.org/resource/United_States_Congress> .
  ?award dbo:awardedFor ?achievement .
  ?achievement dbo:relatedEvent ?event .
  ?event rdf:type dbo:MilitaryConflict .
  ?recipient dbo:receivedAward ?award .
  ?recipient rdfs:label ""Navajo Code Talkers""@en .
  ?war dbo:name ?eventName .
  FILTER(CONTAINS(LCASE(?eventName), ""world war ii""))
}
```",3,4,4,3,1,3,3,71,0,0,611,0,0.0,0
203,42,train,"Give me the commander in the war, that is a military conflict and an event, of 30th (Cambridgeshire) Regiment of Foot and military force of Battle of Fort Royal and military force of the force, that is an event and a societal event, of Robert Calder.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v1 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Robert_Calder> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. <http://dbpedia.org/resource/30th_(Cambridgeshire)_Regiment_of_Foot> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://dbpedia.org/ontology/commander> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?commander WHERE {
  # Find the war involving the 30th (Cambridgeshire) Regiment of Foot
  ?regiment a dbo:MilitaryUnit ;
            dbo:participatedIn ?war .

  FILTER(?regiment = dbr:30th_(Cambridgeshire)_Regiment_of_Foot)

  # Find the military force involved in the Battle of Fort Royal
  ?battle a dbo:Battle ;
          dbo:commander ?forceCommander ;
          rdfs:label ""Battle of Fort Royal""@en .

  # Find the event involving Robert Calder and its commander
  ?event a dbo:Event ;
         dbo:agent ?calder ;
         dbo:commander ?eventCommander .

  FILTER(?calder = dbr:Robert_Calder)

  # Ensure all commanders are the same
  ?war dbo:commander ?commander .
  ?forceCommander = ?commander .
  ?eventCommander = ?commander .
}
```",5,9,6,2,3,3,3,71,0,0,1,0,0.0,0
19,3,train,Give me the person born as Caroline Louise Bevan Symonds.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/birthName> ""Caroline Louise Bevan Symonds""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Caroline Louise Bevan Symonds"" .
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
595,52,train,"Give me the commander in Third Taiwan Strait Crisis and author of the work, that is a written work and a book and a work, of Bill Clinton and spouse of the author, that is a politician and an office holder, of the work, that is a book and a written work, of Hillary Clinton.",SELECT ?result WHERE { <http://dbpedia.org/resource/Third_Taiwan_Strait_Crisis> <http://dbpedia.org/ontology/commander> ?result . ?v5 <http://dbpedia.org/property/author> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. ?v3 <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Hillary_Clinton> . ?v3 <http://dbpedia.org/property/author> ?v2 . ?v5 <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Bill_Clinton> . ?v2 <http://dbpedia.org/ontology/spouse> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>. ?v5 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?work ?author ?spouse WHERE {
  # Bill Clinton as commander during the Third Taiwan Strait Crisis
  dbr:Bill_Clinton dbo:positionHeld dbr:President_of_the_United_States ;
                   dbo:officeHolderOf dbr:Third_Taiwan_Strait_Crisis .

  # Work authored by Bill Clinton and co-authored by Hillary Clinton
  ?work dbo:author dbr:Bill_Clinton ;
        dbo:author dbr:Hillary_Clinton ;
        a dbo:Book .

  # Hillary Clinton as spouse of Bill Clinton, who is a politician and office holder
  dbr:Hillary_Clinton dbo:spouse dbr:Bill_Clinton ;
                     dbo:positionHeld ?office .
}
```",6,13,7,3,3,3,3,71,0,0,1,0,0.0,0
737,7,train,Give me the parent of Archduchess Margarete Sophie of Austria.,SELECT ?result WHERE { <http://dbpedia.org/resource/Archduchess_Margarete_Sophie_of_Austria> <http://dbpedia.org/ontology/parent> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?parent WHERE {
  ?person a dbo:Person ;
          foaf:name ""Margarete Sophie of Austria""@en .
  ?person dbo:parent ?parent .
}
```",1,1,2,1,1,3,3,71,0,0,2,0,0.0,0
293,8,train,Give me the birth name of Ann Sothern.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?result . },"```sparql
SELECT ?birthName WHERE {
  ?person foaf:name ""Ann Sothern""@en .
  ?person dbo:birthName ?birthName .
}
```",1,1,2,1,1,3,3,71,1,0,0,1.0,1.0,1.0
557,43,train,"Give me the professional in  and producer of the claim to fame, that is a work, of the actor of Johnny Doughboy and producer of A Star Is Born (1937 film).","SELECT ?result WHERE { <http://dbpedia.org/resource/Johnny_Doughboy> <http://dbpedia.org/property/starring> ?v0 . ?v4 <http://dbpedia.org/ontology/producer> ?result . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/ontology/knownFor> ?v4 . <http://dbpedia.org/resource/A_Star_Is_Born_(1937_film)> <http://dbpedia.org/ontology/producer> ?result . ?result <http://dbpedia.org/property/occupation> """"@en . }","```sparql
# Step 1: Find the actor for Johnny Doughboy
SELECT ?actor WHERE {
  ?film dcterms:title ""A Star Is Born""@en .
  ?film dbo:starring ?role .
  ?role rdfs:label ""Johnny Doughboy""@en .
  ?role dbo:agent ?actor .
}

# Step 2: Find the producer of A Star Is Born (1937)
SELECT ?producer WHERE {
  ?film dcterms:title ""A Star Is Born""@en ;
        dbo:productionYear ""1937""^^xsd:gYear ;
        dbo:producer ?producer .
}

# Step 3: Check for overlap between actor and producer
SELECT DISTINCT ?person WHERE {
  { 
    # Actor of Johnny Doughboy
    ?film1 dcterms:title ""A Star Is Born""@en .
    ?film1 dbo:starring ?role .
    ?role rdfs:label ""Johnny Doughboy""@en .
    ?role dbo:agent ?actor .
    
    # Producer of A Star Is Born (1937)
    ?film2 dcterms:title ""A Star Is Born""@en ;
           dbo:productionYear ""1937""^^xsd:gYear ;
           dbo:producer ?producer .

    FILTER (?actor = ?producer)
  }
  
  BIND(?actor AS ?person)
}

# Step 4: Find a notable work of this person
SELECT DISTINCT ?work WHERE {
  ?person dbo:notableWork ?work .
}
```",5,6,6,3,3,3,3,71,0,0,1,0,0.0,0
39,26,train,"Give me the professional in the alter ego of the creation, that is a fictional character and a comics character, of Walter B. Gibson.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>. ?v1 <http://dbpedia.org/property/alterEgo> ?v2 . ?v1 <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Walter_B._Gibson> . ?result <http://dbpedia.org/property/occupation> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?alterEgoName ?profession WHERE {
  # Find Walter B. Gibson's notable creations
  ?creation dbo:creator dbr:Walter_B._Gibson .
  
  # Identify The Shadow among those creations
  ?creation rdfs:label ""The Shadow""@en .

  # Get the alter ego of The Shadow
  ?shadow dbo:alterEgo ?alterEgo .
  
  # Extract the name and profession of the alter ego
  ?alterEgo rdfs:label ?alterEgoName ;
            dbo:profession ?profession .
}
```",3,5,4,3,1,3,3,71,0,0,39640,0,0.0,0
609,31,train,Give me the birth place of the awardee of the award of Vince Gilligan and birth place of Glenn Youngkin.,SELECT ?result WHERE { <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v1 . ?v0 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Glenn_Youngkin> <http://dbpedia.org/ontology/birthPlace> ?result . ?v0 <http://dbpedia.org/property/awards> ?v1 . },"```sparql
# Query to get the birth place of Bryan Cranston (awardee associated with Vince Gilligan)
SELECT ?birthPlace WHERE {
  wd:Q12345 dbo:birthPlace ?birthPlace .
}

UNION

# Query to get the birth place of Glenn Youngkin
SELECT ?birthPlace WHERE {
  wd:Q67890 dbo:birthPlace ?birthPlace .
}
```

Note: 
- `wd:Q12345` is a placeholder for Bryan Cranston's DBpedia entity ID.
- `wd:Q67890` is a placeholder for Glenn Youngkin's DBpedia entity ID.

You would need to replace these placeholders with the actual DBpedia IDs for Bryan Cranston and Glenn Youngkin, which can be found by searching their names on DBpedia or using a SPARQL endpoint to query their respective entities.",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
263,14,train,Give me the native of Middlesex and parent of the person born as Hon. Mary Frances Bowes-Lyon.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Middlesex> . ?result <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/property/birthName> ""Hon. Mary Frances Bowes-Lyon""@en . }","```sparql
SELECT ?parent ?nativePlace WHERE {
  ?person foaf:name ""Mary Frances Bowes-Lyon""@en .
  ?person dbo:birthName ""Hon. Mary Frances Bowes-Lyon""@en .
  ?person dbo:mother ?mother .
  ?mother dbo:spouse ?father .
  ?mother dbo:parent ?parentMother .
  ?father dbo:parent ?parentFather .
  
  OPTIONAL { ?parentMother dbo:nativePlace ?nativePlace . FILTER(CONTAINS(LCASE(?nativePlace), ""middlesex"")) }
  OPTIONAL { ?parentFather dbo:nativePlace ?nativePlace . FILTER(CONTAINS(LCASE(?nativePlace), ""middlesex"")) }

  FILTER(EXISTS{?nativePlace})
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
203,51,train,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer).",SELECT ?result WHERE { ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?result <http://dbpedia.org/ontology/battle> ?v4 . <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v4 . ?v1 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://dbpedia.org/ontology/battle> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?militaryForce WHERE {
  # Step 1: Identify William Bayne
  ?bayne a dbo:Person ;
         foaf:name ""William Bayne (Royal Navy officer)"" .

  # Step 2: Find the military conflict and its force
  ?bayne dbp:participatedIn ?conflict .
  ?conflict dbo:militaryForce ?militaryConflictForce .

  # Step 3: Find the award event and its societal aspect
  ?bayne dbo:award ?awardEvent .
  ?awardEvent a dbo:Event ;
              dbo:relatedEvent ?societalEvent .
  
  # Step 4: Identify military force related to both events
  OPTIONAL { ?societalEvent dbp:militaryForce ?militarySocietalForce . }
  
  FILTER (?militaryConflictForce = ?militarySocietalForce)
}
```",5,9,6,3,2,3,3,71,0,0,24,0,0.0,0
270,4,train,Give me the person decedent at Melbourne and predecessor of Ada Watson.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Ada_Watson> . ?result <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Melbourne> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?predecessor WHERE {
  # Find Ada Watson in DBpedia
  VALUES ?adaWatson { dbr:Ada_Watson }

  # Find a predecessor of Ada Watson
  ?predecessor dbo:parent* ?adaWatson .

  # Check if the predecessor was buried in Melbourne Cemetery
  OPTIONAL { 
    ?predecessor dbo:deathPlace ?deathPlace .
    FILTER(CONTAINS(LCASE(str(?deathPlace)), ""melbourne cemetery""))
  }

  # Ensure that there is a death place associated with Melbourne Cemetery
  FILTER(EXISTS { ?predecessor dbo:deathPlace ?deathPlace })
}
```",2,2,3,1,2,2,2,9,0,0,1,0,0.0,0
633,10,train,"Give me the father of the child, that is a royalty, of Francis I, Duke of Lorraine.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Francis_I,_Duke_of_Lorraine> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?father WHERE {
  # Identify Francis I, Duke of Lorraine
  VALUES ?francisI { dbr:François_Ier,_Duke_of_Lorraine }
  
  # Find children of Francis I who are royalty
  ?child dbo:parent ?francisI .
  ?child a dbo:Monarch ;
         dbo:country ?country .

  # Retrieve the father of this child (should be Francis I)
  ?child dbo:father ?father .
}
```",2,3,3,2,1,3,2,20,0,0,1,0,0.0,0
687,49,train,"Give me the player in the person born, that is an athlete, on 1955-02-22 and team of the person born, that is a soccer player and a soccer manager, on the birthday of Marcelo Sarmiento.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/team> ?result . ?result <http://dbpedia.org/ontology/coach> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v2 <http://dbpedia.org/ontology/birthDate> ""1955-02-22""^^<http://www.w3.org/2001/XMLSchema#date> . ?v1 <http://dbpedia.org/ontology/birthDate> ?v0 . <http://dbpedia.org/resource/Marcelo_Sarmiento> <http://dbpedia.org/ontology/birthDate> ?v0 . }","```sparql
# Step 1: Find Marcelo Sarmiento's birthdate
SELECT ?marceloSarmientoBirthDate WHERE {
  wd:Q1234568 dbo:birthday ?marceloSarmientoBirthDate .
}

# Step 2: Find the person who is both a soccer player and manager, born on Marcelo Sarmiento's birthday
SELECT ?person WHERE {
  ?person dbo:birthday ?marceloSarmientoBirthDate .
  ?person dbo:sport ?soccer .
  ?person dbo:occupation ?manager .
  FILTER (STR(?soccer) = ""Soccer"" && STR(?manager) = ""Sports manager"")
}

# Step 3: Find the team associated with this person
SELECT ?team WHERE {
  ?person dbo:memberTeam ?team .
}

# Step 4: Find the athlete born on 1955-02-22
SELECT ?athlete WHERE {
  ?athlete dbo:birthday ""1955-02-22""^^xsd:date .
  ?athlete dbo:sport ?sport .
  FILTER (STR(?sport) = ""Athletics"")
}

# Step 5: Find the team associated with this athlete
SELECT ?team WHERE {
  ?athlete dbo:memberTeam ?team .
}
```

Note: Replace `wd:Q1234568` with the actual DBpedia identifier for Marcelo Sarmiento.",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
347,10,train,"Give me the child of Ferdinand II, Holy Roman Emperor and commander in Thirty Years' War.","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ferdinand_II,_Holy_Roman_Emperor> . <http://dbpedia.org/resource/Thirty_Years'_War> <http://dbpedia.org/ontology/commander> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child ?childName WHERE {
  # Identify Ferdinand II, Holy Roman Emperor
  dbr:Ferdinand_II,_Holy_Roman_Emperor dbo:spouse ?spouse .
  
  # Find his children
  ?spouse dbo:child ?child .

  # Filter for the child who was a commander in the Thirty Years' War
  ?child dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""commander"") || CONTAINS(LCASE(?occupation), ""emperor""))
  
  # Ensure the child is related to the Thirty Years' War
  OPTIONAL { 
    ?child dbo:wikiPageWikiLink dbr:Thirty_Years'_War .
  }
  
  # Get the name of the child
  ?child rdfs:label ?childName .
  FILTER(LANG(?childName) = ""en"")
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
68,20,train,"Give me the child of the commander, that is a royalty, in Siege of Padua and father of Catherine of Austria, Queen of Portugal and father of Isabella of Austria.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Isabella_of_Austria> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Catherine_of_Austria,_Queen_of_Portugal> <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Siege_of_Padua> <http://dbpedia.org/ontology/commander> ?v1 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:child dbr:Catherine_of_Austria_(1507-1578) .
  ?person dbo:child dbr:Isabella_of_Austria_(1501-1526) .
  ?person dbo:spouse ?parent .
  ?parent rdfs:label ""Charles V, Holy Roman Emperor""@en .
  FILTER(CONTAINS(LCASE(?person), ""philip i of castile""))
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
119,18,train,Give me the office of Alberto Núñez Feijóo and tenant of Santiago de Compostela and tenant of Spain.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Santiago_de_Compostela> . <http://dbpedia.org/resource/Alberto_Núñez_Feijóo> <http://dbpedia.org/property/office> ?result . ?result <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Spain> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?office WHERE {
  VALUES ?person { dbr:Alberto_Núñez_Feijóo }
  
  ?person dbo:office ?office .
  
  FILTER (
    EXISTS { ?office rdfs:label ?label1 . FILTER (CONTAINS(LCASE(?label1), ""santiago de compostela"")) } ||
    EXISTS { ?office rdfs:label ?label2 . FILTER (CONTAINS(LCASE(?label2), ""spain"")) }
  )
}
```",3,3,4,1,3,3,3,71,0,0,1,0,0.0,0
198,44,train,"Give me the entity in the birthplace, that is a settlement and American, of Henry Clay Lewis and force of the awardee of Gillmore Medal and war of Amasa Tracy.",SELECT ?result WHERE { <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Henry_Clay_Lewis> <http://dbpedia.org/ontology/birthPlace> ?v2 . ?result <http://dbpedia.org/ontology/place> ?v2 . ?v2 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/commander> ?v4 . ?v4 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Gillmore_Medal> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entity WHERE {
  # Henry Clay Lewis's birthplace
  dbr:Henry_Clay_Lewis dbo:birthPlace ?birthPlace .
  
  # Ensure the birthplace is a settlement and American
  ?birthPlace a dbo:Settlement ;
             dbo:country dbr:United_States .

  # Amasa Tracy's war involvement
  dbr:Amasa_Tracy dbo:militaryConflict ?war .

  # Gillmore Medal awardee from the same war
  ?awardee dbo:awardReceived dbr:Gillmore_Medal ;
          dbo:militaryConflict ?war .

  # Force of the awardee
  ?awardee dbo:memberOf ?force .
  
  # Return the force as the entity
  BIND(?force AS ?entity)
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
203,39,train,"Give me the military force of the force, that is an event and a societal event, of the awardee of Knight Commander of the Order of the Bath and military force of Battle of Fort Royal.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Fort_Royal> . ?v1 <http://dbpedia.org/ontology/commander> ?v0 . ?v0 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Knight_Commander_of_the_Order_of_the_Bath> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?result <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
SELECT ?militaryForce WHERE {
  # Find the awardee of Knight Commander of the Order of the Bath
  ?awardee dbo:award dbp:Knight_Commander_of_the_Order_of_the_Bath .
  
  # Determine the military force associated with this awardee
  ?awardee dbo:militaryService ?militaryForce1 .

  # Find the Battle of Fort Royal and its involved forces
  ?battle rdf:type dbo:Battle ;
          rdfs:label ""Battle of Fort Royal""@en .
  ?battle dbo:participatingMilitaryUnit ?forceInBattle .

  # Identify a significant event that is both an event and a societal event
  ?event rdf:type dbo:Event, dbo:SocietalEvent .

  # Determine the military force involved in this event
  ?event dbo:involvedMilitaryForce ?militaryForce2 .

  # Ensure consistency between forces
  FILTER(?militaryForce1 = ?forceInBattle && ?militaryForce1 = ?militaryForce2)
  
  # Return the consistent military force
  BIND(?militaryForce1 AS ?militaryForce)
}
```",4,6,5,3,2,3,3,71,0,0,2,0,0.0,0
628,52,train,"Give me the person born as the birth name of Bobby Shmurda and band member of the associated musical artist, that is a musical artist, of the member, that is an artist and a musical artist, of GS9 and native of Florida.",SELECT ?result WHERE { ?v3 <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/GS9> <http://dbpedia.org/ontology/bandMember> ?v3 . ?result <http://dbpedia.org/property/birthName> ?v5 . ?result <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Florida> . <http://dbpedia.org/resource/Bobby_Shmurda> <http://dbpedia.org/property/birthName> ?v5 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Ackquille Jean Pollard""@en .
  ?gs9Member dbo:member ?person .
  ?gs9Member rdfs:label ""GS9""@en .
  ?person dbo:nationality dbr:United_States .
  ?person dbo:stateOrProvinceOfBirth dbr:Florida .
  ?person a dbo:MusicalArtist .
}
```",6,9,7,3,3,3,3,71,0,0,1,0,0.0,0
80,29,train,Give me the actor of the album of What You Know (T.I. song) and professional in  and actor of Shelby Oaks.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> """"@en . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v3 . ?v3 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Step 1: Find the album of ""What You Know"" by T.I.
SELECT ?album WHERE {
    ?song dcterms:title ""What You Know""@en .
    ?song dbo:artist <http://dbpedia.org/resource/T.I._(rapper)> .
    ?song dbo:album ?album .
}

# Step 2: Find actors associated with the album (this step might not yield results directly in DBpedia)
SELECT DISTINCT ?actor WHERE {
    # Assuming we have an album URI from the previous query
    VALUES (?album) { <ALBUM_URI> } 
    ?album dbo:performer ?person .
    ?person rdf:type dbo:Actor .
}

# Step 3: Find which actor acted in ""Shelby Oaks""
SELECT DISTINCT ?actor WHERE {
    # Assuming we have a list of actors from the previous query
    VALUES (?actor) { <ACTOR_URI_1> <ACTOR_URI_2> ... }
    ?film dbo:title ""Shelby Oaks""@en .
    ?film dbo:starring ?actor .
}
```

Note: Replace `<ALBUM_URI>` and `<ACTOR_URI_1>, <ACTOR_URI_2>, ...` with actual URIs obtained from the results of previous queries.",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
531,28,train,Give me the office of Miguel Maura and office of Mariano Rajoy and tenant of the residence of Alberto Ruiz-Gallardón.,SELECT ?result WHERE { <http://dbpedia.org/resource/Miguel_Maura> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Mariano_Rajoy> <http://dbpedia.org/property/office> ?result . <http://dbpedia.org/resource/Alberto_Ruiz-Gallardón> <http://dbpedia.org/property/residence> ?v1 . ?result <http://dbpedia.org/ontology/headquarter> ?v1 . },"```sparql
# Query for the office of Miguel Maura
SELECT ?office WHERE {
  dbpedia:es:Miguel_Maura dbo:positionHeld ?office .
}

UNION

# Query for the office of Mariano Rajoy
SELECT ?office WHERE {
  dbpedia:es:Mariano_Rajoy dbo:positionHeld ?office .
}

UNION

# Query for the tenant of the residence of Alberto Ruiz-Gallardón
SELECT ?tenant WHERE {
  dbpedia:es:Alberto_Ruiz-Gallardón dbo:residence ?residence .
  ?residence dbo:resident ?tenant .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
687,46,train,"Give me the player in the person born, that is an athlete, on the birthday of Marty Pollio and player in the actor, that is a soccer player and an athlete, of All or Nothing: Manchester City.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. <http://dbpedia.org/resource/Marty_Pollio> <http://dbpedia.org/ontology/birthDate> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v4 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/team> ?result . ?v1 <http://dbpedia.org/ontology/birthDate> ?v2 . <http://dbpedia.org/resource/All_or_Nothing:_Manchester_City> <http://dbpedia.org/property/starring> ?v4 . },"```sparql
# Step 1: Get Marty Pollio's birthday
SELECT ?birthday WHERE {
    dbpedia:Marty_Polio dbo:birthday ?birthday .
}

# Step 2: Find athletes born on the same day as Marty Pollio
SELECT DISTINCT ?athlete WHERE {
    ?athlete a dbo:Athlete ;
             dbo:birthday ?bday .
    FILTER (?bday = <MARTY_POLLIO_BIRTHDAY>) # Replace with actual date from step 1
}

# Step 3: Find soccer players in ""All or Nothing: Manchester City""
SELECT DISTINCT ?soccerPlayer WHERE {
    ?soccerPlayer a dbo:SoccerPlayer ;
                  dbo:featuredIn ""<http://dbpedia.org/resource/All_or_Nothing:_Manchester_City>"" .
}

# Step 4: Combine results to find the player who matches both criteria
SELECT DISTINCT ?player WHERE {
    ?player a dbo:Athlete ;
            dbo:birthday ?bday .
    FILTER (?bday = <MARTY_POLLIO_BIRTHDAY>) # Replace with actual date from step 1

    ?player a dbo:SoccerPlayer ;
            dbo:featuredIn ""<http://dbpedia.org/resource/All_or_Nothing:_Manchester_City>"" .
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
531,6,train,"Give me the commander, that is an office holder and a politician, in Central African Republic Civil War.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. <http://dbpedia.org/resource/Central_African_Republic_Civil_War> <http://dbpedia.org/ontology/commander> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person ?name WHERE {
  ?person a dbo:Person .
  ?person dbo:officeHolderOf dbr:Central_African_Republic_Civil_War .
  ?person dbo:politicalPartyMemberOf ?party .
  ?person rdfs:label ?name .
  FILTER (LANG(?name) = 'en')
}
```",1,3,2,1,1,3,3,71,0,0,179,0,0.0,0
706,10,train,"Who is the actor of the movie, that is a movie and Indian, with Dipankar De?",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v0 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Dipankar_De> . ?v0 <http://dbpedia.org/property/starring> ?result . ?v0 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/India>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor WHERE {
  # Find movies featuring Dipankar De
  ?movie dbo:starring dbr:Dipankar_De .
  
  # Filter for Indian films
  ?movie dbo:genre dbr:Indian_film .

  # Retrieve other actors in these movies
  ?movie dbo:starring ?actor .
  
  FILTER(?actor != dbr:Dipankar_De) # Exclude Dipankar De from the results
}
```",2,4,3,2,1,3,2,20,0,0,17,0,0.0,0
87,21,train,"Give me the actor of Paradise (2013 film) and spouse of Janusz Kamiński and actor of the movie, that is a work and a film, with Audrey Hepburn.","SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Janusz_Kamiński> . ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/property/starring> ""Audrey Hepburn""@en . <http://dbpedia.org/resource/Paradise_(2013_film)> <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Query to get the main actor of ""Paradise"" (2013 film)
SELECT ?actor WHERE {
  ?film dcterms:title ""Paradise""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 2013) .
  ?film dbo:starring ?actor .
}

# Query to get the spouse of Janusz Kamiński
SELECT ?spouse WHERE {
  dbpedia:Janusz_Kamiński dbo:spouse ?spouse .
}

# Query to check if this person acted in a film with Audrey Hepburn
SELECT DISTINCT ?film WHERE {
  ?person dbo:spouse dbpedia:Janusz_Kamiński .
  ?film dbo:starring ?person ;
        dbo:starring dbpedia:Audrey_Hepburn .
}
```",4,6,5,2,3,2,3,28,0,0,1,0,0.0,0
87,15,train,"Give me the actor of Always (1989 film) and actor of the movie, that is a work and a film, with Iliza Shlesinger.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/starring> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v1 <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Iliza_Shlesinger> . <http://dbpedia.org/resource/Always_(1989_film)> <http://dbpedia.org/ontology/starring> ?result . },"```sparql
# Query 1: Find the actor(s) of ""Always"" (1989 film)
SELECT ?actor WHERE {
    ?film dbp:title ""Always""@en .
    ?film dbo:releaseDate ?date .
    FILTER(YEAR(?date) = 1989) .
    ?film dbo:starring ?actor .
}

# Query 2: Find the actor(s) of a work and film with Iliza Shlesinger
SELECT DISTINCT ?actor WHERE {
    ?work dbp:title ?title ;
          rdf:type dbo:Film ;
          dbo:starring ?actor .
    OPTIONAL { ?work dbo:director ?iliza . }
    FILTER(CONTAINS(LCASE(?title), ""iliza shlesinger"") || CONTAINS(LCASE(STR(?iliza)), ""iliza shlesinger"")) .
}
```",3,5,4,2,2,2,3,28,0,0,1,0,0.0,0
353,41,train,"Give me the child of Elvira of Castile, Queen of Sicily and father of the child, that is a royalty, of William I of Sicily and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v2 <http://dbpedia.org/ontology/child> ?result . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?child WHERE {
  # Elvira of Castile's child who is a royalty and father of William I of Sicily
  dbr:Elvira_of_Castile_queen_of_Sicily dbo:spouse ?parent1 .
  
  ?parent1 dbo:child ?child .
  ?child rdf:type dbo:Monarch .

  # Check if this child is the father of William I of Sicily
  ?child dbo:child dbr:William_I_of_Sicily .

  # Check if this child is also the parent of Roger III, Duke of Apulia
  ?child dbo:child dbr:Roger_III,_Duke_of_Apulia .
}
```",5,6,6,2,3,3,3,71,0,0,1,0,0.0,0
293,23,train,Give me the party member of the ruling party in the landmark at elevation of 20.116800000000001347.,"SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/leaderParty> ?v0 . ?v2 <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . ?result <http://dbpedia.org/ontology/party> ?v0 . }","```sparql
SELECT ?landmark ?countryLabel ?partyMemberLabel WHERE {
  # Find landmark at specific elevation
  ?landmark dbo:elevationMeasurement ?elevation .
  FILTER(?elevation = ""20.1168""^^xsd:float) .

  # Get the country of the landmark
  ?landmark dbo:locationCountry ?country .
  
  # Get label for the country
  ?country rdfs:label ?countryLabel .
  FILTER(LANG(?countryLabel) = 'en') .

  # Find ruling party in that country
  ?party dbo:country ?country ;
         dbo:member ?partyMember .

  # Get label for the party member
  ?partyMember rdfs:label ?partyMemberLabel .
  FILTER(LANG(?partyMemberLabel) = 'en') .

  # Ensure we are getting current ruling parties
  OPTIONAL { 
    ?party dbo:isCurrentRulingParty ""true""^^xsd:boolean .
  }
}
ORDER BY ?countryLabel
LIMIT 1
```",3,3,4,3,1,3,3,71,0,0,21514,0,0.0,0
668,16,train,"Give me the profession of the writer, that is a musical artist, of The Live Anthology.",SELECT ?result WHERE { <http://dbpedia.org/resource/The_Live_Anthology> <http://dbpedia.org/property/writer> ?v1 . ?v1 <http://dbpedia.org/property/occupation> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?author ?profession WHERE {
  ?work dbo:title ""The Live Anthology""@en .
  ?work dbo:author ?author .

  OPTIONAL { ?author dbo:occupation ?profession . FILTER(CONTAINS(LCASE(?profession), ""writer"") || CONTAINS(LCASE(?profession), ""musical artist"")) }
}
```",2,3,3,2,1,3,3,71,0,0,23,0,0.0,0
782,7,train,Give me the persona of Nick Curran.,SELECT ?result WHERE { <http://dbpedia.org/resource/Nick_Curran> <http://xmlns.com/foaf/0.1/givenName> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?property ?value WHERE {
  VALUES ?subject { dbr:Nick_Curran }
  
  ?subject ?property ?value .
  
  FILTER (
    ?property IN (dbo:birthDate, dbo:birthPlace, dbo:genre, dbo:notableWorks, dbo:associatedBand, dbo:award, rdfs:comment)
  )
}
```",1,1,2,1,1,3,3,71,0,18,1,0.0,0.0,0
293,3,train,Give me the landmark at elevation of 20.116800000000001347.,"SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/elevation> ""20.116800000000001347""^^<http://www.w3.org/2001/XMLSchema#double> . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?landmark WHERE {
  ?landmark a dbo:Mountain .
  ?landmark dbo:elevation ""20.116800000000001347""^^xsd:decimal .
}
```",1,1,2,1,1,3,3,71,0,0,192,0,0.0,0
557,1,train,Give me the producer of The Adventures of Tom Sawyer (1938 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer_(1938_film)> <http://dbpedia.org/ontology/producer> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?producer WHERE {
  ?movie dbo:title ""The Adventures of Tom Sawyer"" ;
         dbo:released ""1938-01-01""^^xsd:date .
  ?movie dbo:producer ?producer .
}
```",1,1,2,1,1,3,3,71,0,0,1,0,0.0,0
198,36,train,"Give me the war of Amasa Tracy and entity in the birthplace, that is a settlement and American, of the person deceased on 1850-08-05.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. ?result <http://dbpedia.org/ontology/place> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?v0 <http://dbpedia.org/ontology/deathDate> ""1850-08-05""^^<http://www.w3.org/2001/XMLSchema#date> . ?v0 <http://dbpedia.org/ontology/birthPlace> ?v1 . <http://dbpedia.org/resource/Amasa_Tracy> <http://dbpedia.org/ontology/battle> ?result . }","```sparql
# Step 1: Find Amasa Tracy's involvement in a war
SELECT ?war WHERE {
  ?tracy dbo:wikiPageID ""Amasa_Tracy"" .
  ?tracy dbo:occupation dbr:Military_person .
  ?tracy dbo:participatedInWar ?war .
}

# Step 2: Identify the person who died on 1850-08-05
SELECT ?person WHERE {
  ?person dbo:dateOfDeath ""1850-08-05""^^xsd:date .
}

# Step 3: Find the birthplace of this person and ensure it is an American settlement
SELECT DISTINCT ?birthPlace ?entity WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace a dbo:Settlement ;
              dbo:country dbr:United_States_of_America .
  
  # Step 4: Find an entity in the birthplace
  ?entity dbo:location ?birthPlace .
}
```",4,6,5,3,2,3,3,71,0,0,1,0,0.0,0
943,43,train,"Give me the reference to the alter ego of the reference to Lamont Cranston (radio, film and television) and child of Dawit I and father of Baeda Maryam I.","SELECT ?result WHERE { ?result <http://xmlns.com/foaf/0.1/name> ?v3 . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Dawit_I> . <http://dbpedia.org/resource/Baeda_Maryam_I> <http://dbpedia.org/property/father> ?result . ?v1 <http://xmlns.com/foaf/0.1/name> ""Lamont Cranston (radio, film and television)""@en . ?v1 <http://dbpedia.org/property/alterEgo> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?lamontCranston WHERE {
  # Find The Shadow in DBpedia
  ?shadow a dbo:FictionalCharacter ;
          rdfs:label ""The Shadow""@en .
  
  # Identify Lamont Cranston as the alter ego of The Shadow
  ?shadow dbo:alterEgo dbr:Lamont_Cranston .

  # Dawit I and Baeda Maryam I relationship
  ?dawitI a dbo:Person ;
          rdfs:label ""Dawit I""@en .
  
  ?baedaMaryamI a dbo:Person ;
                rdfs:label ""Baeda Maryam I""@en .
  
  ?dawitI dbo:child dbr:Baeda_Maryam_I ;
         dbo:parentOf dbr:Baeda_Maryam_I .

  # Return Lamont Cranston
  ?shadow dbo:alterEgo ?lamontCranston .
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
492,22,train,Give me the death place of the actor of Color Me Dead and death place of the actor of The Sky Ranger (1928 film).,SELECT ?result WHERE { <http://dbpedia.org/resource/Color_Me_Dead> <http://dbpedia.org/property/starring> ?v3 . <http://dbpedia.org/resource/The_Sky_Ranger_(1928_film)> <http://dbpedia.org/ontology/starring> ?v2 . ?v2 <http://dbpedia.org/ontology/deathPlace> ?result . ?v3 <http://dbpedia.org/ontology/deathPlace> ?result . },"```sparql
# Query for ""Color Me Dead""
SELECT ?actor ?deathPlace WHERE {
  ?film dcterms:title ""Color Me Dead""@en .
  ?film dbo:starring ?actor .
  OPTIONAL { ?actor dbo:deathPlaceValue ?deathPlace . }
}

UNION

# Query for ""The Sky Ranger (1928 film)""
SELECT ?actor ?deathPlace WHERE {
  ?film dcterms:title ""The Sky Ranger""@en .
  ?film dbo:releaseDate ?date .
  FILTER(YEAR(?date) = 1928)
  ?film dbo:starring ?actor .
  OPTIONAL { ?actor dbo:deathPlaceValue ?deathPlace . }
}
```",4,4,5,2,2,2,3,28,0,0,1,0,0.0,0
80,55,train,Give me the professional in the alter ego of The Shadow and actor of the movie with  and actor of the album of What You Know (T.I. song).,"SELECT ?result WHERE { ?v3 <http://dbpedia.org/property/starring> """"@en . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v5 . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . ?v5 <http://dbpedia.org/ontology/starring> ?result . ?v3 <http://dbpedia.org/ontology/starring> ?result . }","```sparql
# Query for the actor of The Shadow
SELECT ?actor WHERE {
  ?character rdfs:label ""The Shadow""@en .
  ?character dbo:portrayedBy ?actor .
  ?actor foaf:name ?name .
}

UNION

# Query for an actor from a movie with ""and"" in its title (assuming ""The Godfather"")
SELECT ?actor WHERE {
  ?movie rdfs:label ""The Godfather""@en .
  ?movie dbo:starring ?actor .
  ?actor foaf:name ?name .
}

UNION

# Query for the artist featured on the album of What You Know by T.I.
SELECT ?artist WHERE {
  ?song rdfs:label ""What You Know""@en .
  ?song dbo:featuringArtist ?artist .
  ?album dbo:track ?song .
  ?artist foaf:name ?name .
}
```",6,6,7,2,3,3,3,71,0,0,4,0,0.0,0
782,22,train,"Give me the associated musical artist of the person born, that is a musical artist, as Nicholas Michael Curran and reference to The Fabulous Thunderbirds.","SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ""Nicholas Michael Curran""@en . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?result <http://xmlns.com/foaf/0.1/name> ""The Fabulous Thunderbirds""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?artist WHERE {
  ?person dbo:name ""Nick Curran""@en .
  ?person dbo:birthName ""Nicholas Michael Curran""@en .
  ?person dbo:associatedBand dbr:The_Fabulous_Thunderbirds .
  ?band dbo:member ?artist .
  FILTER(?band = dbr:The_Fabulous_Thunderbirds)
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
472,19,train,"Give me the administration of Christian IX of Denmark and administration of Olaf I of Denmark and territory administered from the death place, that is a settlement, of Christian Ditlev Ammentorp Hansen.",SELECT ?result WHERE { <http://dbpedia.org/resource/Christian_Ditlev_Ammentorp_Hansen> <http://dbpedia.org/ontology/deathPlace> ?v1 . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Olaf_I_of_Denmark> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/capital> ?v1 . ?result <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Christian_IX_of_Denmark> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?christianIXReign ?olafIReign ?deathPlace ?administeredTerritory 
WHERE {
  # Administration of Christian IX of Denmark
  ?christianIX dbo:reign ?christianIXReign .
  FILTER (str(?christianIX) = ""Christian_IX_of_Denmark"")

  # Administration of Olaf I of Denmark
  ?olafI dbo:reign ?olafIReign .
  FILTER (str(?olafI) = ""Olaf_I_of_Denmark"")
  
  # Death place of Christian Ditlev Ammentorp Hansen
  ?hansen dbp:placeOfDeath ?deathPlace .
  FILTER (str(?hansen) = ""Christian_Ditlev_Ammertorp_Hansen"")

  # Ensure the death place is a settlement
  ?deathPlace rdf:type dbo:Settlement .

  # Find territory administered from the death place
  OPTIONAL {
    ?administeredTerritory dbo:administrativeCenter ?deathPlace .
  }
}
```",4,5,5,2,3,2,3,28,0,0,1,0,0.0,0
668,12,train,Give me the person born as Darryl Paa Kwesi Bannerman-Martin and professional in Musician.,"SELECT ?result WHERE { ?result <http://dbpedia.org/property/occupation> ""Musician""@en . ?result <http://dbpedia.org/property/birthName> ""Darryl Paa Kwesi Bannerman-Martin""@en . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?person WHERE {
  ?person dbo:birthName ""Darryl Paa Kwesi Bannerman-Martin"" .
  ?person foaf:profession ?p .
  FILTER(CONTAINS(LCASE(?p), ""musician""))
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
270,0,train,Give me the predecessor of Ada Watson.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Ada_Watson> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?predecessor WHERE {
  ?role dbo:successor dbr:Ada_Watson .
  ?role dbo:predecessor ?predecessor .
}
```",1,1,2,1,1,2,2,9,0,0,1,0,0.0,0
816,15,train,"Give me the movie, that is a work, with the person decedent at Los Angeles.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Los_Angeles> . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?result <http://dbpedia.org/property/starring> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?film ?title WHERE {
  ?film a dbo:Film .
  ?film dbo:starring ?person .
  ?person dbo:deathPlace dbr:Los_Angeles,_California .
  ?film rdfs:label ?title .
  FILTER (lang(?title) = 'en')
}
```",2,3,3,2,1,3,3,71,0,0,6475,0,0.0,0
412,4,train,"Give me the death place, that is a settlement, of Antonios Varthalitis.",SELECT ?result WHERE { <http://dbpedia.org/resource/Antonios_Varthalitis> <http://dbpedia.org/ontology/deathPlace> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?deathPlace WHERE {
  ?person dbo:birthName ""Antonios Varthalitis""@en .
  ?person dbo:deathPlace ?deathPlace .
  FILTER (isLiteral(?deathPlace) = false)
  ?deathPlace a/rdfs:subClassOf* dbo:PopulatedPlace
}
```",1,2,2,1,1,2,3,28,0,0,1,0,0.0,0
311,16,train,"Give me the band member of the writer of No Alternative and associated musical artist of the associated musical artist, that is an artist, of R.E.M..",SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>. <http://dbpedia.org/resource/R.E.M.> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v2 . ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v3 . <http://dbpedia.org/resource/No_Alternative> <http://dbpedia.org/property/writer> ?v3 . },"```sparql
# Step 1: Find Michael Stipe and his association with ""No Alternative""
SELECT ?person WHERE {
  ?album dcterms:title ""No Alternative""@en .
  ?album dbo:contributor ?person .
  ?person foaf:name ""Michael Stipe""@en .
}

# Step 2: Identify R.E.M. as the band Michael Stipe is a member of
SELECT ?band WHERE {
  ?person dbo:musicArtist ?band .
  ?band rdfs:label ""R.E.M.""@en .
  FILTER(?person = <http://dbpedia.org/resource/Michael_Stipe>)
}

# Step 3: Find associated musical artists of R.E.M.
SELECT DISTINCT ?associatedArtist WHERE {
  ?band dbo:member ?member .
  ?member foaf:name ?name .
  ?member dbo:associatedBand ?associatedBand .
  ?associatedBand rdfs:label ?associatedLabel .
  FILTER(?band = <http://dbpedia.org/resource/R.E.M.> && ?associatedLabel != ""R.E.M."")
}

# Step 4: Check if the associated artist is recognized as an individual artist
SELECT DISTINCT ?artist WHERE {
  ?associatedArtist dbo:musicArtist ?artist .
  ?artist rdfs:label ?label .
  FILTER(?associatedArtist = <http://dbpedia.org/resource/Peter_Buck>)
}
```",4,5,5,2,2,3,2,20,0,0,1,0,0.0,0
737,53,train,"Give me the child of the child, that is a royalty, of Archduke Charles Louis of Austria and predecessor of the child of the spouse, that is a royalty, of Archduchess Helena of Austria and child of Albrecht, Duke of Württemberg.","SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/successor> ?v2 . ?v1 <http://dbpedia.org/ontology/child> ?result . ?result <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Albrecht,_Duke_of_Württemberg> . ?v1 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Archduke_Charles_Louis_of_Austria> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Archduchess_Helena_of_Austria> <http://dbpedia.org/ontology/spouse> ?v3 . ?v2 <http://dbpedia.org/property/father> ?v3 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?royalChildOfGrandchild WHERE {
  # Step 1: Find a child of Archduke Charles Louis of Austria
  ?child dbr:Archduke_Charles_Louis_of_Austria dbo:child .

  # Step 2: Find the royal child of that child
  ?grandchild ?royalTitle ?child .
  FILTER(CONTAINS(LCASE(?royalTitle), ""king"") || CONTAINS(LCASE(?royalTitle), ""queen"") ||
         CONTAINS(LCASE(?royalTitle), ""prince"") || CONTAINS(LCASE(?royalTitle), ""duke""))

  # Step 3: Find Archduchess Helena's spouse and their child
  ?spouse dbp:spouse dbr:Archduchess_Helena_of_Austria .
  ?childOfSpouse dbo:child ?spouse .

  # Step 4: Find the predecessor of that child
  ?predecessor dbo:succeededBy ?childOfSpouse .

  # Step 5: Find a child of Albrecht, Duke of Württemberg
  ?albrechtChild dbr:Albrecht,_Duke_of_W%C3%BCrttemberg dbo:child .

  # Step 6: Match the results
  FILTER(?grandchild = ?predecessor)
}
```",6,8,7,3,3,3,3,71,0,0,1,0,0.0,0
203,29,train,"Give me the commander in French campaign in Egypt and Syria and military force of the war, that is a military conflict and an event, of William Bayne (Royal Navy officer) and military force of Battle of Cape Finisterre (1805).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Battle_of_Cape_Finisterre_(1805)> . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. <http://dbpedia.org/resource/French_campaign_in_Egypt_and_Syria> <http://dbpedia.org/ontology/commander> ?result . ?result <http://dbpedia.org/ontology/battle> ?v3 . <http://dbpedia.org/resource/William_Bayne_(Royal_Navy_officer)> <http://dbpedia.org/ontology/battle> ?v3 . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?campaignMilitaryForce ?battle ?bayneRole ?finisterreForces
WHERE {
  # Commander of the French Campaign in Egypt and Syria
  dbr:Napoleon_Bonaparte dbo:commanderOf dbr:French_campaign_in_Egypt_and_Syria .
  
  # Military force involved in the campaign
  dbr:French_campaign_in_Egypt_and_Syria dbo:militaryForce dbr:French_Army .

  # William Bayne's role (assuming he was part of a naval battle)
  OPTIONAL {
    ?bayneRole dbo:agent dbr:William_Bayne .
    ?bayneRole dbo:partOf ?navalBattle .
  }

  # Battle of Cape Finisterre
  dbr:Battle_of_Cape_Finisterre_1805 dbo:participatedIn ?finisterreForces .

  # Forces involved in the Battle of Cape Finisterre
  OPTIONAL {
    ?finisterreForces rdf:type dbo:MilitaryUnit .
    FILTER (CONTAINS(LCASE(STR(?finisterreForces)), ""british royal navy"") || CONTAINS(LCASE(STR(?finisterreForces)), ""franco-spanish fleet""))
  }
}
```",4,6,5,2,3,3,3,71,0,0,1,0,0.0,0
159,44,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco and successor of Yurii Khmelnytsky and reference to the writer of Always the Love Songs.","SELECT ?result WHERE { <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. ?v2 <http://dbpedia.org/ontology/commander> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v4 . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v4 . }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?war ?commander ?tvShow ?successor ?writer WHERE {
  # Find the war involving Jean Baptist, Comte d'Arco
  ?war dbo:participatingCommander dbr:Jean_Baptiste,_Comte_d%27Arco .
  
  # Ensure it is a television show and societal event
  ?tvShow dbo:subject ?war .
  ?societalEvent dbo:relatedWar ?war .

  # Find the successor of Yurii Khmelnytsky
  ?successor dbo:succeededBy dbr:Yuri_Khmelnytsky .

  # Identify the writer of ""Always the Love Songs""
  ?writer dbo:title dbr:Always_the_Love_Songs .
  
  # Link everything together
  FILTER(?commander = dbr:Jean_Baptiste,_Comte_d%27Arco)
}
```",5,7,6,2,3,3,3,71,0,0,1,0,0.0,0
80,44,train,Give me the actor of Shelby Oaks and actor of the album of What You Know (T.I. song) and professional in the alter ego of The Shadow.,SELECT ?result WHERE { ?v4 <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/What_You_Know_(T.I._song)> <http://dbpedia.org/ontology/album> ?v4 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Shelby_Oaks> <http://dbpedia.org/ontology/starring> ?result . <http://dbpedia.org/resource/The_Shadow> <http://dbpedia.org/property/alterEgo> ?v2 . },"```sparql
SELECT DISTINCT ?actor1 ?actor2 ?professional WHERE {
  # Actor of Shelby Oaks
  ?film dcterms:title ""Shelby Oaks""@en .
  ?film dbo:starring ?actor1 .
  ?actor1 foaf:name ?nameActor1 .

  # Artist of the album containing What You Know (T.I. song)
  ?song dcterms:title ""What You Know""@en ;
        dbo:album ?album .
  ?artist dbo:recordedAt ?album ;
          foaf:name ?nameArtist .
  FILTER(?artist = <http://dbpedia.org/resource/T.I._(rapper)>)
  BIND(?artist AS ?actor2)

  # Professional in the alter ego of The Shadow
  ?character dcterms:title ""The Shadow""@en .
  ?professional dbo:profession ?role ;
                foaf:name ?nameProfessional .
  FILTER EXISTS { ?professional dbo:alterEgo ?character }
  
}
```",5,5,6,2,3,3,3,71,0,0,1,0,0.0,0
353,24,train,"Give me the father of the child, that is a royalty, of William I of Sicily and child of Elvira of Castile, Queen of Sicily.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/property/father> ?result . <http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_Sicily> <http://dbpedia.org/ontology/child> ?result . }","```sparql
SELECT ?child WHERE {
  wd:Q123456 wdt:P22 wd:Q789012 ; # William I of Sicily (P22: spouse) Elvira of Castile
  wdt:P40 ?child . # P40: child
  FILTER EXISTS { ?child wdt:P31/wdt:P279* wd:Q5 } # Check if the child is a human (royalty)
}
```

Note: Replace `wd:Q123456` with the actual DBpedia resource ID for William I of Sicily and `wd:Q789012` with the resource ID for Elvira of Castile. The query checks for children who are humans, assuming royalty status is implied by being a human in this context.",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
270,6,train,"Give me the person decedent at the birth place, that is a settlement, of Mark Tournier.",SELECT ?result WHERE { <http://dbpedia.org/resource/Mark_Tournier> <http://dbpedia.org/ontology/birthPlace> ?v0 . ?result <http://dbpedia.org/ontology/deathPlace> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?decedent WHERE {
  # Find Mark Tournier's birthplace
  dbr:Mark_Tournier dbo:birthPlace ?birthPlace .
  
  # Ensure the birthplace is a settlement
  ?birthPlace rdf:type dbo:Settlement .

  # Find persons who died at this birthplace
  ?decedent dbo:deathPlace ?birthPlace .
}
```",2,3,3,2,1,2,2,9,809,0,0,1.0,1.0,1.0
353,7,train,"Who is the spouse, that is a royalty, of Constance of Burgundy?",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Constance_of_Burgundy> . },"```sparql
SELECT ?spouse WHERE {
  ?constance a dbo:Person ;
             foaf:name ""Constance of Burgundy""@en .
  ?constance dbo:spouse ?spouse .
  OPTIONAL { ?spouse dbo:royaltyTitle ?title . }
}
```",1,2,2,1,1,3,3,71,0,0,1,0,0.0,0
353,46,train,"Give me the father of the child, that is a royalty, of William I of Sicily and child of the parent of the child, that is a royalty, of Roger II of Sicily.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?v2 <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Roger_II_of_Sicily> . ?v1 <http://dbpedia.org/ontology/child> ?result . ?v4 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/William_I_of_Sicily> . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v4 <http://dbpedia.org/property/father> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?father WHERE {
  # Find children of William I who are royalty
  ?child dbo:parent dbr:William_I_of_Sicily .
  ?child a dbo:Monarch .

  # The father of these children is William I himself
  BIND(dbr:William_I_of_Sicily AS ?father)

  # Verify that Roger II is the parent of William I
  FILTER EXISTS {
    dbr:William_I_of_Sicily dbo:parent dbr:Roger_II_of_Sicily .
  }
}
```",5,7,6,3,2,3,3,71,0,0,1,0,0.0,0
159,14,train,"Give me the commander in the war, that is a television show and a societal event, of Jean Baptist, Comte d'Arco.","SELECT ?result WHERE { <http://dbpedia.org/resource/Jean_Baptist,_Comte_d'Arco> <http://dbpedia.org/ontology/battle> ?v1 . ?v1 <http://dbpedia.org/ontology/commander> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?show ?character WHERE {
  ?show dbo:genre dbr:Science_fiction_television_series .
  ?show dbo:title ""Battlestar Galactica"" .
  ?show dbo:wikiPageRedirects ?redirect .
  OPTIONAL { ?redirect rdfs:label ?title . FILTER (lang(?title) = 'en') }
  
  ?character dbo:portrayedBy ?actor .
  ?character dbo:spouseOrPartner ?relatedCharacter .
  ?relatedCharacter rdfs:label ""William Adama""@en .
  
  ?show dbo:wikiPageDisambiguates ?disambiguation .
  FILTER EXISTS { 
    ?disambiguation dbo:abstract ?abstract .
    FILTER(CONTAINS(LCASE(?abstract), ""societal event""))
  }
}
```",2,4,3,2,1,3,3,71,0,0,40,0,0.0,0
609,13,train,"Give me the birth place of the governor, that is a politician, of Virginia.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v1 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?governor dbo:office ""Governor of Virginia""@en .
  ?governor foaf:name ""Glenn Youngkin""@en .
  ?governor dbo:birthPlace ?birthPlace .
}
```",2,3,3,2,1,3,3,71,0,0,1,0,0.0,0
687,16,train,"Give me the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.",SELECT ?result WHERE { ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. ?v1 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . ?v1 <http://dbpedia.org/property/starring> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor WHERE {
  # Find films directed by Manuel Huerga that are works
  ?film dbo:director dbr:Manuel_Huerga ;
        a dbo:Film .
  
  # Get actors in these films
  ?film dbo:starring ?actor .

  # Ensure the actor is also recognized as a soccer player and an athlete
  ?actor dbo:occupation dbp:Soccer_player ;
         dbo:occupation dbp:Athlete .
}
```",2,5,3,2,1,3,3,71,0,0,1,0,0.0,0
756,22,train,"Give me the manager of the team, that is a soccer club season and a sports season and a sports team season, of Thomas Letsch and manager of VfL Bochum.",SELECT ?result WHERE { ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v1 <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>. <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . ?v1 <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Thomas_Letsch> . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?letschTeam ?bochumManager WHERE {
  # Find the team managed by Thomas Letsch
  ?person a dbo:Person ;
          foaf:name ""Thomas Letsch""@en .
  OPTIONAL { 
    ?management dbo:manager ?person ;
                dbo:team ?letschTeam .
  }
  
  # Find the manager of VfL Bochum
  ?bochumManagement dbo:team dbr:VfL_Bochum ;
                    dbo:manager ?bochumManager .
}
```",3,6,4,2,2,3,3,71,1,31,0,0.03125,1.0,0.06060606060606061
159,29,train,Give me the reference to the writer of Always the Love Songs and commander in Great Turkish War and successor of Yurii Khmelnytsky.,SELECT ?result WHERE { <http://dbpedia.org/resource/Great_Turkish_War> <http://dbpedia.org/ontology/commander> ?result . <http://dbpedia.org/resource/Yurii_Khmelnytsky> <http://dbpedia.org/ontology/successor> ?result . ?result <http://xmlns.com/foaf/0.1/name> ?v3 . <http://dbpedia.org/resource/Always_the_Love_Songs> <http://dbpedia.org/property/writer> ?v3 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  ?person dbo:work ?work .
  ?work rdfs:label ""Always the Love Songs""@en .

  ?person dbo:militaryCommanderOf ?war .
  ?war rdfs:label ""Great Turkish War""@en .

  ?person dbo:succeededBy ?successor .
  ?successor rdfs:label ""Yurii Khmelnytsky""@en .
}
```",4,4,5,2,3,3,3,71,0,0,1,0,0.0,0
859,10,train,"Give me the associated musical artist of the member, that is a musical artist, of Khlyst (band).",SELECT ?result WHERE { <http://dbpedia.org/resource/Khlyst_(band)> <http://dbpedia.org/ontology/bandMember> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>. ?v0 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
SELECT ?member ?associatedArtist WHERE {
  ?band rdf:type dbo:MusicalBand ;
        rdfs:label ""Khlyst""@en .
  
  ?band dbo:bandMember ?member .

  OPTIONAL { 
    ?member dbo:spouseOrPartner ?artist .
    ?artist rdf:type dbo:MusicalArtist .
    ?artist rdfs:label ?associatedArtistLabel .
    FILTER(LANG(?associatedArtistLabel) = ""en"")
    BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", REPLACE(STR(?artist), "" "", ""_""))) AS ?associatedArtist)
  }

  OPTIONAL {
    ?member dbo:spouseOrPartner ?bandMember .
    ?bandMember rdf:type dbo:MusicalBand ;
                rdfs:label ?bandLabel .
    FILTER(LANG(?bandLabel) = ""en"")
    BIND(IRI(CONCAT(""http://dbpedia.org/resource/"", REPLACE(STR(?bandMember), "" "", ""_""))) AS ?associatedArtist)
  }

  FILTER EXISTS { 
    ?member dbo:spouseOrPartner ?artist .
    ?artist rdf:type dbo:MusicalArtist .
  }
  
  FILTER NOT EXISTS {
    ?member dbo:spouseOrPartner ?nonArtist .
    ?nonArtist rdf:type ?type .
    FILTER(?type != dbo:MusicalArtist)
  }

  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"". }
}
```",2,3,3,2,1,3,2,20,0,0,9,0,0.0,0
687,33,train,"Give me the player in Juan Carlos Molina (footballer) and player in the actor, that is a soccer player and an athlete, of the film, that is a work, of Manuel Huerga.",SELECT ?result WHERE { ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>. ?v3 <http://dbpedia.org/ontology/team> ?result . ?v3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>. <http://dbpedia.org/resource/Juan_Carlos_Molina_(footballer)> <http://dbpedia.org/ontology/team> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. ?v0 <http://dbpedia.org/property/starring> ?v3 . ?v0 <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Manuel_Huerga> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?footballClub ?actor ?film WHERE {
  # Step 1: Find Juan Carlos Molina's football club
  dbr:Juan_Carlos_Molina_(footballer) dbo:playsFor ?footballClub .

  # Step 2: Identify actors who are also soccer players and athletes
  ?actor a dbo:SoccerPlayer ;
         dbo:profession dbr:Actor ;
         dbo:occupation dbr:Athlete .

  # Step 3: Find a film by Manuel Huerga featuring the actor
  ?film dbo:director dbr:Manuel_Huerga ;
        dbo:starring ?actor .
}
```",4,7,5,3,2,3,3,71,0,0,1,0,0.0,0
103,26,train,"Give me the professional in the profession of the actor, that is a politician, of Ab Kya Hoga.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/occupation> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v2 . <http://dbpedia.org/resource/Ab_Kya_Hoga> <http://dbpedia.org/ontology/starring> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?actor WHERE {
  ?show dbo:title ""Ab Kya Hoga""@en .
  ?show dbo:starring ?actor .
  ?actor a dbo:Actor ;
         dbo:occupation ?occupation .
  FILTER(CONTAINS(LCASE(?occupation), ""politician""))
}
```",3,4,4,3,1,3,3,71,0,0,58032,0,0.0,0
756,23,train,"Give me the manager of the player, that is a sports club and an organisation and a soccer club, in the successor, that is a football league season and a sports team season and a sports season, of 2006–07 VfL Bochum season.",SELECT ?result WHERE { <http://dbpedia.org/resource/2006–07_VfL_Bochum_season> <http://dbpedia.org/ontology/successor> ?v2 . ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeamSeason>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FootballLeagueSeason>. ?v2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsSeason>. ?v2 <http://dbpedia.org/ontology/team> ?v0 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsClub>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v0 <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?manager WHERE {
  # Identify the 2006-07 VfL Bochum season
  dbr:VfL_Bochum_season_2006–07 a dbo:SoccerSeason ;
    dbo:succeeds ?successor .

  # Ensure the successor is a football league season, sports team season, and sports season
  ?successor a dbo:SoccerSeason ;
            rdfs:label ?seasonLabel .
  
  FILTER(CONTAINS(LCASE(?seasonLabel), ""2007–08"")).

  # Find the manager of VfL Bochum during the successor season
  ?successor dbo:manager ?manager .
}
```",3,9,4,3,1,3,3,71,0,0,1,0,0.0,0
38,10,train,"Give me the work, that is a written work and a work, of the commander, that is an office holder, in Korean conflict.",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?result <http://dbpedia.org/property/author> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Work>. <http://dbpedia.org/resource/Korean_conflict> <http://dbpedia.org/ontology/commander> ?v0 . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/WrittenWork>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?work WHERE {
  ?person dbo:officeHolderOf dbr:Korean_War .
  ?person dbo:autobiography ?work .
  FILTER EXISTS { ?work a dbo:Book . }
  FILTER EXISTS { ?work dbo:author ?person . }
}
```",2,5,3,2,1,3,2,20,0,0,52,0,0.0,0
609,34,train,Give me the birth place of the awardee of the award of Vince Gilligan and birth place of Cece Bell.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/awards> ?v2 . <http://dbpedia.org/resource/Cece_Bell> <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v2 . },"```sparql
# Query for the birth place of an awardee related to Vince Gilligan's work
SELECT ?awardeeBirthPlace WHERE {
  # Assuming Bryan Cranston as a notable awardee from ""Breaking Bad""
  wd:Q1776 dbo:birthPlace ?bryanCranstonBirthPlace.
  
  # Get the birth place of Bryan Cranston
  OPTIONAL { ?bryanCranstonBirthPlace rdfs:label ?awardeeBirthPlace. FILTER (lang(?awardeeBirthPlace) = ""en"") }
}

UNION

# Query for the birth place of Cece Bell
SELECT ?ceceBellBirthPlace WHERE {
  wd:Q1065183 dbo:birthPlace ?ceceBellBirthPlace.
  
  # Get the birth place of Cece Bell
  OPTIONAL { ?ceceBellBirthPlace rdfs:label ?ceceBellBirthPlace. FILTER (lang(?ceceBellBirthPlace) = ""en"") }
}
```",4,4,5,3,2,3,3,71,0,0,1,0,0.0,0
119,15,train,"Give me the entity in Poland and war of the commander in the force, that is a television show and a military conflict, of Maria I of Portugal.",SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Maria_I_of_Portugal> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>. ?v1 <http://dbpedia.org/ontology/battle> ?result . ?v0 <http://dbpedia.org/ontology/commander> ?v1 . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Poland> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?entityInPoland WHERE {
  # Maria I of Portugal and her involvement in a military conflict
  dbr:Maria_I_of_Portugal dbo:spouse ?commander .
  
  # The Peninsular War as both a historical event and a television show
  dbr:The_Peninsular_War dbo:wikiPageRedirects ?warEntity .
  ?warEntity rdf:type dbo:MilitaryConflict .

  # Television show related to the war
  ?tvShow dbo:title ""The Peninsular War"" ;
          dbo:subject ?warEntity .

  # Entity in Poland connected to the context of the war or television show
  ?entityInPoland dbo:wikiPageDisambiguates dbr:The_Peninsular_War .
  FILTER (CONTAINS(LCASE(str(?entityInPoland)), ""poland""))
}
```",4,6,5,3,2,3,2,20,0,0,1,0,0.0,0
386,15,train,Give me the entity in the birth place of Elena Žalinkevičaitė-Petrauskienė and war of Alexander Lvovich Davydov.,SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/place> ?v1 . <http://dbpedia.org/resource/Alexander_Lvovich_Davydov> <http://dbpedia.org/ontology/battle> ?result . <http://dbpedia.org/resource/Elena_Žalinkevičaitė-Petrauskienė> <http://dbpedia.org/ontology/birthPlace> ?v1 . },"```sparql
SELECT DISTINCT ?birthPlaceEntity ?warEntity WHERE {
  # Query for Elena Žalinkevičaitė-Petrauskienė's birthplace
  OPTIONAL {
    ?e1 dbo:birthPlace ?birthPlace.
    ?birthPlace rdfs:label ?birthPlaceLabel.
    FILTER (CONTAINS(LCASE(?birthPlaceLabel), ""elena žalinkevičaitė-petrauskienė"")).
    BIND(?birthPlace AS ?birthPlaceEntity)
  }

  # Query for the war involving Alexander Lvovich Davydov
  OPTIONAL {
    ?e2 dbo:participatedInMilitaryConflict ?war.
    ?war rdfs:label ?warLabel.
    FILTER (CONTAINS(LCASE(?warLabel), ""alexander lvovich davydov"")).
    BIND(?war AS ?warEntity)
  }
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
628,8,train,"Give me the award, that is a region and American and a state and a settlement, of Coro de la Pontificia Universidad Católica de Puerto Rico.",SELECT ?result WHERE { <http://dbpedia.org/resource/Coro_de_la_Pontificia_Universidad_Católica_de_Puerto_Rico> <http://dbpedia.org/property/awards> ?result . ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AdministrativeRegion>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>. ?result <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>. ?result <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?award WHERE {
  ?choir dbo:name ""Coro de la Pontificia Universidad Católica de Puerto Rico""@es .
  ?choir dbo:awardsReceived ?award .
}
```",1,5,2,1,1,3,3,71,0,0,3,0,0.0,0
78,6,train,Give me the associated musical artist of Stuart Tosh and associated musical artist of Billy Lyall.,SELECT ?result WHERE { <http://dbpedia.org/resource/Billy_Lyall> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/Stuart_Tosh> <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . },"```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?person ?band WHERE {
  VALUES ?person { 
    dbr:Stuart_Tosh 
    dbr:Billy_Lyall 
  }
  
  OPTIONAL {
    ?person dbp:band ?band .
  }

  FILTER(?band != """")
}
```",2,2,3,1,2,2,3,28,0,2,2,0.0,0.0,0
89,46,train,"Give me the spouse of the father, that is a royalty, of Myat Hpone Pyo and child of the parent of the child of Minye Kyawswa.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v1 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v2 . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?result <http://dbpedia.org/ontology/spouse> ?v4 . <http://dbpedia.org/resource/Myat_Hpone_Pyo> <http://dbpedia.org/property/father> ?v4 . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?spouse WHERE {
  # Step 1: Identify Myat Hpone Pyo's father
  ?myathponepyo dbo:father ?father .
  FILTER(STRSTARTS(STR(?myathponepyo), ""Myat_Hpone_Pyo""))

  # Step 2: Find the spouse of that father if they are royalty
  ?father dbo:spouse ?spouse .
  OPTIONAL { ?spouse dbo:title ?title . }
  FILTER(CONTAINS(LCASE(STR(?title)), ""royalty"") || ISBLANK(?title))

  # Step 3: Identify Minye Kyawswa's child
  ?minyekyawswa dbo:child ?child .
  FILTER(STRSTARTS(STR(?minyekyawswa), ""Minye_Kyawswa""))

  # Step 4: Find the parent of that child
  ?child dbo:parent ?parent .

  # Step 5: Determine the spouse of this parent if they are royalty
  ?parent dbo:spouse ?commonSpouse .
  OPTIONAL { ?commonSpouse dbo:title ?commonTitle . }
  FILTER(CONTAINS(LCASE(STR(?commonTitle)), ""royalty"") || ISBLANK(?commonTitle))

  # Ensure the spouse from both paths is the same individual
  FILTER(?spouse = ?commonSpouse)
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
769,6,train,Give me the player in Ye Jia and player in Lai Sun Cheung.,SELECT ?result WHERE { <http://dbpedia.org/resource/Lai_Sun_Cheung> <http://dbpedia.org/ontology/team> ?result . <http://dbpedia.org/resource/Ye_Jia> <http://dbpedia.org/ontology/team> ?result . },"```sparql
# Query for Ye Jia
SELECT ?player WHERE {
  ?player dbo:birthName ""Ye Jia""@zh .
  ?player dbo:sport dbr:Badminton .
}

# Query for Lai Sun Cheung
SELECT ?player WHERE {
  ?player dbo:birthName ""Lai Sun Cheung""@yue .
  ?player dbo:sport dbr:Soccer .
}
```",2,2,3,1,2,3,2,20,0,0,2,0,0.0,0
293,22,train,Give me the party member of Republican Party (United States) and person born as the birth name of Ann Sothern.,SELECT ?result WHERE { <http://dbpedia.org/resource/Ann_Sothern> <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/property/birthName> ?v1 . ?result <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Republican_Party_(United_States)> . },"```sparql
SELECT ?person1 ?person2 WHERE {
  # Find a person associated with the Republican Party (United States)
  ?person1 dbo:partyAffiliation dbr:Republican_Party_(United_States) .
  
  # Find the person born as Anne Sothern
  ?person2 schema:birthName ""Anne Sothern""@en .

  # Limit to a well-known figure for simplicity, e.g., Donald Trump
  FILTER(?person1 = dbr:Donald_Trump)
}
```",3,3,4,2,2,3,3,71,0,0,1,0,0.0,0
609,27,train,"Give me the birth place of the author of the reference, that is American, to El Deafo.","SELECT ?result WHERE { ?v1 <http://xmlns.com/foaf/0.1/name> ""El Deafo""@en . ?v2 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/author> ?v2 . ?v1 <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?birthPlace WHERE {
  ?author dbo:birthPlace ?birthPlace .
  ?author rdfs:label ""Cece Bell""@en .
  FILTER (LANG(?author) = 'en')
}
```",3,4,4,3,1,3,3,71,0,0,1,0,0.0,0
353,11,train,"Give me the child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v0 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . }","```sparql
SELECT DISTINCT ?sibling WHERE {
  ?parent dbo:child dbr:Roger_III,_Duke_of_Apulia .
  ?parent dbo:child ?sibling .
  FILTER(?sibling != dbr:Roger_III,_Duke_of_Apulia)
}
```",2,2,3,2,1,3,3,71,0,0,7,0,0.0,0
89,60,train,"Give me the predecessor of the child of the spouse, that is a royalty, of Saw Min Phyu and child of the parent of the child of Minye Kyawswa.",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/parent> ?v2 . <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v3 . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v2 <http://dbpedia.org/ontology/child> ?v3 . ?v1 <http://dbpedia.org/property/father> ?v0 . ?result <http://dbpedia.org/ontology/successor> ?v1 . ?v0 <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Min_Phyu> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?predecessor WHERE {
  # Step 1: Identify Saw Min Phyu's spouse
  ?sawMinPhyu dbo:spouse ?spouse .

  # Step 2: Find the child of Saw Min Phyu's spouse
  ?spouse dbo:child ?royalChild .

  # Step 3: Determine which child is royalty
  ?royalChild dbp:royaltyTitle ?title .
  
  # Step 4: Identify Minye Kyawswa's parent
  ?minyeKyawswa dbo:parent ?parent .

  # Step 5: Find the child of Minye Kyawswa's parent
  ?parent dbo:child ?childOfParent .

  # Step 6: Determine the predecessor of the identified royalty
  ?royalChild dbo:predecessor ?predecessor .
}
```",6,7,7,3,2,3,3,71,0,0,1,0,0.0,0
737,6,train,Give me the child of Duke Philipp of Württemberg.,SELECT ?result WHERE { ?result <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Duke_Philipp_of_Württemberg> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>

SELECT ?child WHERE {
  ?person dbo:givenName ""Philipp""@en .
  ?person dbo:familyName ""of Württemberg""@en .
  ?person a dbo:Duke .
  ?person dbo:child ?child .
}
```",1,1,2,1,1,3,3,71,0,0,3,0,0.0,0
859,7,train,"Give me the band member of the associated musical artist, that is a band and a group and an organisation, of Burnt by the Sun (band).",SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>. ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>. <http://dbpedia.org/resource/Burnt_by_the_Sun_(band)> <http://dbpedia.org/ontology/associatedMusicalArtist> ?v1 . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Group>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?memberName WHERE {
  # Find the DBpedia resource for Burnt by the Sun (band)
  dbr:Burnt_by_the_Sun_(band) a dbo:Band ;
    dbo:bandMember ?member .

  # Ensure that the member is also associated with other bands, groups, or organizations
  OPTIONAL { ?member dbo:bandMember ?otherBand . }
  OPTIONAL { ?member dbo:groupMember ?otherGroup . }
  OPTIONAL { ?member dbo:memberOf ?organization . }

  # Retrieve the name of each band member
  ?member foaf:name ?memberName .
}
```",2,5,3,2,1,3,2,20,0,0,18,0,0.0,0
668,46,train,Give me the professional in the profession of Rod Argent and associated musical artist of the person born as the birth name of $pacely.,SELECT ?result WHERE { ?v1 <http://dbpedia.org/property/birthName> ?v2 . ?result <http://dbpedia.org/property/occupation> ?v4 . <http://dbpedia.org/resource/Rod_Argent> <http://dbpedia.org/property/occupation> ?v4 . ?v1 <http://dbpedia.org/ontology/associatedMusicalArtist> ?result . <http://dbpedia.org/resource/$pacely> <http://dbpedia.org/property/birthName> ?v2 . },"```sparql
# Find Rod Argent's profession
SELECT ?profession WHERE {
  wd:Q12345 wdt:P106 ?occupation .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}

# Find Tupac Shakur's birth name and associated musical artists
SELECT ?associatedArtist WHERE {
  # Tupac Shakur's birth name
  wd:Q744 wdt:P735 ?birthName .
  
  # Associated musical artist of Tupac Shakur
  ?tupacMusicProject wdt:P31/wdt:P279* wd:Q13442814 ; # Music project type
                     wdt:P175 ?associatedArtist . # Performer
  
  FILTER(?associatedArtist != wd:Q744) # Exclude Tupac himself
}
```",5,5,6,3,2,3,3,71,0,0,1,0,0.0,0
386,16,train,Give me the war of the awardee of Golden Sword for Bravery and entity in Russian Empire.,SELECT ?result WHERE { ?v2 <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Sword_for_Bravery> . ?result <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Russian_Empire> . ?v2 <http://dbpedia.org/ontology/battle> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?recipient ?award ?war WHERE {
  ?recipient dbo:awardedBy dbr:Golden_Sword_for_Bravery .
  ?recipient rdfs:label ""Alexander Suvorov""@en .
  OPTIONAL { 
    ?recipient dbo:participatedIn ?war .
    FILTER (CONTAINS(LCASE(?war), ""napoleonic wars"") || CONTAINS(LCASE(?war), ""russian empire""))
  }
}
```",3,3,4,2,2,2,3,28,0,0,2,0,0.0,0
353,47,train,"Give me the father of the child, that is a royalty, of the reference, that is a royalty and an office holder, to William I and child of the parent of Roger III, Duke of Apulia.","SELECT ?result WHERE { ?v2 <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Roger_III,_Duke_of_Apulia> . ?v4 <http://dbpedia.org/property/father> ?result . ?v0 <http://xmlns.com/foaf/0.1/name> ""William I""@en . ?v4 <http://dbpedia.org/property/father> ?v0 . ?v2 <http://dbpedia.org/ontology/child> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>. ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. }","```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?father WHERE {
  # Step 1: Identify William I
  ?williamI a dbo:Monarch ;
            foaf:name ""William I""@en .

  # Step 2: Find the child of William I who is royalty
  ?childOfWillI dbo:parent ?williamI ;
               a dbo:Person, dbo:RoyalFamilyMember .

  # Step 3: Reference a royalty and office holder
  ?officeHolder a dbo:Monarch, dbo:OfficeHolder ;
                foaf:name ?name .

  # Step 4: Identify Roger III, Duke of Apulia
  ?rogerIII a dbo:Duke ;
            foaf:name ""Roger III, Duke of Apulia""@en ;
            dbo:parent ?parentOfRogerIII .

  # Step 5: Find the child of the parent of Roger III
  ?childOfParent dbr:Parent_of_Roger_III_Duke_of_Apulia a dbo:Person, dbo:RoyalFamilyMember .

  # Step 6: Determine the father of the child from step 2 and step 5
  ?father dbo:spouse ?mother ;
          dbo:child ?childOfWillI, ?childOfParent .
}
```",5,8,6,3,2,3,3,71,0,0,1,0,0.0,0
905,13,train,"Give me the parent of the father, that is a royalty, of Charles I of Hungary.",SELECT ?result WHERE { ?v1 <http://dbpedia.org/ontology/parent> ?result . ?v1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>. <http://dbpedia.org/resource/Charles_I_of_Hungary> <http://dbpedia.org/property/father> ?v1 . },"```sparql
SELECT ?parent WHERE {
  ?charles1 dbo:father ?father .
  ?charles1 rdfs:label ""Charles I of Hungary""@en .
  
  OPTIONAL { ?father dbo:title ?title . FILTER regex(?title, ""King|Queen|Prince|Duke"", ""i"") }
  
  ?father dbo:mother ?parent .
}
```",2,3,3,2,1,3,3,71,0,0,2,0,0.0,0
609,46,train,"Give me the birth place of the governor, that is a politician, of Virginia and birth place of the awardee of the award of Vince Gilligan.",SELECT ?result WHERE { <http://dbpedia.org/resource/Virginia> <http://dbpedia.org/property/governor> ?v4 . <http://dbpedia.org/resource/Vince_Gilligan> <http://dbpedia.org/property/awards> ?v2 . ?v4 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/ontology/birthPlace> ?result . ?v1 <http://dbpedia.org/property/awards> ?v2 . ?v4 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. },"```sparql
# Query for the birthplace of the current governor of Virginia
SELECT ?birthPlace WHERE {
  ?governor dbo:officeHolderOf dbr:Governor_of_Virginia .
  ?governor foaf:name ""Gavin Newsom""@en . # Assuming Gavin Newsom is the current governor as per latest data
  ?governor dbo:birthPlace ?birthPlace .
}

UNION

# Query for the birthplace of an awardee associated with Vince Gilligan (e.g., Bryan Cranston)
SELECT ?birthPlace WHERE {
  ?person dbo:award dbr/Primetime_Emmy_Award_for_Outstanding_Lead_Actor_in_a_Drama_Series . # Assuming this is a relevant award
  ?person foaf:name ""Bryan Cranston""@en .
  ?person dbo:birthPlace ?birthPlace .
}
```",5,6,6,3,2,3,3,71,0,0,1,0,0.0,0
347,11,train,"Give me the commander in the war, that is a societal event and an event and a television show, of 2nd Dragoon Regiment (France).",SELECT ?result WHERE { ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>. ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SocietalEvent>. <http://dbpedia.org/resource/2nd_Dragoon_Regiment_(France)> <http://dbpedia.org/ontology/battle> ?v0 . ?v0 <http://dbpedia.org/ontology/commander> ?result . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Event>. },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?commander ?societalEvent ?event ?tvShow WHERE {
  ?regiment a dbo:MilitaryUnit ;
            dbo:country dbr:France ;
            rdfs:label ""2nd Dragoon Regiment""@en .
  
  ?commander dbo:commanded ?regiment ;
             dbo:wikiPageDisambiguates ?disambiguation .

  OPTIONAL { ?societalEvent dbo:participatedIn ?commander . }
  OPTIONAL { ?event dbo:participatedIn ?commander . }
  OPTIONAL { ?tvShow dbo:starring ?commander . }

  FILTER (lang(?regiment) = 'en' && lang(?disambiguation) = 'en')
}
```",2,5,3,2,1,3,3,71,0,0,42,0,0.0,0
756,10,train,Give me the manager of 2020–21 SBV Vitesse season and manager of VfL Bochum.,SELECT ?result WHERE { <http://dbpedia.org/resource/VfL_Bochum> <http://dbpedia.org/ontology/manager> ?result . <http://dbpedia.org/resource/2020–21_SBV_Vitesse_season> <http://dbpedia.org/ontology/manager> ?result . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?vitesseManager ?bochumManager WHERE {
  # Manager of SBV Vitesse during the 2020–21 season
  OPTIONAL {
    ?vitesse dbr:SBV_Vitesse .
    ?vitesse dbo:manager ?vitesseManager .
    FILTER EXISTS { 
      ?season dbo:club ?vitesse ;
              dbo:season ""2020–21""^^xsd:string .
    }
  }

  # Manager of VfL Bochum
  OPTIONAL {
    ?bochum dbr:VfL_Bochum .
    ?bochum dbo:manager ?bochumManager .
  }
}
```",2,2,3,1,2,3,3,71,0,0,1,0,0.0,0
89,40,train,Give me the predecessor of Myat Hpone Pyo and spouse of Saw Shwe Khet and child of the parent of the child of Minye Kyawswa.,SELECT ?result WHERE { <http://dbpedia.org/resource/Minye_Kyawswa> <http://dbpedia.org/ontology/child> ?v2 . ?result <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Myat_Hpone_Pyo> . ?v1 <http://dbpedia.org/ontology/child> ?v2 . ?result <http://dbpedia.org/ontology/parent> ?v1 . ?result <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Saw_Shwe_Khet> . },"```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person WHERE {
  # Step 1: Find Myat Hpone Pyo's predecessor
  ?myatHponePyo dbo:predecessor ?predecessor .
  FILTER(STR(?myatHponePyo) = ""Myat_Hpone_Pyo"")

  # Step 2: Check if this predecessor is the spouse of Saw Shwe Khet
  ?sawShweKhet dbo:spouse ?predecessor .
  FILTER(STR(?sawShweKhet) = ""Saw_Shwe_Khet"")

  # Step 3: Determine Minye Kyawswa's lineage
  ?minyeKyawswa dbo:child ?child1 .
  FILTER(STR(?minyeKyawswa) = ""Minye_Kyawswa"")
  
  ?child1 dbo:parent ?minyeKyawswa ;
         dbo:child ?grandChild .

  # Step 4: Ensure the person is the same in all contexts
  VALUES ?person { ?predecessor }
}
```",5,5,6,3,3,3,3,71,0,0,1,0,0.0,0
871,22,train,"Give me the father of the child, that is a politician, of Frederick Stanley, 16th Earl of Derby and parent of Victor Stanley (Royal Navy officer).","SELECT ?result WHERE { ?result <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Victor_Stanley_(Royal_Navy_officer)> . ?v0 <http://dbpedia.org/property/father> ?result . ?v0 <http://dbpedia.org/property/father> <http://dbpedia.org/resource/Frederick_Stanley,_16th_Earl_of_Derby> . ?v0 <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>. }","```sparql
SELECT ?politicianChild ?father WHERE {
  # Identify Frederick Stanley, 16th Earl of Derby
  ?frederick dbp:fullName ""Frederick Arthur Stanley"" .
  ?frederick dbo:spouse ?spouse .

  # Find his children who are politicians
  ?child dbo:parent ?frederick ;
         dbo:occupation ""politician""@en .

  # Identify Victor Stanley's parent(s)
  ?victor dbp:fullName ""Victor Stanley"" .
  ?victor dbo:parent ?politicianChild .

  # Match the politician child with Frederick Stanley's children
  BIND(?child AS ?politicianChild)

  # Find the father of this politician child
  ?politicianChild dbo:father ?father .
}
```",3,4,4,2,2,3,3,71,0,0,1,0,0.0,0
