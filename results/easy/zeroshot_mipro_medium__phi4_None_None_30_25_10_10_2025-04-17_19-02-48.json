{
  "predictor": {
    "traces": [],
    "train": [],
    "demos": [],
    "signature": {
      "instructions": "Given the fields `question`, produce the fields `sparql_query`.\n\n1. **Identify Key Entities and Relationships:**\n   - Extract entities such as people, movies, or awards mentioned in the question.\n   - Determine relationships like \"starring,\" \"producer,\" or \"recipient\" based on context.\n\n2. **Translate Entities into SPARQL Resources:**\n   - Use `dbr:` prefix for DBpedia resources (e.g., `dbr:Cora_Sue_Collins`).\n\n3. **Define Relationships Using Ontology Properties:**\n   - Use properties like `dbo:starring`, `dbo:producer`, or `dbo:recipient`.\n\n4. **Construct the SPARQL Query:**\n   - Use `SELECT` to specify what data you want.\n   - Use `WHERE` to define conditions and relationships.\n\n5. **Example Structure:**\n\n```sparql\nPREFIX dbo: <http:\/\/dbpedia.org\/ontology\/>\nPREFIX dbr: <http:\/\/dbpedia.org\/resource\/>\n\nSELECT ?entity1 ?relationship ?entity2 WHERE {\n  # Define relationships for entities\n}\n```\n\n6. **Test the Query:**\n   - Ensure it returns the expected results by testing with known data.",
      "fields": [
        {
          "prefix": "Question:",
          "description": "question about something"
        },
        {
          "prefix": "Sparql Query:",
          "description": "sparql query for DBpedia"
        }
      ]
    },
    "lm": null
  },
  "metadata": {
    "dependency_versions": {
      "python": "3.10",
      "dspy": "2.6.12",
      "cloudpickle": "3.1"
    }
  }
}